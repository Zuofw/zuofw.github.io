<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计网</title>
      <link href="/2023/10/23/408/ji-wang/"/>
      <url>/2023/10/23/408/ji-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h1><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>概念：路由器的网状网络<br>提问： 数据怎么通过网络进行传输？</p><ul><li>电路电路交换：  不可共享资源，会造成资源浪费，不适合计算机之间的通讯，计算机通信的特点： 突发性，耗时短</li><li>分组交换： 存储 – 转发  ， 数据转发过程中使用所有的资源，而不是使用一部分pieces，会将所有的的分组都存储之后再进行转发，方便共享的实现</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简历</title>
      <link href="/2023/10/21/xiang-mu-jian-li-shi-xi/jian-li/"/>
      <url>/2023/10/21/xiang-mu-jian-li-shi-xi/jian-li/</url>
      
        <content type="html"><![CDATA[<p>国外的那些课的实验是可以写在简历上的比如 15445</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计组</title>
      <link href="/2023/10/16/hou-duan/ji-zu/"/>
      <url>/2023/10/16/hou-duan/ji-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="基本名词解释"><a href="#基本名词解释" class="headerlink" title="基本名词解释"></a>基本名词解释</h2><p>PC 程序计数器<br>IR 指令寄存器，存放当前正在执行的指令，<br>MAR<br>CU 控制单元，为控制器的核心部件，其功能是产生微操作命令序列。<br>ALU：Arithmetic Logic Unit，算术逻辑运算单元，为运算器的核心部件，其功能是进行算术、逻辑运算。<br>ACC：Accumulator，累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器。<br>MQ：Multiplier-Quotient Register，乘商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。<br>MAR：Memory Address Register，存储器地址寄存器，在主存中用来存放欲访问的存储单元的地址。<br>MDR：Memory Data Register，存储器数据缓冲寄存器，在主存中用来存放从某单元读出、或要写入某存储单元的数据。<br>I/O：Input/Output equipment，输入/输出设备，为输入设备和输出设备的总称，用于计算机内部和外界信息的转换与传送。</p><p>MIPS：Million Instruction Per Second，每秒执行百万条指令数，为计算机运算速度指标的一种计量单位。</p><p>CPI：执行一条指令所需的时钟周期（机器主频的倒数)。</p><p>FLOPS：浮点运算次数每秒。</p><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><ul><li>汉明码</li></ul><ol><li>汉明码要添加 检测位要满足 2 ^k &gt;= n + k +1 k位检测位 ， n为总位数</li><li>检测位放在 2 ^i  次方处 i = 0 , 1 , ……</li></ol><h2 id="进制字母表示"><a href="#进制字母表示" class="headerlink" title="进制字母表示"></a>进制字母表示</h2><p>十进制数用D表示，二进制用B表示，十六进制数用H表示，八进制用O表示。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>命中率： 访问成功次数 / 总访问次数<br>命中率与Cache 的容量和块长有关<br>访问效率 = 访问Cache 的时间 / 平均访问时间   * 100 %<br>e 访问效率 ， h 命中率， 访问Cache 时间为tc 访问主存时间为tm<br>则 e = tc / h * tc   + ( 1 - h) * t    * 100%<br>访问时间 / 命中的时间 + 未命中的时间</p><ul><li>读写操作 <ul><li>写 ： 1. 写直达法 ： 写时同时写入Cache和主存</li><li><ol start="2"><li>写回法： 只写入Cache 不写入内存，当Cache数据被替换出去的时候才写会主存，会导致Cache和主存的不一致</li></ol></li></ul></li><li>地址映射<ol><li>直接映射 Cache任意一块可以放在</li><li>全相联映射  主存任何一块可以放在Cache任意一块中</li><li></li></ol></li></ul><h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><ol start="3"><li>DMA和 CPU交替访问<br> CPU工作周期  C1 专供DMA访存，C2专攻CPU访存</li></ol><ul><li>功能：<ol><li>向CPU申请DMA传送</li><li>处理总线控制权的转交</li><li>管理系统总线，控制数据传输</li><li>确定数据传送的首地址和长度，修正传送过程中的数据和长度</li><li>DMA传送结束时，给出操作完成的信号</li></ol></li></ul><h2 id="数"><a href="#数" class="headerlink" title="数"></a>数</h2><p>浮点数： 阶码组成为 阶符 + 数值部分   尾数由数符和数值组成<br>阶码是用二进制来表示的比如<br>2 ^15<br>就是 2 ^1111<br>即可，所以要用四位二进制来表示</p><ul><li>规格化<br>基数为<br>2  要求尾数最高位为 1  2 ^1<br>4                 最高2位为1  2 ^2</li></ul><p>8                 最高3位为 1  2 ^3</p><p>左规，数据左移，尾数变大<br>小数转二进制，直接把分子写成二进制，然后根据分母是2的多少次方，移动小数点就行了</p><ul><li><p>IEEE 754标准<br>数符 + 阶码(含阶符) 尾数<br>尾数使用规格化表示，非 0 的有效位最高位为1</p></li><li><p>运算<br>补码 左移时，后面加0 ， 右移时前面加 1<br>定点数运算：</p></li></ul><ol><li>补码加减运算，直接 A + B  mod 2 ^n+1</li><li>小数 就mod 2</li></ol><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><ul><li>指令格式 ： 操作码 + 地址码+寻址方式<br>指令字长分为可变和固定字长<br>RISC 精简指令系统<br>长度可变的指令：操作码分散在指令字的不同字段中</li><li>地址码</li></ul><ol><li>四地址    op + A1 + A2 + A3 + A4  分别是第一操作数地址，第二操作数地址，结果地址，下一条指令地址  (A1) OP(A2) –&gt; A3</li><li>三地址  OP A1 A2 A3   </li><li>二地址   OP A1 A2    (A1) OP (A2) –&gt; A1 或者 (A1) OP(A2) -&gt; A2</li><li>一地址 OP A1     (ACC) OP (A1) -&gt; A1  ACC暂存</li><li>零地址，对ACC中的数据进行操作<br>可以使用寄存器地址来替代指令地址字段，因为寄存器很少，占用的位数少</li></ol><ul><li>指令寻址<br>顺序 PC + 1 -&gt; PC<br>跳跃 由转移指令给出<br>数据寻址： 操作码 + 寻址特征+ 形式地址A<br>形式地址 是指令字中的地址，有效地址是操作数的真实地址</li></ul><ol><li>立即寻址： 形式地址A就是操作数，OP # A   # 为立寻址标志 A 使用补码</li><li>直接寻址，EA = A 有效地址由形式地址给出，无偏移量</li><li>隐含寻址 间接寻址 有效地址由形式地址简介提供，A提供的是EA 的地址，需要去寻址，EA 的地址才是指向真实的数据</li><li>寄存器寻址，EA = Ri 有效地址为寄存器的编号</li><li>寄存器间接寻址： EA = (Ri) 有效地址在寄存器中</li></ol><ul><li>基址寻址<ol><li>使用专用寄存器作为基址寄存器<br> EA = (BR) + A BR 为基址寄存器，也就是 物理地址 = 逻辑地址 + 基址地址</li></ol></li></ul><h2 id="CPU-组成"><a href="#CPU-组成" class="headerlink" title="CPU 组成"></a>CPU 组成</h2><ul><li>寄存器<ol><li>通用寄存器 ： 存放操作数，可作为某中寻址方式的专用寄存器</li><li>数据寄存器：存放操作数，两个寄存器拼接放双倍字长的数据</li><li>地址寄存器： 存放地址</li><li>条件码寄存器： 存放条件码，可作为程序分支的依据，正负,0，溢出等</li><li>控制和状态寄存器： <ul><li>控制寄存器 PC -&gt; MAR -&gt; M -&gt; MDR -&gt; IR</li><li>PC用户可见</li><li>状态寄存器 存放条件码</li><li>PSW 存放程序状态字</li></ul></li></ol></li><li>指令周期 ： 取出并执行一条指令所需的全部时间</li><li>包括 取指，分析 =&gt; 取指周期  执行=&gt;执行周期</li></ul><p>流水线</p><ul><li>吞吐率： 单位时间内流水线所完成执行或输出结果的数量</li><li>最大吞吐率: Tpmax = 1 / Δt Δt为m段流水线各段时间</li><li>加速比 ： <ul><li>使用流水线的方式完成n条指令在m段流水线上共需 T = m * t + (n-1) * t   </li><li>使用等效的非流水线共需： T =  nmt</li><li>加速比等于  不使用 / 使用</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人事</title>
      <link href="/2023/10/11/xiang-mu-jian-li-shi-xi/ren-shi/"/>
      <url>/2023/10/11/xiang-mu-jian-li-shi-xi/ren-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的增删改查练习"><a href="#简单的增删改查练习" class="headerlink" title="简单的增删改查练习"></a>简单的增删改查练习</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><pre class="line-numbers language-none"><code class="language-none">## 服务器给nginx设置负载均衡即可## 具体编码1. BeanUtils的使用2. DigestUtils md5加密- 一些借鉴jwt拦截器,md5加密，全局错误处理，ThreadLocal 进行线程内部传递变量PageHelper分页```java//设置分页和分页大小    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());//进行查询    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);//后续定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml中的mapper示例:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageQuery<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sky.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from employee        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name != null and name != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and name like concat('%',#{name},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>        order by create_time desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于时间格式的全局管理，在mvcconfig中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扩展消息转换器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个消息转换器对象</span>    <span class="token class-name">MappingJackson2HttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span>    converter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将自己的消息转化器加入容器中</span>    converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>aop</p></li><li><p>Apache POI 来进行文件格式转换，导出为excel</p></li><li><p>Apache ECharts 可视化图表</p></li><li><p><strong>Spring Task</strong> 定时任务</p></li><li><p>HttpClient<br><strong>HttpClient的核心API：</strong></p></li><li><p>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</p></li><li><p>HttpClients：可认为是构建器，可创建HttpClient对象。</p></li><li><p>CloseableHttpClient：实现类，实现了HttpClient接口。</p></li><li><p>HttpGet：Get方式请求类型。</p></li><li><p>HttpPost：Post方式请求类型。</p></li></ul><p><strong>HttpClient发送请求步骤：</strong></p><ul><li><p>创建HttpClient对象</p></li><li><p>创建Http请求对象</p></li><li><p>调用HttpClient的execute方法发送请求</p></li></ul><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>学生管理系统</p><p>一．功能要求</p><ul><li><p>添加学生功能：姓名、学号、性别、出生年月日。（学号自动生成且唯一）</p></li><li><p>添加学生成绩功能：每个人都有数学、Java、英语、体育四门课，可分课程输入成绩。</p></li><li><p>根据学生学号查找学生成绩功能：在界面上显示姓名、学号和成绩，学号不存在的能给出提示信息。</p></li><li><p>根据学生姓名（支持模糊匹配）查找学生成绩功能：并在界面上显示姓名、学号和成绩，如果有多个相同姓名学生存在，一起显示出来，姓名不存在的给出提示信息。</p></li><li><p>支持对单个学生各科成绩画出柱状分布图。</p></li><li><p>学生信息的修改与删除功能：不能修改学号。</p></li><li><p>生成学生学习情况报表功能：报表包含学号、姓名、各科目成绩及对应的该科目班级平均值，总成绩以及班级总成绩平均值，并将该排序结果输出至excel文件。</p></li></ul><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><ol><li>admin<pre class="line-numbers language-css" data-language="css"><code class="language-css">idusername password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>student<pre class="line-numbers language-css" data-language="css"><code class="language-css">id <span class="token punctuation">(</span>学号自动生成且唯一<span class="token punctuation">)</span>namebirthday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>score<pre class="line-numbers language-css" data-language="css"><code class="language-css">idMathJavaEnglishPE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>sql设计</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> management<span class="token punctuation">;</span><span class="token keyword">USE</span> management<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> admin<span class="token punctuation">(</span>    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    Username <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    Password <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    StudentId <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    StudentName <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    Birthday <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score<span class="token punctuation">(</span>    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    Math <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    Java <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    English <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    PE <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps: 使用方式 mysql -u username -p  &lt;  xxx.sql ，之后输入密码即可</p><p>xml配置<br>druid<br>knife4j生成接口文档</p><ul><li>部署<br>服务器配置:<br>mysql<br>将服务器上的mysql配置文件修改<pre class="line-numbers language-css" data-language="css"><code class="language-css">vim /etc/mysql/mysql.conf.d/mysqld.cnf将bind-address 的127.0.0.1 改为  0.0.0.0 服务器开放端口 3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>redis<br>1.打开redis的配置文件“redis.conf”。</li></ul><p>2.将“bind 127.0.0.1”注释掉。</p><p>3.将“protected-mode yes”改成“protected-mode no”。</p><p>4.添加以下一行代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">daemonize no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制</p><p>5.重启redis服务即可<br><code>sudo service redis restart</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>knif4j注意设置好扫描的包</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li>common module<ol><li>返回类封装Result</li><li>pageHelper所需的分页参数</li></ol></li><li></li></ol><h1 id="苍穹外卖项目"><a href="#苍穹外卖项目" class="headerlink" title="苍穹外卖项目"></a>苍穹外卖项目</h1><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>当前端传输的数据与实体类差距比较大时使用DTO来封装</li><li><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/2987565?fromModule=lemma_inlink">数据传输</a>对象（DTO）(Data Transfer Object)，是一种<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fromModule=lemma_inlink">设计模式</a>之间传输数据的软件<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/56497111?fromModule=lemma_inlink">应用系统</a>。数据传输目标往往是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1/3351868?fromModule=lemma_inlink">数据访问对象</a>从数据库中检索数据。数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具有任何行为除了存储和检索的数据（访问和存取器）。</li><li>ThreadLocal 不是一个线程，但是可以用于保存Thread的一个变量，相当于设置线程内部的变量，可以用来存token和cookie</li><li>mybatis-plus 分页插件的使用，并且配合queryWrapper来封装自定义查询</li><li>使用配置jackson和java格式互相转化器</li><li>‘ALTER TABLE table_name AUTO_INCREMENT = value;’  记得删除没有用的数据之后并且让value大于当前的行数</li><li>mp 实现递增需要在配置文件中加上 ‘mybatis-plus:<br>global-config:<br>db-config:<br>id-type: auto’</li><li>自定义注解： <ol><li><p><strong><code>@Target</code> 注解</strong>：</p><p> @Target注解：</p><ul><li>作用：<code>@Target</code> 注解用于指定可以将注解应用到的元素类型。它决定了注解可以用于标记哪些程序元素，例如类、方法、字段等。</li><li>参数：<code>@Target</code> 的参数是一个 <code>ElementType</code> 枚举数组，你可以在其中指定一个或多个目标元素类型。对于 <code>@ComponentScan</code> 来说，<code>@Target(ElementType.TYPE)</code> 表示该注解可以用于标记类。</li></ul></li><li><p><strong><code>@Retention</code> 注解</strong>：</p><ul><li>作用：<code>@Retention</code> 注解用于指定注解在编译后是否保留到运行时，并且是否可以通过反射访问注解。有三个可能的 <code>RetentionPolicy</code> 值：<code>SOURCE</code>、<code>CLASS</code> 和 <code>RUNTIME</code>。</li><li>参数：<code>@Retention</code> 的参数是一个 <code>RetentionPolicy</code> 枚举值。<code>@Retention(RetentionPolicy.RUNTIME)</code> 表示注解会在运行时保留，并可以通过反射访问。</li></ul></li><li><p><strong><code>@Documented</code> 注解</strong>：</p><ul><li>作用：<code>@Documented</code> 注解用于指示该注解应该包含在生成的文档中。如果你想要将注解的信息包含在 Java 文档中，可以使用 <code>@Documented</code> 注解。</li><li>参数：<code>@Documented</code> 注解没有参数，它只是一个标记注解，用于指示文档工具要包括注解信息。</li></ul></li></ol></li><li>阿里云oss使用，主要使用的是spring 中的MultipartFile</li></ol><h2 id="修改建议Todo"><a href="#修改建议Todo" class="headerlink" title="修改建议Todo:"></a>修改建议Todo:</h2><ol><li>密码加密 使用 security + jwt ，前端保存session</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>blog搭建</title>
      <link href="/2023/09/30/qian-duan/blog-da-jian/"/>
      <url>/2023/09/30/qian-duan/blog-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>一次自己blog手动搭建记录<br>技术栈：</p><ul><li>前端：vue</li><li>后端:   express redis</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习</title>
      <link href="/2023/09/29/qian-duan/qian-duan-xue-xi/"/>
      <url>/2023/09/29/qian-duan/qian-duan-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="打包部署在nginx上"><a href="#打包部署在nginx上" class="headerlink" title="打包部署在nginx上"></a>打包部署在nginx上</h2><p>使用npm run build 进行打包，将dist包放在/usr/share/nginx/html<br>即可，然后root路径要写全<br>本地使用vue，基于脚手架安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> create vue@latest<span class="token builtin class-name">cd</span> xxx<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基础语法:</li><li>v-bind:xxx 绑定语法，可简写为:xxx 如果绑定的是多个值，比如是一个json数组，那么可以把xxx省略留下 v-bind: = aaa</li><li>v-on 监听事件 简写为 @xxx 动态绑定事件 <code>@[事件列表] = "事件函数"</code></li><li><code>&lt;template&gt;</code> 不会被渲染，一般作为v-if根</li><li>第三个参数表示位置索引：<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for="(value, key, index) in myObject"&gt;  {{ index }}. {{ key }}: {{ value }}&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>setup是在建立渲染之前就会调用</li><li>想要使用变量就必须要把变量return 出来即可</li><li>使用语法糖可以简化代码，不需要一个个return了<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;     const msg = 'Hello Vite + Vue 3!'  &lt;/script&gt;  &lt;template&gt;    &lt;div id="app"&gt;      &lt;h1&gt;{{msg}}&lt;/h1&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用reactive函数来返回一个响应式对象<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;     import {reactive} from "vue";     const state = reactive({       msg: "hell world"     })     const setState = ()=&gt;{       state.msg = "hello vite"     }  &lt;/script&gt;  &lt;template&gt;    {{state.msg}}    &lt;button @click="setState"&gt;click&lt;/button&gt;  &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用ref来返回一个简单响应式对象<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;      import {ref} from "vue";      const msg = ref(0);  &lt;/script&gt;  &lt;template&gt;    &lt;div id="app"&gt;      &lt;button @click="msg++"&gt;count is: {{ msg }}&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>computed对象函数，里面传进去计算逻辑<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  import {computed, ref} from "vue";    const list = ref([1,2,3,4,5]);    const filterlist = computed(()=&gt;{      return list.value.filter(item=&gt;item&gt;3)    })  &lt;/script&gt;  &lt;template&gt;    &lt;div&gt;    &lt;ul&gt;      &lt;li v-for="item in filterlist" :key="item"&gt;{{item}}&lt;/li&gt;      &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>watch 监听数据的变化，如果数据变化就执行回调函数，剩下两个参数，immediate 控制立刻执行，deep开启深度监听<ul><li>监听一个  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  import {ref, watch} from "vue";  const count = ref(0);  watch(count,(newCount, oldCount) =&gt; {    console.log(`new count is: ${newCount}, old count is: ${oldCount}`)  })  const increment = () =&gt; {    count.value++;  }  &lt;/script&gt;  &lt;template&gt;  &lt;button @click="increment"&gt;count is: {{count}}&lt;/button&gt;  &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>监听多个数据，只需要把参数化成数组即可<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;</span><span class="token punctuation">{</span>  console.<span class="token function">log</span><span class="token punctuation">(</span>`count或者name变化了，[newCount<span class="token punctuation">,</span> newName]<span class="token punctuation">,</span>[oldCount<span class="token punctuation">,</span>oldName]<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>immediate 在创建时立刻出发<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">watch(count, (newValue, oldValue)=&gt;</span><span class="token punctuation">{</span>   <span class="token selector">console.log(`count发生了变化，老值为$</span><span class="token punctuation">{</span>oldValue<span class="token punctuation">}</span><span class="token selector">,新值为$</span><span class="token punctuation">{</span>newValue<span class="token punctuation">}</span>`<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token selector">,</span><span class="token punctuation">{</span>   <span class="token property">immediate</span><span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>deep通过watch监听的ref对象是浅层监听的，直接修改嵌套的对象属性是不会回调的，但是开启之后就可以回调了<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  // 1. 导入watch  import { ref, watch } from 'vue'  const state = ref({ count: 0 })  // 2. 监听对象state  watch(state, ()=&gt;{    console.log('数据变化了')  })  const changeStateByCount = ()=&gt;{    // 直接修改不会引发回调执行    state.value.count++  }&lt;/script&gt;&lt;script setup&gt;  // 1. 导入watch  import { ref, watch } from 'vue'  const state = ref({ count: 0 })  // 2. 监听对象state 并开启deep  watch(state, ()=&gt;{    console.log('数据变化了')  },{deep:true})  const changeStateByCount = ()=&gt;{    // 此时修改可以触发回调    state.value.count++  }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>父组件传值给子组件: 1.引入子组件，使用子组件并绑定子组件中props中的属性 2. 子组件使用defineProps来接受父组件的传值<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件&lt;script setup&gt;  import son from './components/money.vue'  &lt;/script&gt;    &lt;template&gt;    &lt;son  message="hello world"/&gt;  &lt;/template&gt;&lt;!--子组件--&gt;&lt;script setup&gt;  const props =  defineProps({    message : String  })  &lt;/script&gt;  &lt;template&gt;    {{message}}  &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件传值给父组件: 1.子组件通过defineEmits来生成emit方法 2.子组件使用emit定义事件，并传递参数 3.父组件使用绑定子组件的事件，并绑定自己的函数，定义自己的函数使用传递的值<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">子组件&lt;script setup&gt;  const props =  defineProps({    message : String  })  const emit = defineEmits(['say']) //事件列表  const hh = ()=&gt;{    emit('say','hello world')  }  &lt;/script&gt;  &lt;template&gt;    {{message}}    &lt;button @click="hh"&gt;click&lt;/button&gt;  &lt;/template&gt;父组件&lt;script setup&gt;  import son from './components/money.vue'  const func = (msg,num)=&gt;{    console.log(msg,num)  }  &lt;/script&gt;  &lt;template&gt;    &lt;son  messoage="hello world" @say="func"/&gt;  &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>模板使用 新建一个ref 然后在 html 中的ref来进行绑定这个ref即可获得dom元素，但是会在onmounted之后才能访问</li><li>父组件默认不会获得子组件的dom因为有setup 所以可以使用<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">defineExpose({需要暴漏的属性和方法名或者一个匿名函数})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>通过provide和inject来跨层传递<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">顶层provide('key',value) value可以是函数等底层const value = inject('key')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>v-text 来更新文本内容，v-html来更新html元素</li></ul><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>支持前后端分离的简单框架</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-generator <span class="token parameter variable">-g</span>express --no-view server 新建项目<span class="token builtin class-name">cd</span> server<span class="token function">npm</span> <span class="token function">install</span>ET DEBUG <span class="token operator">=</span> server:* <span class="token operator">&amp;</span> <span class="token function">npm</span> start 开启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user www-data<span class="token punctuation">;</span>worker_processes auto<span class="token punctuation">;</span>pid /run/nginx.pid<span class="token punctuation">;</span>include /etc/nginx/modules-enabled/*.conf<span class="token punctuation">;</span>events <span class="token punctuation">{</span>        worker_connections <span class="token number">768</span><span class="token punctuation">;</span>        <span class="token comment"># multi_accept on;</span>        <span class="token comment">##自定义服务列表</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>        <span class="token comment">##</span>        sendfile on<span class="token punctuation">;</span>        tcp_nopush on<span class="token punctuation">;</span>        types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span>        <span class="token comment"># server_tokens off;</span>        <span class="token comment"># server_names_hash_bucket_size 64;</span>        <span class="token comment"># server_name_in_redirect off;</span>        include /etc/nginx/mime.types<span class="token punctuation">;</span>        default_type application/octet-stream<span class="token punctuation">;</span><span class="token builtin class-name">.</span>         ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span> <span class="token comment"># Dropping SSLv3, ref: POODLE</span>        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>        <span class="token comment">##</span>        <span class="token comment"># Logging Settings</span>        <span class="token comment">##</span>        access_log /var/log/nginx/access.log<span class="token punctuation">;</span>        error_log /var/log/nginx/error.log<span class="token punctuation">;</span>        <span class="token comment">##</span>        <span class="token comment"># Gzip Settings</span>        <span class="token comment">##</span>        <span class="token function">gzip</span> on<span class="token punctuation">;</span>        <span class="token comment"># gzip_vary on;</span>        <span class="token comment"># gzip_proxied any;</span>        <span class="token comment"># gzip_comp_level 6;</span>        <span class="token comment"># gzip_buffers 16 8k;</span>        <span class="token comment"># gzip_http_version 1.1;</span>        <span class="token comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>        <span class="token comment">##</span>        <span class="token comment"># Virtual Host Configs</span>        <span class="token comment">##</span>          include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>        include /etc/nginx/sites-enabled/*<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><ul><li><p>进度条</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ProgressBar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'progress'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgressBar</span><span class="token punctuation">(</span><span class="token string">':bar'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> timer <span class="token operator">=</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      bar<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bar<span class="token punctuation">.</span>complete<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件操作  require(‘fs’)</p></li><li><p>网络开发</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端已连接'</span><span class="token punctuation">)</span>      c<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'断开连接'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">throw</span> err  <span class="token punctuation">}</span><span class="token punctuation">)</span>  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8124</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已启动'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>on来绑定事件</p></li><li><p>udp 使用dgram模块</p></li><li><p>WebSocket 使用 ws模块，是对socket的具体实现</p></li><li><p>socket.io框架</p></li><li><p>常用api<br><img src="/2023/09/29/qian-duan/qian-duan-xue-xi/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/2.jpg"><br><img src="/2023/09/29/qian-duan/qian-duan-xue-xi/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/1.jpg"></p></li><li><p>express框架</p></li><li><p>koa框架</p></li><li><p>mongoose</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软考</title>
      <link href="/2023/09/19/xiang-mu-jian-li-shi-xi/ruan-kao/"/>
      <url>/2023/09/19/xiang-mu-jian-li-shi-xi/ruan-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>描述软件需求的方法：</p><p>功能层次模型：一般来讲就是系统的功能图，模块分布图等描述整个系统的功能的分布和功能的层次结构；</p><p>数据流模型：就是以数据流为着眼点的分析方法得到的模型，主要通过数据在整个系统的流动情况来确定系统的主要功能主线和流程；</p><p>控制流模型：通过了解和界定系统中控制线，通过控制流的走向和控制的对象来确定系统的功能分布和控制与被控制的关系；</p><p><strong>结构化分析（SA)</strong> 方法是一种面向数据流的需求分析方法，它适用于分析大型数据处理系统。结构化分析方法的基本思想是自顶向下逐层分解，这样做可以把一个大问题分解成若干个小问题，经过多次逐层分解，每个最底层的问题都是足够简单、容易解决的，这个过程就是分解的过程。</p><p>结构化方法的分析结果由数据流图DFD、数据词典和加工逻辑说明几个部分组成。其中，DFD的基本成分有数据流（data flow）、加工（process）、文件（file）和源/宿（source/sink）。</p><p><strong>结构化设计（SD)</strong> 方法是一种面向数据流的设计方法，它可以与SA方法衔接。</p><p>结构化设计采用<strong>结构图（SC）</strong> 来描述程序的结构。其基本成分有模块、调用和输入/输出数据。</p><p>结构图：</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="file:///C:\Users\ASUS\AppData\Local\Temp\ksohtml32068\wps1.jpg">　 <img src="file:///C:\Users\ASUS\AppData\Local\Temp\ksohtml32068\wps2.jpg"></td></tr><tr><td></td></tr></tbody></table><p>条件调用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;循环调用</p><p>&nbsp;&nbsp;&nbsp;在需求分析阶段用SA方法产生了<strong>数据流图（DFD）</strong> 。面向数据流的设计可以方便的将DFD转换成程序结构图。DFD从系统的输入数据流到系统的输出数据流的一连串连续变换形成一条信息流。DFD的信息流大体可分为两种类型：变换流和事务流。与之对应的也存在两种分析，变换分析和事务分析。变换分析是从变换流型的DFD导出程序结构图，而事务分析则是从事务流行型的DFD导出程序结构图。</p><p>SD方法的具体设计步骤为：</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 复查并精化数据流图</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 确定DFD的信息流类型</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据信息流类型分别将变换流或事务流转换成程序结构图</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据软件设计的原则对程序结构图作改进</p><ul><li>测试</li></ul><p>白盒测试是根据程序的内部逻辑来设计测试用例，常用的技术是逻辑覆盖，即考察用例测试数据运行被测程序时对程序逻辑的覆盖程度。主要的覆盖标准有6种： </p><p>黑盒测试</p><p>黑盒测试时根据规格说明所规定的功能来设计测试用例，它不考虑程序的内部结构和处理过程。常用的黑盒测试技术有：</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 等价类划分</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 边值划分</p><p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 错误猜测</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssm-practice</title>
      <link href="/2023/09/17/hou-duan/ssm-practice/"/>
      <url>/2023/09/17/hou-duan/ssm-practice/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot练习"><a href="#Springboot练习" class="headerlink" title="Springboot练习"></a>Springboot练习</h1><p>通过atguigu的今日头条项目进行项目驱动式学习<br>前端已准备</p><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><p>要求：后端使用springboot整合mybatis和springmvc来进行简单的增删改查</p><ol><li>导入依赖:<ul><li>springboot启动包，springboot-web项目启动包，mybatis插件，数据库配置启动器springboot-starter-jdbc，druid启动器，mysql驱动类，lombok，aop,test,打包插件</li></ul></li><li>编写配置类:<br>mybatis的配置类可以使用yaml格式或者是properties格式的文件，推荐使用yaml格式的文件，有分层的效果<br>[[Tools#yaml|查看Tools中的yaml]]<br><a href="https://www.runoob.com/w3cnote/yaml-intro.html">菜鸟教程</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">具体配置</a><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># server配置</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token comment">#默认的根路径</span><span class="token comment"># 连接池配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>///sm_db1      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token comment"># mybatis-plus的配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.pojo  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> isDeleted  <span class="token comment">#全局逻辑删除</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto <span class="token comment">#直接使用springboot来进行配置，就不需要再加上这个注解了</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> news_ <span class="token comment"># 设置表的前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>druid兼容文件<pre class="line-numbers language-none"><code class="language-none">文件名:org.springframework.boot.autoconfigure.AutoConfiguration.imports内容:com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>编写启动类main<br><strong>疑问： 什么是乐观锁和悲观锁</strong><br>配置使用的插件 [[java学习#^f13de1]]<br><a href="https://baomidou.com/pages/2976a3/#%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98-sql-%E8%A7%A3%E6%9E%90">教程</a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//配置mybatis-plus插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分页</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乐观锁</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlockAttackInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//防全局修改和删除</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>工具类封装:主要是统一返回结果的类<br> 结果封装类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 全局统一返回结果类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">//T是要使用的泛型，要在这里声明</span>    <span class="token comment">// 返回码</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">// 返回消息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token comment">// 返回数据</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 返回数据</span>    <span class="token comment">//泛型方法，要将 要使用的泛型在返回类型之前进行声明</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span> resultCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 操作成功     * @param data  baseCategory1List     * @param &lt;T&gt;     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决枚举类<br>枚举类可以使用 常量(具体的常量内容来进行枚举)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 统一返回结果状态信息类 * */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCodeEnum</span> <span class="token punctuation">{</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USERNAME_ERROR</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span><span class="token string">"usernameError"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PASSWORD_ERROR</span><span class="token punctuation">(</span><span class="token number">503</span><span class="token punctuation">,</span><span class="token string">"passwordError"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOTLOGIN</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">,</span><span class="token string">"notLogin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USERNAME_USED</span><span class="token punctuation">(</span><span class="token number">505</span><span class="token punctuation">,</span><span class="token string">"userNameUsed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MD5加密工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MD5Util</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> strSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> hexChars<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">,</span> <span class="token char">'5'</span><span class="token punctuation">,</span> <span class="token char">'6'</span><span class="token punctuation">,</span> <span class="token char">'7'</span><span class="token punctuation">,</span> <span class="token char">'8'</span><span class="token punctuation">,</span>                    <span class="token char">'9'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'f'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> strSrc<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得m5的实例</span>            <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            bytes <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">byte</span> b <span class="token operator">=</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                chars<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> hexChars<span class="token punctuation">[</span>b <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                chars<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> hexChars<span class="token punctuation">[</span>b <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"MD5加密出错！！+"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>使用mybatisX插件，选中表之后逆向工程生成实体类和接口(注意自己补充和删减一些注释)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@TableId</span> <span class="token comment">//主键</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userPwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span> <span class="token comment">//版本</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableLogic</span> <span class="token comment">//逻辑删除</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDeleted<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>补充:<br>[[java学习#^86b436||逻辑删除]]</li><li>使用jwt来生成[[Web学习#Token是一种令牌，用来识别访问人员的|Token]]</li><li>JSON Web Token JWT由三部分组成: header(头部).payload(载荷).signature(签名)<br>1. 导入依赖</li></ol><pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ol start="2"><li><p>编写配置</p><p> application.yaml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#jwt配置</span><span class="token key atrule">jwt</span><span class="token punctuation">:</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span>    <span class="token key atrule">tokenExpiration</span><span class="token punctuation">:</span> <span class="token number">120</span> <span class="token comment">#有效时间,单位分钟</span>    <span class="token key atrule">tokenSignKey</span><span class="token punctuation">:</span> headline123456  <span class="token comment">#当前程序签名秘钥 自定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入工具类</p><p> 封装jwt技术工具类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"jwt.token"</span><span class="token punctuation">)</span> <span class="token comment">//使用这个就可以省略前缀，如果后面的变量名和配置中相同的话就可以自动装配而不用手动装配了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtHelper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">long</span> tokenExpiration<span class="token punctuation">;</span> <span class="token comment">//有效时间,单位毫秒 1000毫秒 == 1秒</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> tokenSignKey<span class="token punctuation">;</span>  <span class="token comment">//当前程序签名秘钥</span>    <span class="token comment">//生成token字符串</span>    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tokenExpiration = "</span> <span class="token operator">+</span> tokenExpiration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tokenSignKey = "</span> <span class="token operator">+</span> tokenSignKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"YYGH-USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tokenExpiration<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//单位分钟</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS512</span><span class="token punctuation">,</span> tokenSignKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compressWith</span><span class="token punctuation">(</span><span class="token class-name">CompressionCodecs</span><span class="token punctuation">.</span><span class="token constant">GZIP</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//从token字符串获取userid</span>    <span class="token keyword">public</span>  <span class="token class-name">Long</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>tokenSignKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userId<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断token是否有效</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">isExpiration</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isExpire <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>tokenSignKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//没有过期，有效，返回false</span>            <span class="token keyword">return</span> isExpire<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//过期出现异常，返回true</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写controller<br>知识点：跨域: 例如从不同的服务器或域名获取信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学算法</title>
      <link href="/2023/09/09/hou-duan/xue-suan-fa/"/>
      <url>/2023/09/09/hou-duan/xue-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="学算法"><a href="#学算法" class="headerlink" title="学算法"></a>学算法</h1><p>先思考再做题，前几个题大概率时模拟题，所以别急着用算法</p><h1 id="丢人必做题"><a href="#丢人必做题" class="headerlink" title="丢人必做题:"></a>丢人必做题:</h1><p><strong>整数划分</strong><a href="https://ac.nowcoder.com/acm/problem/252724">https://ac.nowcoder.com/acm/problem/252724</a></p><p>accumulate 求和</p><p>快乐的模板：</p><p>#include &lt;bits/stdc++.h&gt;<br>#define ll long long<br>#define pii pair&lt;int,int&gt;<br>using namespace std;<br>void solve(){<br> &nbsp; &nbsp;return ;<br>}<br>int main(){<br> &nbsp; &nbsp;ios::sync_with_stdio(false);<br> &nbsp; &nbsp;cin.tie(nullptr);<br> &nbsp; &nbsp;int T;<br> &nbsp; &nbsp;cin &gt;&gt; T;<br> &nbsp; &nbsp;while (T–) solve();<br> &nbsp; &nbsp;return 0;<br>}<br>​</p><h2 id="小TIPS："><a href="#小TIPS：" class="headerlink" title="小TIPS："></a>小TIPS：</h2><p>做题思路：</p><ol><li><p>从小数据，小范围推大范围</p></li><li><p>划分，以及反证，如果要求全部满足一个性质，那么只要有部分不满足我们已经推出来的条件即可不满足所有性质</p></li></ol><blockquote><ol><li><p>数组和字符串比较字典序是可以直接用大于号小于号比较的</p></li><li><p>字典序是指在ASCII码中出现的顺序所以 也就是 a b c 0 1 2 3 ABC 等z</p></li><li><p>vector &lt;&gt; 可以直接赋值</p></li></ol></blockquote><h2 id="牛顿迭代法："><a href="#牛顿迭代法：" class="headerlink" title="牛顿迭代法："></a>牛顿迭代法：</h2><p>求平方根</p><p>例子： f(x)=m,可转化为 g(x)=f(x)-m=0;</p><p>迭代公式：_x_n+1 = _x_n − <em>g</em> (_x_n)/ <em>g</em> ′ (_x_n)</p><p>例题：<a href="https://leetcode.cn/problems/sqrtx/submissions/431189596/">力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台</a></p><p>//f (x) = x2 − a = 0<br>int mySqrt(int a) {<br>long x = a;<br>while (x * x &gt; a) {<br>x = (x + a / x) / 2;<br>}<br>return x;<br>}</p><h3 id="stl和一些内置函数"><a href="#stl和一些内置函数" class="headerlink" title="stl和一些内置函数"></a>stl和一些内置函数</h3><p>accumulate(num.begin(),num.end(),0); //第三个参数是初始化要返回的东西 </p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序模板-根据数来分治"><a href="#快速排序模板-根据数来分治" class="headerlink" title="快速排序模板 根据数来分治"></a>快速排序模板 根据数来分治</h3><p>int a[100];<br>void qsort(int a[], int l, int r) {<br>    if (l &gt;= r) return;<br>    int i = l, j = r, x = a[l];<br>    while (i &lt; j) {<br>        while (i &lt; j &amp;&amp; a[j] &gt;= a[l]) j–;<br>        while (i &lt; j &amp;&amp; a[i] &lt;= a[l]) i++;<br>        x = a[i]; a[i] = a[j]; a[j] = x;<br>    }<br>    a[i] = a[l]; a[l] = x;<br>    qsort(a, l, i - 1);<br>    qsort(a, i + 1, r);<br>}</p><h3 id="归并排序模板-分治-根据中间两个数为分界线"><a href="#归并排序模板-分治-根据中间两个数为分界线" class="headerlink" title="归并排序模板 分治 根据中间两个数为分界线"></a>归并排序模板 分治 根据中间两个数为分界线</h3><ol><li><p>确定分界点， mid=(l+r)/2</p></li><li><p>递归排序 left，right</p></li><li><p>归并 合二为一</p></li></ol><p>模板</p><p>void msort(int a[], int l, int r) {<br>    if (l &gt;= r) return;<br>    //确定分界<br>    int mid = l + r &gt;&gt; 1;<br>    //递归<br>    msort(a, l, mid); msort(a, mid + 1, r);<br>    //归并<br>    int k = 0, i = l, j = mid + 1;  </p><pre><code>while (i &lt;=mid &amp;&amp; j &lt;= r) {//左右比较，小的放在辅助数组里，直到有一个指针到达边界      if (a[i] &lt;= a[j]) tmp[k++] = a[i++];      else tmp[k++] = a[j++];  }  //这里继续把另一个没到边界的指针赋值给辅助数组  while (i &lt;= mid) tmp[k++] = a[i++];  while (j &lt;= r)tmp[k++] = a[j++];  //最后把辅助数组的元素还回去  for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j];  </code></pre><p>}</p><h2 id="二分法-二分要保证有解"><a href="#二分法-二分要保证有解" class="headerlink" title="二分法 二分要保证有解"></a>二分法 二分要保证有解</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><p>一分为二，一边满足性质，一半不满足，可以来用来寻找性质的边界</p><p>两种模板：一种去检查满足的一半，另一种去检查不满足性质的的一半</p><p>考虑边界是否会包括进去</p><ol><li><p>先写出 mid=r+l&gt;&gt;1</p></li><li><p>二分要检查的性质</p></li><li><p>画图考虑，直线图</p></li><li><p>思考mid是否会包含</p></li><li><p>考虑不存在条件时</p></li></ol><p>bool check(int x) {/* … */} // 检查x是否满足某种性质<br>//比如左侧是不满足，右侧是满足<br>// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：<br>//去右半边<br>int bsearch_1(int l, int r)<br>{<br> &nbsp; &nbsp;while (l &lt; r)<br> &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp;int mid = l + r &gt;&gt; 1;<br> &nbsp; &nbsp; &nbsp; &nbsp;if (check(mid)) r = mid; &nbsp; &nbsp;// check()判断mid是否满足性质<br> &nbsp; &nbsp; &nbsp; &nbsp;else l = mid + 1;<br> &nbsp;  }<br> &nbsp; &nbsp;return l;<br>}<br>//去二分左半边，mid要+1，因为mid有可能不在要求的<br>// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：<br>int bsearch_2(int l, int r)<br>{<br> &nbsp; &nbsp;while (l &lt; r)<br> &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp;int mid = l + r + 1 &gt;&gt; 1;<br> &nbsp; &nbsp; &nbsp; &nbsp;if (check(mid)) l = mid;<br> &nbsp; &nbsp; &nbsp; &nbsp;else r = mid - 1;<br> &nbsp;  }<br> &nbsp; &nbsp;return l;<br>}<br>​</p><h3 id="浮点数二分-不要处理边界"><a href="#浮点数二分-不要处理边界" class="headerlink" title="浮点数二分 不要处理边界"></a>浮点数二分 不要处理边界</h3><p>思路：通过mid来判断，答案落在缩小的区间内，只要近似值</p><p>bool check(double x) {/* … */} // 检查x是否满足某种性质  </p><p>double bsearch_3(double l, double r)<br>{<br>    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求<br>    while (r - l &gt; eps)<br>    {<br>        double mid = (l + r) / 2;<br>        if (check(mid)) r = mid;<br>        else l = mid;<br>    }<br>    //或者直接不管精度，直接循环几百次<br>    return l;<br>}</p><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="加法：-注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数"><a href="#加法：-注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数" class="headerlink" title="加法： 注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数"></a>加法： 注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数</h3><ol><li><p>逆序存数的每一位</p></li><li><p>从低位开始计算，之后计算进位</p></li><li><p>加完之后检查最后一位是否还有进位</p></li><li><p>返回数字</p></li></ol><p>vector<int> add(vector<int> &amp;A, vector<int> &amp;B)<br>{<br>    if (A.size() &lt; B.size()) return add(B, A);  </int></int></int></p><pre><code>vector&lt;int&gt; C;  int t = 0;  for (int i = 0; i &lt; A.size(); i ++ )  {      t += A[i];      if (i &lt; B.size()) t += B[i];      C.push_back(t % 10);      t /= 10;  }  if (t) C.push_back(1);  return C;  </code></pre><p>}</p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>和加法基本一致，只要变进位为借位即可</p><p>// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0<br>vector<int> sub(vector<int> &amp;A, vector<int> &amp;B)<br>{<br>    vector<int> C;<br>    for (int i = 0, t = 0; i &lt; A.size(); i ++ )<br>    {<br>        t = A[i] - t;<br>        if (i &lt; B.size()) t -= B[i];<br>        C.push_back((t + 10) % 10);<br>        if (t &lt; 0) t = 1;<br>        else t = 0;<br>    }  </int></int></int></int></p><pre><code>while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();  return C;  </code></pre><p>}</p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>vector<int> mul(vector<int>&amp;A,int b){<br> &nbsp; vector<int>C;<br> &nbsp; int t=0;<br> &nbsp; for(int i=0;i&lt;A.size()||t;i++){//出现进位<br> &nbsp; &nbsp; &nbsp;if(i&lt;A.size()) t+=A[i]*b;<br> &nbsp; &nbsp; &nbsp;C.push_back(t%10);<br> &nbsp; &nbsp; &nbsp;t/=10;<br> &nbsp; }<br> &nbsp; while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back();<br> &nbsp; //去除前导零<br> &nbsp; return C;<br>}</int></int></int></p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>vector<int> div(vector<int>&amp;A,int b){<br> &nbsp; vector<int>C;<br> &nbsp; int t=0;<br> &nbsp; for(int i=0;i&lt;A.size();i++){<br> &nbsp; &nbsp; &nbsp;t=t*10+A[i];<br> &nbsp; &nbsp; &nbsp;C.push_back(t/b);<br> &nbsp; &nbsp; &nbsp;t%=10;<br> &nbsp; }<br> &nbsp; reverse(C.begin(),C.end());<br> &nbsp; while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back();<br> &nbsp; return C;<br>}</int></int></int></p><h2 id="前缀和和差分"><a href="#前缀和和差分" class="headerlink" title="前缀和和差分"></a>前缀和和差分</h2><p>前缀和一般初始化为0到n但是只用1到n</p><p>二维</p><p>S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</p><p>二维差分： 差分的前缀和就是原数组</p><p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c//注意是x2+1,y2+1不是x2,y2</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>int x;<br>int * p1 = &amp;x; // 指针可以被修改，值也可以被修改<br>const int * p2 = &amp;x; // 指针可以被修改，值不可以被修改（const int）<br>int * const p3 = &amp;x; // 指针不可以被修改（* const），值可以被修改<br>const int * const p4 = &amp;x; // 指针不可以被修改，值也不可以被修改</p><p>for (int i = 0, j = 0; i &lt; n; i ++ )<br>{<br>    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;  </p><pre><code>// 具体问题的逻辑  </code></pre><p>}<br>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p><h3 id="Floyd判圈法-龟兔赛跑法-用于判断链表有无环和求出环的长度"><a href="#Floyd判圈法-龟兔赛跑法-用于判断链表有无环和求出环的长度" class="headerlink" title="Floyd判圈法 龟兔赛跑法 用于判断链表有无环和求出环的长度"></a>Floyd判圈法 龟兔赛跑法 用于判断链表有无环和求出环的长度</h3><p>两个指针fast slow 都从起始位置出发，fast 一次走2步，slow一次走1步，如果能相遇，则存在环</p><p>计算环的长度</p><p>让其中一个指针停在环的起点不动，另一个一步一步向前走并记录步数，再次相遇时步数即为环的长度。</p><p>寻找环的起点</p><p>其中一个指针在环的起点不动，另一个放到起点，两个指针同时一步一步移动，则两指针将会在循环节的起点相遇。</p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142. 环形链表 II - 力扣（Leetcode）</a></p><p>/**  </p><ul><li>Definition for singly-linked list.  </li><li>struct ListNode {  </li><li><pre><code>int val;  </code></pre></li><li><pre><code>ListNode *next;  </code></pre></li><li><pre><code>ListNode(int x) : val(x), next(NULL) {}  </code></pre></li><li>};<br> */<br>class Solution {<br>public:<br> ListNode *detectCycle(ListNode *head) {<br>ListNode *fast=head,*slow=head;<br>   do{<br>   if(!fast||!fast-&gt;next) return NULL;//如果能到达末尾，则不存在环<br>   fast=fast-&gt;next-&gt;next;<br>   slow=slow-&gt;next;<br>   }while(fast!=slow);<br>   fast=head;<br>   while(fast!=slow){<br>   fast=fast-&gt;next;<br>   slow=slow-&gt;next;<br>   }<br>   return slow;<br> }<br>};</li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>思路：</p><p>n的第k位是什么？ n&gt;&gt;k&amp;1 右移k位与1与得到是0就是0，反之就是1</p><ol><li><p>先把要判断的位置移到最左边</p></li><li><p>判断</p></li></ol><h3 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h3><p>解释：cpp的负数使用的补码表示的所以，-x就等于 ~x+1 反码+1</p><p>用法：树状数组和求1的个数</p><p>#define lowbit(x) (-x)&amp;x<br>///或者 int lowbit(int x) {return -x&amp;x;}<br>int tree[length];//树状数组，长度和原数组相等<br>//区间修改<br>void update(int x,int val)<br>{<br>    while(x&lt;n){<br>        tree[x]+=val;<br>        x+=lowbit(x);<br>    }<br>}<br>//区间求和<br>int sum(int l,int r){<br>    int ans=0;<br>    while(r){<br>        ans+=tree[r];<br>        r-=lowbit(r);<br>    }<br>    l–;//<br>    while(l){<br>        ans-=tree[l];<br>        l-=lowbit(l);<br>    }<br>    return ans;<br>}</p><h1 id="树状数组：对差分和前缀和的利用："><a href="#树状数组：对差分和前缀和的利用：" class="headerlink" title="树状数组：对差分和前缀和的利用："></a>树状数组：对差分和前缀和的利用：</h1><h3 id="使用情况："><a href="#使用情况：" class="headerlink" title="使用情况："></a>使用情况：</h3><ol><li><p>数组不变求区间和</p></li><li><p>多次修改某个区间，求区间和</p></li><li><p>将某个区间变为同一个数求区间和</p></li><li><p>多次修改区间，寻找定点值</p></li></ol><h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><p>说明：lowbit()奇妙用法…..</p><p>#define lowbit(x) (-x)&amp;x<br>///或者 int lowbit(int x) {return -x&amp;x;}<br>int tree[length];//树状数组，长度和原数组相等<br>//区间修改<br>void update(int x,int val)<br>{<br>    while(x){<br>        tree[x]+=val;<br>        x+=lowbit(x);<br>    }<br>}<br>//区间求和<br>int sum(int l,int r){<br>    int ans=0;<br>    while(r){<br>        ans+=tree[r];<br>        r-=lowbit(r);<br>    }<br>    l–;//<br>    while(l){<br>        ans-=tree[l];<br>        l-=lowbit(l);<br>    }<br>    return ans;<br>}</p><h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><ol><li><p>正常的顶点修改，区间求和直接用</p></li><li><p><strong>区间修改，求单独一个数</strong> <a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><ul><li><p>树状数组是保存的每一个下标为位置的前缀和</p></li><li><p>想要求指定位置的数值需要用到差分,差分的前缀和就是每一个位置的数据大小</p></li><li><p>修改时只需要修改 update(l,val),update(r+1,-val)</p></li><li><p>初始化时，要插入的是差分</p><p>  #include <iostream><br>  #include <algorithm><br>  #define ll long long<br>  #define lowbit(x) (x&amp;(-x))<br>  using namespace std;<br>  const int mx = 10e5 + 5;<br>  int t[mx], m, n;<br>  int add(int x, int k) {<br>  while (x &lt;= n) {<br>      t[x] += k;<br>      x += lowbit(x);<br>  }<br>  }<br>  int query(int x){<br>  ll ans=0;<br>  while(x){<br>      ans+=t[x];<br>      x-=lowbit(x);<br>  }<br>  return ans;<br>  }<br>  //用差分来的前缀和来表示每一位置上的数字，<br>  //第一个数字之后，每次把差分加入，再求前缀和就能得到每一个位置上的数字是多少了<br>  //修改时只需要修改x和y+1两个位置的差分，但是我们用的tree是前缀和，所以依然要用把和lowbit有关的都修改 了<br>  int main() {<br>  cin &gt;&gt; n &gt;&gt; m;<br>  int cf=0;<br>  for (int i = 1; i &lt;= n; i++) {<br>      int num;<br>      scanf(“%d”, &amp;num);<br>      add(i,num-cf);<br>      cf=num;<br>  }<br><br>  for (int i = 1; i &lt;= m; i++) {<br>      int ch, x, y,k;<br>      scanf(“%d”, &amp;ch);<br>      if (ch == 1){<br>          scanf(“%d %d %d”, &amp;x, &amp;y, &amp;k);<br>          add(x,k);<br>          add(y+1,-k);<br>      }<br>      else {<br>          int s;<br>          scanf(“%d”, &amp;s);<br>          printf(“%d\n”, query(s));<br>      }<br>  }<br>  return 0;<br>  }</algorithm></iostream></p></li></ul></li><li><p>用指定数据替换某个数据，然后求和 <a href="https://leetcode.cn/problems/range-sum-query-mutable/submissions/429237767/">307. 区域和检索 - 数组可修改 - 力扣（Leetcode）</a></p><ul><li><p>更换数据也是用到了差分，新的数据-原数据==要更新的val</p></li><li><p>然后更新之后，原数组指定位置也要更新，方便下次修改同一位置</p></li><li><p>其他正常食用即可</p><p>  class NumArray {<br>  int []t;<br>  int n;<br>  int []nums;<br>  int lowbit(int x){return x&amp;(-x);}<br>  public NumArray(int[] nums) {<br>      this.nums=nums;<br>      n=nums.length;<br>      t=new int[n+1];<br>      int i=1;<br>      for (int num:nums<br>           ) {<br>          add(i++,num);<br>      }<br>  }<br>  void add(int index,int val){<br>      while(index&lt;=n){<br>          t[index]+=val;<br>          index+=lowbit(index);<br>      }<br>  }<br>  public void update(int index, int val) {<br>      add(index+1,val-nums[index]);<br>      nums[index]=val;<br>  }<br><br>  public int sumRange(int left, int right) {<br>      int ans=0;<br>      right++;<br>      while(right&gt;0){<br>          ans+=t[right];<br>          right-=lowbit(right);<br>      }<br><br>      while(left&gt;0){<br>          ans-=t[left];<br>          left-=lowbit(left);<br>      }<br>      return ans;<br>  }<br>  }  </p><p>  /**  </p><ul><li>Your NumArray object will be instantiated and called as such:  </li><li>NumArray obj = new NumArray(nums);  </li><li>obj.update(index,val);  </li><li>int param_2 = obj.sumRange(left,right);<br>   */</li></ul></li></ul></li></ol><p>求1的个数</p><p>#include <algorithm><br>#include <vector><br>#include <iostream><br>#define lowbit(x) (-x)&amp;x<br>using namespace std;<br>int main(){<br> &nbsp; &nbsp;int n,ans=0;<br> &nbsp; &nbsp;cin&gt;&gt;n;<br> &nbsp; &nbsp;while(n){<br> &nbsp; &nbsp; &nbsp; &nbsp;ans++;<br> &nbsp; &nbsp; &nbsp; &nbsp;n-=lowbit(n);<br> &nbsp;  }<br> &nbsp; &nbsp;cout&lt;&lt;ans&lt;&lt;endl;<br> &nbsp; &nbsp;return 0;<br>}</iostream></vector></algorithm></p><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>unique 返回的是下下标</p><p>vector<int> alls; // 存储所有待离散化的值<br>sort(alls.begin(), alls.end()); // 将所有值排序<br>alls.erase(unique(alls.begin(), alls.end()), alls.end()); &nbsp; // 去掉重复元素<br>//配合erase 即可把放在后面的重复元素删除<br>/*<br>该函数的作用是“去除”容器或者数组中相邻元素的重复出现的元素<br>(1) 这里的去除并非真正意义的erase，而是将重复的元素放到容器的末尾，返回值是去重之后的尾地址。<br>(2) unique针对的是相邻元素，所以对于顺序顺序错乱的数组成员，或者容器成员，需要先进行排序，可以调用std::sort()函数<br>// 二分求出x对应的离散化的值*/<br>int find(int x) // 找到第一个大于等于x的位置<br>{<br> &nbsp; &nbsp;int l = 0, r = alls.size() - 1;<br> &nbsp; &nbsp;while (l &lt; r)<br> &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp;int mid = l + r &gt;&gt; 1;<br> &nbsp; &nbsp; &nbsp; &nbsp;if (alls[mid] &gt;= x) r = mid;<br> &nbsp; &nbsp; &nbsp; &nbsp;else l = mid + 1;<br> &nbsp;  }<br> &nbsp; &nbsp;return r + 1; // 映射到1, 2, …n<br>}</int></p><h2 id="区间和并"><a href="#区间和并" class="headerlink" title="区间和并"></a>区间和并</h2><p>每次维护一个右端点</p><p>// 将所有存在交集的区间合并<br>void merge(vector<pii> &amp;segs)<br>{<br>    vector<pii> res;  </pii></pii></p><pre><code>sort(segs.begin(), segs.end());//根据first进行排序，默认的就是这样的不需要进行自定义  int st = -2e9, ed = -2e9;  for (auto seg : segs)      if (ed &lt; seg.first)      {          //当起点的值大于右端点的时候，一段区间结束，可以继续下一段区间了          if (st != -2e9) res.push_back({st, ed});          st = seg.first, ed = seg.second;      }      else ed = max(ed, seg.second);//如果左没大于右端点，那么右端点每次更新完为最大值  if (st != -2e9) res.push_back({st, ed});  segs = res;  </code></pre><p>}</p><h2 id="数组模拟链表"><a href="#数组模拟链表" class="headerlink" title="数组模拟链表"></a>数组模拟链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>int head,e[N],ne[N],idx;<br>void init(){<br>    head=-1;<br>    idx=0;<br>}<br>//头插<br>//head 也是指针,e[idx] 新节点<br>void add_head(int x){<br>    e[idx]=x;//插入数据<br>    ne[idx]=head;//idx 当前的位置的指针指向head指向的位置 -1<br>    head=idx;//head 指针指向idx<br>    idx++;<br>}<br>//插入任意位置<br>void insert_linkedlist(int k,int x){<br>    e[idx]=x;//建立新节点<br>    ne[idx]=ne[k];//新节点指向k的下一个节点<br>    ne[k]=ne[idx]; //k指向idx这个结点<br>    idx++;<br>}<br>void delete_linkedlist(int k){<br>    ne[k]=ne[ne[k]];<br>}<br>int main(){<br>    int k,x,m;<br>    char op;<br>    cin&gt;&gt;m;<br>    init();<br>    while(m–){<br>        cin&gt;&gt;op;<br>        if(op==’h’){<br>            cin&gt;&gt;x;<br>            add_head(x);<br>        }<br>        else if(op==’d’){<br>            cin&gt;&gt;k;<br>            delete_linkedlist(k-1);<br>        }<br>        else {<br>            cin&gt;&gt;k&gt;&gt;x;<br>            insert_linkedlist(k-1,x);<br>        }<br>    }<br>    for(int i=head;i!=-1;i=ne[i]){cout&lt;&lt;e[i]&lt;&lt;’ ‘;}<br>    return 0;<br>}</p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点<br>int e[N], l[N], r[N], idx;  </p><p>// 初始化<br>void init()<br>{<br>    //0是左端点，1是右端点<br>    r[0] = 1, l[1] = 0;<br>    idx = 2;<br>}  </p><p>// 在节点a的右边插入一个数x<br>void insert(int a, int x)<br>{<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>}  </p><p>// 删除节点a<br>void remove(int a)<br>{<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>}  </p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>// tt表示栈顶<br>int stk[N], tt = 0;  </p><p>// 向栈顶插入一个数<br>stk[ ++ tt] = x;  </p><p>// 从栈顶弹出一个数<br>tt – ;  </p><p>// 栈顶的值<br>stk[tt];  </p><p>// 判断栈是否为空，如果 tt &gt; 0，则表示不为空<br>if (tt &gt; 0)<br>{  </p><p>}</p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>注意这个题目要的是结果的下标不是具体的数据</p><p>用栈暴力模拟一遍，然后再考虑哪些元素没有用处，就可以排除</p><p><a href="https://www.luogu.com.cn/problem/P5788">P5788 【模板】单调栈 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>#include<iostream><br>#include <cstdio><br>#define ll long long<br>using namespace std;<br>const ll N=3*1000000+1;<br>ll stk[N],a[N],ans[N];<br>int tt=0;<br>int main(){<br>    int n;<br>    cin&gt;&gt;n;<br>    for(int i=1;i&lt;=n;i++){<br>        scanf(“%lld”,&amp;a[i]);<br>    }<br>    for(int i=n;i&gt;0;i–){<br>        while(tt!=0&amp;&amp;a[i]&gt;=a[stk[tt]]) tt–;<br>        ans[i]= tt==0?0:stk[tt];<br>        stk[++tt]=i;<br>    }<br>    for(int i=1;i&lt;=n;i++)printf(“%lld “,ans[i]);<br>    return 0;<br>}</cstdio></iostream></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>// hh 表示队头，tt表示队尾<br>int q[N], hh = 0, tt = -1;  </p><p>// 向队尾插入一个数<br>q[ ++ tt] = x;  </p><p>// 从队头弹出一个数<br>hh ++ ;  </p><p>// 队头的值<br>q[hh];  </p><p>// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空<br>if (hh &lt;= tt)<br>{  </p><p>}</p><h1 id="单调队列-（好东西）"><a href="#单调队列-（好东西）" class="headerlink" title="单调队列 （好东西）"></a>单调队列 （好东西）</h1><p><strong>几个点：</strong></p><ul><li><p>初始化时，hh=0,tt=-1 使得队列为空</p></li><li><p>比较的是队尾元素与当前元素</p></li><li><p>注意队列长度为0时不要输出</p></li></ul><p>常见模型：找出滑动窗口中的最大值/最小值<br>int hh = 0, tt = -1;<br>for (int i = 0; i &lt; n; i ++ )<br>{<br>    while (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  // 判断队头是否滑出窗口<br>    while (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt – ;<br>    q[ ++ tt] = i;<br>}</p><p>例题</p><p><a href="https://www.luogu.com.cn/problem/P1886">P1886 滑动窗口 /【模板】单调队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>#include<iostream><br>#include <cstdio><br>#define ll long long<br>using namespace std;<br>const int N=1000000+2;<br>int n,k,a[N],q[N],ans,hh,tt;  </cstdio></iostream></p><p>int main(){<br>    cin&gt;&gt;n&gt;&gt;k;<br>    for(int i=0;i&lt;n;i++){<br>        scanf(“%d”,&amp;a[i]);<br>    }<br>    //队列存的是下标<br>    //最小值<br>    hh=0;tt=-1;//目的是让队列初始化为空<br>    for(int i=0;i&lt;n;i++){<br>        //判断队列是否为空<br>        if(hh&lt;=tt&amp;&amp;i-k+1&gt;q[hh]) hh++;<br>        //目的是把最小的元素放在队头<br>        while(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;=a[i]) tt–;//从队尾删除，因为经过我们的处理，已经是严格单调递增的了，所以如果第一个都大于这个元素的话，那么后面几个都大于，所以要删除<br>        q[++tt]=i;<br>        if(i&gt;=k-1)<br>        printf(“%d “,a[q[hh]]);<br>    }<br>    cout&lt;&lt;endl;<br>    //最大值<br>      hh=0;tt=-1;<br>    for(int i=0;i&lt;n;i++){<br>        //判断队列是否为空<br>        if(hh&lt;=tt&amp;&amp;i-k+1&gt;q[hh]) hh++;<br>        //目的是把最大的元素放在队头<br>        while(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;=a[i]) tt–;<br>        q[++tt]=i;<br>        if(i&gt;=k-1)<br>        printf(“%d “,a[q[hh]]);<br>    }  </p><pre><code>return 0;  </code></pre><p>}</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p><img src="file://D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230511171657614.png?lastModify=1694256669" alt="image-20230511171657614"></p><p>s从1开始，p从0开始</p><p>// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度<br>求模式串的Next数组：ne[1]=0<br>for (int i = 2, j = 0; i &lt;= m; i ++ )<br>{<br>    while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];<br>    if (p[i] == p[j + 1]) j ++ ;<br>    ne[i] = j;<br>}  </p><p>// 匹配<br>for (int i = 1, j = 0; i &lt;= n; i ++ )<br>{<br>    while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];<br>    if (s[i] == p[j + 1]) j ++ ;<br>    if (j == m)<br>    {<br>        j = ne[j];<br>        // 匹配成功后的逻辑<br>    }<br>}</p><p><strong>例题</strong></p><p><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>#include <iostream><br>#include <cstring><br>#define N 1000010<br>using namespace std;<br>char s[N],p[N];<br>int ls,lp,ne[N];<br>int main(){<br>    cin&gt;&gt;s+1&gt;&gt;p+1;<br>    ls=strlen(s+1);<br>    lp=strlen(p+1);<br>    for(int i=2,j=0;i&lt;=lp;i++){<br>        while(j&amp;&amp;p[i]!=p[j+1]) j=ne[j];<br>        if(p[j+1]==p[i]) j++;<br>        ne[i]=j;<br>    }<br>     for(int i=1,j=0;i&lt;=ls;i++){<br>        while(j&amp;&amp;s[i]!=p[j+1]) j=ne[j];<br>        if(s[i]==p[j+1]) j++;<br>        if(j==lp){<br>            cout&lt;&lt;i-lp+1&lt;&lt;endl;<br>            j=ne[j];<br>        }<br>    }<br>    for(int i=1;i&lt;=lp;i++){<br>        cout&lt;&lt;ne[i]&lt;&lt;” “;<br>    }<br>    return 0;<br>}</cstring></iostream></p><h2 id="Trie树-高效存储和查找字符串"><a href="#Trie树-高效存储和查找字符串" class="headerlink" title="Trie树 高效存储和查找字符串"></a>Trie树 高效存储和查找字符串</h2><p>集合的数据结构</p><p>将字符串分解为一个一个单独的字符然后存储，然后查询这个字符串是否出现过，</p><p>出现过几次</p><h4 id="更全面-的映射"><a href="#更全面-的映射" class="headerlink" title="更全面 的映射"></a>更全面 的映射</h4><p>int getnum(char x){<br>    if(x&gt;=’A’&amp;&amp;x&lt;=’Z’)<br>        return x-‘A’;<br>    else if(x&gt;=’a’&amp;&amp;x&lt;=’z’)<br>        return x-‘a’+26;<br>    else<br>        return x-‘0’+52;<br>} </p><p>#include<iostream><br>#include <algorithm><br>#include <cstdio><br>using namespace std;<br>const int N=100010;<br>int son[N][26],cnt[N],idx;//子子节点的个数，只包含26个 小写字母 cnt是以这个字母为结尾的单词出现了福哦少个<br>//idx 当前用到哪了<br>//插入操作<br>char str[N];<br>void insert(char str[]){<br> &nbsp; &nbsp;int p=0;//当前的结点<br> &nbsp; &nbsp;for(int i=0;str[i];i++){<br> &nbsp; &nbsp; &nbsp; &nbsp;int u=str[i]-‘a’;//将26个小写字母映射为数字<br> &nbsp; &nbsp; &nbsp; &nbsp;if(!son[p][u]) son[p][u]=++idx;<br> &nbsp; &nbsp; &nbsp; &nbsp;p=son[p][u];<br> &nbsp;  }<br> &nbsp; &nbsp;cnt[p]++;<br>}<br>int query(char str[]){<br> &nbsp; &nbsp;int p=0;<br> &nbsp; &nbsp;for(int i=0;str[i];i++){<br> &nbsp; &nbsp; &nbsp; &nbsp;int u=str[i]-‘a’;<br> &nbsp; &nbsp; &nbsp; &nbsp;if(!son[p][u]) return 0;<br> &nbsp; &nbsp; &nbsp; &nbsp;p=son[p][u];<br> &nbsp;  }<br> &nbsp; &nbsp;return cnt[p];<br>}<br>int main(){<br> &nbsp; &nbsp;int n;<br> &nbsp; &nbsp;cin&gt;&gt;n;<br> &nbsp; &nbsp;while(n–){<br> &nbsp; &nbsp; &nbsp; char op[2];<br> &nbsp; &nbsp; &nbsp; cin&gt;&gt;op&gt;&gt;str;<br> &nbsp; &nbsp; &nbsp; if(op[0]==’i’) insert(str);<br> &nbsp; &nbsp; &nbsp; else cout&lt;&lt;query(str)&lt;&lt;endl;<br> &nbsp;  }<br> &nbsp; &nbsp;return 0;<br>}</cstdio></algorithm></iostream></p><p><a href="https://www.luogu.com.cn/problem/P8306">P8306 【模板】字典树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>#include<iostream><br>#include <algorithm><br>#include <cstdio><br>#include <cstring><br>using namespace std;<br>const int N=3000005;<br>int son[N][65],cnt[N],idx;//子子节点的个数，只包含26个 小写字母 cnt是以这个字母位借位的单词出现了福哦少个<br>//idx 当前用到哪了<br>//插入操作<br> int n,m,t;<br>char str[N];<br>int hashs(char x){<br>    if(x&gt;=’A’&amp;&amp;x&lt;=’Z’)<br>        return x-‘A’;<br>    else if(x&gt;=’a’&amp;&amp;x&lt;=’z’)<br>        return x-‘a’+26;<br>    else<br>        return x-‘0’+52;<br>}<br>void insert(char str[]){<br>    int p=0;//当前的结点<br>    int l=strlen(str);<br>    for(int i=0;i&lt;l;i++){<br>        int u=hashs(str[i]);//将26个小写字母映射为数字<br>        if(!son[p][u]) son[p][u]=++idx;<br>        p=son[p][u];<br>        cnt[p]++;<br>    }  </cstring></cstdio></algorithm></iostream></p><p>}<br>int query(char str[]){<br>    int p=0;//当前的结点<br>    int l=strlen(str);<br>    for(int i=0;i&lt;l;i++){<br>        int u =hashs(str[i]);<br>        if(!son[p][u]) return 0;<br>        p=son[p][u];<br>    }<br>    return cnt[p];<br>}<br>int main(){  </p><pre><code>cin&gt;&gt;t;  while(t--){        for(int i=0;i&lt;=idx;i++){          for(int j=0;j&lt;=122;j++){              son[i][j]=0;          }        }        for(int i=0;i&lt;=idx;i++)          cnt[i]=0;      idx=0;     scanf("%d%d",&amp;n,&amp;m);      while(n--){          scanf("%s",str);          insert(str);      }      while(m--){           scanf("%s",str);          printf("%d\n",query(str));      }  }  return 0;  </code></pre><p>}</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>用法：</p><h3 id="某些点或者数据是否处于一个连通块中"><a href="#某些点或者数据是否处于一个连通块中" class="headerlink" title="某些点或者数据是否处于一个连通块中"></a>某些点或者数据是否处于一个连通块中</h3><ol><li><p>将两个集合合并</p></li><li><p>询问两个元素是否在一个集合中</p></li></ol><p>基本原理：每个集合用一个树来表示，树根的编号就是整个集合的编号，</p><p>每一个结点表示他的父节点p[x] 表示x的父节点</p><ul><li><p>判断树根: if（p[x]==x）</p></li><li><p>如何集合的编号： while(p[x]!=x) x=p[x];</p></li><li><p>如何合并两个集合直接让其中一个的根节点的父节点为另一个集合的根节点就行</p></li><li><p>如何优化，查询一次后，将将所经过的路径的父节点全都修改为根节点</p></li></ul><p>#include<iostream><br>#include <algorithm><br>#include <cstdio><br>#include <cstring><br>using namespace std;<br>const int N=10010;<br>int p[N];<br>//初始每个点都是一个单独的集合<br>void init(int n){<br>    for(int i=1;i&lt;=n;i++){<br>        p[i]=i;<br>    }<br>}<br>int find(int x){<br>    if(p[x]!=x) p[x]=find(p[x]);<br>    return p[x];<br>}  </cstring></cstdio></algorithm></iostream></p><p>int main(){<br>    int n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    init(n);<br>    char op[2];<br>    while(m–){<br>        int a,b;<br>        cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;<br>        //合并两个集合,路径压缩<br>        if(op[0]==’i’) p[find(a)]=find(b);//让a的父节点等于b的父节点，即可合并<br>        else {<br>            //查询<br>            if(find(a)==find(b)) cout&lt;&lt;”yes”&lt;&lt;endl;<br>            else cout&lt;&lt;”no”&lt;&lt;endl;<br>        }<br>    }<br>    return 0;<br>}</p><p><a href="https://www.luogu.com.cn/problem/P3367">P3367 【模板】并查集 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>维护点的数量：</p><p>#include<iostream><br>#include <algorithm><br>#include <cstdio><br>#include <cstring><br>using namespace std;<br>const int N=10010;<br>int p[N],sizes[N];//每个集合中点的数量<br>//初始每个点都是一个单独的集合<br>void init(int n){<br>    for(int i=1;i&lt;=n;i++){<br>        p[i]=i;<br>        sizes[i]=1;<br>    }<br>}<br>int find(int x){<br>    if(p[x]!=x) p[x]=find(p[x]);<br>    return p[x];<br>}  </cstring></cstdio></algorithm></iostream></p><p>int main(){<br>    int n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    init(n);<br>    int op;<br>    while(m–){<br>        int a,b;<br>        cin&gt;&gt;op;<br>        //合并两个集合,路径压缩<br>        if(op==1){<br>            cin&gt;&gt;a&gt;&gt;b;<br>            if(find(a)==find(b)) continue;<br>            sizes[find(b)]+=sizes[find(a)];<br>            p[find(a)]=find(b);//让a的父节点等于b的父节点，即可合并  </p><pre><code>    }      else if(op==2){          //查询          cin&gt;&gt;a&gt;&gt;b;          if(find(a)==find(b)) cout&lt;&lt;"Y"&lt;&lt;endl;          else cout&lt;&lt;"N"&lt;&lt;endl;      }      else {          //询问某个集合中点的数量          cin&gt;&gt;n;          cout&lt;&lt;sizes[find(a)]&lt;&lt;endl;      }  }  return 0;  </code></pre><p>}</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>操作：down 和up 把元素向下或向上走，使用的是一维数组，x的左儿子2x,右儿子2x+1</p><p>size 表示数组的最后一个位置</p><ol><li><p>插入一个元素： heap[++size]=x up(size)</p></li><li><p>求最小值 heap[1]</p></li><li><p>删除最小值 数组尾部好删除，所以用最后一个元素覆盖数组的头，然后执行down，</p><p> 再删除尾部，head[k]=heap[size];size–; down(k)||up(k)</p></li><li><p>修改 heap[k]=k; down(k)||up(k);</p></li></ol><p>// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1<br>// ph[k]存储第k个插入的点在堆中的位置<br>// hp[k]存储堆中下标是k的点是第几个插入的<br>int h[N], ph[N], hp[N], size;  </p><p>// 交换两个点，及其映射关系<br>void heap_swap(int a, int b)<br>{<br>    swap(ph[hp[a]],ph[hp[b]]);<br>    swap(hp[a], hp[b]);<br>    swap(h[a], h[b]);<br>}  </p><p>void down(int u)<br>{<br>    int t = u;<br>    //查找到三个结点中的最小值<br>    if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;<br>    if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;<br>    if (u != t)<br>    {<br>        heap_swap(u, t);<br>        down(t);<br>    }<br>}  </p><p>void up(int u)<br>{<br>    while (u / 2 &amp;&amp; h[u] &lt; h[u / 2])//父节点存在且当前结点小于父节点<br>    {<br>        heap_swap(u, u / 2);<br>        u &gt;&gt;= 1;//下一个父节点<br>    }<br>}  </p><p>// O(n)建堆<br>for (int i = n / 2; i; i – ) down(i);</p><p><a href="https://www.luogu.com.cn/problem/P3378">P3378 【模板】堆 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N=1000001;<br>int h[N],s;<br>void down(int u){<br>    int t=u;<br>    if(u*2&lt;=s&amp;&amp;h[u*2]&lt;h[t]) t=u*2;<br>    if(u*2+1&lt;=s&amp;&amp;h[u*2+1]&lt;h[t]) t=u*2+1;<br>    if(u!=t){<br>        swap(h[u],h[t]);<br>        down(t);<br>    }<br>}<br>void up(int u){<br>    while(u/2&amp;&amp;h[u]&lt;h[u/2]){<br>        swap(h[u],h[u/2]);<br>        u&gt;&gt;=1;<br>    }<br>}<br>int main(){<br>    int n,op;<br>    cin&gt;&gt;n;<br>    for(int i=n/2;i;i–){<br>        down(i);<br>    }<br>    while(n–){<br>        scanf(“%d”,&amp;op);<br>        if(op==1) {<br>            int x;<br>            scanf(“%d”,&amp;x);<br>            h[++s]=x;<br>            up(s);<br>        }<br>        else if(op==2){<br>            printf(“%d\n”,h[1]);<br>        }<br>        else {<br>            //最后一个换到第一个<br>            swap(h[1],h[s]);<br>            s–;//删除最后一个<br>            down(1);<br>        }<br>    }  </p><p>}</p><h2 id="HahTable"><a href="#HahTable" class="headerlink" title="HahTable"></a>HahTable</h2><p>删除的话打个标记</p><p>(1) 拉链法<br>    int h[N], e[N], ne[N], idx;  </p><pre><code>// 向哈希表中插入一个数  void insert(int x)  {      int k = (x % N + N) % N;      e[idx] = x;      ne[idx] = h[k];      h[k] = idx ++ ;  }  // 在哈希表中查询某个数是否存在  bool find(int x)  {      int k = (x % N + N) % N;      for (int i = h[k]; i != -1; i = ne[i])          if (e[i] == x)              return true;      return false;  }  </code></pre><p>开放寻址法，遇到冲突的话直接往后找没用的节点</p><p>数组要开比原来数据范围大2~3倍</p><p>//只要开一个h数组就可以了，不需要e和ne了，找一个不在数据范围内的数据来表示当前位置为空<br>(2) 开放寻址法<br>    int h[N];<br>    const int null =xxx;<br>    // 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置<br>    int find(int x)<br>    {<br>        int t = (x % N + N) % N;<br>        while (h[t] != null &amp;&amp; h[t] != x)<br>        {<br>            t ++ ;<br>            if (t == N) t = 0;<br>        }<br>        return t;<br>    }</p><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>快速判断两个字符串是否相等</p><p>核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果  </p><p>typedef unsigned long long ULL;<br>ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64  </p><p>// 初始化<br>p[0] = 1;<br>for (int i = 1; i &lt;= n; i ++ )<br>{<br>    h[i] = h[i - 1] * P + str[i];<br>    p[i] = p[i - 1] * P;//P存储的是每一位的基数值<br>}  </p><p>// 计算子串 str[l ~ r] 的哈希值<br>ULL get(int l, int r)<br>{<br>    return h[r] - h[l - 1] * p[r - l + 1];<br>}</p><h2 id="STL常用"><a href="#STL常用" class="headerlink" title="STL常用"></a>STL常用</h2><p>vector, 变长数组，倍增的思想 &nbsp;优化思路：减少申请空间的次数<br> &nbsp; &nbsp;size() &nbsp;返回元素个数<br> &nbsp; &nbsp;empty() &nbsp;返回是否为空<br> &nbsp; &nbsp;clear() &nbsp;清空<br> &nbsp; &nbsp;front()/back()<br> &nbsp; &nbsp;push_back()/pop_back()<br> &nbsp; &nbsp;begin()/end()<br> &nbsp;  []<br> &nbsp; &nbsp;支持比较运算，按字典序<br> &nbsp; &nbsp;vector<int> a(1,2),b(3,4);<br>printf(a&lt;b) == 0<br>​<br>pair&lt;int, int&gt;<br> &nbsp; &nbsp;first, 第一个元素<br> &nbsp; &nbsp;second, 第二个元素<br> &nbsp; &nbsp;支持比较运算，以first为第一关键字，以second为第二关键字（字典序）<br>​<br>string，字符串<br> &nbsp; &nbsp;size()/length() &nbsp;返回字符串长度<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;clear()<br> &nbsp; &nbsp;substr(起始下标，(子串长度)) &nbsp;返回子串<br> &nbsp; &nbsp;c_str() &nbsp;返回字符串所在字符数组的起始地址<br>​<br>queue, 队列<br> &nbsp; &nbsp;size()<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;push() &nbsp;向队尾插入一个元素<br> &nbsp; &nbsp;front() &nbsp;返回队头元素<br> &nbsp; &nbsp;back() &nbsp;返回队尾元素<br> &nbsp; &nbsp;pop() &nbsp;弹出队头元素<br>​<br>priority_queue, 优先队列，默认是大根堆<br> &nbsp; &nbsp;size()<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;push() &nbsp;插入一个元素<br> &nbsp; &nbsp;top() &nbsp;返回堆顶元素<br> &nbsp; &nbsp;pop() &nbsp;弹出堆顶元素<br> &nbsp; &nbsp;定义成小根堆的方式：priority_queue&lt;int, vector<int>, greater<int>&gt; q;<br>​<br>stack, 栈<br> &nbsp; &nbsp;size()<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;push() &nbsp;向栈顶插入一个元素<br> &nbsp; &nbsp;top() &nbsp;返回栈顶元素<br> &nbsp; &nbsp;pop() &nbsp;弹出栈顶元素<br>​<br>deque, 双端队列<br> &nbsp; &nbsp;size()<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;clear()<br> &nbsp; &nbsp;front()/back()<br> &nbsp; &nbsp;push_back()/pop_back()<br> &nbsp; &nbsp;push_front()/pop_front()<br> &nbsp; &nbsp;begin()/end()<br> &nbsp;  []<br>​<br>set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列<br> &nbsp; &nbsp;size()<br> &nbsp; &nbsp;empty()<br> &nbsp; &nbsp;clear()<br> &nbsp; &nbsp;begin()/end()<br> &nbsp; &nbsp;++, – 返回前驱和后继，时间复杂度 O(logn)<br>​<br> &nbsp; &nbsp;set/multiset<br> &nbsp; &nbsp; &nbsp; &nbsp;insert() &nbsp;插入一个数<br> &nbsp; &nbsp; &nbsp; &nbsp;find() &nbsp;查找一个数<br> &nbsp; &nbsp; &nbsp; &nbsp;count() &nbsp;返回某一个数的个数<br> &nbsp; &nbsp; &nbsp; &nbsp;erase()<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (1) 输入是一个数x，删除所有x &nbsp; O(k + logn)<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (2) 输入一个迭代器，删除这个迭代器<br> &nbsp; &nbsp; &nbsp; &nbsp;lower_bound()/upper_bound()<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lower_bound(x) &nbsp;返回大于等于x的最小的数的迭代器<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;upper_bound(x) &nbsp;返回大于x的最小的数的迭代器<br> &nbsp; &nbsp;map/multimap<br> &nbsp; &nbsp; &nbsp; &nbsp;insert() &nbsp;插入的数是一个pair<br> &nbsp; &nbsp; &nbsp; &nbsp;erase() &nbsp;输入的参数是pair或者迭代器<br> &nbsp; &nbsp; &nbsp; &nbsp;find()<br> &nbsp; &nbsp; &nbsp;  [] &nbsp;注意multimap不支持此操作。 时间复杂度是 O(logn)<br> &nbsp; &nbsp; &nbsp; &nbsp;lower_bound()/upper_bound()<br>​<br>unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表<br> &nbsp; &nbsp;和上面类似，增删改查的时间复杂度是 O(1)<br> &nbsp; &nbsp;不支持 lower_bound()/upper_bound()， 迭代器的++，–<br>​<br>bitset, 圧位 省空间 &nbsp; &nbsp;<br> &nbsp; &nbsp;bitset&lt;10000&gt; s; &nbsp;//&lt; &gt;里面是个数, 可以用来替代bool 数组<br>    //以下操作都支持<br>    <del>, &amp;, |, ^<br> &nbsp; &nbsp;&gt;&gt;, &lt;&lt;<br> &nbsp; &nbsp;==, !=<br> &nbsp;  []<br>​<br> &nbsp; &nbsp;count() &nbsp;返回有多少个1<br>​<br> &nbsp; &nbsp;any() &nbsp;判断是否至少有一个1<br> &nbsp; &nbsp;none() &nbsp;判断是否全为0<br>​<br> &nbsp; &nbsp;set() &nbsp;把所有位置成1<br> &nbsp; &nbsp;set(k, v) &nbsp;将第k位变成v<br> &nbsp; &nbsp;reset() &nbsp;把所有位变成0<br> &nbsp; &nbsp;flip() &nbsp;等价于</del><br> &nbsp; &nbsp;flip(k) 把第k位取反<br>​</int></int></int></p><h2 id="图论背思路"><a href="#图论背思路" class="headerlink" title="图论背思路"></a>图论背思路</h2><h2 id="BFS和DFS"><a href="#BFS和DFS" class="headerlink" title="BFS和DFS"></a>BFS和DFS</h2><h3 id="DFS-回溯的时候记得回复现场"><a href="#DFS-回溯的时候记得回复现场" class="headerlink" title="DFS 回溯的时候记得回复现场"></a>DFS 回溯的时候记得回复现场</h3><h3 id="邻接矩阵：-p-a-b-a-gt-b-适合稠密图"><a href="#邻接矩阵：-p-a-b-a-gt-b-适合稠密图" class="headerlink" title="邻接矩阵： p[ a] [ b ] a -> b 适合稠密图"></a>邻接矩阵： p[ a] [ b ] a -&gt; b 适合稠密图</h3><h3 id="邻接表：-稀疏图"><a href="#邻接表：-稀疏图" class="headerlink" title="邻接表： 稀疏图"></a>邻接表： 稀疏图</h3><p>和哈希表思路一样</p><p>// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点<br>int h[N], e[N], ne[N], idx; //e是终点end  </p><p>// 添加一条边a-&gt;b<br>void add(int a, int b)<br>{<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>}<br>// 初始化<br>idx = 0;<br>memset(h, -1, sizeof h);<br>//遍历图<br>for(int i = h[t] ; i != -1 ; i = ne[i] )</p><h2 id="另一种使用结构体的邻接表存法"><a href="#另一种使用结构体的邻接表存法" class="headerlink" title="另一种使用结构体的邻接表存法"></a>另一种使用结构体的邻接表存法</h2><p>int idx=0,n;<br>int h[N] , dis[N] , vis[N];<br>struct Edge{<br>    int ne,to,dis;<br>}ed[N];<br>//添加， 从 1 开始<br>void add(int a,int b ,int c){<br>    ed[++idx].ne = h[a];<br>    ed[idx].to = b;<br>    ed[idx].dis = c;<br>    h[a] = idx;<br>}<br>//遍历图<br>for(int i = h[t] ; i ; i = ed[i].ne)</p><h3 id="BFS-可用于解决权值相等的最短路径问题"><a href="#BFS-可用于解决权值相等的最短路径问题" class="headerlink" title="BFS 可用于解决权值相等的最短路径问题"></a>BFS 可用于解决权值相等的最短路径问题</h3><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>必须是又向无环</p><p>排完后，所有的起点都在终点之前</p><ol><li><p>统计每一个节点的入度和出度</p></li><li><p>每一次将入读相同的点放入queue</p></li><li><p>枚举队头的出边，删掉 出边,这条边的终点的入度-1</p></li><li><p>如果某个点的入度为0 放入队列</p></li></ol><p>bool topsort()<br>{<br>    int hh = 0, tt = -1;  </p><pre><code>// d[i] 存储点i的入度  for (int i = 1; i &lt;= n; i ++ )      if (!d[i])          q[ ++ tt] = i;//把每个入度为0的点加入队列  while (hh &lt;= tt)  {      int t = q[hh ++ ];//取出队头      //从队头开始找路径      for (int i = h[t]; i != -1; i = ne[i])      {          int j = e[i];          if (-- d[j] == 0)              q[ ++ tt] = j;      }  }  // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。  return tt == n - 1;  </code></pre><p>}</p><h2 id="最短路问题："><a href="#最短路问题：" class="headerlink" title="最短路问题："></a>最短路问题：</h2><h3 id="单源最短路-一个点到其他所有点的最短路"><a href="#单源最短路-一个点到其他所有点的最短路" class="headerlink" title="单源最短路 一个点到其他所有点的最短路"></a>单源最短路 一个点到其他所有点的最短路</h3><ul><li><p>所有边的权都是正数</p><ol><li><p>朴素Dijkstra O(n^2) n为点的数量 稠密图 边很多 外部迭代n-1 次</p><p> int g[N][N];  // 存储每条边  权值<br> int dist[N];  // 存储1号点到每个点的最短距离<br> bool st[N];   // 存储每个点的最短路是否已经确定  </p><p> // 求1号点到n号点的最短路，如果不存在则返回-1<br> int dijkstra()<br> {<br> memset(dist, 0x3f, sizeof dist);<br> dist[1] = 0;<br><br> for (int i = 0; i &lt; n - 1; i ++ )//迭代n-1 次，因为上来选中了一个点<br> {<br>     int t = -1;     // 在还未确定最短路的点中，寻找距离最小的点<br>     for (int j = 1; j &lt;= n; j ++ )<br>         if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))<br>             t = j;<br><br>     // 用t更新其他点的距离<br>     for (int j = 1; j &lt;= n; j ++ )<br>         dist[j] = min(dist[j], dist[t] + g[t][j]);<br><br>     st[t] = true;<br> }<br><br> if (dist[n] == 0x3f3f3f3f) return -1;<br> return dist[n];<br> }</p></li><li><p>堆优化版的 O(mlogn) 稀疏图</p><p> typedef pair&lt;int, int&gt; PII;  </p><p> int n;      // 点的数量<br> int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边<br> int dist[N];        // 存储所有点到1号点的距离<br> bool st[N];     // 存储每个点的最短距离是否已确定  </p><p> // 求1号点到n号点的最短距离，如果不存在，则返回-1<br> int dijkstra()<br> {<br> memset(dist, 0x3f, sizeof dist);<br> dist[1] = 0;<br> priority_queue&lt;PII, vector<pii>, greater<pii>&gt; heap;<br> heap.push({0, 1});      // first存储距离，second存储节点编号<br><br> while (heap.size())<br> {<br>     auto t = heap.top();<br>     heap.pop();<br><br>     int ver = t.second, distance = t.first;<br><br>     if (st[ver]) continue;<br>     st[ver] = true;<br><br>     for (int i = h[ver]; i != -1; i = ne[i])<br>     {<br>         int j = e[i];<br>         if (dist[j] &gt; distance + w[i])<br>         {<br>             dist[j] = distance + w[i];<br>             heap.push({dist[j], j});<br>         }<br>     }<br> }<br><br> if (dist[n] == 0x3f3f3f3f) return -1;<br> return dist[n];<br> }</pii></pii></p></li></ol></li><li><p>存在负权边</p><ol><li><p>Bellman -Ford O(nm) <strong>奇妙的存图方式</strong> 无负权回路 经过路径有次数限制的话只能用这个了</p><p> int n, m;       // n表示点数，m表示边数<br> int dist[N];        // dist[x]存储1到x的最短路距离  </p><p> struct Edge     // 边，a表示出点，b表示入点，w表示边的权重<br> {<br> int a, b, w;<br> }edges[M];  </p><p> // 求1到n的最短路距离，如果无法从1走到n，则返回-1。<br> int bellman_ford()<br> {<br> memset(dist, 0x3f, sizeof dist);<br> dist[1] = 0;<br> //不需要进行收录顶点<br> // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。<br> for (int i = 0; i &lt; n; i ++ )//这个n是指的是最多不经过 多少次经过同一条边<br> {<br>     for (int j = 0; j &lt; m; j ++ )<br>     {<br>         int a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>         if (dist[b] &gt; dist[a] + w)<br>             dist[b] = dist[a] + w;<br>     }<br> }<br><br> if (dist[n] &gt; 0x3f3f3f3f / 2) return -1;<br> return dist[n];<br> }</p></li><li><p>SPFA 一般： O（m) 最坏O（nm） 不存在负权环才能使用 99%都没有负环比较好用</p><p> 优化思路：只有更新过点才对后面的点更新有影响</p><p> 要从 1 开始存比较好 ，e 是end 也就是一条边的终点</p><p> int n;      // 总点数<br> int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边<br> int dist[N];        // 存储每个点到1号点的最短距离<br> bool st[N];     // 存储每个点是否在队列中  </p><p> // 求x号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1<br> int spfa(int x)<br> {<br> memset(dist, 0x3f, sizeof dist);//初始化要根据题目来<br><br> dist[x] = 0;<br> /*或者<br> for(int i = 1 ; i &lt;= n ; i ++){<br>     dis[i] = INT_MAX;<br> }*/<br> queue<int> q;<br> q.push(x);<br> st[x] = true;<br><br> while (q.size())//不为空，即为还有更新的点<br> {<br>     auto t = q.front();<br>     q.pop();<br><br>     st[t] = false;//这里不要忘记<br>    //遍历所以能到达的顶点，进行更新<br>     for (int i = h[t]; i != -1; i = ne[i])<br>     {<br>         int j = e[i];<br>         if (dist[j] &gt; dist[t] + w[i])<br>         {<br>             dist[j] = dist[t] + w[i];<br>             if (!st[j])     // 如果队列中已存在j，则不需要将j重复插入<br>             {<br>                 q.push(j);//这里是j<br>                 st[j] = true;//这里是j<br>             }<br>         }<br>     }<br> }<br><br> if (dist[n] == 0x3f3f3f3f) return -1;<br> return dist[n];<br> }<br> //初始化和存图<br> void add(int a, int b , int c){<br> w[idx] = c;<br> ne[idx] = h[a];<br> en[idx] =  b;<br> h[a] = idx++;<br> }<br> void init(){<br> idx = 1;<br> memset(h , -1 ,sizeof h);<br> }</int></p><h4 id="模板题："><a href="#模板题：" class="headerlink" title="模板题："></a>模板题：</h4><p> <a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><h2 id="判断有无负环-用cnt-来记录当前最短路的边数"><a href="#判断有无负环-用cnt-来记录当前最短路的边数" class="headerlink" title="判断有无负环 用cnt 来记录当前最短路的边数"></a><em><strong>判断有无负环 用cnt 来记录当前最短路的边数</strong></em></h2><p> int n;      // 总点数<br> int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边<br> int dist[N], cnt[N];        // dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数<br> bool st[N];     // 存储每个点是否在队列中  </p><p> // 如果存在负环，则返回true，否则返回false。<br> bool spfa()<br> {<br> // 不需要初始化dist数组<br> // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。<br><br> queue<int> q;<br> for (int i = 1; i &lt;= n; i ++ )<br> {<br>     q.push(i);<br>     st[i] = true;<br> }<br><br> while (q.size())<br> {<br>     auto t = q.front();<br>     q.pop();<br><br>     st[t] = false;<br><br>     for (int i = h[t]; i != -1; i = ne[i])<br>     {<br>         int j = e[i];<br>         if (dist[j] &gt; dist[t] + w[i])<br>         {<br>             dist[j] = dist[t] + w[i];<br>             cnt[j] = cnt[t] + 1;<br>             if (cnt[j] &gt;= n) return true;       // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环<br>             if (!st[j])<br>             {<br>                 q.push(j);<br>                 st[j] = true;<br>             }<br>         }<br>     }<br> }<br><br> return false;<br> }</int></p></li></ol></li></ul><h3 id="多源汇最短路-起点终点都不确定"><a href="#多源汇最短路-起点终点都不确定" class="headerlink" title="多源汇最短路 起点终点都不确定"></a>多源汇最短路 起点终点都不确定</h3><p>Floyd O(n^3)</p><p>初始化：<br> &nbsp; &nbsp;for (int i = 1; i &lt;= n; i ++ )<br> &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (i == j) d[i][j] = 0;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else d[i][j] = INF;<br>​<br>// 算法结束后，d[a][b]表示a到b的最短距离<br>void floyd()<br>{<br> &nbsp; &nbsp;for (int k = 1; k &lt;= n; k ++ )<br> &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 1; i &lt;= n; i ++ )<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;d[i][j] = min(d[i][j], d[i][k] + d[k][j]);// i经过k 点到达j<br>}</p><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="普利姆算法-Prim-思路和Dijsktra算法相似-外部迭代-n-次，因为没有提前选中一个点"><a href="#普利姆算法-Prim-思路和Dijsktra算法相似-外部迭代-n-次，因为没有提前选中一个点" class="headerlink" title="普利姆算法 Prim 思路和Dijsktra算法相似 外部迭代 n 次，因为没有提前选中一个点"></a>普利姆算法 Prim 思路和Dijsktra算法相似 外部迭代 n 次，因为没有提前选中一个点</h3><h3 id="迭代n次因为没有提前选中一个点-枚举所有点"><a href="#迭代n次因为没有提前选中一个点-枚举所有点" class="headerlink" title="迭代n次因为没有提前选中一个点 枚举所有点"></a>迭代n次因为没有提前选中一个点 枚举所有点</h3><ol><li><p>朴素Prim算法 稠密图 每次找到未收录的距离最近的点，收录并进行更新其他点到<strong>集合</strong>的距离</p></li><li><p>找这个点是否与集合内部相连</p></li><li><p>某个点到这个集合的距离为某个点到这个集合当中的点的距离最短的边</p><p> int n; &nbsp; &nbsp; &nbsp;// n表示点数<br> int g[N][N]; &nbsp; &nbsp; &nbsp; &nbsp;// 邻接矩阵，存储所有边<br> int dist[N]; &nbsp; &nbsp; &nbsp; &nbsp;// 存储其他点到当前最小生成树的距离<br> bool st[N]; &nbsp; &nbsp; // 存储每个点是否已经在生成树中<br> ​<br> ​<br> // 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和<br> int prim()<br> {<br>  &nbsp; &nbsp;memset(dist, 0x3f, sizeof dist);<br> ​<br>  &nbsp; &nbsp;int res = 0;<br>  &nbsp; &nbsp;for (int i = 0; i &lt; n; i ++ )<br>  &nbsp;  {<br>  &nbsp; &nbsp; &nbsp; &nbsp;int t = -1;<br>  &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )<br>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))<br>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t = j;<br> ​<br>  &nbsp; &nbsp; &nbsp; &nbsp;if (i &amp;&amp; dist[t] == INF) return INF;<br> ​<br>  &nbsp; &nbsp; &nbsp; &nbsp;if (i) res += dist[t];<br>  &nbsp; &nbsp; &nbsp; &nbsp;st[t] = true;<br> ​<br>  &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]);<br>  &nbsp; &nbsp; &nbsp; &nbsp;//不是相加<br>  &nbsp;  }<br> ​<br>  &nbsp; &nbsp;return res;<br> }</p></li><li><p>堆优化版的Prim 稀疏图 不常用</p></li></ol><h3 id="克鲁斯卡尔算法-Kruskal-先对边进行排序-稀疏图-可以用并查集-枚举所有边"><a href="#克鲁斯卡尔算法-Kruskal-先对边进行排序-稀疏图-可以用并查集-枚举所有边" class="headerlink" title="克鲁斯卡尔算法 Kruskal 先对边进行排序 稀疏图 可以用并查集 枚举所有边"></a>克鲁斯卡尔算法 Kruskal 先对边进行排序 稀疏图 可以用并查集 枚举所有边</h3><p><a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><ol><li><p>所有边按权重从小到大排序</p></li><li><p>枚举每条边a,b权重c if a,b不连通， 将这条边加入集合中</p></li></ol><p>int n, m;       // n是点数，m是边数<br>int p[N];       // 并查集的父节点数组  </p><p>struct Edge     // 存储边<br>{<br>    int a, b, w;  </p><pre><code>bool operator&lt; (const Edge &amp;W)const // 重载了 &lt;   {      return w &lt; W.w;  }  </code></pre><p>}edges[M];  </p><p>int find(int x)     // 并查集核心操作<br>{<br>    if (p[x] != x) p[x] = find(p[x]);<br>    return p[x];<br>}  </p><p>int kruskal()<br>{<br>    sort(edges, edges + m);  </p><pre><code>for (int i = 1; i &lt;= n; i ++ ) p[i] = i;    // 初始化并查集  int res = 0, cnt = 0;  for (int i = 0; i &lt; m; i ++ )  {      int a = edges[i].a, b = edges[i].b, w = edges[i].w;      a = find(a), b = find(b);      if (a != b)     // 如果两个连通块不连通，则将这两个连通块合并      {          p[a] = b;          res += w;          cnt ++ ;      }  }  if (cnt &lt; n - 1) return INF;  return res;  </code></pre><p>}</p><h2 id="二分图-当且仅当图中没有奇数环"><a href="#二分图-当且仅当图中没有奇数环" class="headerlink" title="二分图 当且仅当图中没有奇数环"></a>二分图 当且仅当图中没有奇数环</h2><h3 id="染色法-O-n-m-判断是否是二分图"><a href="#染色法-O-n-m-判断是否是二分图" class="headerlink" title="染色法 O(n+m) 判断是否是二分图"></a>染色法 O(n+m) 判断是否是二分图</h3><p>int n;      // n表示点数<br>int h[N], e[M], ne[M], idx;     // 邻接表存储图<br>int color[N];       // 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色  </p><p>// 参数：u表示当前节点，c表示当前点的颜色<br>bool dfs(int u, int c)<br>{<br>    color[u] = c;<br>    for (int i = h[u]; i != -1; i = ne[i])<br>    {<br>        int j = e[i];<br>        if (color[j] == -1)//未染色<br>        {<br>            if (!dfs(j, !c)) return false;//比如两种颜色， 0，1表示，那么这里就可以用 3- c,也就是用另一种颜色去染色<br>        }<br>        else if (color[j] == c) return false;<br>    }  </p><pre><code>return true;  </code></pre><p>}  </p><p>bool check()<br>{<br>    memset(color, -1, sizeof color);<br>    bool flag = true;<br>    //枚举所有点，去染色<br>    for (int i = 1; i &lt;= n; i ++ )<br>        if (color[i] == -1)<br>            if (!dfs(i, 0))<br>            {<br>                flag = false;<br>                break;<br>            }<br>    return flag;<br>}</p><h3 id="匈牙利算法-O-mn-实际运行时间一般小于这个值-稠密图不适合用邻接表，推荐使用临界矩阵"><a href="#匈牙利算法-O-mn-实际运行时间一般小于这个值-稠密图不适合用邻接表，推荐使用临界矩阵" class="headerlink" title="匈牙利算法 O(mn) 实际运行时间一般小于这个值 稠密图不适合用邻接表，推荐使用临界矩阵"></a>匈牙利算法 O(mn) 实际运行时间一般小于这个值 稠密图不适合用邻接表，推荐使用临界矩阵</h3><p>int n1, n2; &nbsp; &nbsp; // n1表示第一个集合中的点数，n2表示第二个集合中的点数<br>int h[N], e[M], ne[M], idx; &nbsp; &nbsp; // 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边<br>int match[N]; &nbsp; &nbsp; &nbsp; // 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个<br>bool st[N]; &nbsp; &nbsp; // 表示第二个集合中的每个点是否已经被遍历过<br>​<br>bool find(int x)<br>{<br> &nbsp; &nbsp;for (int i = h[x]; i != -1; i = ne[i])<br> &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp;int j = e[i];<br> &nbsp; &nbsp; &nbsp; &nbsp;if (!st[j])<br> &nbsp; &nbsp; &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;st[j] = true;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (match[j] == 0 || find(match[j]))//第二个集合的点未匹配，或者是可以为已经 匹配的第一个集合中的点找到别的集合二中的点<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;match[j] = x;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return true;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;return false;<br>}<br>​<br>// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点<br>int res = 0;<br>for (int i = 1; i &lt;= n1; i ++ )<br>{<br> &nbsp; &nbsp;memset(st, false, sizeof st);<br> &nbsp; &nbsp;if (find(i)) res ++ ;<br>}</p><p><strong>例题：<a href="https://www.luogu.com.cn/problem/P3386">P3386 【模板】二分图最大匹配 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></strong></p><h2 id="邻接表的写法-稠密图会超时"><a href="#邻接表的写法-稠密图会超时" class="headerlink" title="邻接表的写法(稠密图会超时)"></a>邻接表的写法(稠密图会超时)</h2><p>#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N  = 505;<br>int n1,n2,ed;//需要两个集合<br>int h[N] , ne[N] , e[N] , idx;<br>int match[N] ;<br>bool vis[N];<br>void init(){<br>    memset(h,-1,sizeof h);<br>    idx = 0;<br>}<br>void add(int a, int b){<br>    e[idx] = b ;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>}<br>bool find(int x){<br>    for (int i = h[x] ; i != -1 ; i =ne[i]){<br>        int j = e[i];<br>        if(!vis[j]){<br>            vis[j] = true;<br>            if(match[j] == 0 || find(match[j])){<br>                //如果终边的点未匹配，或者是可以为以匹配的起点找到另一个终点<br>                match[j] = x;<br>                return true;<br>            }<br>        }<br>    }<br>    return false;<br>}<br>int main(){<br>    ios::sync_with_stdio(false);<br>    cin.tie(nullptr);<br>    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt;ed;<br>    init();<br>    int u ,v;<br>    for (int i = 1 ; i &lt;= ed ; i++){<br>        cin &gt;&gt; u &gt;&gt; v;<br>        if(v &lt;= n2){<br>            add(u , v);<br>        }  </p><pre><code>}  int ans = 0;  for (int i = 1 ; i &lt;= n1 ; i++){      memset(vis, false ,sizeof vis);      if(find(i)) ans++;  }  cout &lt;&lt; ans &lt;&lt;endl ;  return 0;  </code></pre><p>}</p><h2 id="邻接矩阵的写法："><a href="#邻接矩阵的写法：" class="headerlink" title="邻接矩阵的写法："></a>邻接矩阵的写法：</h2><p>#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N  = 505;<br>int n1,n2,ed;//需要两个集合<br>bool a[N][N];<br>int match[N];<br>bool vis[N];<br>bool find(int x){<br>    //枚举终边<br>    for (int i = 1 ; i &lt;= n2 ; i ++){<br>        if(!vis[i] &amp;&amp; a[x][i]){<br>            vis[i] = true;<br>            if(match[i] == 0 || find(match[i])){<br>                //如果终边的点未匹配，或者是可以为以匹配的起点找到另一个终点<br>                match[i] = x;<br>                return true;<br>            }<br>        }<br>    }<br>    return false;<br>}<br>int main(){<br>    ios::sync_with_stdio(false);<br>    cin.tie(nullptr);<br>    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt;ed;<br>    int u ,v;<br>    for (int i = 1 ; i &lt;= ed ; i++){<br>        cin &gt;&gt; u &gt;&gt; v;<br>        if(v &lt;= n2){<br>            a[u][v] = 1;<br>        }  </p><pre><code>}  int ans = 0;  for (int i = 1 ; i &lt;= n1 ; i++){      ans+=find(i); // 这里不一样哦      memset(vis, false ,sizeof vis);  }  cout &lt;&lt; ans &lt;&lt;endl ;  return 0;  </code></pre><p>}</p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><h2 id="当看见-0-的个数时考虑将结果分成-2-，-5-的个数"><a href="#当看见-0-的个数时考虑将结果分成-2-，-5-的个数" class="headerlink" title="当看见 0 的个数时考虑将结果分成 2 ， 5 的个数"></a>当看见 0 的个数时考虑将结果分成 2 ， 5 的个数</h2><p><a href="https://ac.nowcoder.com/acm/contest/57683/E">E-Kevin喜欢零(困难版本)_牛客小白月赛73 (nowcoder.com)</a></p><p>#include &lt;bits/stdc++.h&gt;<br>​<br>void solve() </p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法，数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb_study</title>
      <link href="/2023/09/01/qian-duan/javaweb-study/"/>
      <url>/2023/09/01/qian-duan/javaweb-study/</url>
      
        <content type="html"><![CDATA[<p>项目练习(web?):</p><ol><li>学生管理系统(应付学校使用)</li><li>网络聊天室 websocket，要求能发送表情包和图片，要求即时聊天</li><li>blog项目练习</li><li>wx小程序</li></ol><ul><li><p>技术要求: </p><ul><li>要求前后端分离</li><li>前端:<ul><li>三件套 + axios + node.js + react  + vue + element?</li></ul></li><li>后端:<ul><li>java/go/ktlion </li><li>ssm + springboot  redis or mongodb and mysql</li></ul></li><li>工具要求: maven + docker + git + github + firefox + nginx + linux + tomcat + 服务器</li></ul></li><li><p>具体需求</p></li><li><p>前端使用vue设计，服务器使用nginx来实现负载均衡和分发 , node.js</p></li><li><p>后端先使用java，数据库使用mysql,redis作为缓存 tomcat</p></li><li><p>使用docker部署在自己的服务器上</p></li></ul><h1 id="JavaWeb练习-前端已实现简易版"><a href="#JavaWeb练习-前端已实现简易版" class="headerlink" title="JavaWeb练习(前端已实现简易版)"></a>JavaWeb练习(前端已实现简易版)</h1><p>我的源代码:<a href="https://github.com/qiuEly/-">https://github.com/qiuEly/-</a></p><h2 id="所需技术"><a href="#所需技术" class="headerlink" title="所需技术"></a>所需技术</h2><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul><li>需求分析</li><li>表结构设计<ul><li>Student<ul><li>id(序号) 自增</li><li>姓名，年龄，成绩，性别等</li></ul></li><li>Users<ul><li>username</li><li>password</li></ul></li></ul></li><li>原型设计(设计界面)</li><li>实体类设计<ul><li>Student类</li><li>DBUtil工具类</li><li>StudentDao类</li><li>Service类(增删改建)</li></ul></li><li>使用技术: <ul><li>后端jsp + java基础 +  jdbc+servlet + Tomcat+Filter +mysql </li><li>前端:html + cookie+ ajax + css(基础)</li></ul></li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/2023/09/01/qian-duan/javaweb-study/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><p>记得设置编码格式为UTF-8即可(本文代码使用的数据库名称为 t)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE IF EXISTS student;CREATE DATABASE student DEFAULT CHARACTER SET utf8;CREATE TABLE student(id  NOT NULL AUTO_INCREMENT,name varchar(255) NOT NULL,age int(11) NOT NULL,sex varchar(255) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实体类设计"><a href="#实体类设计" class="headerlink" title="实体类设计"></a>实体类设计</h3><ul><li>Student类(getter和setter已省略)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//姓名  </span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//年龄  </span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span> <span class="token comment">//性别  </span><span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span> <span class="token comment">//成绩  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Dao层设计"><a href="#Dao层设计" class="headerlink" title="Dao层设计"></a>Dao层设计</h3><ul><li>DBUtil工具类(用于获取数据库的连接)<br>  注意事项：<br>  有时连接数据库会出现时区错误，所以要将url加上<br>  ?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;serverTimezone=UTC<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo2<span class="token punctuation">.</span></span><span class="token class-name">Dao</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token comment">//工具类，连接数据库  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBUtil</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> database <span class="token operator">=</span> <span class="token string">"t"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1224"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> username<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> password<span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token comment">/*静态块在程序初始化的时候就执行*/</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/t?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;serverTimezone=UTC"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>StudentDao类<br>用于和数据库来打交道的类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo2<span class="token punctuation">.</span></span><span class="token class-name">Dao</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo2<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>      <span class="token comment">//jdbc实现学生管理系统  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">;</span><span class="token comment">//数据库连接对象  </span><span class="token class-name">String</span> sql<span class="token punctuation">;</span>  <span class="token comment">//用于初始化表数据的方法，已经弃用  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"insert into students(name,sex,age,score) values('张三','男',18,100),('李四','男',19,99),('王五','女',17,98),('赵六','男',18,97),('田七','女',19,96)"</span><span class="token punctuation">;</span>  ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// System.out.println("成功插入"+i+"条数据");  </span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//正向查询学生信息，将学生信息返回到一个List中,方便jsp处理  </span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAllByScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"select * from students order by score"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// student.setId(rs.getInt("id"));  </span>student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> students<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//添加学生信息  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"insert into students(name,sex,age,score) values(?,?,?,?)"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用prepareStatement可以防止sql注入  </span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// queryAll();  </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//删除学生信息  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"delete from students where name = ?"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功删除"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// queryAll();  </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 更新 学生信息  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"update students set sex = ? , age = ? , score = ? where name = ?"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// queryAll();  </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//倒序查询学生信息  </span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAllByScoreDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"select * from students order by score desc"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// student.setId(rs.getInt("id"));  </span>student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> students<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//获取连接对象  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  conn <span class="token operator">=</span> <span class="token class-name">DBUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//根据姓名查询学生信息(前端忘记实现)  </span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"select * from students where name = ?"</span><span class="token punctuation">;</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> student<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="service层设计"><a href="#service层设计" class="headerlink" title="service层设计"></a>service层设计</h3><ul><li><p>Filter设计用于过滤前端请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo2<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>  <span class="token comment">//@WebServlet("/*")  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetEncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>  <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>  <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>  <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>  <span class="token comment">//UTF - 8 编码  </span><span class="token comment">//进行过滤  </span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>add实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/addStudent"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> servletAdd <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req <span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*获取name*/</span>  <span class="token keyword">int</span> age <span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取age  </span><span class="token class-name">String</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//存入Student对象  </span>  student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回查询页面  </span><span class="token comment">/*重定向到listStudent主页面*/</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"./listStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>delete</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/deleteStudent"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> servletDelete <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req <span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"./listStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>update</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/updateStudent"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> serviceUpdate <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int id = Integer.parseInt(req.getParameter("id"));  </span><span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//存到student对象中  </span><span class="token comment">// student.setId(id);  </span>student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"./listStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>正向查询(成绩)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/listStudent"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryAllByScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">,</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/listStudent.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>降序查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/listDesc"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDescServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>  students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryAllByScoreDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">,</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/listDesc.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="前端设计"><a href="#前端设计" class="headerlink" title="前端设计"></a>前端设计</h3><ul><li>index.jsp设计(登录页面)<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="java.sql.Connection" %&gt;  &lt;%@ page import="com.example.demo2.Dao.DBUtil" %&gt;  &lt;%@ page import="com.example.demo2.Student" %&gt;&lt;%--  Created by IntelliJ IDEA.  User: ASUS  Date: 2023/9/2  Time: 10:35  To change this template use File | Settings | File Templates.  --%&gt;  &lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;学生信息管理系统Web版&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;%-- &lt;table&gt;--%&gt;  &lt;%-- &lt;tr&gt;--%&gt;  &lt;%-- &lt;h1 align="center"&gt;学生信息管理系统Web版&lt;/h1&gt;--%&gt;  &lt;%-- &lt;/tr&gt;--%&gt;  &lt;%-- &lt;tr&gt;--%&gt;  &lt;%-- &lt;th&gt; &lt;a href="./listStudent"&gt;查看所有学生(按照成绩升序)&lt;/a&gt;--%&gt;    &lt;%-- &lt;/tr&gt;--%&gt;  &lt;%-- &lt;/table&gt;--%&gt;  &lt;h1 align="center"&gt;学生信息管理系统Web版&lt;/h1&gt;  &lt;%--尝试cookie登录--%&gt;  &lt;%  String pass = null;  String name = null;  Cookie[] cookies = request.getCookies();  if (cookies != null) {  for (Cookie cookie : cookies) {  if ("username".equals(cookie.getName())) {  name = cookie.getValue();  } else if ("password".equals(cookie.getName()))  pass = cookie.getValue();  }  }  %&gt;  &lt;form action="./index.jsp" method="post" align="center"&gt;  &lt;label for="username"&gt;用户名&lt;/label&gt;&lt;input type="text" name="username" id="username" value="&lt;%=name%&gt;"/&gt;  &lt;label for="password"&gt;密码&lt;/label&gt;&lt;input type="password" name="password" id="password" value="&lt;%=pass%&gt;"/&gt;  &lt;input type="submit" value="submit"/&gt;  &lt;/form&gt;  &lt;%  String username = request.getParameter("username");  String password = request.getParameter("password");  if (username != null &amp;&amp; password != null) {  // new DBUtil();  // 设置cookie  if (username.equals(DBUtil.getUsername()) &amp;&amp; password.equals(DBUtil.getPassword())) {  session.setAttribute("username", username);  Cookie userw = new Cookie("username",username);  Cookie passw = new Cookie("password",password);  userw.setMaxAge(60*60*24*7);  passw.setMaxAge(60*60*24*7);  response.addCookie(passw);  response.addCookie(userw);  response.sendRedirect("./listStudent");  } else {  out.println("用户名或密码错误");    }  }  %&gt;  &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>add页面<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="com.example.demo2.Student" %&gt;&lt;%--  Created by IntelliJ IDEA.  User: ASUS  Date: 2023/9/2  Time: 10:59  To change this template use File | Settings | File Templates.  --%&gt;  &lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;添加信息&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;form action="${pageContext.request.contextPath}/addStudent"&gt;  &lt;table&gt;  &lt;tr&gt;请输入要添加的学生信息:&lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;姓名:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="text" name="name"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;性别:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="text" name="sex"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;年龄:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="number" name="age"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;成绩:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="number" name="score"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;&lt;input type="submit" value="提交" &gt;&lt;/td&gt;&gt; &lt;/tr&gt;  &lt;/table&gt;    &lt;/form&gt;    &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>delete<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;Title&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;form action="${pageContext.request.contextPath}/deleteStudent"&gt;  &lt;label&gt;请输入要删除的学生信息:&lt;/label&gt;  &lt;label&gt;  &lt;input type="text" name = "name"/&gt;  &lt;/label&gt;  &lt;/form&gt;    &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>update<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;Title&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;form action="${pageContext.request.contextPath}/updateStudent"&gt;  &lt;table&gt;  &lt;tr&gt;请输入要修改的学生信息:&lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;姓名:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="text" name="name"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;性别:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="text" name="sex"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;年龄:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="number" name="age"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;成绩:&lt;/td&gt;  &lt;td&gt;&lt;label&gt;  &lt;input type="number" name="score"&gt;  &lt;/label&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;&lt;input type="submit" value="提交" &gt;&lt;/td&gt;&gt; &lt;/tr&gt;  &lt;/table&gt;  &lt;/form&gt;  &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ASC<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="com.example.demo2.Dao.StudentDao" %&gt;  &lt;%@ page import="java.util.List" %&gt;  &lt;%@ page import="com.example.demo2.Student" %&gt;&lt;%--  Created by IntelliJ IDEA.  User: ASUS  Date: 2023/9/1  Time: 22:29  To change this template use File | Settings | File Templates.  --%&gt;  &lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;Title&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;table width="800" frame="box" align="center"&gt;  &lt;tr&gt;  &lt;h1 align="center"&gt;学生信息管理系统Web版&lt;/h1&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;%-- &lt;th height="35"&gt;序号&lt;/th&gt;--%&gt;  &lt;th&gt;姓名&lt;/th&gt;  &lt;th&gt;性别&lt;/th&gt;  &lt;th&gt;分数&lt;/th&gt;  &lt;/tr&gt;  &lt;%---没有加jdbc注册呀--%&gt;  &lt;%--出现的问题：需要把对应的数据库驱动jar包放在tomcat的lib目录下 --%&gt;&lt;%  List&lt;Student&gt; students = (List&lt;Student&gt;) request.getAttribute("students");  for (Student student : students) {  %&gt;  &lt;tr&gt;  &lt;%-- &lt;td align="center"&gt;&lt;%=student.getId()%&gt;&lt;/td&gt;--%&gt;  &lt;td align="center"&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;  &lt;td align="center"&gt;&lt;%=student.getSex()%&gt;&lt;/td&gt;  &lt;td align="center"&gt;&lt;%=student.getScore()%&gt;&lt;/td&gt;  &lt;%  }  %&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;th&gt; &lt;a href="deleteStudent.jsp"&gt;删除某个学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="addStudent.jsp"&gt;添加学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="updateStudent.jsp"&gt;修改学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="./listDesc"&gt;按照成绩降序查看&lt;/a&gt; &lt;/th&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>DESC<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;Title&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;table width="800" frame="box" align="center"&gt;  &lt;tr&gt;  &lt;h1 align="center"&gt;学生信息管理系统Web版&lt;/h1&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;%-- &lt;th height="35"&gt;序号&lt;/th&gt;--%&gt;  &lt;th&gt;姓名&lt;/th&gt;  &lt;th&gt;性别&lt;/th&gt;  &lt;th&gt;分数&lt;/th&gt;  &lt;/tr&gt;  &lt;%---没有加jdbc注册呀--%&gt;  &lt;%--出现的问题：需要把对应的数据库驱动jar包放在tomcat的lib目录下 --%&gt;&lt;%  List&lt;Student&gt; students = (List&lt;Student&gt;) request.getAttribute("students");  for (Student student : students) {  %&gt;  &lt;tr&gt;  &lt;%-- &lt;td align="center"&gt;&lt;%=student.getId()%&gt;&lt;/td&gt;--%&gt;  &lt;td align="center"&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;  &lt;td align="center"&gt;&lt;%=student.getSex()%&gt;&lt;/td&gt;  &lt;td align="center"&gt;&lt;%=student.getScore()%&gt;&lt;/td&gt;  &lt;%  }  %&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;th&gt; &lt;a href="deleteStudent.jsp"&gt;删除某个学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="addStudent.jsp"&gt;添加学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="updateStudent.jsp"&gt;修改学生信息&lt;/a&gt; &lt;/th&gt;  &lt;th&gt;&lt;a href="./listStudent"&gt;按照成绩降序查看&lt;/a&gt; &lt;/th&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/body&gt;  &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="/2023/08/27/yu-yan-ji-gong-ju/java-xue-xi/"/>
      <url>/2023/08/27/yu-yan-ji-gong-ju/java-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>使用包来管理类，区别命名空间，相当于文件夹</p><p><strong>包也有访问权限</strong></p><p>命名格式： package pkg1[.pkg2[.pkg3]]</p><p>package net.java.util</p><p><strong>访问其他包：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">package1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>package2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname <span class="token operator">|</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//例如：</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span> <span class="token comment">//使用通配符时，不会导入包的子包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回一个对象的克隆<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 两个对象是否相等<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当前线程等待<span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  唤醒该对象上的某个线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型标记符</p><blockquote><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> xxx <span class="token operator">&lt;</span>泛型标记符<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//泛型接口</span><span class="token keyword">interface</span> xxx <span class="token generics"><span class="token punctuation">&lt;</span>XXX<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment">//泛型方法</span><span class="token keyword">class</span> xxx <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span>XXX<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> xxx <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>### 通配符<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> 来代替具体的参数 例如： `<span class="token generics"><span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span></span>` ## <span class="token class-name">Java</span>数据结构### <span class="token class-name">Bitset</span>类一种用来保存位值的数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">方法：```shellclear() 将所有位设为false,也可以指定位置设置位falseset(int index)  指定位置设置为true 也可指定设置为false，指定位置可以为区间toString()  get(int index)  返回指定位置的位值nextSetBit(int start) 取start及之后的第一个为true的位置 //基本运算void and(Bitset set) &amp; or()    集合取较小的并集xor()  ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token class-name">Object</span> e <span class="token punctuation">)</span> 默认为从末尾加元素，也可指定位置<span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> c<span class="token punctuation">)</span> 将集合c中的元素加到末尾或指定位置开始<span class="token function">addElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  加到末尾，大小增加<span class="token number">1</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  是否包含xxx<span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> c<span class="token punctuation">)</span> 是否包含c中所有元素toArray 返回一个数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ArrayList-方法"><a href="#ArrayList-方法" class="headerlink" title="ArrayList 方法"></a>ArrayList 方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回arraylist中指定元素的索引<span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 转为数组<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   遍历<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedList-链表"><a href="#LinkedList-链表" class="headerlink" title="LinkedList 链表"></a>LinkedList 链表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">addcontainsremove<span class="token function">put</span><span class="token punctuation">(</span>element <span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">iterator <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">new</span> xxx<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">hastNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 下一个是否可以访问it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ 匹配末尾位置  <span class="token operator">^</span> 匹配开头位置<span class="token operator">*</span> 匹配前一个字符的<span class="token number">0</span>次或n次  例如： zo<span class="token operator">*</span> 会匹配z zo zoo zooo z<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  等<span class="token operator">+</span> 匹配前一个字符一次或多次u        zo<span class="token operator">+</span> 匹配 zo zoo zooo zo<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 等<span class="token operator">?</span> 匹配前一个字符<span class="token number">0</span>次或<span class="token number">1</span>次           zo<span class="token operator">?</span>      z  zo<span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span>  匹配 n 到 m 次<span class="token punctuation">{</span>n<span class="token punctuation">}</span>      n 次<span class="token operator">?</span> <span class="token operator">+</span> 其他限定符，表示匹配非贪心，默认的匹配会尽力匹配较长的满足条件的字符串，使用这个后尽力匹配较短的字符串<span class="token punctuation">.</span>  匹配任意单个字符<span class="token comment">//</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> 匹配pattern 并捕获他的子表达式<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span>pattern<span class="token punctuation">)</span> 不捕获子表达式<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>pattern<span class="token punctuation">)</span> 前面的字符匹配到之后，判断后面的是否能够匹配pattern 如果能那么就捕获，否则不匹配<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>pattern<span class="token punctuation">)</span> 反向捕获，不捕获包含patter的字符串<span class="token comment">//规则集</span>x<span class="token operator">|</span>y 匹配x或y<span class="token punctuation">[</span>xyz<span class="token punctuation">]</span> 字符集，匹配三者的任一字符<span class="token punctuation">[</span><span class="token operator">^</span>xyz<span class="token punctuation">]</span> 反向捕获<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>  匹配a<span class="token operator">-</span>z 中的任一字符<span class="token punctuation">[</span><span class="token operator">^</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span> 反向匹配不包含的<span class="token comment">//</span>\b     border 以这个符号之前的字符<span class="token punctuation">(</span>串<span class="token punctuation">)</span>为边界的匹配\<span class="token class-name">B</span>     非边界匹配\cx    x 为<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span> 或 <span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span> 匹配ctrl <span class="token operator">+</span> x\d     数字匹配，十进制<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\<span class="token class-name">D</span>     <span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\f     匹配换页符\n     换行符\r     匹配回车\w     匹配字类字符 <span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\<span class="token class-name">W</span>     非字类字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p><strong><u>Socket编程</u></strong></p><h2 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h2><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>免去了使用匿名方法的麻烦，并且给予 Java 简单但是强大的函数化的编程能力</p><h3 id="日期API"><a href="#日期API" class="headerlink" title="日期API"></a>日期API</h3><p>LocalData/LocalTime</p><h2 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h2><p>流表示包含着一系列元素的集合，我们可以对其做不同类型的操作，类似于流水线一样，对集合进行不同的操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//建立一个arrays</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//转化为stream对象</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//去重</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//过滤</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历</span><span class="token comment">/*Arrays.asList(-1,1,1,2,3) //建立一个arrays                .stream() //转化为stream对象                .distinct()//去重                .filter((Integer integer) -&gt; integer &gt; 0)//过滤                .forEach(integer -&gt; System.out.println(integer));//遍历*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">单列数组<span class="token operator">:</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>数组<span class="token operator">:</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Stream</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>双列集合<span class="token operator">:</span> map等， 将其转化为单列集合后再创建<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"呃呃呃"</span> <span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"又又又"</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数为匿名函数</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转化元素类型或着计算，参数为function，function 中的第二个参数是转化类型</span><span class="token comment">/*示例:   Arrays.asList(-1,1,1,2,3) //建立一个arrays                .stream() //转化为stream对象                .distinct()//去重                .map(new Function&lt;Integer, String&gt;() {                    @Override                    public String apply(Integer integer) {                        return integer.toString();                    }                }).forEach(new Consumer&lt;String&gt;() {            @Override            public void accept(String s) {                System.out.println(s);            }        }); 简化：   Arrays.asList(-1,1,1,2,3) //建立一个arrays                .stream() //转化为stream对象                .distinct()//去重                .map(integer -&gt; integer.toString()).forEach(s -&gt; System.out.println(s));*/</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去重，依赖于Object 中的equals,如果重写了</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//限制流的最大长度</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 跳过前几个元素，返回之后的元素</span><span class="token function">flatmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把一个对象转化为多个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终结操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前流中的元素个数，</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">/*Optional&lt;Integer&gt; max = Arrays.asList(1, -1, 2, 3, 1).stream()//转化为stream对象                .distinct()//去重                .sorted((o1, o2) -&gt; o2 - o1)                .limit(2)                .max((o1, o2) -&gt; o1 - o2);        System.out.println(max.get());*/</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//将流转换为集合</span><span class="token comment">/*  List&lt;Integer&gt; collect = Arrays.asList(1, -1, 2, 3, 1).stream()//转化为stream对象                .distinct()//去重                .sorted((o1, o2) -&gt; o2 - o1)                .limit(2)                .collect(Collectors.toList());        System.out.println(collect);*/</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是否有符合的</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//全符合</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//随机获取一个满足条件的元素</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到第一个满足条件的元素</span><span class="token comment">/*  Optional&lt;Integer&gt; any = Arrays.asList(2, -1, 2, 3, 1).stream()//转化为stream对象                .distinct()//去重                .filter(o -&gt; o &gt; 0)                .findAny();        any.ifPresent(integer -&gt; System.out.println(integer));*/</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//归并，参数1是初始值，参数二是匿名函数</span><span class="token comment">/*Integer reduce = Arrays.asList(2, -1, 2, 3, 1).stream()//转化为stream对象                .distinct()//去重                .reduce(0, ((integer, integer2) -&gt; integer + integer2));        System.out.println(reduce);       */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Optional </p><p>将具体数据封装到里卖弄可以避免空指针</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">&gt;</span></span> author <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author1 <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Rahul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> author <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不为空才会执行方法</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为空时返回自己设定的默认返回值</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为空时返回自己设置的Throwable对象</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过滤</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个抽象方法的是函数接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&amp;&amp;</span><span class="token comment">/*  Arrays.asList(1,2,3,4)                .stream()                .filter(((Predicate&lt;Integer&gt;) integer -&gt; integer &gt; 0).and(integer -&gt; integer &gt; 2))                .forEach(o -&gt; System.out.println(o)); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法引用</p><p>lambda中只写了一行代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//格式：</span><span class="token comment">//类或对象名::方法名</span>构造器引用<span class="token operator">:</span> 类名<span class="token operator">::</span><span class="token keyword">new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化：</p><p>Interger类型与int类型比较时会自动拆箱和打包，所以会花费时间，使用mapToInt等来将steam中的数据数据提前转化即可减少消耗时间</p><p>并行流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//转化为并行流</span>    或者直接  <span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>即可<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调试用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><p>POJO普通的java对象</p><ul><li><p>MyBaits</p></li><li><p>IOC容器<br>常用接口(推荐使用注解+java配置类)</p></li></ul><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><ul><li>IOC控制反转</li><li>DI依赖注入</li></ul><ol><li>xml创建示例<ol><li>无参<ul><li>创建一个spring 约束的xml文件,进行配置，语法:</li></ul></li></ol></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!---  bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件信息    -   id属性：bean的唯一标识,方便后期获取Bean！    -   class属性：组件类的全限定符！    -   注意：要求当前组件类必须包含无参数构造函数！--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>组件名，随便起<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>指定类的路径<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2. 静态工厂类</code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ClientService<span class="token punctuation">"</span></span>  <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  - factory-bean属性：指定当前容器中工厂Bean 的名称。    - factory-method: 指定实例工厂方法名。注意，实例方法必须是非static的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.非静态工厂</code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 将工厂类进行ioc配置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.DefaultServiceLocator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 根据工厂对象的实例工厂方法进行实例化组件对象 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>  <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>  <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createClientServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!---   factory-bean属性：指定当前容器中工厂Bean 的名称。    - factory-method: 指定实例工厂方法名。注意，实例方法必须是非static的！ --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4. DI注入</code></pre><ul><li>无参构造<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">将两个类全部放在ioc容器中<span class="token comment">&lt;!-- 引用类声明--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userSetvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.ely.ioc_02.UserService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 构造器注入,引用构造函数--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- value 是直接赋予的值，ref引用其他bean的表示--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.ely.ioc_02.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>有参构造<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token keyword">int</span> age <span class="token punctuation">,</span> <span class="token class-name">String</span> name <span class="token punctuation">,</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 使用有参构造函数来进行配置，需要把参数一一确定--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ely.ioc_02.UserService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Elysia<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.ely.ioc_02.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong><u>setter方法 </u></strong><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simpleMovieLister<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.SimpleMovieLister<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- setter方法，注入movieFinder对象的标识id       name = 属性名  ref = 引用bean的id值   --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movieFinder<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movieFinder<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- setter方法，注入基本数据类型movieNamename 是原setter方法:setMovieName name 值 : movieName value= 基本类型值   --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movieName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>消失的她<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movieFinder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.MovieFinder<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>IOC使用示例xml<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式1: 根据id获取</span><span class="token comment">//没有指定类型,返回为Object,需要类型转化!</span><span class="token class-name">HappyComponent</span> happyComponent <span class="token operator">=</span>         <span class="token punctuation">(</span><span class="token class-name">HappyComponent</span><span class="token punctuation">)</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"bean的id标识"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用组件对象        </span>happyComponent<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式2: 根据类型获取</span><span class="token comment">//根据类型获取,但是要求,同类型(当前类,或者之类,或者接口的实现类)只能有一个对象交给IoC容器管理</span><span class="token comment">//配置两个或者以上出现: org.springframework.beans.factory.NoUniqueBeanDefinitionException 问题</span><span class="token class-name">HappyComponent</span> happyComponent <span class="token operator">=</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">HappyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>happyComponent<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式3: 根据id和类型获取</span><span class="token class-name">HappyComponent</span> happyComponent <span class="token operator">=</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"bean的id标识"</span><span class="token punctuation">,</span> <span class="token class-name">HappyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>happyComponent<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <span class="token keyword">instanceof</span> 指定的类型』的返回结果，只要返回的是<span class="token boolean">true</span>就可以认定为和类型匹配，能够获取到。<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring_03.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HappyComponent</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">HappyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bean<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>初始化和销毁方法，类似与Tomcat调用servlet方法<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">在xml中指定 init_method和destory_method即可，类的方法可以自己设置，但是必须要保证是public和void 通过 scop = "" singleton (默认) 单例 每次通过ioc只会实例一个对象，不会产生多个实例prototype 多个实例，每次通过ioc都会实例一个新的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>基于FactoryBean来实例化对象</li><li>工厂Bean也会放入ioc容器中，想要获取只需在 id之前加个&amp;即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HappyFactoryBean</span> <span class="token keyword">implements</span> <span class="token comment">//工厂bean</span><span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HappyComponent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token comment">// 定义实例化的逻辑  </span><span class="token keyword">public</span> <span class="token class-name">HappyComponent</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token class-name">HappyComponent</span> happyComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HappyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> happyComponent<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//定义实例化的类型，自动返回到ioc容器中  </span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token class-name">HappyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring_04.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HappyComponent</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"happyComponent"</span><span class="token punctuation">,</span> <span class="token class-name">HappyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bean<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//不需要再使用静态工厂了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>happyComponent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.ely.ioc_04.HappyFactoryBean<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>jdbcTemplate + Druid + ioc+properties示例<br>普通情况下使用Druid 和 jdbcTemplate,非常繁琐<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///studb?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配置驱动  </span>dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配置用户名  </span>dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配置密码  </span>dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1224"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//实例化对象  </span><span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置数据源  </span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行sql  </span><span class="token comment">/**  * update DDL DML DCL  * queryForObject 查询单个值  * query 查询多个值  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用ioc + 外部配置文件的导入方式，可以简化操作<br>properties文件<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">//配置数据库url<span class="token key attr-name">ely.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/studb  </span>//配置驱动程序<span class="token key attr-name">ely.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver  </span>//配置用户信息<span class="token key attr-name">ely.username</span><span class="token punctuation">=</span><span class="token value attr-value">root  </span><span class="token key attr-name">ely.password</span><span class="token punctuation">=</span><span class="token value attr-value">1224</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>pom文件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 读入外部配置文件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--配置Druid--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ely.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ely.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ely.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ely.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- ref引用其他对象即可--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>java代码:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> testForIoc <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//创建ioc同期  </span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-01.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取jdbcTemplate组件  </span><span class="token class-name">JdbcTemplate</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行sql语句  </span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into students (id,name,gender,age,class) values(?,?,?,?,?)"</span><span class="token punctuation">;</span>  <span class="token comment">//执行sql  </span><span class="token keyword">int</span> update <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"一班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>  sql <span class="token operator">=</span> <span class="token string">"select * from students where name = ?"</span><span class="token punctuation">;</span>  <span class="token class-name">Student</span> student1 <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>rs<span class="token punctuation">,</span> rowNum<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span><span class="token function">setClasses</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> student<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询所有  </span><span class="token comment">//rouwMapper有实现类，当类变量与数据库一致时可以直接映射  </span>sql <span class="token operator">=</span> <span class="token string">"select id,name,gender,age,class as classes from students"</span><span class="token punctuation">;</span>  bean<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>`````xml缺点<span class="token operator">:</span><span class="token number">1.</span> 注入的属性必须添加setter方法、代码结构乱！    <span class="token number">2.</span> 配置文件和<span class="token class-name">Java</span>代码分离、编写不是很方便！    <span class="token number">3.</span> <span class="token constant">XML</span>配置文件解析效率低#### 通过注解来使用ioc<span class="token number">1.</span> 类上加<span class="token annotation punctuation">@IoC</span><span class="token number">2.</span> xml配置要扫描的包```xml  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置自动扫描的包 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1.</span>包要精准<span class="token punctuation">,</span>提高性能<span class="token operator">!</span>         <span class="token number">2.</span>会扫描指定的包和子包内容         <span class="token number">3.</span>多个包可以使用<span class="token punctuation">,</span>分割 例如<span class="token operator">:</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>controller<span class="token punctuation">,</span>com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>service等    <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.atguigu.components"</span><span class="token operator">/</span><span class="token operator">&gt;</span>````排除指定组件```xml<span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.atguigu.components"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> context<span class="token operator">:</span>exclude<span class="token operator">-</span>filter标签：指定排除规则 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>exclude<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>排除了<span class="token class-name">Controller</span>注解<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>扫描指定组件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span><span class="token comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span><span class="token comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.ioc.components<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>周期注释<ul><li>@PostConstruct  //注解制指定初始化方法</li><li>@PostConstruct  //注解制指定初始化方法</li></ul></li><li>作用域配置<ul><li>@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON) //单例,默认值</li><li>@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) //多例</li></ul></li></ul><h3 id="AOP的用法"><a href="#AOP的用法" class="headerlink" title="AOP的用法"></a>AOP的用法</h3><p> aop的位置限定符<br> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>modifiers<span class="token operator">-</span>pattern<span class="token operator">?</span> <span class="token keyword">return</span><span class="token operator">-</span>type<span class="token operator">-</span>pattern declaring<span class="token operator">-</span>type<span class="token operator">-</span>pattern<span class="token operator">?</span> method<span class="token operator">-</span>name<span class="token operator">-</span><span class="token function">pattern</span><span class="token punctuation">(</span>param<span class="token operator">-</span>pattern<span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><ul><li><p><code>modifiers-pattern</code>：可选项，用于匹配方法的修饰符，例如<code>public</code>、<code>private</code>等。如果不指定，则匹配所有修饰符。</p></li><li><p><code>return-type-pattern</code>：可选项，用于匹配方法的返回类型，例如<code>void</code>、<code>int</code>等。如果不指定，则匹配所有返回类型。</p></li><li><p><code>declaring-type-pattern</code>：可选项，用于匹配方法所属的类。如果不指定，则匹配所有类。</p></li><li><p><code>method-name-pattern</code>：用于匹配方法的名称，例如<code>doSomething</code>。通常是必需的部分。</p></li><li><p><code>param-pattern</code>：可选项，用于匹配方法的参数列表。例如，<code>(..)</code> 匹配任何参数列表，<code>(String)</code> 匹配只有一个 String 类型参数的方法，<code>(String, int)</code> 匹配有一个 String 和一个 int 参数的方法等。</p></li><li><p><code>throws-pattern</code>：可选项，用于匹配方法抛出的异常类型。</p></li></ul><h3 id="语法细节"><a href="#语法细节" class="headerlink" title="语法细节"></a>语法细节</h3><ul><li><p>第一位：execution( ) 固定开头</p></li><li><p>第二位：方法访问修饰符</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">private</span> 直接描述对应修饰符即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第三位：方法返回值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">String</span> <span class="token keyword">void</span> 直接描述返回值类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  注意：</p><p>  特殊情况&nbsp;不考虑&nbsp;访问修饰符和返回值</p><p>  execution(*&nbsp;*&nbsp;)&nbsp;这是错误语法</p><p>  execution( *) == 你只要考虑返回值 或者 不考虑访问修饰符 相当于全部不考虑了</p></li><li><p>第四位：指定包的地址</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">固定的包<span class="token operator">:</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>api <span class="token operator">|</span> service <span class="token operator">|</span> dao单层的任意命名<span class="token operator">:</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>*  <span class="token operator">=</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>api  com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>dao  <span class="token operator">*</span> <span class="token operator">=</span> 任意一层的任意命名任意层任意命名<span class="token operator">:</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">=</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>api<span class="token punctuation">.</span>erdaye com<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a  <span class="token punctuation">.</span><span class="token punctuation">.</span>任意层<span class="token punctuation">,</span>任意命名 用在包上<span class="token operator">!</span>注意<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>不能用作包开头   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> 错误语法  com<span class="token punctuation">.</span><span class="token punctuation">.</span>找到任何包下<span class="token operator">:</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第五位：指定类名称</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">固定名称<span class="token operator">:</span> <span class="token class-name">UserService</span>任意类名<span class="token operator">:</span> <span class="token operator">*</span>部分任意<span class="token operator">:</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token class-name">Impl</span>任意包任意类<span class="token operator">:</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第六位：指定方法名称</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">语法和类名一致任意访问修饰符<span class="token punctuation">,</span>任意类的任意方法<span class="token operator">:</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第七位：方法参数</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">第七位<span class="token operator">:</span> 方法的参数描述       具体值<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">)</span> 没有参数 <span class="token punctuation">(</span><span class="token punctuation">)</span>       模糊值<span class="token operator">:</span> 任意参数 有 或者 没有 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>任意参数的意识       部分具体和模糊<span class="token operator">:</span>         第一个参数是字符串的方法 <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>         最后一个参数是字符串 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span>String<span class="token punctuation">)</span>         字符串开头<span class="token punctuation">,</span><span class="token keyword">int</span>结尾 <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">)</span>         包含<span class="token keyword">int</span>类型<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>下面是一些切点表达式的示例：</p><ul><li><p><code>execution(* com.example.service.*.*(..))</code>：匹配<code>com.example.service</code>包中所有类的所有方法。</p></li><li><p><code>execution(public * com.example.service.MyService.doSomething())</code>：匹配<code>com.example.service.MyService</code>类的<code>doSomething</code>方法，该方法必须是<code>public</code>的。</p></li><li><p><code>execution(* com.example.controller.*.*(..))</code>：匹配<code>com.example.controller</code>包中所有类的所有方法。</p></li><li><p><code>execution(* com.example.service.*.*(..) throws java.lang.Exception)</code>：匹配<code>com.example.service</code>包中所有类的所有方法，其中方法抛出<code>java.lang.Exception</code>异常。</p></li><li><h3 id="springboot中使用aop"><a href="#springboot中使用aop" class="headerlink" title="springboot中使用aop"></a>springboot中使用aop</h3></li><li><ol><li>创建一个切面类。</li></ol><p>  在项目中创建一个切面类，通常使用 <code>@Aspect</code> 注解标识，以及需要的通知方法（例如，<code>@Before</code>、<code>@After</code>、<code>@Around</code> 等）。以下是一个简单的示例：</p><p>  javaCopy code</p><p>  <code>import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import org.springframework.stereotype.Component;  @Aspect @Component public class MyAspect {      @Before("execution(* com.example.demo.MyService.*(..))")     public void beforeMyServiceMethods() {         System.out.println("前置通知：在MyService方法执行前执行...");     } }</code></p><p>  在上面的示例中，我们创建了一个切面类 <code>MyAspect</code>，并使用 <code>@Before</code> 注解定义了一个前置通知，该通知在<code>com.example.demo.MyService</code>类的所有方法执行前被触发。</p></li></ul><ol start="2"><li><p>创建一个Spring Boot应用程序主类。</p><p> 在项目中创建一个Spring Boot应用程序主类，并添加 <code>@SpringBootApplication</code> 注解，以启动Spring Boot应用程序。例如：</p><p> javaCopy code</p><p> <code>import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class MyApplication {      public static void main(String[] args) {         SpringApplication.run(MyApplication.class, args);     } }</code></p></li><li><p>使用AOP。</p><p> 您可以在需要应用AOP的类或方法上添加注解。例如，在服务类 <code>MyService</code> 上添加 <code>@Service</code> 注解，以便Spring Boot能够管理它，并且AOP切面可以生效。</p><p> javaCopy code</p><p> <code>import org.springframework.stereotype.Service;  @Service public class MyService {      public void doSomething() {         System.out.println("业务逻辑执行...");     } }</code></p></li><li><p>运行应用程序。</p><p> 使用Spring Boot的自动配置和内嵌的Tomcat等组件，您可以直接运行应用程序。运行主应用程序类 <code>MyApplication</code>，应用程序将启动并应用AOP切面。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.ely.pojo.MyService.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当您调用 <code>MyService</code> 类中的 <code>doSomething</code> 方法时，AOP切面中的前置通知将在方法执行前被触发，输出相应的日志。</p><p>这就是在Spring Boot中使用AOP的基本步骤。您可以根据项目需求和复杂性，定义更多的切面和通知来处理横切关注点。 Spring Boot会自动处理AOP的配置，无需额外的XML配置。</p><h2 id="Mybaits框架"><a href="#Mybaits框架" class="headerlink" title="Mybaits框架"></a>Mybaits框架</h2><ul><li><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</p></li><li><p>SqlSessionFactory：是“生产”SqlSession的“工厂”。</p></li><li><p>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></li></ul><h3 id="命名返回别名"><a href="#命名返回别名" class="headerlink" title="命名返回别名"></a>命名返回别名</h3><p>方式一：<br>直接在xml中使用<typealias>命名</typealias></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以直接在任何任何地方使用限定符--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Autor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>类的全限定符<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span>   <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定包名，MyBaits可以会在包名下面搜搜需要的JavaBean ,自动批量将包下的所有类都起别名,别名就是首字母小写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在批量注解生效时可以使用这个来进行单个注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开启驼峰式自动映射，可以将 emp_id 自动映射为 empId<br>在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 具体配置 --&gt;</span>  <span class="token comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span>  <span class="token comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span>  <span class="token comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span>  <span class="token comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启事务自动提交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">opsession</span><span class="token punctuation">(</span>传入一个<span class="token boolean">true</span>即可<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><insert>语句可以去看看怎么设置自动增长</insert></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span><span class="token comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span><span class="token comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  insert into t_emp(emp_name,emp_salary)  values(#{empName},#{empSalary})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</p><p>使用&nbsp;<code>selectKey</code>&nbsp;帮助插入UUID作为字符串类型主键示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span>        <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT UUID() as id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>    INSERT INTO user (id, username, password)     VALUES (        #{id},        #{username},        #{password}    )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>使用resultMap</p><p> 使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRMResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span>  <span class="token comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_salary<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRM<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRMResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  select emp_id,emp_name,emp_salary from t_emp where emp_id=#{empId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <u>** 使用下面这种方式来获得config文件比较好 **</u></p></li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h3><p>使用动态 SQL 最常见情景是根据条件包含 where / if 子句的一部分。比如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select emp_id,emp_name,emp_salary from t_emp    <span class="token comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span>        <span class="token comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#{} --&gt;</span>            or emp_name=#{empName}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary <span class="token entity named-entity" title=">">&amp;gt;</span> 2000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            or emp_salary&gt;#{empSalary}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?         第二种情况：部分条件满足 WHERE emp_salary&gt;?         第三种情况：所有条件都不满足 没有where子句         --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-set标签"><a href="#4-3-set标签" class="headerlink" title="4.3 set标签"></a>4.3 set标签</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmployeeDynamic<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    update t_emp    <span class="token comment">&lt;!-- set emp_name=#{empName},emp_salary=#{empSalary} --&gt;</span>    <span class="token comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            emp_name=#{empName},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary <span class="token entity named-entity" title="<">&amp;lt;</span> 3000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            emp_salary=#{empSalary},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    where emp_id=#{empId}    <span class="token comment">&lt;!--         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?         第二种情况：部分条件满足 SET emp_salary=?         第三种情况：所有条件都不满足 update t_emp where emp_id=?            没有set子句的update语句会导致SQL语法错误     --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-choose-x2F-when-x2F-otherwise标签"><a href="#4-5-choose-x2F-when-x2F-otherwise标签" class="headerlink" title="4.5 choose/when/otherwise标签"></a>4.5 choose/when/otherwise标签</h3><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByConditionByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select emp_id,emp_name,emp_salary from t_emp    where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>emp_name=#{empName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary <span class="token entity named-entity" title="<">&amp;lt;</span> 3000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>emp_salary <span class="token entity named-entity" title="<">&amp;lt;</span> 3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>1=1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--     第一种情况：第一个when满足条件 where emp_name=?     第二种情况：第二个when满足条件 where emp_salary &lt; 3000     第三种情况：两个when都不满足 where 1=1 执行了otherwise     --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-foreach标签"><a href="#4-6-foreach标签" class="headerlink" title="4.6 foreach标签"></a>4.6 foreach标签</h3><p><strong>基本用法</strong></p><p>用批量插入举例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    collection属性：要遍历的集合    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串    index属性：这里起一个名字，便于后面引用        遍历List集合，这里能够得到List集合的索引值        遍历Map集合，这里能够得到Map集合的key --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span>    (#{emp.empName},#{myIndex},#{emp.empSalary},#{emp.empGender})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>批量更新时需要注意</strong></p><p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p><pre class="line-numbers language-.properties" data-language=".properties"><code class="language-.properties">atguigu.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的foreach标签如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- int updateEmployeeBatch(@Param("empList") List&lt;Employee&gt; empList) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmployeeBatch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update t_emp set emp_name=#{emp.empName} where emp_id=#{emp.empId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于foreach标签的collection属性</strong></p><p>如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Parameter 'empList' not found. Available parameters are [arg0, collection, list]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。</p><p><strong>抽取重复的SQL片段</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySelectSql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>引用已抽取的SQL片段</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySelectSql<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>MyBatis高级扩展</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>5.1 Mapper批量映射优化</p><ol><li><p>需求</p><p> Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。</p></li><li><p>配置方式</p><p> Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。</p></li><li><p>资源创建要求</p></li></ol><ul><li><p>Mapper 接口和 Mapper 配置文件名称一致</p><ul><li>Mapper 接口：EmployeeMapper.java</li><li>Mapper 配置文件：EmployeeMapper.xml</li></ul></li><li><p>Mapper 配置文件放在 Mapper 接口所在的包内</p><ul><li><p>可以将mapperxml文件放在mapper接口所在的包！</p></li><li><p>可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件</p></li></ul></li></ul><h2 id="SpringMVC框架-mvc-model-view-controller"><a href="#SpringMVC框架-mvc-model-view-controller" class="headerlink" title="SpringMVC框架 mvc&nbsp;model-view-controller"></a>SpringMVC框架 mvc&nbsp;model-view-controller</h2><p>基于Servlet API原始web框架</p><ul><li>cookie操作<pre class="line-numbers language-java" data-language="java"><code class="language-java">### <span class="token number">2.3</span> 接收<span class="token class-name">Cookie</span>数据可以使用 `<span class="token annotation punctuation">@CookieValue</span>` 注释将 <span class="token constant">HTTP</span> <span class="token class-name">Cookie</span> 的值绑定到控制器中的方法参数。考虑使用以下 cookie 的请求：```java<span class="token constant">JSESSIONID</span><span class="token operator">=</span><span class="token number">415</span><span class="token constant">A4AC178C59DACE0B2C9CA727CDD84</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>下面的示例演示如何获取 cookie 值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> getCookie <span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"cookieName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//存cookie  </span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"cookieName"</span><span class="token punctuation">,</span> <span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>转发和重定向</li><li>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用&nbsp;<code>redirect</code>&nbsp;或者&nbsp;<code>forward</code>&nbsp;关键字来实现重定向。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redirect-demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">redirectDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 重定向到 /demo 路径 </span>    <span class="token keyword">return</span> <span class="token string">"redirect:/demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/forward-demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">forwardDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 转发到 /demo 路径</span>    <span class="token keyword">return</span> <span class="token string">"forward:/demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置可以访问静态资源<br>在 SpringMVC 配置配置类：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebMvc</span>  <span class="token comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.atguigu.controller"</span><span class="token punctuation">)</span> <span class="token comment">//TODO: 进行controller扫描</span><span class="token comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment">//配置jsp对应的视图解析器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//快速配置jsp模板语言对应的</span>        registry<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/views/"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u> mapper.xml文件一定要注意名字和mapper.java文件想相同否则绑定不了</u></p><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p>用于简化开发，简化配置，简化整合，简化部署，简化监视，简化运维</p><p>springboot 项目都有一个父项目，父项目版本仲裁中心，把所有常见的jar的依赖版本都声明好了</p><p>统一进行配置<br>pojo实体类自动读取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>默认的静态资源路径为：</strong></p><p><strong>· classpath:/META-INF/resources/</strong></p><p><strong>· classpath:/resources/</strong></p><p><strong>· classpath:/static/</strong></p><p><strong>· classpath:/public/</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># web相关的配置</span><span class="token comment"># https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token comment"># 端口号设置</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># 项目根路径</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /boot<span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">web</span><span class="token punctuation">:</span> <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment"># 配置静态资源地址,如果设置,会覆盖默认值 </span><span class="token key atrule">static-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/webapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>拦截器声明</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor拦截器的preHandle方法执行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor拦截器的postHandle方法执行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor拦截器的afterCompletion方法执行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>拦截器配置</p><p> 正常使用配置类，只要保证，<strong>配置类要在启动类的同包或者子包方可生效！</strong></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">MyInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyInterceptor</span> myInterceptor <span class="token punctuation">;</span>    <span class="token comment">/**     * /**  拦截当前目录及子目录下的所有路径 /user/**   /user/findAll  /user/order/findAll     * /*   拦截当前目录下的以及子路径   /user/*     /user/findAll     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>添加druid连接池的基本配置</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment"># 连接池类型 </span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment"># Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下!</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/day01      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token comment"># 初始化时建立物理连接的个数</span>      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token comment"># 连接池的最小空闲数量</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token comment"># 连接池最大连接数量</span>      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>      <span class="token comment"># 获取连接时最大等待时间，单位毫秒</span>      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span>      <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span>      <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)</span>      <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">30000</span>      <span class="token comment"># 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)</span>      <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> select 1      <span class="token comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>      <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>      <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。</span>      <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span>      <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">-1</span>      <span class="token comment"># 合并多个DruidDataSource的监控数据</span>      <span class="token key atrule">use-global-data-source-stat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码分析，druid-spring-boot-3-starter目前最新版本是1.2.18，虽然适配了SpringBoot3，但缺少自动装配的配置文件，需要手动在resources目录下创建META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>文件内容如下!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot3<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span>DruidDataSourceAutoConfigure</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>加个插件</p><!--    SpringBoot应用打包插件--><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用maven的package进行打包<br>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token operator">&lt;</span>jar文件名<span class="token operator">&gt;</span><span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>-D<span class="token operator">&lt;</span>name<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token variable">`</span></span>：设置系统属性，可以通过<span class="token variable"><span class="token variable">`</span>System.getProperty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">`</span></span>方法在应用程序中获取该属性值。例如：<span class="token variable"><span class="token variable">`</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8080</span> myapp.jar<span class="token variable">`</span></span>。<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-X</span><span class="token variable">`</span></span>：设置JVM参数，例如内存大小、垃圾回收策略等。常用的选项包括：    - <span class="token variable"><span class="token variable">`</span>-Xmx<span class="token operator">&lt;</span>size<span class="token operator">&gt;</span><span class="token variable">`</span></span>：设置JVM的最大堆内存大小，例如 <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-Xmx512m</span><span class="token variable">`</span></span> 表示设置最大堆内存为512MB。    - <span class="token variable"><span class="token variable">`</span>-Xms<span class="token operator">&lt;</span>size<span class="token operator">&gt;</span><span class="token variable">`</span></span>：设置JVM的初始堆内存大小，例如 <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-Xms256m</span><span class="token variable">`</span></span> 表示设置初始堆内存为256MB。<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-Dspring.profiles.active</span><span class="token operator">=</span><span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span><span class="token variable">`</span></span>：指定Spring Boot的激活配置文件，可以通过<span class="token variable"><span class="token variable">`</span>application-<span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span>.properties<span class="token variable">`</span></span>或<span class="token variable"><span class="token variable">`</span>application-<span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span>.yml<span class="token variable">`</span></span>文件来加载相应的配置。例如：<span class="token variable"><span class="token variable">`</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-Dspring.profiles.active</span><span class="token operator">=</span>dev myapp.jar<span class="token variable">`</span></span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><p><a href="https://baomidou.com/pages/223848/#tablename">主要注解</a><br><code>@Version</code> 是 MyBatis 用于乐观锁（Optimistic Locking）实现的注解。乐观锁是一种并发控制机制，它用于处理多个用户或线程同时访问和修改相同数据的情况。<code>@Version</code> 注解的作用是指定一个实体类（Entity）中的属性，用于存储版本号信息，以便在更新操作时检测数据是否被其他用户或线程修改。<br>插件: ^f13de1</p><ul><li>MybatisPlusInterceptor</li></ul><p>该插件是核心插件,目前代理了&nbsp;<code>Executor#query</code>&nbsp;和&nbsp;<code>Executor#update</code>&nbsp;和&nbsp;<code>StatementHandler#prepare</code>&nbsp;方法<br>主要属性: 插件列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InnerInterceptor</span><span class="token punctuation">&gt;</span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些插件</p><ul><li><p>自动分页: PaginationInnerInterceptor</p></li><li><p>多租户: TenantLineInnerInterceptor</p></li><li><p>动态表名: DynamicTableNameInnerInterceptor</p></li><li><p>乐观锁: OptimisticLockerInnerInterceptor</p></li><li><p>sql 性能规范: IllegalSQLInnerInterceptor</p></li><li><p>防止全表更新与删除: BlockAttackInnerInterceptor<br>示例:</p></li><li><p>spring 需要用xml文件进行配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 其他属性 略 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatisPlusInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatisPlusInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interceptors<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paginationInnerInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paginationInnerInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 对于单一数据库类型来说,都建议配置该值,避免每次分页都去抓取数据库类型 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>H2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>springboot</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分页 </span>interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//乐观锁 </span>interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlockAttackInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//防全局修改和删除 return interceptor; }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>使用Lambda表表达式来方便快速写查询语句使用LambdaQueryWrapper来进行</li></ol><p>逻辑删除:<br>逻辑删除是一种在数据库中实现数据删除的方式，与物理删除不同，逻辑删除并不会真正从数据库中删除数据行，而是通过修改记录的状态或属性来表示数据已被删除。 ^86b436</p><ul><li><a href="https://baomidou.com/pages/49cc81/#select">LambdaQueryWrapper使用方式</a><pre class="line-numbers language-java" data-language="java"><code class="language-java">一些成员方法<span class="token punctuation">(</span>可以链式调用<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> <span class="token punctuation">,</span>数据库中的数据 <span class="token punctuation">,</span> 传入的关键字<span class="token punctuation">)</span> <span class="token comment">//进行模糊匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>分页插件的使用<br>自定义的 mapper#method 使用分页</li></ul><pre class="line-numbers language-none"><code class="language-none">IPage&lt;UserVo&gt; selectPageVo(IPage&lt;?&gt; page, Integer state);// or (class MyPage extends Ipage&lt;UserVo&gt;{ private Integer state; })MyPage selectPageVo(MyPage page);// orList&lt;UserVo&gt; selectPageVo(IPage&lt;UserVo&gt; page, Integer state);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;select id="selectPageVo" resultType="xxx.xxx.xxx.UserVo"&gt;    SELECT id,name FROM user WHERE state=#{state}&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="springboot实战练习"><a href="#springboot实战练习" class="headerlink" title="springboot实战练习"></a>springboot实战练习</h1><ul><li>读取配置文件<br>在一个config类中进行读取即可</li></ul><p><a href="https://www.zhihu.com/search?q=%E8%BF%87%E6%BB%A4%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:61876681%7D">过滤器</a>（Filter）：当你有一堆东西的时候，你只希望选择符合你要求的某一些东西。定义这些要求的工具，就是过滤器。</p><p><a href="https://www.zhihu.com/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:61876681%7D">拦截器</a>（Interceptor）：在一个流程正在进行的时候，你希望干预它的进展，甚至终止它进行，这是拦截器做的事情。</p><p>监听器（Listener）：当一个事件发生的时候，你希望获得这个事件发生的详细信息，而并不想干预这个事件本身的进程，这就要用到监听器。</p><ul><li>Filter 实现filter接口即可，同时使用WebFilter注解可以快速完成拦截配置<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">"filterImpl"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>  <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拦截了哦，杂鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Knife4j来生成api文档-springboot3适用"><a href="#Knife4j来生成api文档-springboot3适用" class="headerlink" title="Knife4j来生成api文档(springboot3适用)"></a>Knife4j来生成api文档(springboot3适用)</h2><p>只需要导入依赖即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-openapi3-jakarta-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># springdoc-openapi项目配置</span><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">swagger-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /swagger<span class="token punctuation">-</span>ui.html    <span class="token key atrule">tags-sorter</span><span class="token punctuation">:</span> alpha    <span class="token key atrule">operations-sorter</span><span class="token punctuation">:</span> alpha  <span class="token key atrule">api-docs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /v3/api<span class="token punctuation">-</span>docs  <span class="token key atrule">group-configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">'default'</span>      <span class="token key atrule">paths-to-match</span><span class="token punctuation">:</span> <span class="token string">'/**'</span>      <span class="token key atrule">packages-to-scan</span><span class="token punctuation">:</span> com.xiaominfo.knife4j.demo.web<span class="token comment"># knife4j的增强配置，不需要增强可以不配</span><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">setting</span><span class="token punctuation">:</span>    <span class="token key atrule">language</span><span class="token punctuation">:</span> zh_cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时使用注解即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"body参数"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BodyController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"普通body请求"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/body"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileResp</span><span class="token punctuation">&gt;</span></span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">FileResp</span> fileResp<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>fileResp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"普通body请求+Param+Header+Path"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Parameters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"文件id"</span><span class="token punctuation">,</span>in <span class="token operator">=</span> <span class="token class-name">ParameterIn</span><span class="token punctuation">.</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"请求token"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>in <span class="token operator">=</span> <span class="token class-name">ParameterIn</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"文件名称"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>in<span class="token operator">=</span><span class="token class-name">ParameterIn</span><span class="token punctuation">.</span><span class="token constant">QUERY</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/bodyParamHeaderPath/{id}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileResp</span><span class="token punctuation">&gt;</span></span> <span class="token function">bodyParamHeaderPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">FileResp</span> fileResp<span class="token punctuation">)</span><span class="token punctuation">{</span>       fileResp<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>fileResp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",receiveName:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",token:"</span><span class="token operator">+</span>token<span class="token operator">+</span><span class="token string">",pathID:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>fileResp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务之后访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> 即可</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><h2 id="使用Spring-Validation进行检验"><a href="#使用Spring-Validation进行检验" class="headerlink" title="使用Spring Validation进行检验"></a>使用<code>Spring Validation</code>进行检验</h2><p><a href="https://juejin.cn/post/7217267332657446972#heading-5">https://juejin.cn/post/7217267332657446972#heading-5</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/08/02/hou-duan/shu-ju-ku/"/>
      <url>/2023/08/02/hou-duan/shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>模式: 逻辑模式，是开发者可见的模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</li><li>外模式:子模式，用户模式，用户可见</li><li>内模式: 存储模式，是物理存储模式</li></ul><h2 id="schema-和-database-区别"><a href="#schema-和-database-区别" class="headerlink" title="schema 和 database 区别"></a>schema 和 database 区别</h2><p>database 是一栋楼，schema(模式) 是一个个房间，但是在mysql中两种没有区别。</p><ul><li>视图和表的区别：视图是表的子集，常用于将查询结果保存在视图中，方便再次调用</li><li>语法：’CREATE VIEW viewName AS 查询出来的表’</li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul><li>1NF 保证原子性即可，不可再分割了</li><li>2NF 要有主键，且不存在部份依赖，也就是其他非主键的部分要治理来于主键即可</li><li>3NF 非主键之间不存在传递依赖，例如 学号, 姓名, 年龄, 学院名称, 学院电话，满足第二范式，因为后面几个属性都要和主键相关联，不能独立存在，但是通过 学号 -&gt; 学生 -&gt; 所在院 -&gt; 院电话 ，所以存在传递依赖应修改为：学生：(学号, 姓名, 年龄, 所在学院)；学院：(学院，学院名称， 电话)。</li><li>BCNF 消除几个主键之间的传递依赖</li></ul><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><ul><li><p>Atomicity（原子性）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ul><h2 id="码"><a href="#码" class="headerlink" title="码"></a>码</h2><p>候选码：<br>主码：人为选择的候选码</p><h2 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h2><p>E-R模型是Entity-Relationship模型的缩写，是一种用于数据库设计的概念性数据模型。它用来描述现实世界中的数据之间的关系，以及这些数据的属性。E-R模型提供了一种图形化的方式来表示数据模型，使数据库设计师能够更容易地理解和规划数据库结构。</p><p>E-R模型包括以下几个核心概念：</p><ol><li><p>实体（Entity）：实体是现实世界中可以被识别的独立对象，例如人、物品、地点或概念。每个实体都有一些属性，用来描述这个实体的特征。</p></li><li><p>属性（Attribute）：属性是描述实体的特征或属性，它们用来存储有关实体的信息。例如，对于一个”人”实体，属性可以包括姓名、年龄、性别等。</p></li><li><p>关系（Relationship）：关系表示不同实体之间的联系或连接。关系可以是一对一、一对多或多对多的。例如，一个”雇员”实体可以与一个”部门”实体之间有一个”属于”关系，表示雇员属于某个部门。</p></li><li><p>主键（Primary Key）：主键是一个属性或属性组合，用来唯一标识实体集中的每个实体。它确保了每个实体都具有唯一的标识。</p></li><li><p>外键（Foreign Key）：外键是一个实体中的属性，它引用了另一个实体的主键，用于建立实体之间的关联。</p></li></ol><p>通过使用E-R模型，数据库设计师可以更好地理解数据之间的关系，从而规划数据库的结构，包括表的设计、关系的建立和数据的存储。一旦E-R模型完成，它可以用作设计数据库架构的基础，进而创建物理数据库模式（如关系模型），以实际存储和管理数据。这有助于确保数据库能够有效地存储和检索信息，并满足应用程序的需求。</p><h1 id="自联结，变量不会，补一补去"><a href="#自联结，变量不会，补一补去" class="headerlink" title="自联结，变量不会，补一补去"></a>自联结，变量不会，补一补去</h1><p>打开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数据类型</strong></p><p>关系型数据库：建立在关系模型基础上，由多张相互链接的二维表组成的数据库</p><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><ol><li><p><strong>数值类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TINYINT 1byte -128 - 127  0 - 255 /*后面加上unsigned 即可指定为无符号*/SMALLINT 2MEDIUMINT 3INT 4BIGINT 8FLOAT 4DOUBLE 8DECIMAL 看精度和标度  125.25 精度为5 标度为2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>字符串类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHAR() 定长字符串VARCHAR 根据内容计算字符串长度TINYTEXT 短文本字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>日期类</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DATE YYYY-MM-DDTIME HH:MM:SSYEAR YYYYDATETIME YYYY-MM-DD HH:MM:SSTIMESTAMP YYYY-MM-DD HH:MM:SS 时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用函数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DATE_FORMAT()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>时间戳记</strong>或称为<strong>时间标记</strong>（英语：timestamp）是指字符串或编码信息用于辨识记录下来的时间日期。国际标准为<a href="https://zh.wikipedia.org/wiki/ISO_8601" title="ISO 8601">ISO 8601</a>。</p><p>时间戳记的范例如下：</p><ul><li>2016-12-25T00:15:22Z</li><li>2005-10-30 10:45&nbsp;<a href="https://zh.wikipedia.org/wiki/UTC" title="UTC">UTC</a></li><li>Sat Jul 23 02:16:57 2005</li><li>2016年12月25日 (日) 00:14 (UTC)</li></ul></blockquote></li></ol><p>注释 # 或者 /**/</p><ol><li>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头 ^c501f6</li><li>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</li><li>DQL (Data Query Language 数据查询语言 )用于查询数据</li><li>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</li></ol><h3 id="DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头"><a href="#DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头" class="headerlink" title="DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头"></a>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES 查询所有的数据库SELECT DATABASE(); 查询当前所处数据库CREATE DATABASE  创建DROP DATABASE XXX 删除USE xxx  使用数据库SHOW TABLES 查询当前数据库的所有表DESC 表名   查询表结构SHOW CREATE TABLE 表明 查询指定表的建表语句字段1 字段1类型 COMMENT 'XXX',/*注释*/     ........    ) COMMENTT 'XXX'/*注释可以省略*//*字符串类型是varchar(指定的字符长度)*//*修改表*/ALTER TABLE tablename 1.ADD字段名 类型 comment xxx 添加表头2.CHANGE 旧 新 类型 comment xxx 修改3.DROP name4.RENAME TO name 修改表名DROP TABLE name 删除TRUNCATE TABLE name 删除并重新创建同名表，数据依旧会删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据"><a href="#DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据" class="headerlink" title="DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据"></a>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*添加数据*/INSERT INTO 表名(字段名) VALUES (数值) 给指定字段添加数据INSERT INTO 表名  VALUES (数值) 给所有字段加上数据INSERT INTO 表明(字段名) VALUES (数据) ,(数据)INSERT INTO 表明 VALUE (数据),(数据).../*修改*/UPDATE 表名 SET 字段名=值, .... WHERE 条件DELETE 表名 (WHERE 条件) /*删除*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>语句：INSERT</p><p>前提:<em><strong><u>获得权限</u></strong></em></p><p>用法：</p><blockquote><p> 插入完整的行；</p><p> 插入行的一部分；</p><p> 插入某些查询的结果。</p></blockquote><p>语法：</p>   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers VALUES('1000000006',  'Toy Land',  '123 Any Street',  'New York',  'NY',  '11111',  'USA',  NULL,  NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   更加安全的操作,将要插入的列也列出</p>   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers(cust_id,  cust_name,  cust_address,  cust_city,  cust_state,  cust_zip,  cust_country,  cust_contact,  cust_email) VALUES('1000000006',  'Toy Land',  '123 Any Street',  'New York',  'NY',  '11111',  'USA',  NULL,  NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>插入列的一部分，语法和上面一样，只是不需要插入的列可以省略不写，列名不写，对应的数据也不写</p></li><li><p>插入检索出的数据</p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id,  cust_contact,  cust_email,  cust_name,  cust_address,  cust_city,  cust_state,  cust_zip,  cust_country FROM CustNew;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>它使用的是列的位置，因此 SELECT 中的第一列（不管</u></p><p><u>其列名）将用来填充表列中指定的第一列，第二列将用来填充表列中</u></p><p><u>指定的第二列，如此等等</u></p><p>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</p><p>INSERT 通常只插入一行。要插入多行，必须执行多个 INSERT 语句。</p><p>INSERT SELECT是个例外，它可以用一条INSERT插入多行，不管SELECT</p><p>语句返回多少行，都</p></li><li><p>从一个表复制到另一个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE CustCopy AS SELECT * FROM Customers;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>SELECT INTO 是试验新 SQL 语句前进行表复制的很好工具。先进行复</u></p><p><u>制，可在复制的数据上测试 SQL 代码，而不会影响实际的数据。</u></p><h2 id="更新与删除"><a href="#更新与删除" class="headerlink" title="更新与删除"></a>更新与删除</h2><h3 id="更新：UPDATE-注意要用WHERE-否则会出事"><a href="#更新：UPDATE-注意要用WHERE-否则会出事" class="headerlink" title="更新：UPDATE 注意要用WHERE 否则会出事"></a>更新：UPDATE 注意要用WHERE 否则会出事</h3><ol><li><p>更新特定行</p><p>语法：</p><p> 要更新的表；</p><p> 列名和它们的新值；</p><p> 确定要更新哪些行的过滤条件。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers SET cust_email = 'kim@thetoystore.com' WHERE cust_id = '1000000005';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>UPDATE 语句以 WHERE 子句结束，它告诉 DBMS 更新哪一行。没有 WHERE</p><p>子句，DBMS 将会用这个电子邮件地址更新 Customers 表中的所有行，</p><p>这不是我们希望的。</p></blockquote></li><li><p>更新特定列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers SET cust_contact = 'Sam Roberts',  cust_email = 'sam@toyland.com' WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在更新多个列时，只需要使用一条 SET 命令，每个“列=值”对之间用</p><p>UPDATE 语句中可以使用子查询，使得能用 SELECT 语句检索出的数据</p><p>更新列数据</p><p>要删除某个列的值，可设置它为 NULL（假如表定义允许 NULL 值）</p></blockquote></li></ol></li></ol><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>DELETE  注意WHERE 缺少是会出事的</p><p> 从表中删除特定的行</p><p> 从表中删除所有行。</p><ol><li><p>删除特定行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM Customers WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE</p><p>不删除表本身</p><p>果想从表中删除所有行，不要使用 DELETE。可使用 TRUNCATE +TABLE +表名</p><p>语句，它完成相同的工作，而速度更快（因为不记录数据的变动）。</p></blockquote></li><li><p>删除全部行</p><blockquote><p>如果执行 DELETE 语句而不带 WHERE</p><p>子句，表的所有数据都将被删除</p></blockquote></li></ol><h3 id="DQL-Data-Query-Language-数据查询语言-用于查询数据"><a href="#DQL-Data-Query-Language-数据查询语言-用于查询数据" class="headerlink" title="DQL (Data Query Language 数据查询语言 )用于查询数据"></a>DQL (Data Query Language 数据查询语言 )用于查询数据</h3><blockquote><p>SELECT + 字段列表<br>FROM  表名列表<br>WHERE 条件列表<br>[[数据库#^aa4a30|GROUP BY 分组字段列表]]<br>HAVING 分组后条件列表<br>ORDER BY 排序<br>LIMIT  分页参数<br>[[数据库#^1cd456|AS 设置别名]]<br>WHRER 和 HAVING 的区别，WHERE 在分组之前起作用，HAVING在分组之后起作用</p></blockquote><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1，... FROM 表 或者 SELECT * FROMSELECT DISTINCT 去重SELECT 字段 AS 别名  ... FROM 设置字段的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>条件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT XXX FROM XXX WHERE +&gt; &gt;= &lt; &lt;= = &lt;&gt;(不等于，相当于!=) BETWEEN ... AND ... IN (...) 满足列表中的其一LIKE 包含这个字符 模糊匹配'%a'     //以a结尾的数据'a%'     //以a开头的数据'%a%'    //含有a的数据'_a_'    //三位且中间字母是a的'_a'     //两位且结尾字母是a的'a_'     //两位且开头字母是a的'___'    //含有三个字符的'[]'     //类似正则表达式'[^]'    //不包含括号之内的单个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合函数:将一列数据作为一个整体，进行纵向计算</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT +count maxminavg 平均值sum+ 字段列表+  FROM 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分组查询 ^aa4a30</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表 WHERE GROUP BY 分组字段名 HAVING 分组之后的过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM 表名 ORDER BY 字段1 排序方式(ASC升序，DESC 降序)，字段2 XXX <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>分页查询</u></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM XXX LIMIT (起始索引，查询记录数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等于OFFSET n ROWS<br>FETCH NEXY M ROWS ONLY 跳过n行，并返回接下来的m行</p><h3 id="DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限"><a href="#DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限" class="headerlink" title="DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限"></a>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FORM userCREATE USER '用户名'@'主机名' IDENTIFIED BY '/'/*使用%来指定任意主机都可以访问*/ALTER USER '用户名' @ '主机名' IDENTIFIED WITH  mysql_native_password BY '新密码'  修改密码DROP USER '用户名' @ '主机名' 删除用户/*权限控制*/SHOW GRANT FOR '用户名'@'主机名'GRANT 权限列表 ON 数据库名 表名 TO '用户名'@'主机名'取消权限REVOKE 权限列表 ON 数据库名 表名 FROM '用户名'@'主机名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数-配合SELECT-使用"><a href="#函数-配合SELECT-使用" class="headerlink" title="函数 配合SELECT 使用"></a>函数 配合SELECT 使用</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CONCAT (s1,s2...) 拼接LOWER(str)UPPER(str)LPAD(str,n,pad) 左填充，用pad来填充原字符串，填充n次RPAD 右填充TRIM(str) 去掉首位的空格SUBSTRING(str,start,len) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CEIL() 向上取整FLOOR() 向下取整MOD(x,y) x % yRAND() 0-1内的随机数ROUND(x,y) 四舍五入保留y位小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a><em>日期函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CURDATE() 返回当前日期CURTIME()NOW() 当前日期和时间YEAR(date) 获取指定日期的年份MONTH(date)DAY(date)DATE_ADD(date,interval expr type) 返回一个日期/时间加上时间间隔expr后的时间DATEDIFF(date1,date2) 返回两个日期相差的天数timestampdiff(间隔类型，前一个时间，后一个时间) 计算日期查例如: timestampdiff(YEAR,hiredate,now()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a><em>流程函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">if (value,t,f) 如果value true 返回t 否则返回fIFNULL(v1,v2) 如果v1不为空返回v1,否则返回v2CASE WHEN (v1) THEN (res1)WHEN (v2) THEN (res2)....ELSE default END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约束-作用域表中字段上的规则，用于限制存储在表中的数据"><a href="#约束-作用域表中字段上的规则，用于限制存储在表中的数据" class="headerlink" title="约束 作用域表中字段上的规则，用于限制存储在表中的数据"></a>约束 作用域表中字段上的规则，用于限制存储在表中的数据</h2><p>目的是未来保证数据库中数据的正确性和完整性有效性<br>分类</p><blockquote><p>非空约束，字段不能为null     关键字: NOT NULL<br>唯一约束 字段不能重复           UNIQUE<br>主键约束 主键是一行数据的唯一表示，要求非空且唯一 PRIMARY KEY<br>默认约束 使用默认值 DEFAULT<br>检查约束 保证字段值满足某一个条件 CHECK<br>外键约束 来让两整表之间建立练习，保证数据的一致性 FOREIGN KEY</p></blockquote><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user  (      name   varchar(10) not null unique comment '姓名不为空且不能重复',      age    int check ( age &gt; 0 &amp;&amp; age &lt;= 120) comment '年龄检查为0-120',      status char(1) default '1' comment '状态默认为1',      gender char(1) comment '性别'  ) comment '用户表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外键</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.建表时CREATE TABLE ( .... .... CONSTRAINT 外键名称 FOREGIN KEY (外键字段名) REFERENCES 主表列名)2. ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除/更新</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名) ON UPDATE 更新时的操作  ON DELETE 删除时要执行的操作操作有NO ACTION 在父表中删除/更新时，首先检查，该记录是否有外键，如果有则不允许更新或者删除RESTRICT  同 NO ACTION CASCADE 可以删除/更新外键在子表中的记录SET NULL 设置子表中的外键记录为NULLSET DEFAULT 设置为一个默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote><p>多表关系：<br>一对多 多的一方建立外键指向一<br>多对多 建立第三张中间表，中间表至少包含两个外键，分别关联两方<br>一对一 任意一方加上外键并设置为UNIQUE</p></blockquote><h3 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h3><p>查询嵌套，括号内的查询结果作为括号外的条件 例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id FROM Orders WHERE order_num IN (SELECT order_num  FROM OrderItems  WHERE prod_id = 'RGAN01');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name,  cust_state,  (SELECT COUNT(*)  FROM Orders  WHERE Orders.cust_id = Customers.cust_id) AS orders FROM Customers ORDER BY cust_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标量子查询<br>子查询返回单个值<br>列子查询，返回结果是一列或者多行<br>常用操作符号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INNOT INANYSOME  和ANY相同ALL <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行子查询，返回一行或者是多列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">= &lt; &gt; IN NOT IN <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表子查询<br>返回多行多列<br>常用IN 来进行查询</p><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><ol><li>内联结</li></ol><p>比如</p><p>进行数据存储的时候，会指定一种联系方式</p><p>可以类比为散列表或者map</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正式用法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price FROM Vendors INNER JOIN Products  ON Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>on之后的式匹配规则，同时为了防止冲突，尽量用点来获取每个不同的库的数据</p><p>联结多个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_name, vend_name, prod_price, quantity FROM OrderItems, Products, Vendors WHERE Products.vend_id = Vendors.vend_id  AND OrderItems.prod_id = Products.prod_id  AND order_num = 20007;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.自联结</p><p><u>联结中仍然可以使用内聚函数</u></p><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id,  COUNT(Orders.order_num) AS num_ord FROM Customers INNER JOIN Orders  ON Customers.cust_id = Orders.cust_id GROUP BY Customers.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一表内联结自己</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM Customers AS c1, Customers AS c2 WHERE c1.cust_name = c2.cust_name  AND c2.cust_contact = 'Jim Jones';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.自然联结</p><blockquote><p>自然联结排除多次出现，使每一列只返回一次。</p></blockquote><blockquote><p>自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符</p><p>（SELECT *），而对其他表的列使用明确的子集来完成。</p></blockquote><p>要自己完成，系统不提供</p><p>事实上，我们迄今为止建立的每个内联结都是自然联结，很可能永远都</p><p>不会用到不是自然联结的内联结。</p><p>4.外联结</p><blockquote><p>联结包含了那些在相关表中没有关联行的行。这种联结</p><p>称为外联结。</p></blockquote><p>语法：</p><p>內联结：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num FROM Customers INNER JOIN Orders  ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外联结：<br>使用场景</p><ul><li><p><input disabled="" type="checkbox"> 对每个顾客下的订单进行计数，包括那些至今尚未下订单的顾客；</p></li><li><p><input disabled="" type="checkbox"> 列出所有产品以及订购数量，包括没有人订购的产品；</p></li><li><p><input disabled="" type="checkbox"> 计算平均销售规模，包括那些至今尚未下订单的顾客。</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num FROM Customers LEFT OUTER JOIN Orders  ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在使用 OUTER </p><p>JOIN 语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表</p><p>（RIGHT 指出的是 OUTER JOIN 右边的表，而 LEFT 指出的是 OUTER JOIN</p><p>左边的表）。</p><p>也就是left 将要联结左侧的那个表全部选出</p><p>right 将右侧的那个表全选出</p></blockquote><p><strong>全外联结</strong></p><p><u><em>Access、MariaDB、MySQL、Open Office Base 和 SQLite 不支持 FULL</em></u></p><blockquote><p>还存在另一种外联结，就是全外联结（full outer join），它检索两个表中</p><p>的所有行并关联那些可以关联的行。与左外联结或右外联结包含一个表</p><p>的不关联的行不同，全外联结包含两个表的不关联的行。</p></blockquote><h2 id="联结使用条件"><a href="#联结使用条件" class="headerlink" title="联结使用条件"></a>联结使用条件</h2><blockquote><p><strong><u> 注意所使用的联结类型。一般我们使用内联结，但使用外联结也有效。</u></strong></p><p><u><strong> 关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何</strong></u><u><strong>种语法（大多数 DBMS 使用这两课中描述的某种语法）。</strong></u></p><p><u><strong> 保证使用正确的联结条件（不管采用哪种语法），否则会返回不正确</strong></u></p><p><u><strong>的数据。</strong></u></p><p><u><strong> 应该总是提供联结条件，否则会得出笛卡儿积。</strong></u></p><p><u><strong> 在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结</strong></u></p><p><u><strong>类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们</strong></u></p><p><strong><u><strong>前分别测试每个联结。这会使故障排除更为简单。</strong></u></strong> </p></blockquote><h3 id="join区别"><a href="#join区别" class="headerlink" title="join区别"></a>join区别</h3><p><strong>普通的join是笛卡尔积，即为两张表的排列组合</strong></p><p><img src="/2023/08/02/hou-duan/shu-ju-ku/join.jpg"></p><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p>在使用时直接用AS +别名就可以用了 ^1cd456</p><p><strong>只能每次用的时候起一次别名并且当时使用</strong></p><p>下一个语句别名就不能用了，要重新起名字</p><h2 id="UNION"><a href="#UNION" class="headerlink" title=" UNION "></a><u> UNION </u></h2><p>语法：</p><p>适用于从多个不同的表中挑选不同的列</p><blockquote><p>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过，</p><p>各个列不需要以相同的次序列出）</p></blockquote><blockquote><p>UNION 从查询结果集中自动去除了重复的行；换句话说，它的行为与一</p><p>条 SELECT 语句中使用多个 WHERE 子句条件一样。</p><p>这是 UNION 的默认行为，如果愿意也可以改变它。事实上，如果想返回</p><p>所有的匹配行，可使用 UNION ALL 而不是 UNION</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_state IN ('IL','IN','MI') UNION SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_name = 'Fun4All';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>SELECT 语句的输出用 ORDER BY 子句排序。在用 UNION 组合查询时，只</p><p>能使用一条 ORDER BY 子句，它必须位于最后一条 SELECT 语句之后。对</p><p>于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条 ORDER BY 子句</p><p>用它来排序所有 SELECT 语句返回的所有结果。</p></blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE A(  prod_id CHAR(10) NOT NULL,  vend_id CHAR(10) NOT NULL,  prod_name CHAR(254) NOT NULL,  prod_price DECIMAL(8,2) NOT NULL,  prod_desc VARCHAR(1000) NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要指定行列,并且后跟列的数据</p><p>类型</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders (  order_num INTEGER NOT NULL,  order_date DATETIME NOT NULL,  cust_id CHAR(10) NOT NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不要把 NULL 值与空字符串相混淆。NULL 值是没有值，不是空字符串。</p><p>如果指定’’（两个单引号，其间没有字符），这在 NOT NULL 列中是允</p><p>许的。空字符串是一个有效的值，它不是无值。NULL 值用关键字 NULL</p><p>而不是空字符串</p><p>默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定</p></blockquote><p>更新表定义，可以使用 ALTER TABLE 语句。</p><blockquote><p>使用 ALTER TABLE 更改表结构，必须给出下面的信息：</p><p> 在 ALTER TABLE 之后给出要更改的表名（该表必须存在，否则将</p><p>出错）；</p><p> 列出要做哪些更改</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors ADD vend_phone CHAR(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>更改或删除列、增加约束或增加键，这些操作也使用类似的语法（注意，</p><p>下面的例子并非对所有 DBMS 都有效）：</p><p>输入▼</p><p>ALTER TABLE Vendors </p><p>DROP COLUMN vend_phone; </p></blockquote><blockquote><p><u><em><strong>使用 ALTER TABLE 要极为小心，应该在进行改动前做完整的备份（表</strong></em></u></p><p><u><em><strong>结构和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的</strong></em></u></p><p><u><em><strong>列，也许无法删除它们。类似地，如果删除了不应该删除的列，可能</strong></em></u></p><p><u><em><strong>会丢失该列中的所有数据。</strong></em></u></p></blockquote><p>删除表（删除整个表而不是其内容）非常简单，使用 DROP TABLE 语句即可：</p><p>DELETE  只删除表的内容不删除表本身</p><h2 id="重新命名"><a href="#重新命名" class="headerlink" title="重新命名"></a>重新命名</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE oldname RENAME TO newname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p><u><em><strong>视图为虚拟的表。它们包含的不是数据而是根据需要检索数据的查询。</strong></em></u></p><p><u><em><strong>视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新</strong></em></u></p><p><u><em><strong>格式化或保护基础数据。</strong></em></u></p></blockquote><p>用视图将联结集合起来，也就是一个子查询，相当于一个API</p><p>创建 视图用 CREATE VIEW 语句来创建。与 CREATE TABLE 一样，CREATE VIEW</p><p>删除 删除视图，可以使用 DROP 语句，其语法为 DROP VIEW viewname;。</p><p>覆盖（或更新）视图，必须先删除它，然后再重新创建。</p><p>用法：</p><p>建立视图</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW ProductCustomers AS SELECT cust_name, cust_contact, prod_id FROM Customers, Orders, OrderItems WHERE Customers.cust_id = Orders.cust_id  AND OrderItems.order_num = Orders.order_num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句创建一个名为 ProductCustomers 的视图，它联结三个表，返</p><p>回已订购了任意产品的所有顾客的列表。</p><p>使用视图</p><p>使用时，</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact FROM ProductCustomers WHERE prod_id = 'RGAN01';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以用于统一格式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW VendorLocations AS SELECT RTRIM(vend_name) || ' (' || RTRIM(vend_country) || ')'  AS vend_title FROM Vendors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后可用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM VendorLocations;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用于过滤也一样</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW CustomerEMailList AS SELECT cust_id, cust_name, cust_email FROM Customers WHERE cust_email IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM CustomerEMailList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>计算字段</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW OrderItemsExpanded AS SELECT order_num,  prod_id,  quantity, item_price,  quantity*item_price AS expanded_price FROM OrderItems;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM OrderItemsExpanded WHERE order_num = 20008;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="存储（不会）"><a href="#存储（不会）" class="headerlink" title="存储（不会）"></a>存储（<u><em><strong>不会</strong></em></u>）</h2><blockquote><p>可以创建存储过程。简单来说，存储过程就是为以后使用而保存的一条</p><p>或多条 SQL 语句。可将其视为批文件，虽然它们的作用不仅限于批处理</p><p> 通过把处理封装在一个易用的单元中，可以简化复杂的操作（如前面</p><p>例子所述）。</p><p> 由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如</p><p>果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都</p><p>是相同的。</p></blockquote><blockquote><p>EXECUTE AddNewProduct( ‘JTS01’, </p><p>‘Stuffed Eiffel Tower’, </p><p>6.49, </p><p>‘Plush stuffed toy with the text La </p><p>➥Tour Eiffel in red white and blue’ ); </p></blockquote><h2 id="管理事务处理（不会深入学习的时候再看）"><a href="#管理事务处理（不会深入学习的时候再看）" class="headerlink" title="管理事务处理（不会深入学习的时候再看）"></a>管理事务处理（不会深入学习的时候再看）</h2><blockquote><p>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么</p><p>完全执行，要么完全不执行，来维护数据库的完整性</p></blockquote><blockquote><p> 事务（transaction）指一组 SQL 语句；</p><p> 回退（rollback）指撤销指定 SQL 语句的过程；</p><p> 提交（commit）指将未存储的 SQL 语句结果写入数据库表；</p><p> 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），</p><p>可以对它发布回退（与回退整个事务处理不同）。</p></blockquote><p><strong>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT</strong></p><p><strong>语句（回退 SELECT 语句也没有必要），也不能回退 CREATE 或 DROP 操</strong></p><p><strong>作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</strong></p><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><blockquote><p>有时，需要在检索出来的行中前进或后退一行或多行，这就是游标的用</p><p>途所在。游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，</p><p>它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储了</p><p>游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p></blockquote><p>游标的选项和特性</p><blockquote><p> 能够标记游标为只读，使数据能读取，但不能更新和删除。</p><p> 能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、</p><p>相对位置等）。</p><p> 能标记某些列为可编辑的，某些列为不可编辑的。</p><p> 规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求</p><p>可访问。</p><p> 指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，</p><p>使数据在游标打开和访问期间不变化。</p></blockquote><p>游标使用</p><blockquote><p> 在使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，</p><p>它只是定义要使用的 SELECT 语句和游标选项。</p><p> 一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT</p><p>语句把数据实际检索出来。</p><p> 对于填有数据的游标，根据需要取出（检索）各行。</p><p> 在结束游标使用时，必须关闭游标，可能的话，释放游标（有赖于具</p><p>体的 DBMS）。</p><p>声明游标后，可根据需要频繁地打开和关闭游标。在游标打开时，可根</p><p>据需要频繁地执行取操作。</p></blockquote><p>创建游标</p><blockquote><p>使用 DECLARE 语句创建游标，这条语句在不同的 DBMS 中有所不同。</p><p>DECLARE 命名游标，并定义相应的 SELECT 语句，根据需要带 WHERE 和</p><p>其他子句。为了说明，我们创建一个游标来检索没有电子邮件地址的所</p><p>有顾客，作为应用程序的组成部分，帮助操作人员找出空缺的电子邮件</p><p>地址</p></blockquote><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE CustCursor CURSOR FOR SELECT * FROM Customers WHERE cust_email IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用游标</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPEN CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭游标</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CLOSE CustCursor DEALLOCATE CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="约束（不会捏）"><a href="#约束（不会捏）" class="headerlink" title="约束（不会捏）"></a>约束（不会捏）</h2><blockquote><p>DBMS 通过在数据库表上施加约束来实施引用完整性。大多数约束是在</p><p>表定义中定义的，如第 17 课所述，用 CREATE TABLE 或 ALTER TABLE</p><p>语句。</p></blockquote><p>主键</p><blockquote><p>我们在第 1 课简单提过主键。主键是一种特殊的约束，用来保证一列（或</p><p>一组列）中的值是唯一的，而且永不改动。换句话说，表中的一列（或</p><p>多个列）的值唯一标识表中的每一行。这方便了直接或交互地处理表中</p><p>的行。没有主键，要安全地 UPDATE 或 DELETE 特定行而不影响其他行会</p><p>非常困难。</p><p>表中任意列只要满足以下条件，都可以用于主键。</p><p> 任意两行的主键值都不相同。</p><p> 每行都具有一个主键值（即列中不允许 NULL 值）。</p><p> 包含主键值的列从不修改或更新。（大多数 DBMS 不允许这么做，但</p><p>如果你使用的 DBMS 允许这样做，好吧，千万别！）</p><p> 主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</p><p>一种定义主键的方法是创建它，如下所示</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Vendors (  vend_id CHAR(10) NOT NULL PRIMARY KEY,  vend_name CHAR(50) NOT NULL,  vend_address CHAR(50) NULL,  vend_city CHAR(50) NULL,  vend_state CHAR(5) NULL,  vend_zip CHAR(10) NULL,  vend_country CHAR(50) NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此例子中，给表的 vend_id 列定义添加关键字 PRIMARY KEY，使其成</p><p>为主键。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors ADD CONSTRAINT PRIMARY KEY (vend_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里定义相同的列为主键，但使用的是 CONSTRAINT 语法。此语法也可</p><p>以用于 CREATE TABLE 和 ALTER TABLE 语句</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键是表中的一列，其值必须列在另一表的主键中。外键是保证引用完</p><p>整性的极其重要部分。我们举个例子来理解外键</p><blockquote><p>如第 6 课所述，除帮助保证引用完整性外，外键还有另一个重要作用。</p><p>在定义外键后，DBMS 不允许删除在另一个表中具有关联行的行。例</p><p>如，不能删除关联订单的顾客。删除该顾客的唯一方法是首先删除相</p><p>关的订单（这表示还要删除相关的订单项）。由于需要一系列的删除，</p><p>因而利用外键可以防止意外删除数据。</p><p>有的 DBMS 支持称为级联删除（cascading delete）的特性。如果启用，</p><p>该特性在从一个表中删除行时删除所有相关的数据。例如，如果启用</p><p>级联删除并且从 Customers 表中删除某个顾客，则任何关联的订单行</p><p>也会被自动删除。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders (  order_num INTEGER NOT NULL PRIMARY KEY,  order_date DATETIME NOT NULL, cust_id CHAR(10) NOT NULL REFERENCES ➥Customers(cust_id) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (inex_col_name,... ) ; UNIQUE 代表的是一个唯一的索引，不可重复SHOW INDEX FROM table_name ;iDROP INDEX index_name ON table_name ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">触发器&gt; 触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发&gt;&gt; 器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。&gt;&gt; 与存储过程不一样（存储过程只是简单的存储 SQL 语句），触发器与单&gt;&gt; 个的表相关联。与 Orders 表上的 INSERT 操作相关联的触发器只在&gt;&gt; Orders 表中插入行时执行。类似地，Customers 表上的 INSERT 和&gt;&gt; UPDATE 操作的触发器只在表上出现这些操作时执行。&gt; 触发器内的代码具有以下数据的访问权：&gt;&gt;  INSERT 操作中的所有新数据；&gt;&gt;  UPDATE 操作中的所有新数据和旧数据；&gt;&gt;  DELETE 操作中删除的数据。&gt;&gt; 根据所使用的 DBMS的不同，触发器可在特定操作执行之前或之后执行。&gt;&gt; 下面是触发器的一些常见用途。&gt;&gt;  保证数据一致。例如，在 INSERT 或 UPDATE 操作中将所有州名转换&gt;&gt; 为大写。&gt;&gt;  基于某个表的变动在其他表上执行活动。例如，每当更新或删除一行&gt;&gt; 时将审计跟踪记录写入某个日志表。```mysqlCREATE TRIGGER customer_state ON Customers FOR INSERT, UPDATE AS UPDATE Customers SET cust_state = Upper(cust_state) WHERE Customers.cust_id = inserted.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="case-来进行多条件判断-不要忘记END"><a href="#case-来进行多条件判断-不要忘记END" class="headerlink" title="case 来进行多条件判断 不要忘记END"></a>case 来进行多条件判断 不要忘记END</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件 THEN 满足的结果 ELSE 不满足结果 END<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行耦合</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件1 THEN Y1 WHEN XXX 条件2 THEN  Y2 WHEN XXX 条件3 THEN Y3 ELSE Y4 END  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>一组操作的集合，不可分割，这些操作要么同时成功，要么同时失败，mysql默认提交方式是自动提交的，所以要改为手动提交才行</p></blockquote><p>方式1</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@autocommit; 查看提交方式，返回为1则为自动提交，否则为手动提交set @@autocommit = 0 ; 设置为手动提交commit 提交rollback 回滚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二<br>事务操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction 或者 begin 开启事务commit 提交rollback 回滚 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务特点</p><ul><li><p><strong>原子性</strong> 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p><strong>一致性</strong> 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性</strong> 数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p><strong>持久性</strong> 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li>脏读 一个事务读到另一个事务还没有提交的数据</li><li>不可重复读，一个事务先后读取一条重复记录，但两次读取的数据不同，成为不可重复读</li><li>幻读 一个事务按照条件查询时，没有对应的数据行但是在插入数据时，这行数据已经存在了，出现了幻影<br>事务隔离级别<br><img src="/2023/08/02/hou-duan/shu-ju-ku/1.png"><br>可以手动设置系统的隔离级别</li></ul><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(字段1 字段1类型 [ COMMENT 字段1注释 ] ,......字段n 字段n类型 [COMMENT 字段n注释 ]) ENGINE = INNODB [ COMMENT 表注释 ] ;show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>InnoDB特点<br>支持事务，行级锁，外键约束</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><blockquote><p>全局锁：锁定数据库中的所有表。<br>表级锁：每次操作锁住整张表。<br>行级锁：每次操作锁住对应的行数据。</p></blockquote><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><blockquote><p>　1）、length()：mysql里面的length()函数是一个用来获取字符串长度的内置函数。<br>　　2）、char_length()：在mysql内置函数里面查看字符串长度的还有一个函数是char_length()。<br>　　3）、这两个函数的区别是：<br>　　　　a）、length()： 单位是字节，utf8编码下,一个汉字三个字节，一个数字或字母一个字节。gbk编码下,一个汉字两个字节，一个数字或字母一个字节。<br>　　　　b）、char_length()：单位为字符，不管汉字还是数字或者是字母都算是一个字符。</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">^：表示一个字符串或行的开头[a-z]：表示一个字符范围，匹配从 a 到 z 的任何字符。[0-9]：表示一个字符范围，匹配从 0 到 9 的任何字符。[a-zA-Z]：这个变量匹配从 a 到 z 或 A 到 Z 的任何字符。请注意，你可以在方括号内指定的字符范围的数量没有限制，您可以添加想要匹配的其他字符或范围。[^a-z]：这个变量匹配不在 a 到 z 范围内的任何字符。请注意，字符 ^ 用来否定字符范围，它在方括号内的含义与它的方括号外表示开始的含义不同。[a-z]*：表示一个字符范围，匹配从 a 到 z 的任何字符 0 次或多次。[a-z]+：表示一个字符范围，匹配从 a 到 z 的任何字符 1 次或多次。.：匹配任意一个字符。\.：表示句点字符。请注意，反斜杠用于转义句点字符，因为句点字符在正则表达式中具有特殊含义。还要注意，在许多语言中，你需要转义反斜杠本身，因此需要使用\\.。$：表示一个字符串或行的结尾。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">//导包import com.mysql.jdbc.Driver;    import javax.swing.plaf.nimbus.State;  import java.sql.*;  public class Name {  public static void main(String[] args) throws Exception {  //注册驱动程序  Class.forName("com.mysql.jdbc.Driver");  //获取连接  String url = "jdbc:mysql://localhost:3306/t";  String username = "root";  String password = "hutao1224";  Connection conn = DriverManager.getConnection(url,username,password);  //获取执行sql语句的对象  String sql = "insert into employees (name)value ('Amy');";  Statement stmt = conn.createStatement();  //执行sql语句  int count = stmt.executeUpdate(sql);  //处理结果  System.out.println(count);  //释放资源  stmt.close();  conn.close();}    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防止sql注入使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPreparedStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接收用户输入 用户名和密码</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token string">"' or '1' = '1"</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tb_user where username = ? and password = ?"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置？的值</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//?的位置和参数</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不需要传递sql语句了</span>    <span class="token comment">// 判断登录是否成功</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7. 释放资源</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">占位符？只能用来取代sql语句中的常变量，而不能取代列名或者表名select <span class="token operator">?</span> from <span class="token operator">?</span> where  <span class="token operator">?</span>   前两个<span class="token operator">?</span>不成立，只能用 <span class="token string">"+variable+"</span> 的方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库，非关系型数据库，<br>特点：<strong>直接将数据存在内存中，数据的存储非常快，适合用作二级缓存，比存储在cache还要快</strong></p><ul><li>数据类型</li></ul><ol><li><p>String redis的String可以包含任意的数据，甚至是jpg和序列化对象,是用二进制的形式来保存的<br>常用命令:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">get /setGETRANGE key start end 返回key中字符串值的子字符串<span class="token punctuation">,</span>substrGETSET key value 将key的值设为value 并返回旧值APPEND key value 追加到末尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>tips:<br>一个key最多可以存储512mb</p><blockquote><p>序列化是将数据结构或对象转换为可存储或传输的格式的过程，这个过程通常涉及将数据转换为字节流或其他类似的格式，以便在需要时能够重新恢复原始数据结构或对象。序列化的对象是指经过序列化处理后的对象，这些对象的状态信息已经被编码成一种特定的格式，以便在稍后的时间或在不同的计算环境中进行保存、传输或恢复。<br>常见的对象序列化用途包括：</p></blockquote></li><li><p>数据持久化：将对象的状态保存到磁盘上，以便稍后能够从磁盘中重新加载并还原对象。</p></li><li><p>数据传输：在网络上或进程间传输对象，例如，通过将对象序列化为字节流，然后在不同的计算机之间传递，最终重新反序列化以还原原始对象。</p></li><li><p>缓存：将对象序列化并存储在缓存中，以提高应用程序的性能，并在需要时快速访问对象，而不必重新计算或重新获取数据。</p></li><li><p>进程间通信（IPC）：在不同的进程之间共享对象数据，序列化和反序列化是实现进程间通信的一种常见方式。</p></li></ol><p>序列化的方式可以有多种，例如将对象转换为JSON、XML、Protocol Buffers、MessagePack等格式，具体选择取决于应用程序的需求和编程语言的支持。不同的语言通常有自己的序列化和反序列化工具或库，用于处理对象的序列化和反序列化操作。</p><ol start="2"><li>Hash<br>使用一个键来存多个value ，适合存储对象<br>语法:<pre class="line-numbers language-css" data-language="css"><code class="language-css">HMSET key field1 value1 field2 value2 .....HMSET name n1 <span class="token string">"hello"</span> n2 <span class="token string">"world"</span> HGET name n1HGET name n2HDEL key field1 field2 ...删除一个或者多个hash字段HEXIESTS key field 查看key中field是否存在HGETALL key 获取对象的全部信息HKEYS key 获取字段名，不包括值HLEN key 获取字段的数量HSET key field valueHSETNX key field valueHVALS key 获取所有值，不包含字段名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>List<br>按照插入顺序排序 可以使用lpush (从从头部插入) rpush(从尾部插入)，想取出时只要lrange 起始(从0开始数) 末尾<pre class="line-numbers language-css" data-language="css"><code class="language-css">lpush key v1lpush key v2rpush key v3lrange key 0 10输出为v2v1v3BLPOP key1 key2 ... timeout  # popfront并返回BRPOP ....                    popbackBRPOPLPUSH source destination timeout 将一个表中的元素弹到另一个表中LINDEX key index 通过索引LINSERT key BEFORE/AFTER pivot value 在pivot这个元素的前/后插入元素LLEN key 获取长度LTRIM key start stop     substr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Set<br>set是String 类型的无序集合,使用hash实现的，复杂度为O(1),实际是hash的类似list类型的，同时同一个value是不会插入两次<pre class="line-numbers language-css" data-language="css"><code class="language-css">sadd key v1sadd key v2smembers keyv2v1SCARD key 获取成员数SDIFF key1 key2 返回第一个集合与第二个集合的区别SDIFFSTORE destinatin key1 key2 将key1<span class="token punctuation">,</span>key2的差集存储在destination中SINTER key1 key2 返回交集SINTERSTORE destion key1 key2SISMEMEBER key memeber 判断member是不是key的成员SMOVE source destination memeber SPOP key SRANMEMBER key count SREM key m1 m2 ... 移除成员SUNION key1 key2 SUNIONSTORE destination key1 key2SSCAN key cursor pattern cout 迭代所有元素 cursor是游标，也即是index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>tips:</li></ol><ul><li><p><code>cursor</code>: 这是一个整数参数，表示遍历的起始位置。它允许你逐批次地遍历数据库中的键。初始时，你可以将<code>cursor</code>设置为0，然后随着遍历的进行，Redis会返回一个新的<code>cursor</code>，你可以将其用作下一次遍历的起始位置。当<code>cursor</code>返回0时，表示遍历已经完成。</p></li><li><p><code>MATCH pattern</code>（可选）: 这个参数用于指定一个匹配模式，只返回键名与指定模式匹配的键。这有助于筛选出你感兴趣的键。</p></li><li><p><code>COUNT count</code>（可选）: 这个参数用于指定每次批处理返回的键的最大数量。它可以帮助你限制每次迭代中返回的键的数量，以控制操作的负载。</p></li></ul><ol start="5"><li>zset 有序集合<br>使用一个score来维持顺序的<pre class="line-numbers language-css" data-language="css"><code class="language-css">sadd key score value查询zrangebyscore key score1 score2zcount key start end 统计指定区间内成员数量zinterstore ...zrange zrangebylex 字典序zrangebyscorezrank key member 返回某个memeber 的索引zrem key m1 m2..zremrangebylex key min 根据字典序，移除指定字典区间的成员<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>Redis 命令</li></ul><ol><li>使用 redis-cli启动客户端</li><li>key 命令<pre class="line-numbers language-css" data-language="css"><code class="language-css">COMMAND KEY_NAME# 具体的commandDELDUMP 序列化给定的keyEXISTS key 检查key是否已经存在 EXPIRE key seconds 设置过期时间，按照s来计算EXPIREAT key timestamp 按照时间戳PEXPIRE key milliseconds 以毫秒计算  在set建立新的键值时可以在后面加上 ex 来指定过期时间PEDPIREAT key milliseconds-timestamp 时间戳以毫秒来计算KEYS patter 查找所有符合模式的keyMOVE key db 将当前key移动到指定的数据库db中PERSIST key 移除过期时间，成为永久PTTL ey 以毫秒返回剩余过期时间RANDOMKEY 随机返回一个keyRENAME key newkey 修改名称RENAMENX key newkey 当newkey不存在时将key改名为newkeySCAN cursor TYPE key 返回key的存储类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的<br>tips:基数是不重复元素的个数<pre class="line-numbers language-css" data-language="css"><code class="language-css">PFADD key e1 e1 ...PFCOUNT key1 key2 ... 返回基数估计值PFMERGE destination k1 k2 将多个合为一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>Redis 订阅<pre class="line-numbers language-css" data-language="css"><code class="language-css">psubscribe pattern 订阅一个或多个符合给定模式的频道pubsub subcommand ... 用于管理评到，后面可以跟多个命令，比如查看所有存在的频道，查看订阅人数等等punsubscribe pattern 退订指定模式的频道unsubscribe channelname ... 推定指定name的频道<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>事务<br>-Redis 的命令都是原子性的，所以Redis的事务不支持回滚<pre class="line-numbers language-css" data-language="css"><code class="language-css">discard 取消事务exec 执行任务块中的所有命令multi 标记一个事务块的开始 ，我要开始写事务列表了unwatch 取消对所有key的监视watch 监视多个key <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Redis-脚本命令"><a href="#Redis-脚本命令" class="headerlink" title="Redis 脚本命令"></a>Redis 脚本命令</h2><p>下表列出了 redis 脚本常用命令：</p><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.runoob.com/redis/scripting-eval.html">EVAL script numkeys key [key …] arg [arg …]</a>  <br>执行 Lua 脚本。</td></tr><tr><td>2</td><td><a href="https://www.runoob.com/redis/scripting-evalsha.html">EVALSHA sha1 numkeys key [key …] arg [arg …]</a>  <br>执行 Lua 脚本。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/scripting-script-exists.html">SCRIPT EXISTS script [script …]</a>  <br>查看指定的脚本是否已经被保存在缓存当中。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/scripting-script-flush.html">SCRIPT FLUSH</a>  <br>从脚本缓存中移除所有脚本。</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/scripting-script-kill.html">SCRIPT KILL</a>  <br>杀死当前正在运行的 Lua 脚本。</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/scripting-script-load.html">SCRIPT LOAD script</a>  <br>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td></tr></tbody></table><ul><li>选择数据库和登录<br>如果你想在Redis服务器启动时指定要使用的数据库和密码，可以通过命令行参数进行设置，例如：</li></ul><p><code>redis-server --port 6379 --requirepass your_password --db 3</code><br>redis默认有0-15个数据库，直接选择即可</p><p>info 来获得服务器和数据库信息</p><h1 id="Lua使用redis脚本"><a href="#Lua使用redis脚本" class="headerlink" title="Lua使用redis脚本"></a>Lua使用redis脚本</h1><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">EVAL <span class="token string">"return redis.call(rediscommend,keys数组,argv数组)"</span> num key实际name<span class="token punctuation">,</span>key的实际值 即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis-服务器命令"><a href="#Redis-服务器命令" class="headerlink" title="Redis 服务器命令"></a>Redis 服务器命令</h2><p>远程连接服务器</p><ol><li>服务器上使用<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span>  /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>之后注释掉这一行<br>bind 127.0.0.1<br>然后将“protected-mode yes”改成“protected-mode no”<br>之后<br>添加以下内容<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">daemonize no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>之后重启服务器<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/redis-server restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>在服务器管理平台上开启端口号6379<br>本地机器上使用以下命令(已经配置完环境变量了)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> 服务器ip <span class="token parameter variable">-p</span> 端口号 <span class="token punctuation">(</span>-a 密码 如果设置了的话<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>下表列出了 redis 服务器的相关命令:</li></ol><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.runoob.com/redis/server-bgrewriteaof.html">BGREWRITEAOF</a>  <br>异步执行一个 AOF（AppendOnly File） 文件重写操作</td></tr><tr><td>2</td><td><a href="https://www.runoob.com/redis/server-bgsave.html">BGSAVE</a>  <br>在后台异步保存当前数据库的数据到磁盘</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/server-client-kill.html">CLIENT KILL [ip:port] [ID client-id]</a>  <br>关闭客户端连接</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/server-client-list.html">CLIENT LIST</a>  <br>获取连接到服务器的客户端连接列表</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/server-client-getname.html">CLIENT GETNAME</a>  <br>获取连接的名称</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/server-client-pause.html">CLIENT PAUSE timeout</a>  <br>在指定时间内终止运行来自客户端的命令</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/server-client-setname.html">CLIENT SETNAME connection-name</a>  <br>设置当前连接的名称</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/server-cluster-slots.html">CLUSTER SLOTS</a>  <br>获取集群节点的映射数组</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/server-command.html">COMMAND</a>  <br>获取 Redis 命令详情数组</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/server-command-count.html">COMMAND COUNT</a>  <br>获取 Redis 命令总数</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/server-command-getkeys.html">COMMAND GETKEYS</a>  <br>获取给定命令的所有键</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/server-time.html">TIME</a>  <br>返回当前服务器时间</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/server-command-info.html">COMMAND INFO command-name [command-name …]</a>  <br>获取指定 Redis 命令描述的数组</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/server-config-get.html">CONFIG GET parameter</a>  <br>获取指定配置参数的值</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/server-config-rewrite.html">CONFIG REWRITE</a>  <br>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</td></tr><tr><td>16</td><td><a href="https://www.runoob.com/redis/server-config-set.html">CONFIG SET parameter value</a>  <br>修改 redis 配置参数，无需重启</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/server-config-resetstat.html">CONFIG RESETSTAT</a>  <br>重置 INFO 命令中的某些统计数据</td></tr><tr><td>18</td><td><a href="https://www.runoob.com/redis/server-dbsize.html">DBSIZE</a>  <br>返回当前数据库的 key 的数量</td></tr><tr><td>19</td><td><a href="https://www.runoob.com/redis/server-debug-object.html">DEBUG OBJECT key</a>  <br>获取 key 的调试信息</td></tr><tr><td>20</td><td><a href="https://www.runoob.com/redis/server-debug-segfault.html">DEBUG SEGFAULT</a>  <br>让 Redis 服务崩溃</td></tr><tr><td>21</td><td><a href="https://www.runoob.com/redis/server-flushall.html">FLUSHALL</a>  <br>删除所有数据库的所有key</td></tr><tr><td>22</td><td><a href="https://www.runoob.com/redis/server-flushdb.html">FLUSHDB</a>  <br>删除当前数据库的所有key</td></tr><tr><td>23</td><td><a href="https://www.runoob.com/redis/server-info.html">INFO [section]</a>  <br>获取 Redis 服务器的各种信息和统计数值</td></tr><tr><td>24</td><td><a href="https://www.runoob.com/redis/server-lastsave.html">LASTSAVE</a>  <br>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</td></tr><tr><td>25</td><td><a href="https://www.runoob.com/redis/server-monitor.html">MONITOR</a>  <br>实时打印出 Redis 服务器接收到的命令，调试用</td></tr><tr><td>26</td><td><a href="https://www.runoob.com/redis/server-role.html">ROLE</a>  <br>返回主从实例所属的角色</td></tr><tr><td>27</td><td><a href="https://www.runoob.com/redis/server-save.html">SAVE</a>  <br>同步保存数据到硬盘</td></tr><tr><td>28</td><td><a href="https://www.runoob.com/redis/server-shutdown.html">SHUTDOWN [NOSAVE] [SAVE]</a>  <br>异步保存数据到硬盘，并关闭服务器</td></tr><tr><td>29</td><td><a href="https://www.runoob.com/redis/server-slaveof.html">SLAVEOF host port</a>  <br>将当前服务器转变为指定服务器的从属服务器(slave server)</td></tr><tr><td>30</td><td><a href="https://www.runoob.com/redis/server-showlog.html">SLOWLOG subcommand [argument]</a>  <br>管理 redis 的慢日志</td></tr><tr><td>31</td><td><a href="https://www.runoob.com/redis/server-sync.html">SYNC</a>  <br>用于复制功能(replication)的内部命令</td></tr></tbody></table><ul><li>存储地理地址 Redis GEO</li><li>Redis Stream 用于消息队列<br>Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</li></ul><p><strong>消息队列相关命令：</strong></p><pre><code>- XADD- 使用 XADD 向队列添加消息，如果指定的队列不存在，则创建一个队列，XADD 语法格式：    - `key ID field value [field value ...] `- **key**&nbsp;：队列名称，如果不存在就创建- **ID**&nbsp;：消息 id，我们使用 * 表示由 redis 生成，可以自定义，但是要自己保证递增性。- **field value**&nbsp;： 记录。</code></pre><ul><li><p><strong>XTRIM</strong>&nbsp;- 对流进行修剪，限制长度</p><ul><li><p>XTRIM</p></li><li><p>使用 XTRIM 对流进行修剪，限制长度， 语法格式：</p></li><li><p><code>key MAXLEN [~] count</code></p></li><li><p><strong>key</strong>&nbsp;：队列名称</p></li><li><p><strong>MAXLEN</strong>&nbsp;：长度</p></li><li><p><strong>count</strong>&nbsp;：数量</p></li></ul></li><li><p><strong>XDEL</strong>&nbsp;- 删除消息 + key id</p></li><li><p><strong>XLEN</strong>&nbsp;- 获取流包含的元素数量，即消息长度 + key</p></li><li><p><strong>XRANGE</strong>&nbsp;- 获取消息列表，会自动过滤已经删除的消息 +key + start end (-是指的最小，+指的是最大) + count + 数字 限制返回的参数</p></li><li><p><strong>XREVRANGE</strong>&nbsp;- 反向获取消息列表，ID 从大到小 end , start</p></li><li><p><strong>XREAD</strong>&nbsp;- 以阻塞或非阻塞方式获取消息列表<br>使用 XREAD 以阻塞或非阻塞方式获取消息列表 ，语法格<br><code>XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...] </code></p></li><li><p><strong>count</strong>&nbsp;：数量</p></li><li><p><strong>milliseconds</strong>&nbsp;：可选，阻塞毫秒数，没有设置就是非阻塞模式</p></li><li><p><strong>key</strong>&nbsp;：队列名</p></li><li><p><strong>id</strong>&nbsp;：消息 ID</p></li></ul><p><strong>消费者组相关命令：</strong></p><ul><li><strong>XGROUP CREATE</strong>&nbsp;- 创建消费者组</li><li><strong>XREADGROUP GROUP</strong>&nbsp;- 读取消费者组中的消息</li><li><strong>XACK</strong>&nbsp;- 将消息标记为”已处理”</li><li><strong>XGROUP SETID</strong>&nbsp;- 为消费者组设置新的最后递送消息ID</li><li><strong>XGROUP DELCONSUMER</strong>&nbsp;- 删除消费者</li><li><strong>XGROUP DESTROY</strong>&nbsp;- 删除消费者组</li><li><strong>XPENDING</strong>&nbsp;- 显示待处理消息的相关信息</li><li><strong>XCLAIM</strong>&nbsp;- 转移消息的归属权</li><li><strong>XINFO</strong>&nbsp;- 查看流和消费者组的相关信息；</li><li><strong>XINFO GROUPS</strong>&nbsp;- 打印消费者组的信息；</li><li><strong>XINFO STREAM</strong>&nbsp;- 打印流信息</li></ul><p>tips：channel和stream 的区别<br>Redis Streams 和 Redis Pub/Sub（发布/订阅）都可以用于消息传递，但它们有一些重要的区别：</p><ol><li><p><strong>消息顺序：</strong></p><ul><li><strong>Redis Streams：</strong> Redis Streams 严格维护消息的有序性，消息按照它们被添加到流的顺序排列。每个消息都有一个唯一的ID，消息的顺序由ID决定。</li><li><strong>Redis Pub/Sub：</strong> Redis Pub/Sub 不关心消息的顺序。它是一种发布-订阅模型，发布者发布消息后，订阅者可以按任何顺序接收这些消息。</li></ul></li><li><p><strong>消息持久性：</strong></p><ul><li><strong>Redis Streams：</strong> Redis Streams 将消息持久存储在内存中，并可以选择将消息保存到磁盘上的持久化文件中。这意味着消息在存储上是可靠的，可以在需要时重新读取。</li><li><strong>Redis Pub/Sub：</strong> Redis Pub/Sub 不存储消息，消息一旦被发布，就不能再次访问。如果没有活动订阅者，消息会被丢弃。</li></ul></li><li><p><strong>消息交付保证：</strong></p><ul><li><strong>Redis Streams：</strong> Redis Streams 提供了更强的消息交付保证，可以确保消息被传递给订阅者（至少一次）。订阅者可以使用消息ID来确认消息的接收。</li><li><strong>Redis Pub/Sub：</strong> Redis Pub/Sub 提供的是最多一次的消息传递保证。这意味着如果订阅者不在线，它将错过已发布的消息，而不会在重新连接后重新接收消息。</li></ul></li><li><p><strong>多订阅者支持：</strong></p><ul><li><strong>Redis Streams：</strong> Redis Streams 支持多个消费者，每个消费者可以独立地读取消息，并且每个消费者可以有自己的状态和位置。</li><li><strong>Redis Pub/Sub：</strong> Redis Pub/Sub 只是一对多的发布-订阅模型，所有订阅者都会接收到相同的消息副本。</li></ul></li></ol><p>根据你的需求，你可以选择使用Redis Streams或Redis Pub/Sub。如果需要确保消息的有序性、持久性和更复杂的消息处理，Redis Streams可能更适合。如果只需要发布-订阅模型，并且不需要消息的有序性或持久性，Redis Pub/Sub 可能更简单且足够。</p><p>在这个示例中，我们将创建一个消费者组，然后有一个生产者不断向流中发送消息，同时有多个消费者从流中读取消息。</p><ol><li><p><strong>创建一个消费者组：</strong></p><p> <code>XGROUP CREATE mystream mygroup $ MKSTREAM</code></p><p> 这个命令创建了一个名为 <code>mygroup</code> 的消费者组，关联到名为 <code>mystream</code> 的流，并使用 <code>$</code> 作为消费者组的起始ID。<code>MKSTREAM</code> 选项会在 <code>mystream</code> 不存在时创建该流。</p></li><li><p><strong>启动生产者并发送消息：</strong></p><p> <code>XADD mystream * name John</code></p><p> 这个命令会向 <code>mystream</code> 流中发送一条消息，内容为一个键值对 <code>name: John</code>。</p></li><li><p><strong>启动两个消费者并加入消费者组：</strong></p><p> <code>XREADGROUP GROUP mygroup consumer1 BLOCK 0 STREAMS mystream &gt;</code></p><p> 这个命令启动了一个消费者 <code>consumer1</code> 并将其加入到 <code>mygroup</code> 消费者组中。它会不断阻塞并等待来自 <code>mystream</code> 流的消息。注意，<code>BLOCK 0</code> 表示一直阻塞，直到有新消息可用。</p><p> 同样，你可以启动另一个消费者 <code>consumer2</code> 并加入到同一消费者组：</p><p> <code>XREADGROUP GROUP mygroup consumer2 BLOCK 0 STREAMS mystream &gt;</code></p></li><li><p><strong>观察消费者的处理：</strong></p><ul><li>当生产者发送消息时，两个消费者之间将会轮流处理消息，确保每个消息只被一个消费者处理。</li><li>每个消费者可以使用 <code>XPENDING</code> 命令查看待处理的消息。</li><li>消费者可以使用 <code>XACK</code> 命令来确认消息的处理。</li><li>如果一个消费者无法处理消息，它可以使用 <code>XNACK</code> 命令来取消消息的确认，以使其他消费者可以重新处理该消息。</li></ul></li></ol><p>数据保存</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">save  会将数据保存在安装目录下的dump.rdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据恢复：将备份文件移动到redis安装目录下即可<br>获得安装目录:<br><code>config get dir</code></p><h2 id="springboot中使用"><a href="#springboot中使用" class="headerlink" title="springboot中使用"></a>springboot中使用</h2><ul><li>redis一般是作为缓存使用，所以不存在能够与数据库打交道的mapper接口映射</li><li>redis一般使用RedisTemplate来进行交互<br>示例:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><ul><li>rdb 存数据</li><li>aof存操作<br><code>config set appendonly yes</code><br><code>config get dir</code><br>之后找到这个路径<br>redis-check-aof xxx.aof查看文件</li><li>appendfsync 冲洗频率<ul><li>always 影响效率，但是数据安全</li><li>everysec 折中</li><li>no</li></ul></li><li>aof重写 – 简化aof的占用大小<br><code>BGREWRITERAOF</code></li><li>设置cofig中的 auto-aof-rewrite-percentage 和 auto-aof-rewriter-min-size来自动重写</li></ul><h2 id="多机操作和集群"><a href="#多机操作和集群" class="headerlink" title="多机操作和集群"></a>多机操作和集群</h2><p><code>replicaof 主服务器ip port</code> 使得当前服务器作为该服务器的从服务器</p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>是一种源代码可用的文档数据库，以序列化的 JSON 格式存储数据。MongoDB 将数据存储在外部存储器中，但在企业版中包含内存存储引擎。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tools</title>
      <link href="/2023/07/04/yu-yan-ji-gong-ju/tools/"/>
      <url>/2023/07/04/yu-yan-ji-gong-ju/tools/</url>
      
        <content type="html"><![CDATA[<p><del>Emacs后续学习</del><br>常用键位</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">替换  <span class="token punctuation">:</span> <span class="token operator">%</span>s<span class="token operator">/</span>原<span class="token operator">/</span>修改之后的<span class="token operator">/</span>g   g代表修改整个文件查找  <span class="token punctuation">:</span> 使用 <span class="token keyword">n</span> 查找下一个<span class="token punctuation">,</span> <span class="token keyword">N</span> 下一个<span class="token punctuation">:</span> 首行<span class="token punctuation">,</span>尾行 s<span class="token operator">/</span>原<span class="token operator">/</span>新<span class="token operator">/</span>g<span class="token punctuation">:</span> <span class="token operator">.</span><span class="token punctuation">,</span><span class="token operator">+</span>ns<span class="token operator">/</span>旧<span class="token operator">/</span>新<span class="token operator">/</span>g 当前行和接下来的<span class="token keyword">n</span>行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">快捷键之类的，大部分都是可以组合使用的键位练习：命令行输入 vimtutorCOMMAND模式:set ic / noic  查找时不/区分大小写使用v选中之后使用:会看见'&lt;'&gt;之后可以通过 w + filename 将选中的字保存为新的文件:! + shell 命令，在不退出vim的情况下使用shell指令:r + filename 将filename文件中的文字写入当前光标所在位置:set number 显示行号:s/old/new/g  替换一行中的old为new,加上g会对整行都起作用，不加g只会修改第一个old:sp 打开当前文件打开多个窗口:qa 关闭所有窗口normal模式A        append  移动到末尾进行inserta                光标之后插入内容ctrl + r redou   撤销hjkl 左下上右v     进入选中块模式V    选中模式，每次选中一行ctrl + w         切换window ctrl + v         选中一个矩形~选中之后，使得大小写互换f + 要查找的字符   find 这一行中光标之后第一个关键字F + xxx           find 反向查找t + xxx           移动到这个字符的前面一个字符T + xxx           反向查找，移动到字符之后一个字符d + 移动的键位     删除  d + $ 删除到(一行)结尾， d + 0 删除到(一行)开头c + 移动的键位     change 删除并进入insert进行修改dd        删除一行cc删除一行并进入insertx             删除当前字符r + 字符          替换当前一个字符R                 连续替换w  word 向后移动一个单词b  向前移动一个单词e  end 移动到下一个单词的最后一个字母o  下方开一个新行O  上方开一个新行0  移动到行首%  从{/[/( 移动到)/]/}$  移动到行末数字 + G         跳转到指定行ctrl + g         显示当前的行数G  最后一行gg 第一行y + 移动的键位   复制yy         复制一行p   粘贴L/M/H 当前页面的lowest/middle/highestctrl + u / d 向上滚动/向下滚动数字 + 键位   执行几次这个键位操作例如:7dw          删除七个单词修饰词a 删除所在的整体例如：{djsafljaflsjlf}123使用di{只剩下了123Fi 内部，例如{skdajsldjas}想要删除{}内的东西只需要ci{/ + 内容      全文查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>好用的操作</li></ul><ol><li>一键取消注释,ctrl + v进入块选择模式，然后使用方向键选择所有的注释，按d删除即可</li></ol><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>切换分支和版本号实际上就是指针的切换</p><p>工作区：磁盘目录</p><p>使用git add把工作区代码加入暂存区 临时储存</p><p>git commit</p><p>将暂存区代码提交到本地库，得到历史版本(代码删除不了了)</p><p>push </p><p>推送到远程库</p><p>github是远程库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init 初始化仓库<span class="token function">git</span> status 查看仓库状态<span class="token comment">##Untracked files: 是未追踪的文件，也就是文件只处于工作区，不处于暂存区和本地库，红色的文字</span><span class="token comment">##绿色的文件名是存在于暂存区</span><span class="token function">git</span> <span class="token function">add</span> + filename 添加到暂存区<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>    全部提交<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-i</span>    添加到暂存区，但是会有提问<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> filename 删除暂存区的文件<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"日志信息"</span> filenaem 提交到本地库<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> + 日志 <span class="token comment">#覆盖最新的一次提交日志</span><span class="token comment">##提交之后git status 会显示为没有提交</span><span class="token function">git</span> reflog 查看提交记录<span class="token function">git</span> log    查看日志，包括提交记录和提交用户<span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span>xxx  只查看某人的提交记录<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline 每一个提交记录只占一行<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--all</span> 通过 ASCII 艺术的树形结构来展示所有的分支<span class="token function">git</span> log --name-status 看哪个文件改变了<span class="token parameter variable">-n</span> n为数字 //最新n个提交<span class="token comment">##版本穿越，修改HEAD指针 本地原文件一并会被修改</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> + 版本号<span class="token function">git</span> tag xxx 提交ID前10个字符，创建一个标签   <span class="token function">git</span> cherry-pick +xx xxx xx 把某几个分支复制到当前分支上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分支操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch 创建分支<span class="token function">git</span> branch <span class="token parameter variable">-v</span> 查看有哪些分支<span class="token parameter variable">-m</span> 改名<span class="token parameter variable">-d</span> 删除<span class="token function">git</span> checkout  + name 切换分支<span class="token function">git</span> merge  + name    将当name合并在当前分支<span class="token function">git</span> reset    撤销提交记录,但是撤销之前的还是存在的，只是处于未加入缓冲区的状态，仅限本地<span class="token function">git</span> revert   撤销更改分享给别人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分支冲突：两个人同时对同一个内容 进行了两个不同的修改，git无法决定新的文件手</p><p>手动修改后，commit 不要再加上文件名了</p><p>HEAD指向的是当前分支</p><p>远程开发：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span> 查看所有远程地址别名<span class="token function">git</span> remote <span class="token function">add</span> 别名 + 远程地址    给远程地址起一个别名，方便切换<span class="token function">git</span> push +别名/库地址 + 分支名    把这个分支推送到远程库<span class="token function">git</span> pull +别名/库地址 + 分支名    把远程的分支名拉取<span class="token function">git</span> clone + 库地址               克隆到本地  会进行：1.拉取代码2.初始化本地库3.创建别名<span class="token comment">###############</span><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote-repo-url<span class="token operator">&gt;</span> 克隆指定分支<span class="token comment">###############</span><span class="token function">git</span> fetch + xxx <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master  获取服务器上最后一次改动，并将本地主分支指向它，实现放弃本地所有改动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他知识</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitk 内建的图形化<span class="token comment">##显示历史记录时，每个提交的信息只显示一行：</span><span class="token function">git</span> config format.pretty oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其他：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span> <span class="token comment">#查看仓库大小</span><span class="token function">git</span> log <span class="token parameter variable">--reverse</span>  <span class="token comment">#从旧到新查看提交记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="gitignore配置"><a href="#gitignore配置" class="headerlink" title=".gitignore配置"></a>.gitignore配置</h2><ul><li>所有以#开头的行会被忽略</li><li>可以使用glob模式匹配</li><li>匹配模式后跟反斜杠（/）表示要忽略的是目录</li><li>如果不要忽略某模式的文件在模式前加”!”</li></ul><p>　　比如：</p><blockquote><p># 此为注释 – 将被 Git 忽略<br><em>.a # 忽略所有 .a 结尾的文件<br>!lib.a # 但 lib.a 除外<br>/TODO # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO<br>build/ # 忽略 build/ 目录下的所有文件<br>doc/</em>.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</p></blockquote><h3 id="工作中常用"><a href="#工作中常用" class="headerlink" title="工作中常用"></a>工作中常用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash //将当前的工作暂存，但是不进行提交<span class="token function">git</span> stash show //显示暂存的内容，哪些被修改了，可指定序号<span class="token function">git</span> stash list //已经暂存的列表和序号<span class="token function">git</span> stash apply + stash@<span class="token punctuation">{</span>数字<span class="token punctuation">}</span> //切换回来继续工作 //可以加上--index 来回到原来文件的暂存状态<span class="token function">git</span> stash drop //丢弃指定的stash<span class="token function">git</span> stash pop //apply + drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><blockquote><p>Scoop是一个Windows系统管理包的开源软件，相比从百度上搜索，从几十条垃圾信息中筛选出一个能用的安装链接，Scoop可以只使用一行代码进行安装</p></blockquote><h2 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h2><p>本人使用的是Windows11系统，已经内置PowerShell了，如果是Windows7系统，需要手动安装新版本的PowerShell</p><p>Scoop 源文件在GitHub上，推荐使用<strong>魔法</strong></p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p>使用快捷键win+ x 打开 Windows终端，<strong>不要打开管理员的终端</strong></p><p><img src="/2023/07/04/yu-yan-ji-gong-ju/tools/Scoop.png" alt="Scoop"></p><p>之后输入</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel"># 设置 PowerShell 执行策略Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser# 下载安装脚本irm get.scoop.sh -outfile 'install.ps1'# 执行安装, --ScoopDir 参数指定 Scoop 安装路径 ' ' 内的是自定义的安装目录.\install.ps1 -ScoopDir 'D:\Scoop'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><a href="https://github.com/ScoopInstaller/Scoop">官方文档</a> 或 <a href="https://github.com/ScoopInstaller/Scoop/wiki/Quick-Start">快速入门</a> </p><p><a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">大佬的博客</a></p><p>scoop社区维护的安装路径大部分在国外，所以下载时建议使用魔法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop <span class="token builtin class-name">help</span>  命令参考说明scoop + 动作 + 对象， 对象可以省略scoop +search 搜索软件名<span class="token function">install</span> 安装软件update  更新软件status  查看软件装填uninstall 卸载软件info     查看软件详情home     打开软件主页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><ul><li>查看本机有无安装typora</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop search typora<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Scoop下载软件的安装路径是自定义下载路径中的apps文件夹</strong></p><h2 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h2><pre class="line-numbers language-none"><code class="language-none">$ 匹配末尾位置  ^ 匹配开头位置* 匹配前一个字符的0次或n次  例如： zo* 会匹配z zo zoo zooo z......  等+ 匹配前一个字符一次或多次u        zo+ 匹配 zo zoo zooo zo...... 等? 匹配前一个字符0次或1次           zo?      z  zo{n,m}  匹配 n 到 m 次{n}      n 次? + 其他限定符，表示匹配非贪心，默认的匹配会尽力匹配较长的满足条件的字符串，使用这个后尽力匹配较短的字符串.  匹配任意单个字符//(pattern) 匹配pattern 并捕获他的子表达式(?:pattern) 不捕获子表达式(?=pattern) 前面的字符匹配到之后，判断后面的是否能够匹配pattern 如果能那么就捕获，否则不匹配(?!pattern) 反向捕获，不捕获包含patter的字符串//规则集x|y 匹配x或y[xyz] 字符集，匹配三者的任一字符[^xyz] 反向捕获[a-z]  匹配a-z 中的任一字符[^a-z] 反向匹配不包含的//\b     border 以这个符号之前的字符(串)为边界的匹配\B     非边界匹配\cx    x 为[a-z] 或 [A-Z] 匹配ctrl + x\d     数字匹配，十进制[0-9]\D     [^0-9]\f     匹配换页符\n     换行符\r     匹配回车\w     匹配字类字符 [A-Za-z0-9]\W     非字类字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><p>eXtensible Markup Language 即可扩展标记语言。<br>一般用于做数据存储，支持自定义标签</p><blockquote><p>通过 XML，数据能够存储在独立的 XML 文件中。这样您就可以专注于使用 HTML/CSS 进行显示和布局，并确保修改底层数据不再需要对 HTML 进行任何的改变。<br>通过使用几行 JavaScript 代码，您就可以读取一个外部 XML 文件，并更新您的网页的数据内容。</p></blockquote><h2 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//文档声明:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?xml</span> <span class="token attr-name">version</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">?</span> <span class="token attr-name">encodiing</span> <span class="token attr-name">standlone</span><span class="token punctuation">&gt;</span></span>encoding 指定文档的编码 UTF-8等standalone 文档是否独立 yes or no注释：<span class="token comment">&lt;!--comment --&gt;</span>标签内要包含要传递的信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例: Bob写个Tom的信<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?xml</span> <span class="token attr-name">version</span> <span class="token attr-name">"1.0"</span> <span class="token attr-name">encoding</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--声明--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 根元素，来表示本文档的类型--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">&gt;</span></span> Tom <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">&gt;</span></span> Bob <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">&gt;</span></span> Reminder <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> Dont' forget me this weekend <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>xml文档必须包含一个根元素，且只能有一个根元素，其他所有元素都是根元素的子元素</li><li>所有的标签都有一个闭标签 &lt;/…&gt;</li><li>xml 标签对大小写敏感</li><li>属性值必须加引号<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span> <span class="token attr-name">date</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12/11/2023<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>实体引用，用于转义某些符号</li></ul><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;  &lt;  less than&gt;  &gt;  greater than&amp; &amp;  ampersand&amp;apos; ' apostrophe" " quotation mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标签命名： 尽量用 __ 来进行命名 first_name</li><li>属性Attribute : 提供有关元素的额外信息 (尽量减少属性的使用，将属性作为一个新的标签即可)</li><li>DTD 用于定义xml文档结构 Schema 基于xml的DTD替代</li><li>XSLT来显示XML</li></ul><h2 id="XMLHttpRequest-对象-JavaScript"><a href="#XMLHttpRequest-对象-JavaScript" class="headerlink" title="XMLHttpRequest 对象(JavaScript)"></a>XMLHttpRequest 对象(JavaScript)</h2><p>功能：</p><blockquote><p>在不重新加载页面的情况下更新网页<br>在页面已加载后从服务器请求数据<br>在页面已加载后从服务器接收数据<br>在后台向服务器发送数据</p></blockquote><h1 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h1><p>特点:</p><ol><li>使用缩进表示层级关系</li><li>缩进不能使用tab键</li><li>只要相同层级的元素左对齐即可，不需要控制多少空格数</li><li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li></ol><p>示例:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">key</span><span class="token punctuation">:</span><span class="token key atrule">child-key</span><span class="token punctuation">:</span> value <span class="token comment"># 给予值的时候要空一个额格</span><span class="token comment">#较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：</span><span class="token punctuation">?</span>      <span class="token punctuation">-</span> complexkey1    <span class="token punctuation">-</span> <span class="token key atrule">complexkey2</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> complexvalue1    <span class="token punctuation">-</span> complexvalue2意思即对象的属性是一个数组 <span class="token punctuation">[</span>complexkey1<span class="token punctuation">,</span>complexkey2<span class="token punctuation">]</span>，对应的值也是一个数组 <span class="token punctuation">[</span>complexvalue1<span class="token punctuation">,</span>complexvalue2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment"># 多维数组</span><span class="token punctuation">-</span> a<span class="token punctuation">-</span> b<span class="token punctuation">-</span> c  <span class="token punctuation">-</span> d  <span class="token punctuation">-</span> e    <span class="token punctuation">-</span> f<span class="token key atrule">companies</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span>        <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> company1        <span class="token key atrule">price</span><span class="token punctuation">:</span> 200W    <span class="token punctuation">-</span>        <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> company2        <span class="token key atrule">price</span><span class="token punctuation">:</span> 500W<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">数组和对象可以构成复合结构，例：<span class="token key atrule">languages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Ruby  <span class="token punctuation">-</span> Perl  <span class="token punctuation">-</span> Python <span class="token key atrule">websites</span><span class="token punctuation">:</span>  <span class="token key atrule">YAML</span><span class="token punctuation">:</span> yaml.org   <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> ruby<span class="token punctuation">-</span>lang.org   <span class="token key atrule">Python</span><span class="token punctuation">:</span> python.org   <span class="token key atrule">Perl</span><span class="token punctuation">:</span> use.perl.org转换为 json 为：<span class="token punctuation">{</span>   <span class="token key atrule">languages</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'Ruby'</span><span class="token punctuation">,</span> <span class="token string">'Perl'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token key atrule">websites</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token key atrule">YAML</span><span class="token punctuation">:</span> <span class="token string">'yaml.org'</span><span class="token punctuation">,</span>    <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> <span class="token string">'ruby-lang.org'</span><span class="token punctuation">,</span>    <span class="token key atrule">Python</span><span class="token punctuation">:</span> <span class="token string">'python.org'</span><span class="token punctuation">,</span>    <span class="token key atrule">Perl</span><span class="token punctuation">:</span> <span class="token string">'use.perl.org'</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ol><li>安装，并修改安装路径(windows)<br>此方法官方文档里有<br>先下载安装包<br>在想安装的地方建立文件夹Docker即可<br>然后打开cmd，输入<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Docker Desktop Installer.exe"</span> <span class="token function">install</span> --installation-dir<span class="token operator">=</span><span class="token string">"E:\Program Files\Docker"</span>后面的是你自己的路径，根据实际修改即可，等待安装完毕即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>容器是镜像的实例化，容器是一个小型的os，包含应用和其本身所需要的环境，镜像是只读的，而容器是可以运行的可写的，其中的容器处于运行状态</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><img src="/2023/07/04/yu-yan-ji-gong-ju/tools/docker%E5%91%BD%E4%BB%A4.webp"></p><ul><li>基础镜像命令(与git类似)</li><li>ls , tag , inspect<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">docker tag 旧 新docker inspect 获得该镜像的详细信息.-f 后面加上想获得的某一项的key就可以单独获得这一项的内容了格式为</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">".key名"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>docker history 查看某一镜像的历史docker search -f=is-official=true --limit 5 --no-trunc  nginx  -f 过滤条件limit 限制输出的数量--no-trunc 不截断输出结果docker rmi  -f  myubuntu 当存在多个标签时，删除的只是标签，当仅仅剩下一个标签时会把这个镜像直接删除 -f强制删除docker image prune 清理临时镜像文件<span class="token punctuation">,</span>虚悬文件，指的是docker images 中没有名字的文件-a 删除所有无用image 不光是临时镜像-filter 只删除符合过滤条件的镜像- `until`<span class="token punctuation">:</span> 根据镜像的创建时间来筛选。例如，`until=24h`将删除24小时之前创建的镜像。    - `label`<span class="token punctuation">:</span> 根据标签来筛选。例如，`label=myapp`将删除带有标签为<span class="token string">"myapp"</span>的镜像。    - `dangling`<span class="token punctuation">:</span> 筛选出悬挂（无用）镜像。使用`dangling=true`来删除悬挂镜像。-f 强制删除创建镜像docker commit [OPTIONS] CONTAINER [REPOSITORY[<span class="token punctuation">:</span>TAG]]docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[<span class="token punctuation">:</span>&lt;标签&gt;]] docker commit \    --author <span class="token string">"Tao Wang &lt;twang2218@gmail.com&gt;"</span> \    --message <span class="token string">"修改了默认网页"</span> \    webserver \    <span class="token property">nginx</span><span class="token punctuation">:</span>v2//- `CONTAINER`是要保存状态的容器的名称或容器ID。- `REPOSITORY[<span class="token punctuation">:</span>TAG]`是新镜像的名称和标签。如果不提供标签，将默认使用<span class="token string">"latest"</span>标签。docker commit -m <span class="token string">"xxx"</span> 被提交的容器//导入导出镜像docker save -o my_images.tar <span class="token property">image1</span><span class="token punctuation">:</span>tag <span class="token property">image2</span><span class="token punctuation">:</span>tag <span class="token property">image3</span><span class="token punctuation">:</span>tag  保存多个到镜像到指定的文件夹docker load -i my_image.tar <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>容器操作</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">docker create  xxx可选。。。-i 默认打开标准输入-t分配一个伪终端docker start xx  启动一个容器docker run --name 新名字 options 镜像 创建并启动一个容器可选-d 以守护态后台运行，容器是否会长久运行，是和 `docker run` 指定的命令有关，和 `-d` 参数无关。-t 分配一个伪终端-i 让容器的标准输入保持打开docker restart 关闭容器并重新启动docker logs -details-f follow 持续保持输出since string 从某一个时间开始日志-tail string 输出最近的若干日志-t timestamps 显示时间戳信息-until string 输出某个时间段之前的信息docker exec -it xxx 进入一个后台的容器 使用这个之后再容器内部执行exit 时不会导致容器停止，但是使用 docker attach 进入容器并退出的话会导致容器停止并退出docker rm -f 强制终止并删除一个容器-l 删除容器的链接，但保留容器-v 删除容器挂在的数据卷docker top 容器名称 查看容器的进程docker inspect 容器名称 查看容器信息docker cp &lt;本地文件/目录路径&gt; &lt;容器ID或名称&gt;<span class="token punctuation">:</span>&lt;容器内部路径&gt;docker cp &lt;容器ID或名称&gt;<span class="token punctuation">:</span>&lt;容器内部路径&gt; &lt;本地文件/目录路径&gt;-a 打包-L 跟随软连接docker pause id 暂停<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li><strong>创建卷</strong>： 您可以使用以下命令创建一个卷：</li></ol><p>  bashCopy code</p><p>  <code>docker volume create my_volume</code></p><p>  这将创建一个名为 <code>my_volume</code> 的卷。</p></li></ul><ol start="2"><li><p><strong>查看卷列表</strong>： 要查看系统中的所有卷，可以运行：</p><p> bashCopy code</p><p> <code>docker volume ls</code></p></li><li><p><strong>删除卷</strong>： 要删除一个不再需要的卷，可以运行：</p><p> bashCopy code</p><p> <code>docker volume rm my_volume</code></p></li><li><p><strong>挂载卷到容器</strong>： 在运行容器时，使用 <code>-v</code> 或 <code>--volume</code> 标志来将卷挂载到容器内部。例如：</p><p> bashCopy code</p><p> <code>docker run -d -v my_volume:/path/in/container my_image</code></p><p> 这将把 <code>my_volume</code> 卷挂载到容器内部的 <code>/path/in/container</code> 目录。</p></li><li><p><strong>挂载主机目录到容器</strong>： 您还可以将主机上的目录挂载到容器内。例如：</p><p> bashCopy code</p><p> <code>docker run -d -v /host/path:/path/in/container my_image</code></p><p> 这将把主机上的 <code>/host/path</code> 目录挂载到容器内的 <code>/path/in/container</code>。</p></li><li><p><strong>查看容器的挂载卷</strong>： 要查看正在运行的容器挂载了哪些卷，可以使用以下命令：</p><p> bashCopy code</p><p> <code>docker inspect -f '{{ .Mounts }}' container_name_or_id</code></p></li><li><p><strong>复制文件到卷</strong>： 如果需要将文件复制到卷中，可以运行一个临时容器，然后将文件复制到挂载卷的路径。例如：</p><p> bashCopy code</p><p> <code>docker run --rm -v my_volume:/path/in/container -v /local/path/to/file:/data busybox cp /local/path/to/file /path/in/container</code></p><p> 这将复制 <code>/local/path/to/file</code> 到 <code>my_volume</code> 卷的 <code>/path/in/container</code>。</p></li><li><p><strong>卷数据备份和恢复</strong>： 您可以使用工具如 <code>docker cp</code> 或 <code>docker export</code> 来备份卷数据，然后使用 <code>docker create</code> 和 <code>docker start</code> 来恢复它们。备份和恢复数据的确切方法取决于您的需求和容器的情况。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">挂载数据卷1.建立数据卷docker run -it -v /db --name db0 ubuntudocker run -it --volume-from db --name db1 ubuntudocker run -it --volume-from db --name db2 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>VOLUME 的使用<br>将数据读写存储在数据卷中，使得容器尽量不发生读写操作，dockerfile 中的VOLUME是可以呗docker run覆盖的</li></ul><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><h2 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h2><table><thead><tr><th>Dockerfile 指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像，用于后续的指令构建。</td></tr><tr><td>LABEL</td><td>添加镜像的元数据，使用键值对的形式，方便后续进行filter来筛选。</td></tr><tr><td>RUN</td><td>在构建过程中在镜像中执行命令。</td></tr><tr><td>CMD</td><td>指定容器创建时的默认命令。（可以被覆盖）</td></tr><tr><td>ENTRYPOINT</td><td>设置容器创建时的主要命令。（不可被覆盖），</td></tr><tr><td>EXPOSE</td><td>声明容器运行时监听的特定网络端口，不会自动映射，只是声明，需要自己配置</td></tr><tr><td>ENV</td><td>在容器内部设置环境变量。</td></tr><tr><td>ADD</td><td>将文件、目录或远程URL复制到镜像，自动解压</td></tr><tr><td>COPY</td><td>将文件或目录复制到镜像中。</td></tr><tr><td>VOLUME</td><td>为容器创建挂载点或声明卷。</td></tr><tr><td>WORKDIR</td><td>设置后续指令的工作目录。</td></tr><tr><td>USER</td><td>指定后续指令的用户上下文。</td></tr><tr><td>ARG</td><td>定义在构建过程中传递给构建器的变量，可使用 “docker build” 命令设置。</td></tr><tr><td>ONBUILD</td><td>当该镜像被用作另一个构建过程的基础时，添加触发器。</td></tr><tr><td>STOPSIGNAL</td><td>设置发送给容器以退出的系统调用信号。</td></tr><tr><td>HEALTHCHECK</td><td>定义周期性检查容器健康状态的命令</td></tr><tr><td>SHELL</td><td>覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td></tr><tr><td>RUN</td><td>运行指定命令</td></tr><tr><td>CMD</td><td>启动容器时指定默认执行的命令</td></tr><tr><td>ADD</td><td>添加内容到镜像</td></tr><tr><td>COPY</td><td>复制内容到镜像</td></tr></tbody></table><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>推荐使用基础镜像：<br>BusyBox 集成Linux的命令<br>Alpine  在BusyBox基础上减小体积和消耗，并提供了apt管理工具</p><ul><li>使用dockerfile为镜像添加ssh服务<pre class="line-numbers language-css" data-language="css"><code class="language-css">#设置继承镜像FROM myub#提供作者信息MAINTAINER docker_user <span class="token punctuation">(</span>user@docker.com<span class="token punctuation">)</span>#执行命令RUN apt-get updateRUN apt-get install -y openssh-serverRUN mkdir -p /var/run/sshdRUN mkdir -p /root/.sshRUN sed -ri <span class="token string">'s/session required pam_loginid.so/#session required pam_loginuid.so/g'</span> /etc/pam.d/sshd#复制配置文件到对应位置，并赋予其可执行权限ADD authorized_keys /root/.ssh/authorized_eysADD run.sh /run.shRUN chmod 755 /run.sh#开放端口EXPOSE 22#设置自启动命令CMD [<span class="token string">"/run.sh"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>FROM scratch</p><p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。使用 <a href="https://golang.google.cn/">Go 语言</a> 开发的应用很多会使用这种方式来制作镜像，这也是有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p><p>每一个RUN会建立一层，所以要进行多重操作的时候不要每一行都建立一个RUN而是将他们合在一层</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM debian:stretchRUN <span class="token builtin class-name">set</span> -x<span class="token punctuation">;</span> <span class="token assign-left variable">buildDeps</span><span class="token operator">=</span><span class="token string">'gcc libc6-dev make wget'</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> update <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token variable">$buildDeps</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> redis.tar.gz <span class="token string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/src/redis <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xzf</span> redis.tar.gz <span class="token parameter variable">-C</span> /usr/src/redis --strip-components<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token parameter variable">-C</span> /usr/src/redis <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token parameter variable">-C</span> /usr/src/redis <span class="token function">install</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/apt/lists/* <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> redis.tar.gz <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> /usr/src/redis <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> purge <span class="token parameter variable">-y</span> --auto-remove <span class="token variable">$buildDeps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>docker 不是虚拟机不存在后台运行，其中的所有应用都是在前台运行的，所以dockerfile 中直接执行这个应用即可，然后退出容器，让容器在后台运行即可</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"nginx"</span>, <span class="token string">"-g"</span>, <span class="token string">"daemon off;"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p></li><li><p>ENV 设置</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENV</span> key1=value1 key2=value2 .....</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ARG 设置变量 等于 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code></p></li><li><p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 只在 FROM 中生效</span><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span><span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">${DOCKER_USERNAME}</span>/alpine</span><span class="token comment"># 要想在 FROM 之后使用，必须再次指定</span><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span><span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">${DOCKER_USERNAME}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HEALTHCHECK</p></li><li><p><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</p></li><li><p><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</p></li><li><p><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</p></li></ul><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span><span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">5s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token operator">\</span>  <span class="token keyword">CMD</span> curl -fs http://localhost/ || exit 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多阶段构造镜像<ol><li>多个FROM 和 构造过程写在一个dockerfile 中</li><li>使用as 来为某一阶段的构造命名 FROM golang:alpine as builder之后构造时直接指定名字即可, $ docker build –target builder -t username/imagename:tag .</li></ol></li><li>docker 导入导出容器<br>示例：<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker export 7691a814370e &gt; ubuntu.tarcat ubuntu.tar | docker import - test/<span class="token property">ubuntu</span><span class="token punctuation">:</span>v1.0 # 将文件读入到标准输入流，再将其导入到镜像中# 或者使用URL 来导入也行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="docker-查看容器ip"><a href="#docker-查看容器ip" class="headerlink" title="docker 查看容器ip"></a>docker 查看容器ip</h3><pre class="line-numbers language-none"><code class="language-none">docker inspect 容器ID | grep IPAddress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Nexus-容器"><a href="#Nexus-容器" class="headerlink" title="Nexus 容器"></a>Nexus 容器</h3><p>可以方便进行对Maven , Docker ,Yum,PyPI的管理</p><h1 id="Lua-一种可以嵌入程序的简便语言"><a href="#Lua-一种可以嵌入程序的简便语言" class="headerlink" title="Lua 一种可以嵌入程序的简便语言"></a>Lua 一种可以嵌入程序的简便语言</h1><p>一般只适合在linux上使用<br>安装：<br><code>apt-get install luaxxx(版本号)</code><br>执行<br><code>lua xxx.lua</code></p><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><p>Lua 提供了交互式编程模式。我们可以在命令行中输入程序并立即查看效果。</p><p>Lua 交互式编程模式可以通过命令&nbsp;<strong>lua -i</strong>&nbsp;或&nbsp;<strong>lua</strong>&nbsp;来启用</p><ol><li>基本语法<ul><li>注释 – 单行  <code>--[[xxxx --]]</code> 多行注释</li><li>默认为全局变量，全局变量不需要声明，不需要时置为nil即可,局部变量使用 local 来指定</li><li>基本数据类型: nil ,boolean , number(为double类型) , string ,userdata (任意存储在变量中的数据结构)</li><li>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型。 可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用</li><li>function(由C 或Lua编写的函数) , thread(线程), table(关联数组)</li><li>使用<code>[[]]</code> 来跨越多行赋值</li><li>Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量<pre class="line-numbers language-Lua" data-language="Lua"><code class="language-Lua">html = [[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href="https://www.twle.cn/"&gt;简单编程&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li>lua会尝试将字符数字转化为数字来进行数字计算，字符串连接符是 <code>..</code></li><li><h1 id="string-来计算字符串的长度"><a href="#string-来计算字符串的长度" class="headerlink" title="string 来计算字符串的长度"></a>string 来计算字符串的长度</h1></li><li><strong>默认索引是从1开始</strong></li><li>function 可以以匿名函数（anonymous function）的方式通过参数传递<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- !/usr/bin/lua</span><span class="token comment">-- -*- encoding:utf-8 -*-</span><span class="token comment">-- filename: main.lua</span><span class="token comment">-- author: 简单教程(www.twle.cn)</span><span class="token comment">-- Copyright © 2015-2065 www.twle.cn. All rights reserved.</span><span class="token keyword">function</span> <span class="token function">testFun</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>fun<span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>tab<span class="token operator">=</span><span class="token punctuation">{</span>key1<span class="token operator">=</span><span class="token string">"val1"</span><span class="token punctuation">,</span>key2<span class="token operator">=</span><span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">testFun</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token comment">--匿名函数</span>    <span class="token keyword">return</span> key<span class="token operator">..</span><span class="token string">"="</span><span class="token operator">..</span>val<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>table变量可以使用索引，key，或者 . 来获取值</li><li>注意 : Lua 中 0 为 true</li><li><strong>多返回值</strong>Lua 中的函数可以返回<strong>多个结果值</strong>，例如&nbsp;<strong>string.find</strong>&nbsp;返回匹配串 “开始和结束的下标”（如果不存在匹配串返回 nil ）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> s, e <span class="token operator">=</span> string.find<span class="token punctuation">(</span><span class="token string">"www.twle.cn"</span>, <span class="token string">"twle"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> print<span class="token punctuation">(</span>s, e<span class="token punctuation">)</span><span class="token number">5</span>   <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>可变参数 使用 … 来代表</li><li>算术运算符 有 ^ 幂运算哦 </li><li>不等于是 -= 不是 != </li><li>逻辑运算 and , or ,not</li><li><h1 id="返回字符串个数或者传入参数个数"><a href="#返回字符串个数或者传入参数个数" class="headerlink" title="返回字符串个数或者传入参数个数.."></a>返回字符串个数或者传入参数个数..</h1></li></ul><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\</td><td>代表一个反斜线字符’’'</td><td>092</td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\0</td><td>空字符(NULL)</td><td>000</td></tr><tr><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>1到2位十六进制所代表的任意字符</td><td>二位十六进制</td></tr></tbody></table><ul><li><p>常用字符串方法 string + . +</p><ul><li>upper 大写 lower 小写</li><li>gsub(string , findstring , replacestring ,num) 从string中查找findstring,并替换为replacestring ，num是替换的次数</li><li>find ()  返回首次出现该字符串的前后位置，包括开始和结束的位置</li><li>reverse 反转</li><li>char(num1,num2…) 将数字变为字母，ascii码</li><li>byte(字母串,指定某个字符) 将字母变为数字</li><li>len 长度</li><li>rep(string,num) 返回重复num次的string</li><li>gmatch(string,pattern) 返回一个迭代器，返回一个符合pattern的字串，可以使用 </li><li>format ()格式化 <a href="https://www.twle.cn/l/yufei/lua53/lua-basic-strings-format.html">转义码</a></li></ul></li><li><p>数组 lua的数组可以从负数开始遍历索引从1开始</p><ul><li><code>for i= -1 , 10 do ...</code></li><li>迭代器: <pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- pairs用于匹配键值对</span><span class="token keyword">local</span> myTable <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>myTable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--ispairs 用于遍历数组，字符串等</span><span class="token keyword">local</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--自定义迭代器，实际就是自己写的遍历算法。。</span><span class="token keyword">function</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span>    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">local</span> size <span class="token operator">=</span> <span class="token operator">#</span>collection    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> size <span class="token keyword">then</span>            <span class="token keyword">local</span> value <span class="token operator">=</span> collection<span class="token punctuation">[</span>index<span class="token punctuation">]</span>            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> value        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token keyword">local</span> iter <span class="token operator">=</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token keyword">for</span> value <span class="token keyword">in</span> iter <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>table常用方法 table + . +</p><ul><li>concat 是 concatenate (连锁, 连接) 的缩写. table.concat() 函数列出参数中指定 table 的数组部分从 start 位置到 end 位置的所有元素, 元素间以指定的分隔符(sep)隔开</li><li>insert(table,pos,value) 在指定位置添加一个value ,如果未指定位置，默认从尾部加入</li><li>remove(table,post) 返回并移除table 位于pos位置的元素，后面的元素会自动向前</li><li>sort 进行升序排序</li></ul></li><li><p>lua的模式匹配<br><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">开源中国中正则表达式列表</a><br><a href="https://www.twle.cn/l/yufei/lua53/lua-basic-strings-match.html">lua模式匹配</a></p></li><li><p>% 用于将后面的字符转义为字面量而不是特殊字符，例如</p></li><li><p>%。 匹配的是。而不是其他的</p></li><li><p>有时也会有特殊含义: %a 代表的是匹配一个字母，%d 代表匹配一个数字</p></li><li><p>字符类 %d 匹配任意数字，所以可以使用模式串 ‘%d%d/%d%d/%d%d%d%d’ 搜索 dd/mm/yyyy 格式</p></li><li><p>模块和导包</p></li><li><p>导包require(模块名)，甚至可以加个.var赋给一个变量来调用模块</p></li><li><p>元表？</p></li><li><p>协程</p></li><li><p><a href="https://www.twle.cn/l/yufei/lua53/lua-basic-file-io.html">文件</a></p></li></ul><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>一种高性能的 HTTP 和&nbsp;反向代理的服务器，<strong>默认监听端口是80</strong>不是8080</p><ul><li>基本命令<pre class="line-numbers language-css" data-language="css"><code class="language-css">nginx 启动nginx -s quit 优雅的退出，完成所有任务后退出nginx -s stop 强制退出nginx -s reload 重启，来刷新配置文件nginx -t 测试配置文件是否可用，同时会显示配置文件的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>配置文件</strong><br>配置文件分为三类</li></ul><ol><li>全局块,服务器配置，日志存放等</li><li>events 主要影响服务器和用户的网络连接</li><li>http 可以分很多块<ul><li>server块  全局块 本机监听配置和ip配置</li><li>location 局部块  控制地址定向，转发等 ， 在server块内来匹配新的转发路径<br>用法一：反向代理，作为另一个服务器的转发服务器来隐藏另一个服务器<br>使用docker 启动一个tomcat服务器，并进入并启动服务<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker run -itd tomcat /bin/sh进入tomcat/bin目录./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>错误情况：</li></ul></li></ol><p>docker tomcat无法启动</p><ol><li>可能没有映射端口或者没有关闭防火墙</li><li>把webapps.dist目录换成webapps</li><li>将文件扔到webapps即可</li></ol><p>测试第一个方法，解决问题！</p><p>进入容器内部</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">docker exec <span class="token operator">-</span>it mytomcat <span class="token operator">/</span>bin<span class="token operator">/</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">rm <span class="token operator">-</span>rf webappsmv webapps<span class="token punctuation">.</span>dist webapps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制</p><p>重启tomcat</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">docker restart mytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看docker的tomcat ip<br><code>docker inspect ID | grep IPAddress</code><br>配置文件:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">server</span> <span class="token punctuation">{</span>    listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888    server_name  [服务器的ip地址]<span class="token punctuation">;</span> # 不带http    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>    <span class="token selector">location /</span> <span class="token punctuation">{</span>        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//<span class="token property">tomcat服务器ip</span><span class="token punctuation">:</span>8080<span class="token punctuation">;</span> ##需要代理的服务器地址        index index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page 404 /404.html<span class="token punctuation">;</span>        <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>        <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器输入服务器的ip和代理端口，就可以看到docker容器中tomcat的主界面</p><ul><li><p>实现服务器分发<br>配置</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">server</span> <span class="token punctuation">{</span>    listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888    server_name  [服务器的ip地址]<span class="token punctuation">;</span>    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>    <span class="token selector">location /hi/</span> <span class="token punctuation">{</span>        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//服务器2<span class="token punctuation">;</span> ##需要代理的服务器地址        index index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">location /hello/</span> <span class="token punctuation">{</span>        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//服务器2<span class="token punctuation">;</span> ##需要代理的服务器地址        index index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page 404 /404.html<span class="token punctuation">;</span>        <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>        <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://segmentfault.com/a/1190000022315733">location 匹配</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">location [ = | ~ | ~* | ^~ ] /URI</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token selector">location @/name/</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>########### 顺序1. location =    # 精准匹配2. location ^~   # 带参前缀匹配3. location ~    # 正则匹配（区分大小写）4. location ~*   # 正则匹配（不区分大小写）5. location /a   # 普通前缀匹配，优先级低于带参数前缀匹配。6. location /    # 任何没有匹配成功的，都会匹配这里处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong><code>空</code></strong></td><td>location 后没有参数直接跟着&nbsp;<strong>标准 URI</strong>，表示前缀匹配，代表跟请求中的 URI 从头开始匹配。</td></tr><tr><td><strong><code>=</code></strong></td><td>用于<strong>标准 URI</strong>&nbsp;前，要求请求字符串与其精准匹配，成功则立即处理，nginx停止搜索其他匹配。</td></tr><tr><td><strong><code>^~</code></strong></td><td>用于<strong>标准 URI</strong>&nbsp;前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</td></tr><tr><td><strong><code>~</code></strong></td><td>用于<strong>正则 URI</strong>&nbsp;前，表示 URI 包含正则表达式，&nbsp;<strong>区分</strong>大小写</td></tr><tr><td><strong><code>~*</code></strong></td><td>用于<strong>正则 URI</strong>&nbsp;前， 表示 URI 包含正则表达式，&nbsp;<strong>不区分</strong>大小写</td></tr><tr><td><strong><code>@</code></strong></td><td>@ 定义一个命名的 location，@ 定义的locaiton名字一般用在内部定向，例如error_page, try_files命令中。它的功能类似于编程中的goto。</td></tr></tbody></table></li><li><p>顺序</p></li></ul><ol><li>先精准匹配&nbsp;<strong><code>=</code></strong>&nbsp;，精准匹配成功则会立即停止其他类型匹配；</li><li>没有精准匹配成功时，进行前缀匹配。先查找带有&nbsp;<strong><code>^~</code></strong>&nbsp;的前缀匹配，带有&nbsp;<strong><code>^~</code></strong>&nbsp;的前缀匹配成功则立即停止其他类型匹配，普通前缀匹配（不带参数&nbsp;<strong><code>^~</code></strong>&nbsp;）成功则会暂存，继续查找正则匹配；</li><li><strong><code>=</code></strong>&nbsp;和&nbsp;<strong><code>^~</code></strong>&nbsp;均未匹配成功前提下，查找正则匹配&nbsp;<strong><code>~</code></strong>&nbsp;和&nbsp;<strong><code>~*</code></strong>&nbsp;。当同时有多个正则匹配时，按其在配置文件中出现的先后顺序优先匹配，命中则立即停止其他类型匹配；</li><li>所有正则匹配均未成功时，返回步骤 2 中暂存的普通前缀匹配（不带参数&nbsp;<strong><code>^~</code></strong>&nbsp;）结果</li></ol><ul><li>负载均衡<br>配置文件(server块)<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">http</span> <span class="token punctuation">{</span><span class="token selector">###此处省略一大堆没有改的配置    ##自定义我们的服务列表    upstream myserver</span><span class="token punctuation">{</span>    #### 可以使用 ip_hash 来进行hash 分配，可以与weight一起使用   ip_hash<span class="token punctuation">;</span>       server 服务器1及端口<span class="token punctuation">;</span> # 可加权值来表示优先级，server 服务器1及端口 + weight = 数字<span class="token punctuation">;</span> 数字越大，权重越高       server 服务器2及接口<span class="token punctuation">;</span>   ……     <span class="token punctuation">}</span>   <span class="token selector">server</span> <span class="token punctuation">{</span>       listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888       server_name  [服务器的ip地址]<span class="token punctuation">;</span>       # Load configuration files for the default server block.       include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>       <span class="token selector">location /</span> <span class="token punctuation">{</span>           proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//myserver<span class="token punctuation">;</span> ##叮，核心配置在这里           proxy_connect_timeout 10<span class="token punctuation">;</span> #超时时间，单位秒       <span class="token punctuation">}</span>       error_page 404 /404.html<span class="token punctuation">;</span>           <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>       error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>           <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>关闭一个tomcat之后，发现仍然可以访问，但关闭所有的tomcat时发现无法访问了，说明实现了负载均衡</li></ul><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h1><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">useradd -m username 创建用户，-m是会创建对应的用户目录到/home下，不加的话不会创建这个目录，-d 参数用来指定用户目录的位置userdel -r 直接把用户目录删掉了不加r就不删除目录who am i 看当前账号是什么groupadd 创建一个用户组useradd -g 用户组 用户名   把这个用户加入到用户组usermod -g 用户组 用户名  修改usermod -d 目录名 用户名 改变该用户登录的初始目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他指令</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">mkdir -p 创建多级目录cp -r 递归的复制整个文件夹cat -n 显示行head -n 数字 默认看前10行 ， 加上-n 之后可以指定查看多少行tial -n 数字 查看最后几行 tail -f 实时追踪该文件的所有更新&gt; 将内容覆盖在文件中&gt;&gt; 在后面追加ln -s 文件 链接的地方 history ! + history 中的指令编号，重新执行这条指令datecal 日历find 路径 -name 匹配文件名-user 属于某个用户的-size +n /-n /n 匹配文件大小 + 代表大于，-代表小于，不加代表等于 可加单位 K/M/Glocate 通过自建的数据库来进行查找，速度迅速，但是需要自己更新数据库限制性updatedbgrep |grep + -n 显示行号/ -i 忽略字母大小写匹配 + 要匹配的关键字权限1-9位依次是 user group other的武安县chown  -R 用户 文件 改变所属 -R来把里面的文件也执行这种修改chgrp  组名 文件名 改变所有组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="任务按时调度"><a href="#任务按时调度" class="headerlink" title="任务按时调度"></a>任务按时调度</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">crond -l 显示当前用户的定时任务crontab -e 来编辑内容语法：* * * * * /path/to/command 也可以直接写一行shell脚本1. 第一个星号：分钟（0-59）2. 第二个星号：小时（0-23）3. 第三个星号：日期（1-31）4. 第四个星号：月份（1-12或使用缩写，如1代表一月，2代表二月，以此类推）5. 第五个星号：星期几（0-7或使用缩写，0和7都代表星期日，1代表星期一，以此类推）使用这些星号，您可以定义定时任务的执行时间。例如，以下是一些示例：- `* * * * *`：每分钟都执行任务。- `0 * * * *`：每小时的开始时执行任务。- `0 0 * * *`：每天的午夜（凌晨12点）执行任务。- `0 0 1 * *`：每个月的第一天（日期1）的午夜执行任务。- `0 0 * * 5`：每个星期五的午夜执行任务。如果您想要更具体的时间表，可以将具体的数字替换星号，例如 `30 8 * * 1-5` 表示每个工作日的上午8点30分执行任务。at 执行一次性任务只会在指定的时间点执行但是不会重复执行措辞用法1. at + 时间  <span class="token property">hh</span><span class="token punctuation">:</span>mm2. 输入要执行的指令然后按 ctrl + d 保存atq 查看计划中的任务删除计划任务atrm  id crontab -r 删除定时任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">lsblk 显示所有的磁盘和分区和挂载情况fdisk 指定目录下的磁盘mkfs 格式化磁盘mount 磁盘目录 挂载目录 挂载分区umount 取消挂载df-h 查看磁盘状态 -T 查看磁盘类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">ifconfig 查看ipnetstat  查看系统网络情况-an 按照一定顺序排序输出-p  不加参数 显示哪个进程在调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进程管理</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">ps -a 显示当前所有进程信息-u 以用户的格式显示进程信息-x 显示后台运行的参数-e 显示所有进程 包括父进程等等-f 全格式kill  + pid 删除进程-9 强制killall 进程名称<span class="token punctuation">(</span>支持通配符匹配<span class="token punctuation">)</span>pstree 查看进程树-p 显示pid-u 显示进程所属用户<span class="token comment">/*service*/</span>systemctl +start xxx stoprestartstatus 查看某个服务的状态enable 启动一个服务，使其自启动list-unit-files --type=service | grep enabled 查看所有已启动的服务get-default 查看系统的默认目标set-default 设置默认目标list-units 列出正在运行的单元top 和ps相似，但是可以实时更新正在运行的的进程-d + 秒数 每隔多少秒更新一次-i 使top不显示任何僵死进程-p + pid 监视某个指定进程的状态top中使用P 按照cpu使用率排序，默认M 以内存使用率N 以PIDq 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="shell-编程"><a href="#shell-编程" class="headerlink" title="shell 编程"></a>shell 编程</h1><ul><li>重定向</li><li>here document<pre class="line-numbers language-css" data-language="css"><code class="language-css">#!/bin/bashcat &lt;&lt; END<span class="token string">"这里是ls的使用方法"</span>ENDls /root/shell_test输出&gt;&gt;&gt;<span class="token string">"这里是ls的使用方法"</span>hell.sh  ls.shsay.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>管道<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">|</span><span class="token operator">&amp;</span>    将标准输出和错误信息一起传递给后面的命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>命令分组<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">{</span>commands.......<span class="token punctuation">}</span> &gt; 文件使用 <span class="token punctuation">(</span><span class="token punctuation">)</span> 会将命令由子shell来进行执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>:</code> 等于true</li><li>echo<pre class="line-numbers language-css" data-language="css"><code class="language-css">echo -e 后面就可以加上换行符和制表符等特殊符号了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>printf<pre class="line-numbers language-css" data-language="css"><code class="language-css">printf 格式<span class="token punctuation">(</span>%s等<span class="token punctuation">)</span> 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>set / unset 设置/取消 环境变量</li><li>read 从标准输入读入放入后面给出的变量</li><li>wait 控制多进程</li><li>eval , exec , sed</li><li>source 执行shell脚本</li></ul><h1 id="k8s-kubernetes"><a href="#k8s-kubernetes" class="headerlink" title="k8s kubernetes"></a>k8s kubernetes</h1><blockquote><p>解决容器编排问题，实现分布式部署和替换，实现服务器集群</p></blockquote><p>kubernetes组件<br>一个kubernetes集群主要是由控制节点(master)、**工作节点(node)**构成，每个节点上都会安装不同的组件。  </p><ul><li>master：集群的控制平面，负责集群的决策 ( 管理 )</li></ul><p>ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制  </p><p>Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上  </p><p>ControllerManager : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等  </p><p>Etcd ：负责存储集群中各种资源对象的信息  </p><ul><li>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</li></ul><p>Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器  </p><p>KubeProxy : 负责提供集群内部的服务发现和负载均衡  </p><p>Docker : 负责节点上容器的各种操作</p><ul><li>基础概念<br>Master：集群控制节点，每个集群需要至少一个master节点负责集群的管控</li></ul><p>Node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行  </p><p>Pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器  </p><p>Controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等  </p><p>Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod  </p><p>Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签  </p><p>NameSpace：命名空间，用来隔离pod的运行环境</p>]]></content>
      
      
      
        <tags>
            
            <tag> vim git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2023/06/28/yu-yan-ji-gong-ju/go/"/>
      <url>/2023/06/28/yu-yan-ji-gong-ju/go/</url>
      
        <content type="html"><![CDATA[<h1 id="Go学习"><a href="#Go学习" class="headerlink" title="Go学习 ."></a>Go学习 .</h1><p>Go比起Java和C++ ，他与C的关系更密切</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明多个变量</span><span class="token keyword">var</span> <span class="token punctuation">(</span>v1    v2<span class="token punctuation">)</span><span class="token comment">//变量初始化，无需声明变量类型</span>v1 <span class="token operator">:=</span> <span class="token number">1</span><span class="token comment">//多重赋值</span>v1 <span class="token punctuation">,</span> v2 <span class="token operator">=</span> v2 <span class="token punctuation">,</span> v1 <span class="token comment">//实现交换两个变量，但是只能交换两个同一类型的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>^75e37b</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型:"></a>类型:</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">float32</span> <span class="token comment">//等于c中的float</span><span class="token builtin">float64</span> <span class="token comment">// double</span><span class="token comment">//复数类型，和数学上的表达一样</span><span class="token keyword">var</span> <span class="token punctuation">(</span>v1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5i</span>v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6i</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token comment">//输出为</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1i</span><span class="token punctuation">)</span><span class="token comment">//中文字符在UTF-8中占三个字节</span>s <span class="token operator">:=</span> <span class="token string">"你好"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//数组通过range来遍历，range有两个返回值所以，第一个返回的是数组的下标，第二个是返回的数组的数值，所以要用两个变量来存储</span>s <span class="token operator">:=</span> <span class="token string">"0123456"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//同时注意数组的初始化的方式是这这样的</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span> <span class="token comment">//当不需要某个返回类型时使用_来跳过这个返回类型即可</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><pre class="line-numbers language-none"><code class="language-none">strconv.xxxx即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组定于的一种方式，会根据给定的初始化的元素决定数组的长度</p><p><code>a := [...]int{1}</code></p><p>数组切片，类似于vector</p><p>切片创建方式有：</p><ol><li><p>基于原有的数组来创建</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">//需要使用Var 来声明切片数组的类型，等号的右侧可以时 array[first , end] ,想要截取的首位位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><u><strong>直接创建</strong></u></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//使用make进行直接创建</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//建立一个初始原为5个但是预留十个元素的空间的切片</span><span class="token comment">//直接在建立的过程中赋予初值</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>切片的部分常用函数</p><ul><li>len() 返回已经存储的元素的个数</li><li>cap() 返回切片分配的空间大小</li><li>append() 追加元素</li><li>copy() 复制</li></ul><p>数组也可以定为接口数组，结构体数组，管道数组等等</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//接口数组</span><span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">}</span><span class="token comment">//管道数组</span><span class="token keyword">var</span> chanList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义空数组:</p><p><code>var a [0] int</code></p><h3 id="map类型"><a href="#map类型" class="headerlink" title="map类型"></a><u>map类型</u></h3><p>Go中将其变为基本类型，可以直接使用，不需要引入库</p><p>声明:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myMap <span class="token keyword">map</span><span class="token punctuation">[</span>键的类型<span class="token punctuation">]</span>值的类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建:初始化创建时要注意在初始化的最后一个数据的后面加上逗号才代表初始化完成，否则会报错</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//指定容量</span>myMap <span class="token operator">=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>键<span class="token punctuation">]</span>值 <span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token comment">//直接初始化</span>myMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token comment">//一定要加上逗号</span><span class="token punctuation">}</span><span class="token comment">//直接声明＋初始化一起</span>myMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">delete</span> <span class="token punctuation">(</span>myMap <span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> myMap<span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>if else 结构</p><ul><li><p>if else 的括号必须在一行，否则编译失败，当出现else时，else 必须和 ‘’} ‘’在一行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//正确</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//错误</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//所以也推荐使用省略else的语句</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件不需要使用括号</p></li><li><p>花括号必须存在</p></li></ul></li><li><p>switch : 不需要显性的使用break来退出判断，默认的已经带有break了</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">{</span><span class="token comment">//用来替代if 语句，比起嵌套if更好判断代码</span><span class="token keyword">case</span> t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">:</span>    xxxx<span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token punctuation">:</span>    xxxx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>                      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更强大的break break后面可以加上标签，使用方法与goto一致</p></li><li><p>函数 </p><p>Go的函数拥有多重返回值，可以更方便的把函数的执行结果返回</p><p>注意：小写字母开头的函数只有本包可见，而大写字母开头的函数才可以被其他包使用</p><p>一般语法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">(</span>返回列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不定参数 在写形参列表的时候使用…来省略参数即可达到不定参数的作用</p><p>例:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>概念: 这种使用方式是语法糖，语法糖对语言的功能没有用影响但是可以方便使用，也能够增加程序的可读性，减少出错的机会</p><p>这里的 … 相当于一个数组切片，等价于下面的语句</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//调用的时候必须使用这种方式进行调用了</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名函数：Go支持随时随地定义匿名函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//在定义的时候进行调用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//匿名函数赋给变量</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 注意此处的a相当于 args [] 所以a不是int型不可以直接返回</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>闭包</strong></p><p>闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境)。</p><p>匿名函数是一类闭包</p><ul><li>包含自由变量的代码块，这些变量不在这个代码块内或者任何全局上下文中定义，而是在定义代码块中的环境中进行定义的。要执行的代码块为自由变量提供绑定的计算环境(作用域)</li><li>闭包每次调用都是新的实例</li><li>闭包中的变量会保存，即使调用结束也会保存，，可以保证闭包中的变量的安全性，不会被外部函数修改</li></ul><p>闭包可以获得所在函数内的作用域，但是外部不可修改闭包的数据</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token comment">//闭包</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token operator">++</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//每一次调用都是新的实例</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回函数的函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f <span class="token operator">:=</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//fmt.Println(Add1()(1, 2)) 另一种方式</span><span class="token punctuation">}</span><span class="token comment">//返回了一个 匿名函数</span><span class="token keyword">func</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>错误处理</p><p>error接口是内置的，里面只有一个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>      <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>defer</p><p>类似于析构函数，遵循先进后出，用于函数执行之后进行一些资源释放的收尾工作</p><p>使用语法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">defer</span> <span class="token operator">+</span> 执行语句要执行语句很多时可以写一个匿名函数来进行处理<span class="token keyword">defer</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    回收工作<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panic() 和 recover()</p><p>panic ( ) 用于立刻终止程序，但是defer不影响，会正常执行，panic可以接受任意类型的数据</p><p>recover ( ) 用于终止错误处理流程，一般放在defer中来截取错误信息</p></li></ol><h2 id="面型对象编程-OOP-Object-Oriented-Programming"><a href="#面型对象编程-OOP-Object-Oriented-Programming" class="headerlink" title="面型对象编程(OOP , Object Oriented Programming)"></a>面型对象编程(OOP , Object Oriented Programming)</h2><ol><li><p>类型系统</p><p>Go可以给任意类型(包括内置类型，但不包括指针类型)添加相应的方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Integer <span class="token builtin">int</span><span class="token comment">//Integer 与int 并无区别，只是我们认为给他加上了一个自带的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">less</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"回收了"</span><span class="token punctuation">)</span><span class="token keyword">if</span> a<span class="token punctuation">.</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"错误回收"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>面向对象只是换了一种方式来表达语法，所以实质上也是语法糖</p><p>Go没有隐藏的指针</p><ul><li>方法的对象显式传递</li><li>方法的对象不需要是指针，也不需要是this</li></ul></li><li><p>对于public 类， 需要采用类名首字母大写</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Base <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>Base<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>foo<span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>base <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span>base<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>foo <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>foo<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>接口</strong></p><p>其他语言在使用接口时必须要先从接口进行继承，才能进行实现接口</p><p>简言之，必须知道接口要实现什么才能定义接口，但实际情况是，不知道接口要实现什么</p><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Java 语法</span><span class="token keyword">interface</span> <span class="token class-name">IFoo</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>提供哪些接口好呢？</li><li>如果两个类实现了相同的接口，应该把接口放进哪个包内？</li></ol><p>Go的接口是非侵入式的，只要类实现了接口要求的所有函数，就算是实现了这个接口，可以直接进行赋值</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//实现接口的类</span><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 实现类方法，也就是接口的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//两个以后出现的接口</span><span class="token keyword">type</span> IFile <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> IPrint <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> file1 IFile <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span><span class="token keyword">var</span> file2 IPrint <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>file3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>file1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IFile接口实现"</span><span class="token punctuation">)</span>file2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IPrint接口实现"</span><span class="token punctuation">)</span>file3<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"实现接口的类，并不需要提前知道有哪些接口，只要能够实现了以后会出现的接口的函数即可直接使用"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是 Go 语言里有非常灵活的 <strong>接口</strong> 概念，通过它可以实现很多面向对象的特性。接口提供了一种方式来 <strong>说明</strong> 对象的行为：如果谁能搞定这件事，它就可以用在这儿。</p><p>接口定义了一组方法（方法集），但是这些方法不包含（实现）代码：它们没有被实现（它们是抽象的）。接口里也不能包含变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Method1</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type    <span class="token function">Method2</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用接口时，如果某个类实现了接口的方法，那么接口类型的变量可以赋值为这个类的变量</p><p>如果接口接口A和接口B的方法是一致的，那么在Go中属于完全等价</p><p>如果A接口的方法是B接口方法的子集，那么B接口可以赋值给A接口，而A接口不能赋值给B接口</p><p>接口查询：用于查询某个接口是否属于某个类型</p><blockquote><p>实例 <code>num2</code> 是否属于接口 <code>Number1</code>，可以这么做：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num1 Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 Number2 <span class="token operator">=</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">;</span><span class="token keyword">if</span> num3<span class="token punctuation">,</span> ok <span class="token operator">:=</span> num2<span class="token punctuation">.</span><span class="token punctuation">(</span>Number1<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num3<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果num2 实例所指的对象是属于Number1的，那么ok值为1 ，num3 转化为 Number1的一个实例，之后执行条件内的代码</p></blockquote><p>类型查询：用于查询接口指向的对象实例的类型</p><p>语法:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> v <span class="token operator">:=</span> v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两者一般搭配使用</p><p>Any类型</p><p>任何对象实例都满足空接口 interface { } 所以interface { } 可以作为一个可以指向任何对象的Any类型，当函数可以接受任何实例时，可以将其声明为interface { } </p><p>例如： fmt库中的Print函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Print <span class="token punctuation">(</span>fmt <span class="token builtin">string</span> <span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>主流实现模型:</p><ol><li><p>多进程</p><p>操作系统层面进行的</p></li><li><p>多线程</p><p>操作系统之上的调度</p></li><li><p>基于回调的非阻塞/异步IO</p><p>通过事件驱动的方式使用异步IO，使服务器持续运转并且尽可能的少用线程，降低开销，代表有Node.js，会对流程进行分割</p></li><li><p>协程</p><p>本质是用户态线程，不需要抢占式调度，寄存于线程，缺点是需要语言支持</p></li></ol><p> <strong><u>gorountine</u></strong></p><p>通过在代码中加上go关键字启用协程，主程序结束时，写成会被结束</p><p>通信方式：消息机制和共享内存</p><p>消息机制：每个并发单位都是自包含、独立的个体，都有自己的变量，并且单元间的变量不共享，每个单元的输入输出只有一种那就是消息。不同进程依靠消息来进行通信，他们不会共享内存</p><p><strong><u>channel</u></strong></p><p>Go提供的goroutine间的通信方式，是进程内的通信方式，不适合进程之间进行通信</p><p>一个channel 只能传递一种类型的值</p><p>基本语法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明</span><span class="token keyword">var</span> chanName <span class="token keyword">chan</span> ElemenType <span class="token comment">//例如 声明一个传递类型为int的channel</span><span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//定义</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//缓冲大小为2</span><span class="token comment">//写入channel</span>ch <span class="token operator">&lt;-</span> value <span class="token comment">//写入数据会导致陈孤虚阻塞，直到有其他goroutine 从channel中读取数据</span><span class="token comment">//读取</span>value <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch <span class="token comment">// 如果channel中没有数据也会进行堵塞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Count</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Counting"</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">//写入数据,导致这个goroutine阻塞，直到有其他goroutine从中读取数据</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>chs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 储存十个goroutine的channel数组</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//启动十个协程</span><span class="token keyword">go</span> <span class="token function">Count</span><span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> chs <span class="token punctuation">{</span><span class="token operator">&lt;-</span>ch <span class="token comment">//读取channel</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select</p><p>文件发生IO动作，select会被调用并返回</p><p>语法： 条件必须是IO操作</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> chan1 <span class="token punctuation">:</span> <span class="token comment">//从chan1成功读取到数据</span>    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token comment">//成功向chan2写入数据</span>    <span class="token keyword">default</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//随机向ch 中写入一个1或者是0</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">}</span>i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>chfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value Received :"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓冲机制</p><p>建立channel数组即可实现缓冲</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>超时机制</p><p>Go中没有提供查实处理机制，但是可以使用select来处理，因为select只要有一个case已经完成即可继续进行下去</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//未写入任何数据，所以会把程序堵塞</span>timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//等待一秒钟</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"读取中"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"超时了"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>channel 传递，可以用来实现pipe 待补充</u></p><p>单向channel  用于防止写入某些不需要的数据或者被不需要的函数读取</p><p>只能读或者只能写</p><p>定义</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ch1 <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//正常的channel</span><span class="token keyword">var</span> ch2 <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">float64</span> <span class="token comment">// 只能写</span><span class="token keyword">var</span> ch3 <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//只能读</span><span class="token comment">//初始化</span>ch4 <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 正常</span>ch5 <span class="token operator">:=</span>  <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 从正常的channel进行类型转化为单项读取的channel</span>ch6 <span class="token operator">:=</span>  <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 转化为单项写入的channel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭channel</p><p>使用close()即可</p><p>如何判断已经关闭?</p><p>多重返回值的方式进行帕努的那</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch<span class="token comment">//只需要看ok即可，如果ch已经关闭，那么读取失败，ok的返回值为false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h4><p>同步锁</p><p>sync包中提供</p><p>Mutex锁</p><p>当一个goroutine 获得了Mutex 后，其他的goroutine 只能等待这个释放锁</p><p>RWMutex 锁 </p><p>单写多读 ， 在读锁占用时，会阻止写，但是不会阻止读</p><p>全局唯一性操作</p><p>使用Once类型，当别的goroutine </p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="Socket编程-IP-层"><a href="#Socket编程-IP-层" class="headerlink" title="Socket编程  IP 层"></a>Socket编程  IP 层</h3><p>socket是什么？</p><blockquote><p>Socket是对TCP/IP协议的封装，自身并非协议而是一套调用的接口规范（API）。通过套接字Socket，才能使用TCP/IP协议。</p></blockquote><p>传统的Socket编程主要步骤：</p><ol><li>建立Socket： 使用socket() 函数</li><li>绑定Socket :使用bind() 函数</li><li>监听： 使用listen() 函数，或者connec() 函数</li><li>接受连接： accept() 函数</li><li>接收： receive() 函数 ，发送send() 函数</li></ol><p>Go的：</p><p>Go语言标准库对此过程进行了抽象和封装，无论我们期望使用什么形式的连接，只需要调用net.Dial()即可</p><p>Dial原型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Dial <span class="token punctuation">(</span> net <span class="token punctuation">,</span> addr <span class="token builtin">string</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> Conn <span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">/*net : 网路协议名称addr IP地址或域名，端口以":" 的形式跟在后面，端口号可选Conn 是否成功连接*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工程管理"><a href="#工程管理" class="headerlink" title="工程管理"></a>工程管理</h2><p>代码格式化</p><p>格式化之前的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> Foo <span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span> <span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> a<span class="token operator">&gt;</span>b <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>i <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span> <span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令行: go fmt xxx.go得到的代码,也可以直接go fmt 会格式化所有*.go的文件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gotool</p><p>生成exe</p><p>gobuild 后面可以加上-o + name 指定执行文件的名字</p><p><strong>格式化输出</strong>: Printf</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">%</span>v按值的本来值输出<span class="token operator">%</span><span class="token operator">+</span>v在 <span class="token operator">%</span>v 基础上，对结构体字段名和值进行展开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成随机数需要设置随机数种子</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>v <span class="token operator">:=</span> <span class="token number">100</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h2 id="GO工具"><a href="#GO工具" class="headerlink" title="GO工具"></a>GO工具</h2><p>gofmt</p><p>goimports == gofmt + 依赖包管理</p><p id="test"> 奥奥奥 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github学生包/学生认证申请那些事</title>
      <link href="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/"/>
      <url>/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Github对学生有很多优惠，<del>至于哪些可太多了，所以有必要申请一个</del>，</p><p>这个大佬写的很详细了，我在这里加一些我踩得坑，如果跟大佬的步骤走没通过的话，可以回来看看有没有我踩过的坑</p><p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p></blockquote><h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><blockquote><ol><li>一个好的浏览器(支持定位的浏览器)</li><li>一份学信网学籍认证 和 一个教育邮箱(更容易通过 ，可以去企业微信里看看有没有开通)</li><li>修改pdf文件中的信息</li><li>github profile 中修改个人信息</li><li>认证并且全程不要挂梯子</li></ol></blockquote><h2 id="1-好的浏览器"><a href="#1-好的浏览器" class="headerlink" title="1.好的浏览器"></a>1.好的浏览器</h2><p><strong>这是重中之重，我在申请的时候不知道Chrome怎么了，一直定位不成功，换成 edge之后就成功了</strong></p><h2 id="2-学信网认证"><a href="#2-学信网认证" class="headerlink" title="2.学信网认证"></a>2.学信网认证</h2><p>进入学信网，下载电子报告即可，网上都有教程，这里不做赘述了</p><p><a href="https://www.chsi.com.cn/">中国高等教育学生信息网（学信网） (chsi.com.cn)</a></p><h2 id="3-修改pdf文件信息"><a href="#3-修改pdf文件信息" class="headerlink" title="3.修改pdf文件信息"></a>3.修改pdf文件信息</h2><p>因为github不是国内的，所以中文档案是不能通过的，而且pdf编辑好像很难搞，这里给一个下载链接，使用这个进行编辑会方便些</p><p>密码：tko9</p><p><a href="https://cloud.189.cn/web/share?code=ZNbamiEziq6z">Adobe CC 2022 免费高速下载 | 天翼云盘 珍藏美好生活 家庭云|网盘|文件备份|资源分享 (189.cn)</a></p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618200641.png" alt="下载安装即可"></p><p>修改内容：</p><p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p><p>可以看这篇文章</p><h2 id="4-修改github-profile-中的信息"><a href="#4-修改github-profile-中的信息" class="headerlink" title="4.修改github profile 中的信息"></a>4.修改github profile 中的信息</h2><ul><li>名字改为英文名</li><li>Bio 修改为   student of 学校英文名 + @ 学校英文名</li><li>company 修改为学校英文名</li></ul><h2 id="5-申请："><a href="#5-申请：" class="headerlink" title="5.申请："></a>5.申请：</h2><p>网站：<a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p><p><strong><u>全程不要挂梯子</u></strong></p><ol><li><p>添加教育邮箱 </p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618201441.png" alt="添加邮箱"></p></li><li><p>填写申请理由，理由随便写，可以参考我的</p><pre class="line-numbers language-none"><code class="language-none">I would like to use the Github Student Pack to further explore more features of Github, such as Github Copilot and Educative's learning courses.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>点击continue </p><blockquote><p>点击之后会询问你是否允许访问位置，同意即可</p><p><strong><u>如果点击之后，一直卡在这个页面，那么是浏览器的问题，可以换个浏览器试试或者过几天再试试</u></strong> </p><p><del>我就是换了好几个不成功，最后莫名其妙就能访问了</del></p><p>之后进入上传图片的页面，右下角有上传图片 <strong>(如果你没有的话，说明你上梯子了或者离学校太远了，直接重新认证一遍吧)</strong></p><p>上传修改之后的学信网认证截图</p><p><strong>注意：上传图片格式是jpg 不支持png！！！</strong></p></blockquote></li><li><p>点击提交，如果按以上流程走的话应该是秒通过的，看看邮箱是否收到邮件，或者返回认证申请的第一页，看看右侧是否通过</p><p><a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p></li></ol><h2 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h2><p>一定要有耐心，不挂梯子的话，github的访问基本上是时有时无的，所以要有耐心，多试试，过几天再试试，推荐在学校里申请，或者使用学校的vpn访问网站</p><p>祝通过！！！</p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618202519.png" alt="Elysia会祝福你的"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web学习</title>
      <link href="/2023/06/17/qian-duan/web-xue-xi/"/>
      <url>/2023/06/17/qian-duan/web-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="新坑-到P83页了。。。"><a href="#新坑-到P83页了。。。" class="headerlink" title="新坑  到P83页了。。。"></a>新坑  到P83页了。。。</h1><h2 id="HTML5基本语法"><a href="#HTML5基本语法" class="headerlink" title="HTML5基本语法"></a>HTML5基本语法</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 一个横线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span> 用于为input 元素进行标注 其 for 属性应与要绑定的元素的id相同，form属性用于规定其属于哪个或者多个表单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档声明，目的是让浏览器知道这是什么类型的文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档的开始，没有什么实际含义--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--头标记，放在html 内来防止这个文件中的信息，比如提供索引信息或者定义CSS样式等--&gt;</span>         <span class="token comment">&lt;!--标题标记，网页的标题，也就是上方的标~ 题，不是内容的标题--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>                    我的测试文件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档正文的开始--&gt;</span> <span class="token comment">&lt;!--文本属性中可以加入text 来表示文本的颜色，bgcolor来表示背景的颜色--&gt;</span>        <span class="token comment">&lt;!-- &lt;body text="red" bgcolor="blue"&gt;--&gt;</span>        <span class="token comment">&lt;!--hn 各种大小标题--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--设置字体颜色--&gt;</span>                蓝色的一级标题            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--段落标记--&gt;</span>            这是我的第一个测试文件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字样式标记--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--加粗--&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--斜体--&gt;</span>            这是加粗斜体字         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--删除线--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">&gt;</span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--下划线--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--放大缩小，加强强调，强调，现实电子邮件或者地址，写代码--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>放大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>缩小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--加强强调--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>加强强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>2354796263@qq.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>            #include &lt;bits/stdc++.h&gt;            using namespace std;            int main(){                cout &lt;&lt; "Hello World!"&lt;&lt; endl;                return 0;            }        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字上浮和下浮--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字样式标记--&gt;</span>        <span class="token comment">&lt;!--文本的位置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">face</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 实现居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--font 还可以设置字体和大小，属性是 face 和 size--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span>  <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>实现右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--照片的操作--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source/image/Elysia.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片丢失时显示<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>鼠标放在上面可以看到<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导航菜单</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">使用&lt;ul&gt; + &lt;li&gt; + &lt;a&gt; 即可，之后在css中进行设置样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>设置表格:</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>表格 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> 定义一行 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span><span class="token punctuation">&gt;</span></span> 定义一列 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 定义一个单元格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span> 表格的大标题 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 表头，主要用于行或列的名称，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 相似实例:     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>#eeeeee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>成绩表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--开始定义表头--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>114<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>514<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 中的rowspan 和 colspan 来合并单元格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置表单</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span> 两个标签实例：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    type = "text"    name 设定文本框的名称，在交互程序中可以用到    size 数值，设定此一栏位要显示的宽度    value 预设内容    maxlength 设置文本可输入的最大最大文字长度     type 属性内容:    type = "radio“ 单选    可选属性：    checked 设置某个选项为默认选    name  name属性内容相同的两个选项只能选中一个    type = "checkbox" 多选    可选    checked    name 需要将一组选中中的所有复选按钮设置为相同的名称才能让服务器处理时知道这几个选项是一个组的    type = "password" 密码框    属性与文本类型相同    type = "submit" 提交按钮    type = "reset"  重置按钮    type = "image"  提交图片    type = "textarea" 多行文本框可选：    cols 定义文本框的宽度，字符的列数    rows 字符行数    wrap 定义换行方式 主要有 off 文字不自动换行， virtual 输入文字时会自动换行，但是如果没有自己按下回车键换行，提交到服务器时结果就时没有换行    physical 自动换行，提交到服务器结果也是换行    列表框：    在form中使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 标签    在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 中使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>来设置选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>## class 的用法：- 一个对象可以包含多个class(方便了在CSS中定义)  ```css   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">          <span class="token selector">.Ely</span><span class="token punctuation">{</span>              <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token selector">.red</span><span class="token punctuation">{</span>              <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ely red<span class="token punctuation">"</span></span> <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Elysia  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p>基本规则:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">张飞{    身高：    体重：    性别    民族}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>选择器</p><blockquote><p>对网页中指定的对象进设置</p></blockquote><ul><li><p>标记选择器：所有同名的标签都会被选择</p><p>使用html 的标记标签进行选择，例如：<code>&lt;p&gt;</code></p><p>基本语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;h1</span> <span class="token punctuation">{</span>     标签选择    声明    <span class="token property">color</span> <span class="token punctuation">:</span>red <span class="token punctuation">;</span>  属性 + 值    <span class="token property">font_size</span> <span class="token punctuation">:</span>25px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类别选择器：实现只修改指定的标签class</p><p>基本语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span> . + 类别名<span class="token punctuation">(</span>自定义的名字<span class="token punctuation">)</span> 声明   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>ID选择器，**<u>id在HTML中具有唯一性，不可重复，尽量做到一个标签一个id</u>**</p><p><strong><u>ヽ（≧□≦）ノ</u></strong></p></li></ul></li><li><p>HTML中使用方法：</p><ul><li><p>行内央视，直接使用 <code>&lt;style&gt;</code>属性 <strong><u>注意，每一个声明之后要加入分号</u></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p style=<span class="token string">"color : purple; font-size :larger"</span> align = <span class="token string">"center"</span>&gt;Elysia    &lt;/p&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内嵌式一般放在 <code>&lt;head&gt;</code> 标签之间</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;head&gt;    &lt;style type="text/css"&gt;        .Ely</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.red</span><span class="token punctuation">{</span>            <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>链接式，将CSS与HTML文件分离 在html中使用 <code>&lt;link&gt;</code> 标签进行 导入</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"文件地址"</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导入式 使用@import 在html初始化时就会进行导入，而使用链接式只有在需要格式时才进行导入</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*需要放在style 标签中*/</span>&lt;style&gt;        <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"1.css"</span><span class="token punctuation">;</span></span>    &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Tips:CSS中遵循覆盖规则，对于同一个被选择的对象，后面的定义会覆盖前面的定义，所以可以使用标签进行全局定义，在使用class 来对指定的对象进行微调</p></li><li><p>Tips2:优先级</p><p>最后面导入的样式    &gt;   最后面的连接式 ， 链接式与  <code>&lt;style&gt;</code> 遵循先后顺序， 同一个 <code>&lt;style&gt;</code> 中内嵌式   &gt;    导入式</p></li><li><p>CSS3新特性：</p><p>交集选择器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">Ely</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p.Ely</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并集选择器：使用  ， 进行隔开即可</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p,.Ely,h5</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>全局选择器：*  使得所有HTML标签都遵循这个规则</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>后代选择器，空格隔开即可</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li ul ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li ul ul ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只对直接后代有用的选择器： p &gt;   可搭配*使用</p></li><li><p>ID 选择器：#+id</p></li><li><p>相邻选择器：A+B 直接兄弟，紧跟着的后面那个</p></li><li><p>相邻兄弟组选择器：A~B 后面的所有兄弟</p></li><li><p>属性选择器： 使用中括号进行选择，属性是自定义的</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p ely = <span class="token string">"123"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;  <span class="token comment">/*这里ely是自定义的属性，它的值是123*/</span><span class="token selector">p[ely]</span><span class="token punctuation">{</span> <span class="token comment">/*使用这个进行选择，即可*/</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*也可以使用属性+属性的值来进行选择*/</span><span class="token comment">/*需要属性的值必须是给定的这个值*/</span><span class="token selector">p[ely = "123"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*属性包含选择器，只需要属性的值包含给定的值的即可*/</span><span class="token selector">p[ely *= "1"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;p ely = <span class="token string">"123 4 5 6"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;<span class="token comment">/*单词包含选择器 ， 只要包含给定单词即可*/</span><span class="token selector">p[ely ~= "123"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以某个单词或者字母开开头的选择器*/</span><span class="token selector">p[ely ^= "1"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以什么结尾的选择器，只要以某个单词结尾或则和某个字母结尾即可，数字也行*/</span><span class="token selector">p[ely $= "6"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><u>结构伪类选择器</u></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*基本语法： E是父元素E : nth - child 第几个元素E : root 根元素，HTML中根元素始终为html还有很多。。。自己去看吧 给个链接：https://juejin.cn/post/7001869576069873695*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><u>伪元素选择器  <del>待补</del></u></strong></p></li></ol><h3 id="CSS继承和层叠特性"><a href="#CSS继承和层叠特性" class="headerlink" title="CSS继承和层叠特性"></a>CSS继承和层叠特性</h3><p>子标记会继承夫标记的所有样式风格，但是子标记的改变不会影响父标记</p><p>层叠是出现冲突时的处理方式，越特殊的样式，优先级越高，</p><p>层叠优先级：行内样式&gt; ID 样式 &gt; 类别样式 &gt;  标记样式</p><h2 id="CSS设置文本样式"><a href="#CSS设置文本样式" class="headerlink" title="CSS设置文本样式"></a>CSS设置文本样式</h2><h3 id="单位："><a href="#单位：" class="headerlink" title="单位："></a>单位：</h3><ol><li><p>相对类型：</p><p>px : 像素，根据设备类分辨率来进行调整，最常用的</p><p>em: 设置以目前字符的高度为单位</p><p>rem: root em 设置以网页跟元素HTML 字符的高度为单位， 一般浏览器莫默认单位为 <u><strong>1rem = 16px</strong></u></p><p>vw 和 vh 基于视图窗口的相对单， 1vw 等于视口宽度的1% 1vh 等于窗口高度的的1%</p></li><li><p>绝对类型</p><p>in 英尺</p><p>cm 厘米</p><p>mm </p><p>pt 点数</p><p>pc 印刷单位 1pc = 12pt</p></li></ol><h3 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h3><p>HTML中统一使用RGB模式，基本设置 rgb(red, green , blue , 透明度 )</p><h3 id="基本设置："><a href="#基本设置：" class="headerlink" title="基本设置："></a>基本设置：</h3><blockquote><p>font-family : 设置字体</p><p>font-style : 设置斜体</p><p>font-weight: 设置加粗，参数有 normal, bold(加粗) , bolder(更粗),lighter(更细), 100- 900 按每100为为一个阶段，数字越大，字体越粗</p><p>font-transform： 大小写转换</p><p>font-size:字体大小</p><p>text-decoration:文字的修饰，主要有underline 下划线，line-through 删除线,overline为文字加顶线，blink 文字闪烁(部分浏览器支持)</p><p>texr-indent：首行缩进，后面跟缩进的长度，一般使用2em来实现缩进两个字</p><p>letter-spacing： 控制字母间距</p><p>word-sacing:控制单词间距</p><p>line-height: 行高</p><p>border :添加边框，可以设置粗细，颜色和虚实</p><p>margin 外边框 后面两个参数分别是设置上下距离和左右距离</p><p>text-align : 设置文本的水平位置，left,right,center, justify(两端对齐)</p><p>background: 设置背景色</p><p>text-shadow: 给图片添加阴影效果，后面四个参数是x轴的偏移尺寸，y轴的便宜尺寸，阴影半径，阴影颜色</p></blockquote><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ul><li>rgba () 第四个参数是透明度</li></ul><h2 id="CSS设置图片属性"><a href="#CSS设置图片属性" class="headerlink" title="CSS设置图片属性"></a>CSS设置图片属性</h2><blockquote><p>border-width 设置边框的粗细</p><p>border-color  设置边框的颜色</p><p>border-style  线性，可以在一些预先定义好的线型中选择</p><p>也可以</p><p>border-上下左右-属性   来单独设置上下左右的边框</p><p>甚至可以直接border ： 后面写大小类型和颜色</p><p>例如： border : plum 2px dotted;</p><p>实现文字环绕：</p><p>float : 将图片移动到页面左侧或者右侧从而使得文字能够从另一端来环绕</p></blockquote><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>DOM ：document object model 文档对象模型 ^eb3dd6</p><p>padding -border-margin 模型  (顺序是上右下左) </p><ul><li><strong>Margin(外边距)</strong>&nbsp;- 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong>&nbsp;- 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong>&nbsp;- 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong>&nbsp;- 盒子的内容，显示文本和图像。</li></ul><p>一个盒模型包括：content(内容) 、padding(内边距) 、border(内容的边框), margin (外边距)</p><p>标准文档流：normal  document stream  </p><blockquote><p>div  区块容器标记，里面可以容纳各种HTML元素，可以将div看作一个对象</p><p>span 也是区块标记</p><p>二者区别： div 内的元素可以自动换行，</p><p>span 不会换行，没结构上的意义，仅仅是一个行内元素，当其他行内元素不适合的时候就可以使用span了</p><p>span 可以包含在div中，但是div不能包含在span 中，使用display来让行内元素表现的像块级元素</p><p>相邻的两个行内元素的margin 是第一个的right-margin 第二个的left-margin 之和</p></blockquote><h3 id="边距控制"><a href="#边距控制" class="headerlink" title="边距控制"></a>边距控制</h3><ul><li>border-bottom</li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>background-image : url() 插入图片，</p><p>一般情况下，图片会自动向水平和数值两个方向平铺，可以使·用以下属性来进行控制</p><p>background-repeat : </p><p>repeat 默认，沿水平和竖直方向平铺</p><p>no-repeat 不平铺，只显示一次</p><p>repeat-x 沿水平平铺</p><p>repeat-y 沿竖直方向平铺</p><p>background-position 设置背景的位置</p><p>也是可以合并为一行的: 直接background + 属性即可</p><p>background-radius： 来设置盒模型的四个角是否圆滑 ， 后面的四个参数是从左上角开始，顺时针旋转的</p><p>box-shadow 给盒模型设置阴影， 后面四个参数分别是水平偏移量，垂直偏移量，模糊，阴影扩展尺寸，阴影颜色，外部阴影或者是内部阴影</p></blockquote><h2 id="background-函数"><a href="#background-函数" class="headerlink" title="background 函数"></a>background 函数</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span>指定渐变方向<span class="token punctuation">,</span>color-stop1<span class="token punctuation">,</span>...<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链接：</p><h2 id="想要打开一个新的窗口，需要在a标签中使用target-属性，并将其设置为-bank-对鼠标的操作进行反应的元素-任何html元素都能做到-常规选择器-link-常规状态-visited-点击过之后-hover-悬停状态-active-点击时-使用CSS对超链接进行修饰-text-decoration-包括color-line-style-thickness"><a href="#想要打开一个新的窗口，需要在a标签中使用target-属性，并将其设置为-bank-对鼠标的操作进行反应的元素-任何html元素都能做到-常规选择器-link-常规状态-visited-点击过之后-hover-悬停状态-active-点击时-使用CSS对超链接进行修饰-text-decoration-包括color-line-style-thickness" class="headerlink" title="想要打开一个新的窗口，需要在a标签中使用target 属性，并将其设置为_bank### 对鼠标的操作进行反应的元素(任何html元素都能做到)常规选择器 + : +- link 常规状态- visited 点击过之后- hover 悬停状态- active 点击时### 使用CSS对超链接进行修饰- text-decoration 包括color,line,style,thickness"></a>想要打开一个新的窗口，需要在a标签中使用target 属性，并将其设置为_bank<br>### 对鼠标的操作进行反应的元素(任何html元素都能做到)<br>常规选择器 + : +<br>- link 常规状态<br>- visited 点击过之后<br>- hover 悬停状态<br>- active 点击时<br>### 使用CSS对超链接进行修饰<br>- text-decoration 包括color,line,style,thickness</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">{</span><span class="token comment">/*通用*/</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以下是使用了CSS伪类型属性来进行修饰*/</span><span class="token comment">/*设置顺寻时 LoVw HaTe 爱恨link visitedhoveractive*/</span><span class="token selector">a:link</span><span class="token punctuation">{</span> <span class="token comment">/*普通浏览*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:visited</span><span class="token punctuation">{</span><span class="token comment">/*点击过之后*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:hover</span><span class="token punctuation">{</span>  <span class="token comment">/*鼠标指针经过时*/</span>   <span class="token property">color</span><span class="token punctuation">:</span> plum<span class="token punctuation">;</span>   <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:active</span><span class="token punctuation">{</span><span class="token comment">/*点击时*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a><br>修饰鼠标指针</p><blockquote><p>cursor :属性即可</p></blockquote><p>修饰列表</p><blockquote><p>list-style-type：</p><p>属性有：</p><p>disc 实心圆、</p><p>circle 空心圆</p><p>square :正方形</p><p>decimal : 十进制数字</p><p>upper-alpha 大写字母</p><p>lower-alpha 小写字母</p><p>upper-roman 大写罗马数字</p><p>lower-roman 小写罗马数字</p><p>none 不显示任何符号</p></blockquote><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><pre class="line-numbers language-none"><code class="language-none">~~比起c语法更像是Java~~组成：ECMAScript,DOM , BOM1. ECMScript 语言2. DOM 文档对象模型，使用节点来web3. BOM 浏览器对象模型### 语法：区分大小写，变量无类型，只需要使用let进行声明即可，可初始化为任意类型的值### 数据类型```jsnumber 数字包括，整数小数,NaN Not a Numberstringbooleannull 对象未空undefined 当声明的变量未初始化时该变量的默认值使用typeof 来获取数据的类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释与C相同</p><p><strong>HTML中的调取方式：</strong></p><p>1.使用 script 标签直接调用</p><p>2.通过 script 中src属性进行调用外部文件</p><p><strong>var和let的区别</strong></p><blockquote><p><strong>var 声明是全局作用域或函数作用域，而 let 和 const 是块作用域</strong>。 var 变量可以在其范围内更新和重新声明； let 变量可以被更新但不能重新声明； const 变量既不能更新也不能重新声明。 它们都被提升到其作用域的顶端</p></blockquote><p><strong><u>判断</u></strong></p><p>JavaScript中 == 在比较两侧对象时，如果不同吗，会将其转化为同一个类型再比较，而 === 严格等于不会强制类型转换</p><p>!=  不等于    !== 不严格等于</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><blockquote><p>是JavaScript的一个库，简化 了js的操作</p></blockquote><p>包含功能:</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities<br>使用方式: 查询使用版本，F12打开控制台之后从console中输入$.fn.jquery 即可查询<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src = "本地的jQuery文件或者CDN的url即可"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>基础语法: 通过选取HTML元素对选取的元素执行操作 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> selector 选择符 查询和查找<span class="token constant">HTML</span>元素<span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 执行对元素的操作<span class="token comment">//示例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 隐藏当前元素<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  隐藏所有<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>元素<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p.test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token string">"test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>防止在文档未完全加在就绪之前就运行jQuery代码，可以使用以下两种方式之一来解决<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 开始写 jQuery 代码... </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或者<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 开始写 jQuery 代码... </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>选择器:</li><li><ul><li>所有元素</li></ul></li><li>this</li><li>.class </li><li>“#id”</li><li>xxx:first 第几个xxx元素</li><li>后代用空格隔开</li><li>“[herf]” 选取带有herf 属性的元素</li><li>“A[B=’C’]” 或者 “A[B!=’C’]” 选取所有B属性值为C或者不为C的A的元素</li><li>:button 选取所有type = button的元素<br>常用的事件方法：</li><li>click()点击</li><li>dbclick()双击</li><li>mouseenter鼠标穿过元素时会发生</li><li>mouseleave鼠标离开元素</li><li>mousedown 鼠标移动到元素上并进行按下</li><li>mouseup 松开鼠标按键</li><li>hover悬停</li><li>focus 获得焦点</li><li>blur 失去焦点<br>效果:</li><li>hide，隐藏，show显示</li><li>toggle 在hide和show之间进行切换</li><li>fadeIn淡入，fadeOut 淡出, fade Toggle()切换淡入淡出</li><li>fade To() 允许渐变给不透明度</li><li>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</li><li>滑动 slideDown向下滑， slideUp向上滑, slideToggle()切换</li><li>动画操作: $(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</li><li>params定义动画CSS属性，可使用相对值, +xxx</li><li>使用队列:<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> div<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>停止动画: stop()</li><li>动画链: 连续点即可 $(“#p1”).css(“color”,”red”).slideUp(2000).slideDown(2000);</li></ul><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><ul><li>text 设置或返回所选元素的文本内容</li><li>html 设置或返回所选元素的内容 包括html标签</li><li>val  设置或返回表单字段的值</li><li>attr 获得属性值</li><li>append 在被选中元素的结尾追加内容</li><li>prepend 在被选中元素的开头插入内容‘</li><li>after 在被选中元素之后加入内容</li><li>before 在被选中元素之前加入内容</li><li>remove 删除元素</li><li>empty 从被选中元素删除子元素</li></ul><h4 id="操作CSS类-要提前定义css样式才能添加"><a href="#操作CSS类-要提前定义css样式才能添加" class="headerlink" title="操作CSS类 (要提前定义css样式才能添加)"></a>操作CSS类 (要提前定义css样式才能添加)</h4><ul><li>addClass 向被选中元素添加一个或多个类</li><li>removeClass 从被选中元素删除一个或多个类</li><li>toggleClass 对被选中元素进行添加/删除的切换擦偶哦在</li><li>css 设置或返回样式属性 (可直接添加属性值)</li><li>$(“p”).css(“background-color”,”yellow”); </li><li>$(“p”).css({“background-color”:”yellow”,”font-size”:”200%”})<br>尺寸</li><li>width , height , (context大小)</li><li>innerWidth , innerHight ,(内边框,padding)</li><li>outerWidth , outerHight (margin)<br>遍历DOM树</li></ul><ol><li>向上遍历<ul><li>parent</li><li>parent 向上到根元素</li><li>parentsUntil 返回介于两个给定元素之间的祖先元素</li></ul></li><li>向下遍历<ul><li>children 直接子元素</li><li>find 查找到最后一个元素</li></ul></li><li>同级遍历<ul><li>siblings 所有同级元素</li><li>next 下一个同胞元素</li><li>nextAll 下一个所有同胞</li><li>nextUntil</li><li>jQuery prev(), prevAll() &amp; prevUntil()</li></ul></li><li>过滤<ul><li>first 被选元素的首个元素</li><li>last</li><li>eq返回都带有指定索引号的元素(索引从0开始)</li><li>filter 过滤条件</li><li>not</li></ul></li></ol><h3 id="jQuery-AJAX使用"><a href="#jQuery-AJAX使用" class="headerlink" title="jQuery AJAX使用"></a>jQuery AJAX使用</h3><ul><li>load 从服务器加在数据并把返回的数据放入备选元素中</li><li>$(selector).load(URL,data,callback)</li><li>get() post()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"demo_test.php"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///////////////////////////////////////</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://www.runoob.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: \n"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为</span><span class="token boolean">true</span> <span class="token boolean">false</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不进行类型转换</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进行类型转换</span><span class="token comment">//输出为:</span><span class="token boolean">false</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for of 语句 (和foreach 一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for in  枚举对象的的属性</p><p>函数：两种写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token comment">//或者</span><span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过使用argumens对象，可以 不用声明形参的名称</p><p>arguments[0] 即为第一个形参</p><p>arguments.length() 可以获得传入函数中的参量个数，从而用于判断。</p><p><strong><u>箭头函数(类似于Lambda表达式)</u></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>类是具有相同属性和功能的“对象” 的抽象</strong></p><p><strong>对象是从类中创建的实例</strong></p><p>属性是对象中的变量</p><p>方法是类中的函数</p><p>引用类型：Boolean ， Number 和String 类比Java</p><p>对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">xxx</span> <span class="token operator">:</span> xxx  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>赋值</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">size</span> <span class="token operator">:</span> <span class="token string">"large"</span><span class="token punctuation">,</span>   <span class="token literal-property property">color</span> <span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>   <span class="token function-variable function">eat</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃吃吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span>size <span class="token punctuation">,</span> color<span class="token punctuation">}</span> <span class="token operator">=</span> myCar<span class="token punctuation">;</span> <span class="token comment">// 同名可用这种方式一键赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>   数组进行复制:</p>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//补充，对象复制</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">"Bob"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   JavaScript中数组内容的类型可以不一致</p><p>   解构数组：</p><p>   array的函数</p><ul><li><p>push , pop</p></li><li><p>unshift() 从头部增加 shift() 从头部开始删除第一个元素，并返回</p></li><li><p>splice(start , deleteCount) 删除指定位置 第二个参数可选，并且代表要删除几个元素</p></li><li><p>sort</p></li><li><p>indexOf() 从头开始查找 lastIndexOf () 从尾开始查找，两个参数分别是要查找的内容和开始查找的位置</p></li><li><p>forEach() 为每一个元素执行一个函数</p></li><li><p>map() 返回一个由指定函数调用后得到的新数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> e <span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用map建立一个新数组</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">let</span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//filter用于过滤数组的某些数据</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出了map[a[]] = b[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>every 每个元素都当作参数，所有都满足才返回true</p></li><li><p>some 部分满足即可true</p></li><li><p>slice 截取一部分</p></li><li><p>joint(‘,’) 将数组转化为字符串并返回</p></li><li><p>展开运算符  数组[…] 即可展开</p></li></ul><p>   Map</p><ul><li>set(“key” ,”value”)</li><li>for (let [key , value] of map)</li><li>for (let key of map)   for (let value of map)</li><li>forEach(函数)</li><li>合并 自己看文档喽</li></ul><p>   Set</p><ul><li>add</li><li>并集，交集，差集 自己看</li></ul><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ol><li><p>window对象，用于操作浏览器的窗口</p><p>常用的有  第三个参数与新窗口有关，自己去看</p><pre><code>- moveBy(x , y) 将窗口向又或者向下移动- moveTo(x ,y) 移动到指定位置- resizeBy (dw , dh) 缩放- resizeTo (w ,h )  缩放到指定窗口大小- alert() 输出- prompt() 读入用户输入- confirm() 显示确认和取消 确定 返回值是true- setinterval() 按照指定周期来调用函数和表达式 参数未函数 + 毫秒数- setTimeout() 在指定毫秒数后调用函数计算表达式</code></pre></li><li><p>location 对象，用于分析和设置页面的URL，主要是window 和 document 对象的属性<br> 直接使用location . xxx 即可</p><p>有以下属性</p><pre><code>- hash 如果URL包含书签#，则返回#后边的内容- host 服务器的名称- &lt;u&gt;**herf**&lt;/u&gt; 当前载入的完整的URL - pathname URL 中主机后面的部分- port 请求端口- protocol 协议- search 执行GET请求的URL中 ? 之后的部分</code></pre><p>补充：URL</p><blockquote><p><strong>URL</strong> 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的 URL。</p></blockquote></li><li><p>navigator 对象， 进行客户端检测</p><pre><code>- appCodeName 浏览器代码名的字符串表示- appName 官方浏览器名的字符串表示- appVersion 浏览器版本信息表示- javaEnabled() 是否启用了Java- platform 运行浏览器的计算机平台字符串表示- plugins 安装在浏览器中的插件组数- userAgent 用户代理头字符串的字符串表示 最常用</code></pre></li><li><p>screen 对象 也是 window对象的属性</p><pre><code>- availHeight 窗口可以使用的屏幕高度- availWidth- colorDepth 用户表示颜色位数- height 屏幕高度- width </code></pre></li><li><p>history 导航历史记录</p><pre><code>- go( ) 前进后退几页，也可以使用字符串，导航到包哦含这个字符串的第一个也米娜- back()- forward()- length 历史记录中有多个条目，可以来判断当前是不是你的第一个页面</code></pre><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>将标记语言的各个组成部分封装为对应的对象</p><blockquote><p>Document 整个文档对象<br>Element 元素对象<br>Text   文本对象<br>Comment 注释对象 </p></blockquote><p>js可以通过DOM对HTML进行操作和做出反应 ^6aefb6</p></li></ol><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>[[Web学习#^6aefb6|Core DOM 所有文档类型的标准模型]] </li><li>XML DOM XML 文档的标准模型</li><li>HTML DOM HTML 文档的标准模型</li></ol><p></p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>具体的标签对象的属性和函数去MDN里看看 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过id值查找对象</span><span class="token keyword">var</span> h1 <span class="token operator">=</span> doucument<span class="token punctuation">.</span><span class="token function">getElementById1</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token comment">//以下函数无法查找特定的某一个对象，所以返回的一个对象数组</span><span class="token comment">//根据标签名查找对象</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token comment">//根据name来获取</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span><span class="token comment">//根据class 来获取</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件绑定</p><ol><li>通过HTML标签中的属性来绑定<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">value1</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">on</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span> <span class="token punctuation">(</span><span class="token string">'我被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>通过DOM元素来绑定<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>按钮2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>document.getElementById('btn').onclick = function(){alert('我被点击了');}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>   JavaScript的一个第三方库</p><p>   react app 由组件组成，react组件是返回html标签的JavaScript函数</p><p>   react 的组件可以用作类似于html的标签，区别是React 组件必须以大写字母开头，HTML标签必须以小写字母开头</p><p>   JavaScript的component实际上就是JavaBean</p><p>   例如:</p>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">I</span>'m a button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   之后MyButton可作为标签使用</p>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome to my app<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>MyButton <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <strong>hotloader</strong>是好东西</p><p>   <strong>React命名:</strong></p><blockquote><p>HTML中的类为 class ，而React中的class命名为className</p><p><code>&lt;h4 className="Profile-subTitle"&gt;About Me&lt;/h4&gt;</code></p><p>类名为：组件名(文件名) 扩折号 文件中的作用名，遵循驼峰</p></blockquote><p>   使用 import xxx from “xxx” 来在js文件中导入其他的component</p><p>   使用 import “xxx.css” 来从导入css文件</p><p>   使用 export default xxx 来导出这个组件，从而让其他文件能够调用这个组件</p><p>   具体可看示例 catbook-react </p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote><p>使用js对象标记法书写的文本</p></blockquote><p>格式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这个变量是一个字符串类型的，不是对象</span><span class="token keyword">var</span> 变量 <span class="token operator">=</span> <span class="token string">'{"key1" : value1 , "key2" : value2}'</span><span class="token punctuation">;</span><span class="token comment">//单引号来表名时变量类型</span><span class="token comment">//JSON 字符串和js对象转化</span><span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userStr<span class="token punctuation">)</span><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>组成：URL + Methods + Request Headers + Request Body</p><blockquote><p>URL 文件定位，网址 (定位)<br>URI主要用于标识网络资源名称（比如网址）标识唯一的资源 (身份证)</p></blockquote><h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h3><ul><li>ip:计算机在网络中的唯一标识</li><li>端口: 应用程序在计算机中的唯一表示</li><li>传输协议:<ul><li>tcp 安全协议，三次握手,四次挥手 <a href="https://ost.51cto.com/posts/17361">教程</a></li><li>udp 不安全协议</li></ul></li></ul><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li>请求行大写请求方式，URL,请求协议，版本号</li><li>请求头存放请求参数和值，键值对的方式， 参数名:参数值</li><li>请求空行一行来区分请求头和请求体</li><li>get方式没有请求体</li></ul><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li><code>GET</code> 方法请求一个指定资源的表示形式，使用 <code>GET</code> 的请求应该只被用于获取数据。</li><li><code>HEAD</code> 方法请求一个与 <code>GET</code> 请求的响应相同的响应，但没有响应体</li><li><code>POST</code> 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</li><li><code>PUT</code> 方法用有效载荷请求替换目标资源的所有当前表示。</li><li><code>DELETE</code> 方法删除指定的资源。</li><li><code>CONNECT</code> 方法建立一个到由目标资源标识的服务器的隧道。</li><li><code>OPTIONS</code> 方法用于描述目标资源的通信选项。</li><li><code>TRACE</code> 方法沿着到目标资源的路径执行一个消息环回测试。</li><li><code>PATCH</code> 方法用于对资源应用部分修改。</li></ul><hr><p><strong>响应部分</strong></p><ul><li>响应行 :  协议，版本号，状态码，状态描述信息</li><li>响应头 :  参数和值， 参数名 : 参数值 </li><li>响应体 : html 格式<br>状态码：</li></ul><p>1xx：信息</p><p>2xx：succeeded</p><p>3xx：redirect 重定向</p><p>4xx:  你请求出错</p><p>5xx：服务器出错</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p><strong>应用程序接口</strong>（英语：<strong>a</strong>pplication <strong>p</strong>rogramming <strong>i</strong>nterface[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-%E5%88%98%E7%91%9E%E6%96%B02018-1">1]</a>），缩写为<strong>API</strong>[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-UnmehopaVemuri2006-2">2]</a>，是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97">计算</a><a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E8%B3%87%E8%A8%8A%E7%A7%91%E6%8A%80)">接口</a>，它定义多个<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B">中介</a>之间的<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%A4%E4%BA%92&amp;action=edit&amp;redlink=1">交互</a>，以及可以进行的<a href="https://zh.wikipedia.org/w/index.php?title=%E8%B0%83%E7%94%A8&amp;action=edit&amp;redlink=1">调用</a>（call）或<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AF%B7%E6%B1%82&amp;action=edit&amp;redlink=1">请求</a>（request）的种类，如何进行调用或发出请求，应使用的数据格式，应遵循的惯例等。它还可以提供<a href="https://zh.wikipedia.org/w/index.php?title=%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6&amp;action=edit&amp;redlink=1">扩展机制</a>，以便用户可以通过各种方式对现有功能进行不同程度的扩展[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-Fisher1-3">3]</a>。一个API可以是完全定制的，针对某个组件的，也可以是基于行业标准设计的以确保互操作性。通过<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">信息隐藏</a>，API实现了<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">模块化编程</a>，从而允许用户实现独立地使用接口。</p></blockquote><p>目的：</p><p><img src="/2023/06/17/qian-duan/web-xue-xi/1690524156434.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token comment">//加上这个之后变为请求处理类  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些参数的实现<br><img src="/2023/06/17/qian-duan/web-xue-xi/%E5%8F%82%E6%95%B0.png"><br><img src="/2023/06/17/qian-duan/web-xue-xi/%E5%90%8C%E4%B8%80%E7%9A%84%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C.png"></p><h2 id="形式良好的-XML-文档"><a href="#形式良好的-XML-文档" class="headerlink" title="形式良好的 XML 文档"></a>形式良好的 XML 文档</h2><p>“形式良好”的 XML 文档拥有正确的语法。</p><p>在前面的章节描述的语法规则：</p><ul><li>XML 文档必须有一个根元素</li><li>XML元素都必须有一个关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 元素必须被正确的嵌套</li><li>XML 属性值必须加引号<br>在 XML 中，有 5 个预定义的实体引用：</li></ul><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td><td>less than</td></tr><tr><td>&gt;</td><td>&gt;</td><td>greater than</td></tr><tr><td>&amp;</td><td>&amp;</td><td>ampersand</td></tr><tr><td>&amp;apos;</td><td>‘</td><td>apostrophe</td></tr><tr><td>"</td><td>“</td><td>quotation mark</td></tr></tbody></table><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>是接口，使用时要自己实现</p><h4 id="web-xml中配置（可用注解实现了，暴怒需要这么写了）"><a href="#web-xml中配置（可用注解实现了，暴怒需要这么写了）" class="headerlink" title="web.xml中配置（可用注解实现了，暴怒需要这么写了）"></a>web.xml中配置（可用注解实现了，暴怒需要这么写了）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Servlets --&gt;</span><span class="token comment">&lt;!-- 配置类名和路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.example.servelet_study.servlet.ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 配置请求路径 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置servlet的init时间 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span> 数字 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span> 数字为正数时可以在服务器启动时被创建，为 负数时可以在第一次访问的时候进行加载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span> <span class="token string">"/..."</span><span class="token punctuation">,</span><span class="token string">"/..."</span><span class="token punctuation">,</span><span class="token string">"/..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在第一次创建<span class="token class-name">Servlet</span>时被调用<span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在被访问时会被调用，会适当的调用doGet等方法<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getSercletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取配置文件getServletInfo <span class="token punctuation">(</span><span class="token punctuation">)</span> 获取servlet版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">## 分层解耦### 三层架构1. controller : 控制层 ，接受前端发送的请求，对请求进行处理，并响应数据2. service: 业务逻辑层，处理具体的业务逻辑3. dao 数据访问层(Data Access Object ) (持久层),负责数据的访问操作，包括增删改查### IOC &amp; DI```java@Component 将当前类交给IOC 容器 //加在需要被new的对象所在的层@Autowired 运行时IOC 容器会提供该类型的bean并赋值给变量 依赖注入 //加在controller层加上之后就不需要自己进行new对象了，直接建立对象变量即可//其他注解@Component 声明bean的基础注解//以下在web中常用@Controller 标注在控制器上@Service 标注在业务类上//DI注解@Autowired 默认是按照类型进行的，如果存在多个相同的类型的bean就会出现报错@Primary 想要哪个bean被注入就直接加在那个类前面@Qualifier("value") 在使用的时候加上这个，value为bean的名字@Resource (name = "") <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HttpServletRequest中常用的方法"><a href="#HttpServletRequest中常用的方法" class="headerlink" title="HttpServletRequest中常用的方法"></a>HttpServletRequest中常用的方法</h3><ul><li>Map&nbsp;getParameterMap()<br>  获取包含所有请求参数及值的 Map 对象。需要注意，该 Map 的 value 为 String[]，即一个参数所对应的值为一个数组。说明一个参数可以对应多个值。</li><li>Enumeration&nbsp;getParameterNames()<br>  获取请求参数 Map 的所有 key,即获取所有请求参数名。</li><li>String[] getParameterValues(String name)<br>  根据指定的请求参数名称，获取其对应的所有值。这个方法一般用于获取复选框(checkbox)数据。</li><li>String getParameter(String name)<br>  根据指定的请求参数名称，获取其对应的值。若该参数名称对应的是多个值，则该方法获取到的是第一个值。这个方法是最常用的方法。</li></ul><p>获取客户端信息的方法：</p><ul><li>getRequestURL方法返回客户端发出请求时的完整URL。</li><li>getRequestURI方法返回请求行中的资源名部分。</li><li>getQueryString 方法返回请求行中的参数部分。</li><li>getRemoteAddr方法返回发出请求的客户机的IP地址</li><li>getRemoteHost方法返回发出请求的客户机的完整主机名</li><li>getRemotePort方法返回客户机所使用的网络端口号</li><li>getLocalAddr方法返回WEB服务器的IP地址。</li><li>getLocalName方法返回WEB服务器的主机名</li><li>getMethod得到客户机请求方式<pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 暂存req请求中的信息equest<span class="token punctuation">.</span><span class="token function">getRequestDispacther</span><span class="token punctuation">(</span><span class="token string">"/test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> 转发response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h3><blockquote><p>由于表单的post 提交方式，所以要编写好编码的过滤器来支持中文存取</p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>免除js中的 DOM操作简化书写</p><ol><li>新建html页面引入Vue.js文件</li><li>创建Vue核心对象，定义数据模型<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span> <span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment">//Vue要控制哪个区， #+id 类似css的选择器</span><span class="token literal-property property">data</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//数据模型</span><span class="token literal-property property">message</span> <span class="token operator">:</span> <span class="token string">"hello Vue"</span><span class="token punctuation">}</span><span class="token literal-property property">method</span> <span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//定义函数</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>编写视图<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> //绑定数据模型{{ message }} //直接获取数据模型中的数据进行展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>//{{}} 插值表达式，中间可以填入 变量，三元运算符，函数调用，算数运算v-model = "" 模型绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span>bind 为<span class="token constant">HTML</span> 标签绑定属性值，例如设置href <span class="token punctuation">,</span> css 样式<span class="token literal-property property">或者直接</span> <span class="token operator">:</span> <span class="token operator">+</span> href <span class="token operator">...</span>v<span class="token operator">-</span>model 在表单元素上实现双向数据绑定v<span class="token operator">-</span>on 为<span class="token constant">HTML</span>绑定事务 v<span class="token operator">-</span>on<span class="token operator">:</span>click 可简写为@click<span class="token comment">//</span><span class="token comment">//</span>v<span class="token operator">-</span><span class="token keyword">if</span> v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 条件性的渲染某元素v<span class="token operator">-</span><span class="token keyword">else</span>v<span class="token operator">-</span>show 根据条件显示某元素，区别是切换的是display属性的值v<span class="token operator">-</span><span class="token keyword">for</span> 列表渲染，遍历容器的元素或对象的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期及其对应的方法"><a href="#生命周期及其对应的方法" class="headerlink" title="生命周期及其对应的方法"></a>生命周期及其对应的方法</h3><h2 id="Ajax-异步的js和xml"><a href="#Ajax-异步的js和xml" class="headerlink" title="Ajax : 异步的js和xml"></a>Ajax : 异步的js和xml</h2><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>简化了Axios<br><code> npm install axios</code><br>在入口文件引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>  <span class="token comment">//把axios全局导出  </span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>发送多个请求<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义两个异步函数</span><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//等待两个都执行完毕再返回结果</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>acct<span class="token punctuation">,</span> perm<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ... });</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用时只需要在axios中传入config即可</li><li>创建一个自定义的实例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'X-Custom-Header'</span><span class="token operator">:</span> <span class="token string">'foobar'</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://axios-http.com/zh/docs/req_config">config配置详解</a></li><li>拦截器<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在发送请求之前做些什么</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 对请求错误做些什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 2xx 范围内的状态码都会触发该函数。</span>    <span class="token comment">// 对响应数据做点什么</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 超出 2xx 范围的状态码都会触发该函数。</span>    <span class="token comment">// 对响应错误做点什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://axios-http.com/zh/docs/handling_errors">错误处理</a></li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p><strong>Nginx (engine x)</strong>&nbsp;是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。<br><strong>什么是反向代理？</strong></p><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。nginx <span class="token parameter variable">-s</span> quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。nginx <span class="token parameter variable">-s</span> reload     因改变了Nginx相关配置，需要重新加载配置而重载。nginx <span class="token parameter variable">-s</span> reopen     重新打开日志文件。nginx <span class="token parameter variable">-c</span> filename   为 Nginx 指定一个配置文件，来代替缺省的。nginx <span class="token parameter variable">-t</span>            不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。nginx <span class="token parameter variable">-v</span>            显示 nginx 的版本。nginx <span class="token parameter variable">-V</span>            显示 nginx 的版本，编译器版本和配置参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动nginx服务，启动时会一闪而过是正常的</p><p>start nginx</p><p>查看任务进程是否存在，dos或打开任务管理器都行</p><p>tasklist /fi “imagename eq nginx.exe”</p><h2 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h2><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>用于项目管理构建和依赖管理，将依赖写入到maven配置文件中即可自动下载到项目中</p><ol><li><a href="https://m.imooc.com/wiki/mavenlesson-maveninstall">https://m.imooc.com/wiki/mavenlesson-maveninstall</a></li><li>构建项目<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.mic.tech <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>firstProject <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>maven-archetype-quickstart <span class="token parameter variable">-DinteractiveMode</span><span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li><strong>-DgourpId</strong>: 组织名，一般为公司网址的反写；</li><li><strong>-DartifactId</strong>: 项目名-模块名；</li><li><strong>-DarchetypeArtifactId</strong>: 用来指定 ArchetypeId，这里用到的是maven-archetype-quickstart，即创建一个简单 Java 应用；</li><li><strong>-DinteractiveMode</strong>: 是否使用交互模式。</li></ul><ol start="3"><li>idea已经内置maven</li></ol><p>添加外部依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">将外部文件导入到项目中，配置pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 在这里添加你的依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ldapjdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 库名称，也可以自定义 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ldapjdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--库名称，也可以自定义--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--版本号--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--作用域--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${basedir}\src\lib\ldapjdk.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--项目根目录下        的lib文件夹下--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>cookie存储在客户端，session 存储在服务器端</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;% 代码 %&gt;&lt;%! int i = 0 ; %&gt; 变量声明&lt;%= 表达式 %&gt;  表达式声明&lt;%-- 注释 --%&gt; 注释，注释内容 不会被发送到浏览器&lt;!-- html注释 --&gt; 可以通过查看源代码来进行查看if --else 语法&lt;% if (day == 1 || day == 7) { %&gt;      &lt;p&gt;今天是周末&lt;/p&gt;&lt;% } else { %&gt;      &lt;p&gt;今天不是周末&lt;/p&gt;&lt;% } %&gt;switch &lt;% switch(day) {case 0:   out.println("星期天");   break;case 1:   out.println("星期一");   break;case 2:   out.println("星期二");   break;case 3:   out.println("星期三");   break;case 4:   out.println("星期四");   break;case 5:   out.println("星期五");   break;default:   out.println("星期六");}%&gt;for循环&lt;%for ( fontSize = 1; fontSize &lt;= 3; fontSize++){ %&gt;   &lt;font color="green" size="&lt;%= fontSize %&gt;"&gt;    菜鸟教程   &lt;/font&gt;&lt;br /&gt;&lt;%}%&gt;while循环&lt;%while ( fontSize &lt;= 3){ %&gt;   &lt;font color="green" size="&lt;%= fontSize %&gt;"&gt;    菜鸟教程   &lt;/font&gt;&lt;br /&gt;&lt;%fontSize++;%&gt;&lt;%}%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSP行为"><a href="#JSP行为" class="headerlink" title="JSP行为"></a>JSP行为</h3><p>使用xml语法来控制servlet引擎，能够动态插入一个文件重用Javabean组件，切换页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp</span> <span class="token attr-name">:action_name</span> <span class="token attr-name">attribute</span> <span class="token attr-name">attribute</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>action_name :include 在当前页面包含静态useBean 寻找和初始化一个java组件setProperty 设置JavaBean组件的值getProperty 将JavaBean 组件的值插入到output中forward 从一个jsp文件向另一个文件传递一个包含用户请求的request 对象plugin 再生成的html页面中包含Applet和JavaBean对象element 动态创建一个xml元素attribute 定义动态创建的xml元素的属性body 动态创建xml元素主体text 用于封装数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ 指令 %&gt;  主要指令有: page  定义网页依赖属性 脚本语言,error页面，缓存需求等page相关的属性buffer 指定out对象使用缓冲区大小autoFlush 控制out 对象的缓存区conteneType 指定当前JSP 页面发生异常时需要转向的错误处理页面error Page 指定当JSP页面发生异常时需要转向的错误处理页面isErrorPage 指定当前页面是否可以作为另一个JSP页面的错误处理页面extends servlet 从哪个类继承import 导入要使用的java 类info 定义jsp页面的表述信息isThreadSafe 指定对JSP页面的访问是否为线程安全language 定义JSP页面所用的脚本语言，默认是Javasession 指定JSP页面是否使用sessionisELIgnored 指定是否执行EL表达式isScriptingEnabled 确定脚本元素能否被使用include 包含其他文件&lt;%@ include file = "文件的相对url" %&gt;taglib  引入标签库的定义，可以自定义标签&lt;% tagelib uri = "uri" prefix = "refix0Tag" %&gt;uri 标签库的位置   prefix 指定标签库的前缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSP动作元素"><a href="#JSP动作元素" class="headerlink" title="JSP动作元素"></a>JSP动作元素</h3><p>JSP动作元素在请求阶段处理阶段起作用，且使用的时xml语法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span></span> <span class="token attr-name">action_name</span> <span class="token attr-name">attribute</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>include 在页面被请求的时候引入一个文件page = "url" flush = "true or false" 定义在包含资源前是否刷新缓存区useBean 寻找或者实例化一个JavaBean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>useBean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>package.class<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>class指定Bean的完整包名。type 指定将引用该对象变量的类型。beanName 通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。setProperty 设置JavaBean的属性将其放在useBean中只会在找到一个Bean示例才会进行执行放在外部则不论是否找到bean都会执行属性: name 表示要设置属性的是哪个beanproperty 无论要设置哪个属性都有一个特殊用法value 指定bean属性的值param 指定用哪个参数作为Bean属性的值getProperty 输出某个JavaBean的属性提取对应的Bean属性的值，转化为字符串然后输出name 药检所的bean属性名称property 表示要提取属性的值forward 把请求转到一个新的界面plugin 根据浏览器类型为Java插件生成obeject 活embed 标记element 定义动态xml元素attribute 设置动态定义的xml属性body 动态定义的xml内容text 在jsp页面和文档中使用写入文本的模板<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSP隐式对象，可以直接使用而不显示声明"><a href="#JSP隐式对象，可以直接使用而不显示声明" class="headerlink" title="JSP隐式对象，可以直接使用而不显示声明"></a>JSP隐式对象，可以直接使用而不显示声明</h3><ol><li>request 对象 ^8a3722</li><li>response对象</li><li>out</li><li>session 用来追踪在各个客户端请求间的会话</li><li>application 代表这这个JSP页面</li><li>config </li><li>pageContext 代表整个jsp页面，存储了request和response的引用，application 对象，config , session .  out可以访问这个对象来导出</li><li>page == this</li><li>exception</li></ol><h4 id="request-同servlet中的request"><a href="#request-同servlet中的request" class="headerlink" title="request(同servlet中的request)"></a>request(同servlet中的request)</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1</td><td><strong>Cookie[] getCookies()</strong><br><br>返回客户端所有的Cookie的数组</td></tr><tr><td>2</td><td><strong>Enumeration getAttributeNames()</strong><br><br>返回request对象的所有属性名称的集合</td></tr><tr><td>3</td><td><strong>Enumeration getHeaderNames()</strong><br><br>返回所有HTTP头的名称集合</td></tr><tr><td>4</td><td><strong>Enumeration getParameterNames()</strong><br><br>返回请求中所有参数的集合</td></tr><tr><td>5</td><td><strong>HttpSession getSession()</strong><br><br>返回request对应的session对象，如果没有，则创建一个</td></tr><tr><td>6</td><td><strong>HttpSession getSession(boolean create)</strong><br><br>返回request对应的session对象，如果没有并且参数create为true，则返回一个新的session对象</td></tr><tr><td>7</td><td><strong>Locale getLocale()</strong><br><br>返回当前页的Locale对象，可以在response中设置</td></tr><tr><td>8</td><td><strong>Object getAttribute(String name)</strong><br><br>返回名称为name的属性值，如果不存在则返回null。</td></tr><tr><td>9</td><td><strong>ServletInputStream getInputStream()</strong><br><br>返回请求的输入流</td></tr><tr><td>10</td><td><strong>String getAuthType()</strong><br><br>返回认证方案的名称，用来保护servlet，比如 “BASIC” 或者 “SSL” 或 null 如果 JSP没设置保护措施</td></tr><tr><td>11</td><td><strong>String getCharacterEncoding()</strong><br><br>返回request的字符编码集名称</td></tr><tr><td>12</td><td><strong>String getContentType()</strong><br><br>返回request主体的MIME类型，若未知则返回null</td></tr><tr><td>13</td><td><strong>String getContextPath()</strong><br><br>返回request URI中指明的上下文路径</td></tr><tr><td>14</td><td><strong>String getHeader(String name)</strong><br><br>返回name指定的信息头</td></tr><tr><td>15</td><td><strong>String getMethod()</strong><br><br>返回此request中的HTTP方法，比如 GET,，POST，或PUT</td></tr><tr><td>16</td><td><strong>String getParameter(String name)</strong><br><br>返回此request中name指定的参数，若不存在则返回null</td></tr><tr><td>17</td><td><strong>String getPathInfo()</strong><br><br>返回任何额外的与此request URL相关的路径</td></tr><tr><td>18</td><td><strong>String getProtocol()</strong><br><br>返回此request所使用的协议名和版本</td></tr><tr><td>19</td><td><strong>String getQueryString()</strong><br><br>返回此 request URL包含的查询字符串</td></tr><tr><td>20</td><td><strong>String getRemoteAddr()</strong><br><br>返回客户端的IP地址</td></tr><tr><td>21</td><td><strong>String getRemoteHost()</strong><br><br>返回客户端的完整名称</td></tr><tr><td>22</td><td><strong>String getRemoteUser()</strong><br><br>返回客户端通过登录认证的用户，若用户未认证则返回null</td></tr><tr><td>23</td><td><strong>String getRequestURI()</strong><br><br>返回request的URI</td></tr><tr><td>24</td><td><strong>String getRequestedSessionId()</strong><br><br>返回request指定的session ID</td></tr><tr><td>25</td><td><strong>String getServletPath()</strong><br><br>返回所请求的servlet路径</td></tr><tr><td>26</td><td><strong>String[] getParameterValues(String name)</strong><br><br>返回指定名称的参数的所有值，若不存在则返回null</td></tr><tr><td>27</td><td><strong>boolean isSecure()</strong><br><br>返回request是否使用了加密通道，比如HTTPS</td></tr><tr><td>28</td><td><strong>int getContentLength()</strong><br><br>返回request主体所包含的字节数，若未知的返回-1</td></tr><tr><td>29</td><td><strong>int getIntHeader(String name)</strong><br><br>返回指定名称的request信息头的值</td></tr><tr><td>30</td><td><strong>int getServerPort()</strong><br><br>返回服务器端口号</td></tr></tbody></table><h3 id="Token是一种令牌，用来识别访问人员的"><a href="#Token是一种令牌，用来识别访问人员的" class="headerlink" title="Token是一种令牌，用来识别访问人员的"></a>Token是一种令牌，用来识别访问人员的</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
