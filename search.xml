<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM学习</title>
    <url>/2024/06/24/02/</url>
    <content><![CDATA[<h1 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h1><p>[黑马JVM面试](<a href="https://lisxpq12rl7.feishu.cn/wiki/QkOzwr3gIiv8eTkKngTc6Lv6nlf">‌⁠​​‍​‍﻿​﻿‌​​​​​⁠​‌﻿​‌‌​‍​​​﻿​​⁠​‬‍​﻿​﻿​​‍​‍​​‌‌​‬面试篇 - 飞书云文档 (feishu.cn)</a>)<br><a href="https://www.yuque.com/tulingzhouyu/db22bv/td5a84ty4vel22ge#f8eDZ">👍Java虚拟机8-11双版本 -JVM高频面试题👍 (yuque.com)</a></p>
<h2 id="new的过程-x2F-创建对象的步骤"><a href="#new的过程-x2F-创建对象的步骤" class="headerlink" title="new的过程/创建对象的步骤"></a>new的过程/创建对象的步骤</h2><ol>
<li>类加载检查，先去检查是否能在常量池中定位到这个类的符号引用来判断是否已经创建了</li>
<li>分配内存(指针碰撞，空闲列表)</li>
<li>初始化零值</li>
<li>设置对象头：</li>
<li>执行init方法</li>
</ol>
<h2 id="静态变量存储在哪里呢？"><a href="#静态变量存储在哪里呢？" class="headerlink" title="静态变量存储在哪里呢？"></a>静态变量存储在哪里呢？</h2><ul>
<li>JDK6及之前的版本中，静态变量是存放在方法区中的，也就是永久代。</li>
<li>JDK7及之后的版本中，静态变量是存放在堆中的Class对象中，脱离了永久代。</li>
</ul>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="/2024/06/24/02/JVM%E7%BB%84%E6%88%90.png" alt="|525"></p>
<ul>
<li><del>编译器</del>：不属于Java虚拟机的一部分，负责将源代码文件编译成字节码文件。</li>
<li>类加载子系统，负责将字节码文件读取、解析并保存到内存中。其核心就是类加载器。</li>
<li>运行时数据区，管理JVM使用到的内存。</li>
<li>执行引用，分为解释器 解释执行字节码指令；即时编译器 优化代码执行性能； 垃圾回收器 将不再使用的对象进行回收。</li>
<li>本地接口，保存了本地已经编译好的方法，使用C/C++语言实现。</li>
</ul>
<h2 id="运行时数据区的组成"><a href="#运行时数据区的组成" class="headerlink" title="运行时数据区的组成"></a>运行时数据区的组成</h2><p><img src="/2024/06/24/02/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E7%9A%84%E7%BB%84%E6%88%90.png" alt="|900"></p>
<ul>
<li>堆，可分为新生代和老年代，新生代可分为Eden，Surviver1，Surviver2</li>
<li>方法区：永久区，存储已经被Java虚拟机架子啊的类信息等，jdk1.8之后称为元空间。</li>
<li>虚拟机栈：线程私有，内有多个栈帧，方法在执行时会创建栈帧，包含(局部变量表，操作数栈，动态链接，返回地址等)<ul>
<li>局部变量表：存放方法参数，局部变量</li>
<li>操作数栈：记录一个方法在执行过程中，字节码指令向操作数栈进行入栈和出栈的过程。</li>
<li>动态链接：字节码中的符号链接，一部分在类加载过程中转化为直接引用(静态解析)，还有一部分在运行时转化为直接引用，也就是动态链接。</li>
<li>返回地址：当前方法执行过程中，当前方法需要返回的位置。</li>
</ul>
</li>
<li>本地方法栈：服务的是Native方法</li>
<li>PC程序计数器：线程私有</li>
</ul>
<h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>每一个方法的调用使用一个栈帧来保存，每一个线程都有一个自己的虚拟机栈，生命周期和线程相同<br>主要包括</p>
<ol>
<li>局部变量表：方法执行过程中存放所有的局部变量</li>
<li>操作数栈：虚拟机在执行指令过程中用来存放临时数据的一块区域</li>
<li>帧数据：主要包括动态链接、方法出口、异常表等内容。</li>
</ol>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>存储的是native本地方法的栈<br>本地方法（Native Method）是使用非 Java 语言（通常是 C 或 C++）编写的方法。这些方法通过 Java 本地接口（Java Native Interface，JNI）与 Java 代码进行交互。使用本地方法的主要目的是为了实现以下几个功能：</p>
<ol>
<li><strong>与操作系统交互</strong>：直接调用操作系统的底层功能。</li>
<li><strong>提高性能</strong>：在性能关键的部分使用更高效的本地代码。</li>
<li><strong>访问硬件</strong>：与特定硬件设备进行交互。</li>
<li><strong>复用现有库</strong>：调用已有的用其他语言编写的库。</li>
</ol>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>用来存放创建出来的对象，栈上的局部变量表中，可以存放对上的引用，静态变量也可以存放堆对象的引用，实现对象在线程之间的共享<br>堆是垃圾回收的最主要部分</p>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>ClassLoader是Java虚拟机提供给应用程序去实现获取类和接口字节码数据的技术。去获得二进制字节码信息。然后通过JVM调用JNI也就是本地接口方法区创建对象<br><img src="/2024/06/24/02/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></p>
<h4 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h4><h5 id="jdk8以及之前"><a href="#jdk8以及之前" class="headerlink" title="jdk8以及之前"></a>jdk8以及之前</h5><ol>
<li>Java代码实现的(扩展类加载器，应用程序类加载器)</li>
<li>Java虚拟机底层代码实现的(启动类加载器)<br>使用启动加载类器加载器去加载用户的jar包，可以在虚拟机参数那里添加：<br><code>-Xbootclasspath /a: jar包名</code><br>Java中的加载器： 是一个静态内部类，继承自URLClassLoader，通过目录或者指定jar包将字节码文件加载到内存中<br><img src="/2024/06/24/02/Java%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></li>
</ol>
<h5 id="双亲委派机制-jdk8以及之前重点"><a href="#双亲委派机制-jdk8以及之前重点" class="headerlink" title="双亲委派机制(jdk8以及之前重点)"></a>双亲委派机制(jdk8以及之前重点)</h5><p>如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是加此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p>
<p>可以解决的问题:<br>重复的类：启动类，根据双亲委派机制，如果同一个类出现在三个类加载器中，会由启动类加载器来加载。<br>String类能覆盖吗？ 不能，会由启动类加载器加载在rt.jar包中的String类<br>类加载器的关系：应用类加载器的父类加载器识扩展类加载器，扩展类加载器没有父类加载器，但是会委派给启动类加载器。<br>双亲委派机制的作用：<br>保证类加载器的安全性，避免重复加载。</p>
<ol>
<li>每一个类加载器都有一个父类加载器，在类加载的过程中，每个加载器会先检查是否已经加载了该类，如果已经加载则直接返回否则奖将载请求委派给父类加载器</li>
<li>如果所有的父类加载器都无法加载，就由当前加载器尝试加载，也就是说，如果父类加载器的加载路径中没有这个类，就会由他自己加载 <img src="/2024/06/24/02/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png"><img src="/2024/06/24/02/%E4%B8%8A%E4%B8%8B%E5%A7%94%E6%B4%BE.png"></li>
</ol>
<h5 id="如何打破双亲委派机制"><a href="#如何打破双亲委派机制" class="headerlink" title="如何打破双亲委派机制"></a>如何打破双亲委派机制</h5><ol>
<li>自定义类加载器并且重写loadClass方法就可以将双亲委派机制的代码去除。Tomcat通过这种方式实现应用之间类隔离，每一个应用会有一个独立的类加载器加载对应的类</li>
<li>线程上下文加载器加载类，比如JDBC和JNDI等,JDBC使用DriverManager来管理项目中引入的不同的数据库驱动，DriverManager类位于rt.jar包中，由启动类加载器加载。依赖中的mysql驱动对应的类，由应用程序类加载器来加载，DriverManager属于rt.jar是启动类加载器加载的。而用户jar包中的驱动需要由应用类加载器加载，这就违反了双亲委派机制。<img src="/2024/06/24/02/JDBC.png">定义服务接口：JDBC定义了java.sql.Driver接口。<br>服务提供者：各个数据库厂商实现java.sql.Driver接口，并在META-INF/services目录下创建文件java.sql.Driver，文件内容为实现类的全限定名。<br>加载驱动：DriverManager类在静态代码块中通过ServiceLoader加载所有实现java.sql.Driver接口的类，并调用Class.forName方法加载驱动类。<blockquote>
<p>定义服务接口：JDBC定义了java.sql.Driver接口。<br>服务提供者：各个数据库厂商实现java.sql.Driver接口，并在META-INF/services目录下创建文件java.sql.Driver，文件内容为实现类的全限定名。<br>加载驱动：DriverManager类在静态代码块中通过ServiceLoader加载所有实现java.sql.Driver接口的类，并调用Class.forName方法加载驱动类</p>
</blockquote>
</li>
<li>Osgi框架的类加载器，允许同级之间委托进行类的加载<br>自定义类加载器父类怎么是AppClassLoader呢？<br><img src="/2024/06/24/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E7%88%B6%E7%B1%BB.png"></li>
</ol>
<h5 id="JDK9之后的类加载器"><a href="#JDK9之后的类加载器" class="headerlink" title="JDK9之后的类加载器"></a>JDK9之后的类加载器</h5><p><strong>为什么抛弃了拓展类加载器</strong> ？<br>因为扩展类加载器主要是和加载jre环境下lib下的jar包，需要拓展Java的功能时，需要把jar包能够在ext文件夹下，不安全<br>JDK9引入的模块化开发取代了他</p>
<ol>
<li>启动类加载器使用Java编写，位于jdk.internal.loader.ClassLoaders类中。Java中的BootClassLoader继承自BuiltinClassLoader实现从模块中找到要加载的字节码资源文件。但是还是无法获取到</li>
<li>扩展类加载器被替换成了平台类加载器，所以继承关系从URLClassLoader变成了BuiltinClassLoader，BuiltinClassLoader实现了从模块中加载字节码文件。平台类加载器的存在更多的是为了与老版本的设计方案兼容，自身没有特殊的逻辑</li>
</ol>
<h5 id="双亲委派机制总结"><a href="#双亲委派机制总结" class="headerlink" title="双亲委派机制总结"></a>双亲委派机制总结</h5><p><img src="/2024/06/24/02/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93.png" alt="|500"></p>
<h4 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h4><p>加载、连接、初始化、使用、卸载</p>
<h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><p>简单概括：找到需要加载的类，并把类的信息加载到JVM中，然后在堆中实例化一个java.lang.Class对象，作为方法区中的这个类的信息的入口</p>
<ol>
<li>加载过程中是类加载器根据类的全限定名通过不同的渠道以二进制流的形式获取字节码信息</li>
<li>加载器加载完类之后，Java虚拟机将字节码中的信息保存到方法区中，生成一个InstanceKlass对象，保存类的所有信息，里面还包含实现特定功能比如多态的信息</li>
<li>Java虚拟机在堆中生成一份与方法去中数据类似的java.lang.Class对象，作用是在Java代码中获取类的信息和存储静态字段的数据，jkd8以后将静态字段放在堆区中。 优点是：对于开发者来说只需要访问堆中的Class对象而不需要访问方法区中的所有信息，能够很好的控制开发者访问数据的范围</li>
</ol>
<h5 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h5><ol>
<li>验证，校验Java字节码文件是都遵循了约束，一般不需要程序员参与</li>
<li>为静态变量分配内存并设置初始值，如果使用了final来修饰，就会直接将代码中的值赋给静态变量</li>
<li>解析，将符号引用替换为直接引用，符号引用是在字节码中使用序号来进行引用，而直接引用就是使用内存中的地址直接进行访问</li>
</ol>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>当类被直接引用的时候才会出发类的初始化。类被直接引用的情况有-&gt;<br>new,读取或设置类的静态变量，调用类的静态方法，通过反射来执行前三种，初始化子类时会触发父类的初始化，接口实现类初始化时，会出发直接或间接实现的所有接口的初始化<br>类的初始化只会运行静态部分，而且优先父类</p>
<ol>
<li>执行静态代码块中的代码，为静态变量赋值</li>
<li>初始化阶段会执行字节码中clinit部分的字节码指令</li>
</ol>
<h5 id="程序中可以直接导致初始化的操作："><a href="#程序中可以直接导致初始化的操作：" class="headerlink" title="程序中可以直接导致初始化的操作："></a>程序中可以直接导致初始化的操作：</h5><ol>
<li>访问一个类的静态变量或者静态方法，final修饰的并且等号在右侧是常量的话不会触发初始化，因为在连接阶段就已经进行赋值了</li>
<li>调用Class.forName(String className)时会进行初始化</li>
<li>new </li>
<li>执行Main方法的当前类<br><code>&lt;clinit&gt;</code>是Java中的一个特殊方法，代表初始化器（class initializer）。这个方法不是由程序员显式编写的，而是由Java虚拟机（JVM）自动生成的。当类被首次加载到JVM时，<code>&lt;clinit&gt;</code>方法负责执行类变量的静态初始化和静态初始化块的代码<br><code>clinit</code> 在以下情况不会出现：</li>
<li>无静态代码块</li>
<li>有静态变量声明但是没有赋值语句</li>
<li>静态变量的定义使用final字段，会在准备阶段直接进行初始化。<br>访问父类静态变量，只会初始化父类<br>new 子类时会先执行父类的clinit方法<br>数组的创建不会导致数组中元素的类的初始化。<br>final修饰的变量如果不是常量需要执行指令才能得出结果会执行clinit方法进行初始化</li>
</ol>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><h4 id="字节码文件"><a href="#字节码文件" class="headerlink" title="字节码文件"></a>字节码文件</h4><ol>
<li>常量池：避免保存重复的内容，节省空间</li>
<li>具体的字节码文件分析 <img src="/2024/06/24/02/%E5%AD%97%E8%8A%82%E7%A0%81.png"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//源码</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
i <span class="token operator">=</span> i <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment">//字节码</span>
<span class="token number">0</span> iconst_0  将<span class="token number">0</span>放在操作数栈中
<span class="token number">1</span> istore_1 弹出操作数栈最顶层数据到局部变量<span class="token number">1</span>号位
<span class="token number">2</span> iload_1  复制到操作数栈顶
<span class="token number">3</span> iinc <span class="token number">1</span> by <span class="token number">1</span> 将局部变量<span class="token number">1</span>号位的数据 <span class="token operator">+</span> <span class="token number">1</span>
<span class="token number">6</span> istore_1 弹出，保存在一号位，所以被覆盖了
<span class="token number">7</span> <span class="token keyword">return</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h5 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h5><p>基础信息，常量池(保存字符串常量、类或者接口名，主要在字节码指令中使用)，字段，方法，属性</p>
<h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><h4 id="按照线程共享不共享区分："><a href="#按照线程共享不共享区分：" class="headerlink" title="按照线程共享不共享区分："></a>按照线程共享不共享区分：</h4><ul>
<li>线程不共享<ol>
<li>程序计数器</li>
<li>Java虚拟机栈</li>
<li>本地方法栈</li>
</ol>
</li>
<li>线程共享<ol>
<li>方法区</li>
<li>堆</li>
</ol>
</li>
</ul>
<h5 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h5><p>内存溢出：程序在使用某一块内存区域时，存放的数据需要占用的内存大小超过了虚拟机能提供的内存上限<br>每个线程只需要存储一个固定长度的内存地址，所以程序计数器是不会发生内存溢出的<br>程序员无需对程序计数器进行任何处理</p>
<h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><p>Java虚拟机使用栈来管理方法调用中的基本数据。每一个方法的调用使用一个栈帧来保存，每个线程都包含一个自己的虚拟机栈<br><img src="/2024/06/24/02/%E6%A0%88%E5%86%85%E5%AD%98.png"></p>
<h6 id="栈帧的组成"><a href="#栈帧的组成" class="headerlink" title="栈帧的组成"></a>栈帧的组成</h6><ul>
<li>局部变量表：存放运行中的所有局部变量，包括局部变量表保存的内容有：实例方法的this对象，方法的参数，方法体中声明的局部变量。<img src="/2024/06/24/02/%E5%8F%98%E9%87%8F%E8%A1%A8.png"></li>
<li>操作数栈：存放临时数据<ul>
<li>栈帧中的局部变量表是一个数组，数组中每一个位置称之为槽(slot) ，long和double类型占用两个槽，其他类型占用一个槽。</li>
<li>实例方法中的序号为0的位置存放的是this，指的是当前调用方法的对象，运行时会在内存中存放实例对象的地址。</li>
<li>为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。</li>
</ul>
</li>
<li>帧数据：包含动态链接、方法出口、异常表的引用<img src="/2024/06/24/02/%E6%96%B9%E6%B3%95%E5%87%BA%E5%8F%A3.png"></li>
</ul>
<h5 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h5><p>存储natice本地方法的栈帧，在Hotspot虚拟机中，Java虚拟机栈和本地方法栈实现上使用了同一个栈空间。</p>
<h5 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h5><p><img src="/2024/06/24/02/%E6%A0%B9%E6%8D%AE%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%90%86%E8%AE%BA%E5%88%92%E5%88%86%E7%9A%84%E5%A0%86.png"><br>一般Java程序中堆内存是空间最大的一块内存区域。创建出来的对象都存在于堆上。栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实现对象在线程之间共享。<br>堆空间有三个需要关注的值，used、total、max。used指的是当前已使用的堆内存，total是java虚拟机已经分配的可用堆内存，max是java虚拟机可以分配的最大堆内存。<br><strong>不是当used = max = total的时候，堆内存就溢出</strong></p>
<hr>
<h5 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h5><p>方法区存放基础信息的位置，线程共享的，主要包含三部分：</p>
<ul>
<li>类的元信息，保存所有类的基本信息</li>
<li>运行时常量池，保存了字节码文件中常量池内容</li>
<li>字符串常量池，保存了字符串常量</li>
</ul>
<h6 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h6><p>一般称之为InstanceKlass对象。在类的加载阶段完成。其中就包含了类的字段、方法等字节码文件中的内容，同时还保存了运行过程中需要使用的虚方法表（实现多态的基础）等信息。</p>
<h6 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h6><p>字节码文件中通过编号查表的方式找到常量，这种常量池称为静态常量池。当常量池加载到内存中之后，可以通过内存地址快速的定位到常量池中的内容，这种常量池称为运行时常量池。<img src="/2024/06/24/02/%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0.png"></p>
<h6 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h6><p>字符串的拼接操作会创建一个新的字符串对象，而不是使用字符串常量池中的现有对象。<br>而直接用两个字符串拼接是放在常量池的，不是新建了一个对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
答案是<span class="token boolean">false</span><span class="token punctuation">,</span>因为<span class="token string">"abc"</span>是直接放入字符串常量池的，而<span class="token keyword">new</span> 出来的是放在堆内存中，两者所在的位置不同。
<span class="token number">1.</span>

<span class="token comment">/**
 * 字符串常量池案例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
答案是<span class="token boolean">true</span><span class="token punctuation">,</span>在编译阶段就把 <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"2"</span>连接在一起了
<span class="token number">2.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> d <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
答案是<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>jdk8之后运行时常量池放在元空间，而字符串常量池还在堆中。<br><strong>String.intern()方法是可以手动将字符串放入字符串常量池中</strong></p>
<h5 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h5><p>直接内存不属于Java运行时的内存区域，NIO机制中使用直接内存来解决</p>
<ol>
<li>Java堆中的对象如果不再使用要回收，回收时会影响对象的创建和使用。</li>
<li>IO操作比如读文件，需要先把文件读入直接内存（缓冲区）再把数据复制到Java堆中。<br>现在直接放入直接内存即可，同时Java堆上维护直接内存的引用，减少了数据复制的开销。写文件也是类似的思路。<img src="/2024/06/24/02/%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6.png"></li>
</ol>
<h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><h3 id="本地接口"><a href="#本地接口" class="headerlink" title="本地接口"></a>本地接口</h3><h3 id="垃圾收集器GC"><a href="#垃圾收集器GC" class="headerlink" title="垃圾收集器GC"></a>垃圾收集器GC</h3><p>GC (Garbage Collection)，堆是垃圾回收最主要的区域，所以也被乘坐GC堆。<br>如何手动触发垃圾回收：使用<code>System.gc()</code>，但是这个方法不会立即进行回收，只是向虚拟机发送一个垃圾回收的请求。</p>
<h4 id="不由GC进行回收的部分"><a href="#不由GC进行回收的部分" class="headerlink" title="不由GC进行回收的部分"></a>不由GC进行回收的部分</h4><p>线程不共享的部分不需要GC进行回收，因为随着线程的销毁，对应的方法的栈帧就会自动弹出栈并且释放掉对应的内存。</p>
<h4 id="进行回收的部分"><a href="#进行回收的部分" class="headerlink" title="进行回收的部分"></a>进行回收的部分</h4><h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5><p>主要回收不再使用的类，需要满足以下条件</p>
<ol>
<li>这个类所有的实例对象都被回收，在队中不存在该类的实例对象以及子类对象</li>
<li>加载该类的类加载器已经被回收，类加载器的任务完成之后引用被去除后就会被回收</li>
<li>java.lang.Class对象没有在任何地方被引用<img src="/2024/06/24/02/Class.png"></li>
</ol>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>Java中的对象能否被回收是根据对象是否被引用来决定的。如果对象被引用就不允许被回收<br>主要的算法：</p>
<h6 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h6><p>为每个对象维护一个指针，对象被引用时+1，取消引用时-d。<br>缺点是：</p>
<ol>
<li>每次引用都要维护计数器，会影响系统的性能</li>
<li>存在循环引用问题，A引用B，B引用A就无法回收了</li>
</ol>
<h6 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h6><p>可达性分析法将对象分为：垃圾回收的根对象 (GC Root)和普通对象，对象之间存在引用关系。<br>可达性分析就是如果某个对象到GC Root是可达的，就不能被回收。<br>哪些对象被称之为GC Root对象呢？</p>
<ul>
<li>线程Thread对象，引用线程栈帧中的方法参数、局部变量等。</li>
<li>系统类加载器加载的java.lang.Class对象，引用类中的静态变量。<img src="/2024/06/24/02/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AF%B9%E8%B1%A1.png"></li>
<li>监视器对象，用来保存同步锁synchronized关键字持有的对象。<img src="/2024/06/24/02/%E7%9B%91%E8%A7%86%E5%99%A8%E5%AF%B9%E8%B1%A1.png"></li>
<li>本地方法调用时使用的全局对象。</li>
</ul>
<h4 id="常见的引用对象"><a href="#常见的引用对象" class="headerlink" title="常见的引用对象"></a>常见的引用对象</h4><p>可达性算法中描述的对象引用，一般指的是强引用，Java中还设计了几种其他引用方式：</p>
<ul>
<li>软引用</li>
<li>弱引用</li>
<li>虚引用</li>
<li>终结器引用</li>
</ul>
<h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>如果一个对象只有软引用关联到他时，程序内存不足时回将其中的数据及逆行回收，软引用常用于缓存中<br>好处就是用作缓存快速从内存中读取，即使被释放了也可以重新获取，减少内存溢出的可能性<br>软引用对象本身，也需要被强引用，否则软引用对象也会被回收掉。<br>使用案例：</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/**
 * 软引用案例2 - 基本使用
 */
public class SoftReferenceDemo2 {
    public static void main(String[] args) throws IOException {

        byte[] bytes = new byte[1024 * 1024 * 100];
        SoftReference&lt;byte[]&gt; softReference = new SoftReference&lt;byte[]&gt;(bytes);
        bytes = null;
        System.out.println(softReference.get());

        byte[] bytes2 = new byte[1024 * 1024 * 100];
        System.out.println(softReference.get());
//
//        byte[] bytes3 = new byte[1024 * 1024 * 100];
//        softReference = null;
//        System.gc();
//
//        System.in.read();
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果软引用对象中的数据已经被回收了，那么这个对象本身也可以被回收了<br>SoftReference提供了一套队列机制：</p>
<ol>
<li>软引用创建时，通过构造器传入引用队列</li>
<li>在软引用中包含的对象被回收时，该软引用对象会被放入引用队列</li>
<li>通过代码遍历引用队列，将SoftReference的强引用删除<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/**
 * 软引用案例3 - 引用队列使用
 */
public class SoftReferenceDemo3 {

    public static void main(String[] args) throws IOException {

        ArrayList&lt;SoftReference&gt; softReferences = new ArrayList&lt;&gt;();
        ReferenceQueue&lt;byte[]&gt; queues = new ReferenceQueue&lt;byte[]&gt;();
        for (int i = 0; i &lt; 10; i++) {
            byte[] bytes = new byte[1024 * 1024 * 100];
            SoftReference studentRef = new SoftReference&lt;byte[]&gt;(bytes,queues);
            softReferences.add(studentRef);
        }

        SoftReference&lt;byte[]&gt; ref = null;
        int count = 0;
        while ((ref = (SoftReference&lt;byte[]&gt;) queues.poll()) != null) {
            count++;
        }
        System.out.println(count);

    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>弱引用整体与软引用基本一致，但是弱引用不管内存够不够都会直接被回收</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package chapter04.weak;

import java.io.IOException;
import java.lang.ref.WeakReference;

/**
 * 弱引用案例 - 基本使用
 */
public class WeakReferenceDemo2 {
    public static void main(String[] args) throws IOException {

        byte[] bytes = new byte[1024 * 1024 * 100];
        WeakReference&lt;byte[]&gt; weakReference = new WeakReference&lt;byte[]&gt;(bytes);
        bytes = null;
        System.out.println(weakReference.get());

        System.gc();

        System.out.println(weakReference.get());
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="虚引用和终结器引用"><a href="#虚引用和终结器引用" class="headerlink" title="虚引用和终结器引用"></a>虚引用和终结器引用</h5><p>这两种引用在常规开发中是不会使用的。</p>
<ul>
<li>虚引用也叫幽灵引用/幻影引用，不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知。Java中使用PhantomReference实现了虚引用，直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了虚引用来实现。</li>
<li>终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在Finalizer类中的引用队列中，在稍后由一条由FinalizerThread线程从队列中获取对象，然后执行对象的finalize方法，在对象第二次被回收时，该对象才真正的被回收。在这个过程中可以在finalize方法中再将自身对象使用强引用关联上，但是不建议这样做。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package chapter04.finalreference;

/**
 * 终结器引用案例
 */
public class FinalizeReferenceDemo {
    public static FinalizeReferenceDemo reference = null;

    public void alive() {
        System.out.println("当前对象还存活");
    }

    @Override
    protected void finalize() throws Throwable {
        try{
            System.out.println("finalize()执行了...");
            //设置强引用自救
            reference = this;
        }finally {
            super.finalize();
        }
    }

    public static void main(String[] args) throws Throwable {
        reference = new FinalizeReferenceDemo();
       test();
       test();
    }

    private static void test() throws InterruptedException {
        reference = null;
        //回收对象
        System.gc();
        //执行finalize方法的优先级比较低，休眠500ms等待一下
        Thread.sleep(500);
        if (reference != null) {
            reference.alive();
        } else {
            System.out.println("对象已被回收");
        }
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><ol>
<li>找到内存中存活的对象</li>
<li>释放不再存活对象的内存，使得程序能再次利用这部分空间</li>
</ol>
<h4 id="垃圾回收算法的历史和分类"><a href="#垃圾回收算法的历史和分类" class="headerlink" title="垃圾回收算法的历史和分类"></a>垃圾回收算法的历史和分类</h4><p>1960年John McCarthy发布了第一个GC算法：标记-清除算法。<br>1963年Marvin L. Minsky 发布了复制算法。</p>
<p>本质上后续所有的垃圾回收算法，都是在上述两种算法的基础上优化而来。</p>
<h5 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h5><p>GCRoot包含的对象：</p>
<blockquote>
<p>• 虚拟机栈(栈帧中的局部变量表)中引⽤的对象<br>• 本地⽅法栈(Native ⽅法)中引⽤的对象<br>• ⽅法区中类静态属性引⽤的对象<br>• ⽅法区中常量引⽤的对象<br>• 所有被同步锁持有的对象<br>• JNI（Java Native Interface）引⽤的对象</p>
</blockquote>
<p>标记清除算法的核心思想分为两个阶段：</p>
<ol>
<li>标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。从GC Root对象开始扫描，将对象A、B、C在引用链上的对象标记出来</li>
<li>清除阶段，从内存中删除没有被标记也就是非存活对象。将没有标记的对象清理掉，所以对象D就被清理掉了。<br>缺点：</li>
<li>碎片化问题由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配</li>
<li>分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。 我们需要用一个链表来维护，哪些空间可以分配对象，很有可能需要遍历这个链表到最后，才能发现这块空间足够我们去创建一个对象。如下图，遍历到最后才发现有足够的空间分配3个字节的对象了。如果链表很长，遍历也会花费较长的时间。</li>
</ol>
<h5 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h5><ol>
<li>准备两块空间From空间和To空间，每次在对象分配阶段，只能使用其中一块空间（From空间）。</li>
<li>在垃圾回收GC阶段，将From中存活对象复制到To空间。</li>
<li>将两块空间的From和To名字互换。下次依然在From空间上创建对象。<br>优点：</li>
</ol>
<ul>
<li>吞吐量高，复制算法只需要遍历一次存活对象复制到To空间即可，比标记-整理算法少了一次遍历的过程，因而性能较好，但是不如标记-清除算法，因为标记清除算法不需要进行对象的移动</li>
<li>不会发生碎片化，复制算法在复制之后就会将对象按顺序放入To空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。<br>缺点：<br>内存使用效率低，每次只能让一半的内存空间来为创建对象使用。</li>
</ul>
<h5 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h5><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p>
<p>核心思想分为两个阶段：</p>
<ol>
<li>标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。</li>
<li>整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。<br>优点：</li>
</ol>
<ul>
<li>内存使用效率高，整个堆内存都可以使用，不会像复制算法只能使用半个堆内存</li>
<li>不会发生碎片化，在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间<br>缺点：<br>整理阶段的效率不高，整理算法有很多种，比如Lisp2整理算法需要对整个堆中的对象搜索3次，整体性能不佳。可以通过Two-Finger、表格算法、ImmixGC等高效的整理算法优化此阶段的性能</li>
</ul>
<h5 id="分代垃圾回收算法"><a href="#分代垃圾回收算法" class="headerlink" title="分代垃圾回收算法"></a>分代垃圾回收算法</h5><p>现代优秀的垃圾回收算法，会将上述描述的垃圾回收算法组合进行使用，其中应用最广的就是分代垃圾回收算法(Generational GC)。<br>分代垃圾回收将整个内存区域划分为年轻代和老年代：<img src="/2024/06/24/02/%E5%88%92%E5%88%86.png"></p>
<ol>
<li>分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。<img src="/2024/06/24/02/Eden.png"></li>
<li>随着对象在Eden区越来越多，如果Eden区满，新创建的对象已经无法放入，就会触发年轻代的GC，称为Minor GC或者Young GC。Minor GC会把需要eden中和From需要回收的对象回收，把没有回收的对象放入To区。<img src="/2024/06/24/02/MinorGC.png"></li>
<li>接下来，S0会变成To区，S1变成From区。当eden区满时再往里放入对象，依然会发生Minor GC。<img src="/2024/06/24/02/%E5%8F%98%E6%8D%A2.png"></li>
<li>如果Minor GC后对象的年龄达到阈值（最大15，默认值和垃圾回收器有关），对象就会被晋升至老年代。<img src="/2024/06/24/02/%E8%BF%AD%E4%BB%A3.png"></li>
<li>当老年代中空间不足，无法放入新的对象时，先尝试minor gc如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。</li>
</ol>
<p>为什么分代GC算法要把堆分成年轻代和老年代？首先我们要知道堆内存中对象的特性：</p>
<ul>
<li>系统中的大部分对象，都是创建出来之后很快就不再使用可以被回收，比如用户获取订单数据，订单数据返回给用户之后就可以释放了。</li>
<li>老年代中会存放长期存活的对象，比如Spring的大部分bean对象，在程序启动之后就不会被回收了。</li>
<li>在虚拟机的默认设置中，新生代大小要远小于老年代的大小。</li>
</ul>
<p>分代GC算法将堆分成年轻代和老年代主要原因有：</p>
<ol>
<li>可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。</li>
<li>新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。</li>
<li>分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW时间就会减少。</li>
</ol>
<h4 id="垃圾回收器-重点"><a href="#垃圾回收器-重点" class="headerlink" title="垃圾回收器 重点"></a>垃圾回收器 重点</h4><h2 id="一些好用JVM分析工具"><a href="#一些好用JVM分析工具" class="headerlink" title="一些好用JVM分析工具"></a>一些好用JVM分析工具</h2><h3 id="Arthas-Arthas-Install-arthas-aliyun-com"><a href="#Arthas-Arthas-Install-arthas-aliyun-com" class="headerlink" title="[Arthas](Arthas Install | arthas (aliyun.com))"></a>[Arthas](<a href="https://arthas.aliyun.com/doc/install-detail.html">Arthas Install | arthas (aliyun.com)</a>)</h3><p><img src="/2024/06/24/02/Arthas.png"><br>阿里开发的工具</p>
<h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><p><img src="/2024/06/24/02/%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png"></p>
<ol>
<li>优先分配在Eden区，如果Eden区没有足够的空间进行分配时，虚拟机会进行一次MinorGC，而那些无需回收的存货对象会进入Survivor的From区，再不满足就进入Old区</li>
<li>大对象直接进入老年代，避免在Eden区和两个Survivor区之间发生大量的内存拷贝</li>
<li>长期存货的对象进入老年代，虚拟机为每一个对象定义一个年龄计数器，经过一次MinorCG就会进入Survivor区，此后每经历一次都会年龄+1，到达阈值，对象进入老年区。</li>
<li></li>
</ol>
<h2 id="Full-GC和Minor-GC和内存回收算法"><a href="#Full-GC和Minor-GC和内存回收算法" class="headerlink" title="Full GC和Minor GC和内存回收算法"></a>Full GC和Minor GC和内存回收算法</h2><blockquote>
<p>大多数情况下，对象在新生代中Eden区分配，当Eden区没有足够的内存进行分配时，回发起一次Minor GC。经过第一次Minor GC仍能够存货，并且能够被Survior容器容纳的话，会被移动到Survivor空间。并且将对象年龄设置为1，之后对象每熬过一次MinorGC，年龄就增加1岁，当它的年龄达到一定程度时，就会被晋级到老年代中。部分垃圾回收器会将大对象直接放入就老代。</p>
</blockquote>
<h3 id="Minor-GC-x2F-Young-GC"><a href="#Minor-GC-x2F-Young-GC" class="headerlink" title="Minor GC/ Young GC"></a>Minor GC/ Young GC</h3><p>只对新生代进行垃圾收集</p>
<h3 id="Major-GC-x2F-Old-GC"><a href="#Major-GC-x2F-Old-GC" class="headerlink" title="Major GC / Old GC"></a>Major GC / Old GC</h3><p>只对老年代进行GC，有时候也可以代指Full GC</p>
<h3 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h3><p>回收整个Java堆和方法区</p>
<h2 id="内存调优"><a href="#内存调优" class="headerlink" title="内存调优"></a>内存调优</h2><p>内存泄漏(memory leak)：Java中的如果不再使用一个对象，但是该对象依然在CG ROOT的引用链上，这个对象就不会被回收。<br>绝大数情况都是由堆内存泄露引起的<br>常见由：</p>
<ol>
<li>没有及时删除缓存数据</li>
<li>分布式任务调度系统等进行任务调度任务结束中出现了内存泄漏。</li>
</ol>
<h3 id="代码中的内存泄漏"><a href="#代码中的内存泄漏" class="headerlink" title="代码中的内存泄漏"></a>代码中的内存泄漏</h3><h4 id="equals和hashCode，不正确使用会导致泄漏"><a href="#equals和hashCode，不正确使用会导致泄漏" class="headerlink" title="equals和hashCode，不正确使用会导致泄漏"></a>equals和hashCode，不正确使用会导致泄漏</h4><ol>
<li><strong>不一致的&nbsp;<code>equals()</code>&nbsp;和&nbsp;<code>hashCode()</code>&nbsp;实现</strong>：<ul>
<li>如果两个对象根据&nbsp;<code>equals()</code>&nbsp;方法被认为是相等的，那么它们的&nbsp;<code>hashCode()</code>&nbsp;值也必须相等。如果这个规则被违反，可能会导致哈希表中的对象无法正确地被访问和删除，从而导致内存泄漏。</li>
</ul>
</li>
<li><strong>对象无法被正确移除</strong>：<ul>
<li>在使用哈希表时，如果对象的&nbsp;<code>hashCode()</code>&nbsp;值在插入后发生变化，可能会导致对象无法被正确移除，因为哈希表依赖于&nbsp;<code>hashCode()</code>&nbsp;值来定位对象。<br>在定义新类时没有重写正确的equals()和hashCode()方法。在使用HashMap的场景下，如果使用这个类对象作为key，HashMap在判断key是否已经存在时会使用这些方法，如果重写方式不正确，会导致相同的数据被保存多份。<br>正常情况：</li>
</ul>
</li>
<li>以JDK8为例，首先调用hash方法计算key的哈希值，hash方法中会使用到key的hashcode方法。根据hash方法的结果决定存放的数组中位置。</li>
<li>如果没有元素，直接放入。如果有元素，先判断key是否相等，会用到equals方法，如果key相等，直接替换value；key不相等，走链表或者红黑树查找逻辑，其中也会使用equals比对是否相同。<br>异常情况：</li>
<li>hashCode方法不对，导致相同id的学生对象计算出来的hash值不同被放在不同的槽中</li>
<li>equals方法不对，导致即使id相同，也会被认为是不同的对象<br>下列代码会重复添加这个对象，导致内存溢出，因为不是相同的对象实例</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
	    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
	        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	            <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	        <span class="token punctuation">}</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决方案：</p>
<ol>
<li>在定义新实体时，始终重写equals()和hashCode()方法。</li>
<li>重写时一定要确定使用了唯一标识去区分不同的对象，比如用户的id等。</li>
<li>hashmap使用时尽量使用编号id等数据作为key，不要将整个实体类对象作为key存放。</li>
</ol>
<h4 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h4><p>线程池中的线程不被回收导致的ThreadLocal内存泄漏<br>如果仅仅使用手动创建的线程，就算没有调用ThreadLocal的remove方法清理数据，也不会产生内存泄漏。因为当线程被回收时，ThreadLocal也同样被回收。但是如果使用线程池就不一定了。<br>解决方案：<br>线程方法执行完，一定要调用ThreadLocal中的remove方法清理对象。</p>
<h4 id="内部类引用外部类"><a href="#内部类引用外部类" class="headerlink" title="内部类引用外部类"></a>内部类引用外部类</h4><p>非静态的内部类和匿名内部类的错误使用导致内存泄漏</p>
<ol>
<li><strong>非静态的内部类默认会持有外部类</strong> ，尽管代码上不再使用外部类，所以如果有地方引用了这个非静态内部类，会导致外部类也被引用，垃圾回收时无法回收这个外部类。</li>
<li>匿名内部类对象如果在非静态方法中被创建，会持有调用者对象，垃圾回收时无法回收调用者。</li>
</ol>
<p>解决方案：</p>
<ol>
<li>使用静态内部类从而不持有外部对象</li>
<li>使用静态方法，避免匿名内部类持有调用者对象</li>
</ol>
<h4 id="String的intern方法"><a href="#String的intern方法" class="headerlink" title="String的intern方法"></a>String的intern方法</h4><p>由于JDK6中的字符串常量池位于永久代，intern被大量调用并保存产生的内存泄漏</p>
<h4 id="通过静态字段保存对象"><a href="#通过静态字段保存对象" class="headerlink" title="通过静态字段保存对象"></a>通过静态字段保存对象</h4><p>大量的数据在静态变量中被引用，但是不再使用，成为了内存泄漏<br>问题：<br>如果大量的数据在静态变量中被长期引用，数据就不会被释放，如果这些数据不再使用，就成为了内存泄漏。</p>
<p>解决方案：<br>1、尽量减少将对象长时间的保存在静态变量中，如果不再使用，必须将对象删除（比如在集合中）或者将静态变量设置为null。<br>2、使用单例模式时，尽量使用懒加载，而不是立即加载。</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.itheima.jvmoptimize.leakdemo.demo7;

import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

@Lazy //懒加载
@Component
public class TestLazy {
    private byte[] bytes = new byte[1024 * 1024 * 1024];
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="资源没有正常关闭"><a href="#资源没有正常关闭" class="headerlink" title="资源没有正常关闭"></a>资源没有正常关闭</h4><p>由于资源没有调用close方法正常关闭，导致的内存溢出<br>连接和流这些资源会占用内存，如果使用完之后没有关闭，这部分内存不一定会出现内存泄漏，但是会导致close方法不被执行。<br>解决方案：</p>
<ol>
<li>为了防止出现这类的资源对象泄漏问题，必须在finally块中关闭不再使用的资源。</li>
<li>从 Java 7 开始，使用try-with-resources语法可以用于自动关闭资源。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>
    <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> br2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用资源</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="并发请求问题"><a href="#并发请求问题" class="headerlink" title="并发请求问题"></a>并发请求问题</h4><h2 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h2><p>GC调优是对垃圾回收进行调优，GC调优的主要目标是避免由垃圾回收引起程序性能下降<br>可以进行调优的内容：</p>
<ol>
<li>通用JVM参数的设置</li>
<li>特定垃圾回收器的JVM参数的设置</li>
<li>解决由频繁FULLGC引起的程序性能问题</li>
</ol>
<h3 id="调优指标："><a href="#调优指标：" class="headerlink" title="调优指标："></a>调优指标：</h3><h4 id="垃圾回收的吞吐量"><a href="#垃圾回收的吞吐量" class="headerlink" title="垃圾回收的吞吐量"></a>垃圾回收的吞吐量</h4><ul>
<li>吞吐量，一段时间内程序需要完成的业务数量。<br>保证高吞吐量的常规手段有两条：<br>1、优化业务执行性能，减少单次业务的执行时间<br>2、优化垃圾回收吞吐量</li>
</ul>
<p>垃圾回收吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值，即吞吐量 = 执行用户代码时间 /（执行用户代码时间 + GC时间）。吞吐量数值越高，垃圾回收的效率就越高，允许更多的CPU时间去处理用户的业务，相应的业务吞吐量也就越高。</p>
<h4 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h4><p>1延迟指的是从用户发起一个请求到收到响应这其中经历的时间。比如企业中对于延迟的要求可能会是这样的：<br>所有的请求必须在5秒内返回给用户结果</p>
<p>延迟 = GC延迟 + 业务执行时间，所以如果GC时间过长，会影响到用户的使用。</p>
<h4 id="内存使用量"><a href="#内存使用量" class="headerlink" title="内存使用量"></a>内存使用量</h4><p>内存使用量指的是Java应用占用系统内存的最大值，一般通过Jvm参数调整，在满足上述两个指标的前提下，这个值越小越好。</p>
<h3 id="调优工具"><a href="#调优工具" class="headerlink" title="调优工具"></a>调优工具</h3><h4 id="jstat工具"><a href="#jstat工具" class="headerlink" title="jstat工具"></a>jstat工具</h4><p>Jstat工具是JDK自带的一款监控工具，可以提供各种垃圾回收、类加载、编译信息<br>等不同的数据。使用方法为：<code>jstat -gc 进程ID 每次统计的间隔（毫秒） 统计次数</code></p>
<p>C代表Capacity容量，U代表Used使用量<br>S – 幸存者区，E – 伊甸园区，O – 老年代，M – 元空间<br>YGC、YGT：年轻代GC次数和GC耗时（单位：秒）<br>FGC、FGCT：Full GC次数和Full GC耗时<br>GCT：GC总耗时</p>
<h4 id="Visualvm插件"><a href="#Visualvm插件" class="headerlink" title="Visualvm插件"></a>Visualvm插件</h4><h4 id="Prometheus-Grafana"><a href="#Prometheus-Grafana" class="headerlink" title="Prometheus + Grafana"></a>Prometheus + Grafana</h4><h4 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h4><h5 id="分析GC日志-GCViewer"><a href="#分析GC日志-GCViewer" class="headerlink" title="分析GC日志 - GCViewer"></a>分析GC日志 - GCViewer</h5><hr>
<h2 id="GraalVM"><a href="#GraalVM" class="headerlink" title="GraalVM"></a>GraalVM</h2><p>GraalVM是Oracle官方推出的一款高性能JDK，使用它享受比OpenJDK或者OracleJDK更好的性能。<br>两种模式：</p>
<ul>
<li>JIT（ Just-In-Time ）模式 ，即时编译模式，在运行时将热点代码编译为本地机器码，以提高执行效率。</li>
<li>AOT（Ahead-Of-Time）模式 ，提前编译模式</li>
</ul>
<h2 id="如何判断一个对象是否可以被回收？"><a href="#如何判断一个对象是否可以被回收？" class="headerlink" title="如何判断一个对象是否可以被回收？"></a>如何判断一个对象是否可以被回收？</h2><p>判断对象存活一般有两种方式：引用计数和可达性分析<br>GCROOT包括：</p>
<ol>
<li>虚拟机栈中的引用对象：局部变量 ，方法参数等</li>
<li>本地方法栈内引用的对象</li>
<li>方法区中静态属性引用的对象：Java类中的引用类型静态变量</li>
<li>方法区中的敞亮引用对象</li>
</ol>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 常见的OOM场景，加书签</li>
</ul>
<h2 id="常见的OOM场景"><a href="#常见的OOM场景" class="headerlink" title="常见的OOM场景"></a>常见的OOM场景</h2><ol>
<li>堆内存溢出-&gt;对象太多了</li>
<li>栈内存OOM-&gt;线程创建太多有可能会导致，或者递归过多</li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2024/06/16/16/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式是⼀套被反复使⽤的、多数⼈知晓的、经过分类编⽬的、代码设计经验的总结。</p>
<h2 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h2><ol>
<li>开闭原则：对扩展开放，对修改关闭</li>
<li>单一职责原：一个类只负责一个功能领域中的相应职责</li>
<li>里氏替换原则：所有引用基类的地方必须能透明地使用其子类对象</li>
<li>依赖倒置原则：以来月抽象，不能依赖于具体实现</li>
<li>接口隔离原则：类之间的依赖关系应该简历在最小接口上</li>
<li>合成/聚合复用原则：尽量使用合成/聚合，而不是通过继承达到复用的目的。</li>
<li>迪米特法则：一个软件实体应该尽量少的与其他实体发生相互作用</li>
</ol>
<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><ul>
<li>创建型：在创建对象的同时隐藏创建逻辑，不适用new 直接实例化对象。 主要有 工厂/抽象工厂/单例/创造者/原型模式</li>
<li>结构型：通过类和接口间的继承和引用实现创建负责结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式</li>
<li>行为型：通过类之间不同通信方式实现不同行为，包括责任链/命名/解释器/迭代器/终结者/备忘录/观察者/状态/策略/模板/访问者模式<br><img src="/2024/06/16/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB.png"></li>
</ul>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>由一个工厂对象来创建实例，客户但不需要关注创建逻辑，只需要传递工厂参数。</p>
<h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式将具体产品的任务分发给具体的产品工厂，也就是一个抽象工厂，定义生产接口但是不负责具体的产品。</p>
<h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><p>简单和方法只是针对一类产品。<br>抽象工厂通过在AbstactFactory中增减创建产品的接口，然后由子类工厂去实现新增产品的创建。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式是创建型模式，任何情况下只存在一个实例，构造方法必须是私有，由自己创建一个静态变量存储实例，对外提供一个静态公有方法获取实例。<br>优点是只能有一个实例，减少了开销。</p>
<h4 id="常见的写法"><a href="#常见的写法" class="headerlink" title="常见的写法"></a>常见的写法</h4><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><p>类⼀加载就创建对象</p>
<p>优点：线程安全，没有加锁，执⾏效率较⾼<br>缺点：不是懒加载，类加载时就初始化，浪费内存空间</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
 <span class="token comment">// 1、私有化构造⽅法</span>
 <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token comment">// 2、定义⼀个静态变量指向⾃⼰类型</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 3、对外提供⼀个公共的⽅法获取实例</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	 <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><p>单线程模式下没问题，多线程无法保证单例<br>优点是：懒加载<br>缺点是：线程安全</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
	 <span class="token comment">// 1、私有化构造⽅法</span>
	 <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
	 <span class="token comment">// 2、定义⼀个静态变量指向⾃⼰类型</span>
	 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>
	 <span class="token comment">// 3、对外提供⼀个公共的⽅法获取实例</span>
	 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		 <span class="token comment">// 判断为 null 的时候再创建对象</span>
		 <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token punctuation">}</span>
		 <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="线程安全的懒汉式"><a href="#线程安全的懒汉式" class="headerlink" title="线程安全的懒汉式"></a>线程安全的懒汉式</h4><p>使用synchronized关键字枷锁保证线程安全。可以加在方法上面，也可以添加在代码块上面。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
	 <span class="token comment">// 1、私有化构造⽅法</span>
	 <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
	 <span class="token comment">// 2、定义⼀个静态变量指向⾃⼰类型</span>
	 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>
	 <span class="token comment">// 3、对外提供⼀个公共的⽅法获取实例</span>
	 <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		 <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token punctuation">}</span>
		 <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式将一个类的接口转化为用户期望的另一个接口，让原本两个不兼容的接口能够无缝完成对接。</p>
<p>优点：</p>
<ol>
<li>提⾼了类的复⽤；</li>
<li>组合若⼲关联对象形成对外提供统⼀服务的接⼝；</li>
<li>扩展性、灵活性好。<br>缺点：</li>
<li>过多使⽤适配模式容易造成代码功能和逻辑意义的混淆。</li>
<li>部分语⾔对继承的限制，可能⾄多只能适配⼀个适配者类，⽽且⽬标类必须是抽象类</li>
</ol>
<h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p>通过类继承，继承Target接口，继承Adaptee的实现</p>
<h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>通过类对象组合实现适配</p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>本质是一个中间件，主要目的是解耦服务的提供者和使用者，使用者通过代理间接的访问服务提供者。<br>是一种结构性模式</p>
<h4 id="动态代理和静态代理的区别"><a href="#动态代理和静态代理的区别" class="headerlink" title="动态代理和静态代理的区别"></a>动态代理和静态代理的区别</h4><p>动态代理<br>动态代理是在运行时创建代理对象的机制。代理对象可以在不修改原始对象代码的情况下，拦截对目标对象的方法调用，并在调用前后添加额外的逻辑。Java 中的动态代理主要有两种实现方式：<br>静态代理<br>静态代理是在编译时创建代理类的机制。代理类在编译时就已经存在，并且实现了与目标对象相同的接口。静态代理通过在代理类中调用目标对象的方法来实现对目标对象的代理。</p>
<ol>
<li>动态代理不需要实现接口可以直接代理实现类，并且可以不许哟啊针对每个目标类都创建一个代理类。静态代理中接口一旦要新增方法，目标对象和代理对象都需要进行修改。</li>
<li>JVM层面：静态代理在编译时就将、接口、实现类、代理类这些都变成一个个实际的class文件。 动态代理是在运行时动态生成类字节码，并且加载到JVM中。</li>
</ol>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式是一种对象行为模式，住哟啊处理对象之间的一对多关系。当一个对象状态发生变化时，所有该对象的关注着都能收到状态变化通知进行响应的处理</p>
<p>优点：</p>
<ol>
<li>被观察者和观察者之间是抽象耦合的；</li>
<li>耦合度较低，两者之间的关联仅仅在于消息的通知</li>
<li>被观察者⽆需关⼼他的观察者；</li>
<li>⽀持⼴播通信；</li>
</ol>
<p>缺点：</p>
<ol>
<li>观察者只知道被观察对象发⽣了变化，但不知变化的过程和缘由；</li>
<li>观察者同时也可能是被观察者，消息传递的链路可能会过⻓，完成所有通知花费时间较多；</li>
<li>如果观察者和被观察者之间产⽣循环依赖，或者消息传递链路形成闭环，会导致⽆限循环；</li>
</ol>
<h4 id="你的项⽬是怎么⽤的观察者模式？"><a href="#你的项⽬是怎么⽤的观察者模式？" class="headerlink" title="你的项⽬是怎么⽤的观察者模式？"></a>你的项⽬是怎么⽤的观察者模式？</h4><blockquote>
<p>在⽀付场景下，⽤户购买⼀件商品，当⽀付成功之后三⽅会回调⾃身，在这个时候系统可能会有很多需要执⾏的逻辑（如：更新订单状态，发送邮<br>件通知，赠送礼品…），这些逻辑之间并没有强耦合，因此天然适合使⽤观察者模式去实现这些功能，当有更多的操作时，只需要添加新的观察者就能实现，完美实现了对修改关闭，对扩展开放的开闭原则。</p>
</blockquote>
<h3 id="修饰器模式"><a href="#修饰器模式" class="headerlink" title="修饰器模式"></a>修饰器模式</h3><p>修饰器模式住主要是对现有的类对象进行包裹和封装，以期在不改变类对象及其类定义的情况下为对象添加额外功能。是一种对象接口模式。</p>
<h4 id="讲讲装饰器模式的应⽤场景"><a href="#讲讲装饰器模式的应⽤场景" class="headerlink" title="讲讲装饰器模式的应⽤场景"></a>讲讲装饰器模式的应⽤场景</h4><p>如果你希望在⽆需修改代码的情况下即可使⽤对象， 且希望在运⾏时为对象新增额外的⾏为， 可以使⽤装饰模式。</p>
<p>装饰能将业务逻辑组织为层次结构， 你可为各层创建⼀个装饰， 在运⾏时<br>将各种不同逻辑组合成对象。 由于这些对象都遵循通⽤接⼝， 客户端代码能以相同的⽅式使⽤这些对象。</p>
<p>如果⽤继承来扩展对象⾏为的⽅案难以实现或者根本不可⾏， 你可以使⽤该模式。</p>
<p>许多编程语⾔使⽤ final 最终关键字来限制对某个类的进⼀步扩展。 复⽤最终类已有⾏为的唯⼀⽅法是使⽤装饰模式： ⽤封装器对其进⾏封装。</p>
<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>一个请求沿着责任链进行传递，直到链上有某个处理者处理它位为止。</p>
<h4 id="讲讲责任链模式的应⽤场景"><a href="#讲讲责任链模式的应⽤场景" class="headerlink" title="讲讲责任链模式的应⽤场景"></a>讲讲责任链模式的应⽤场景</h4><p>当程序需要使⽤不同⽅式处理不同种类请求， ⽽且请求类型和顺序预</p>
<p>先未知时， 可以使⽤责任链模式。该模式能将多个处理者连接成⼀条</p>
<p>链。 接收到请求后， 它会 “询问” 每个处理者是否能够对其进⾏处理。</p>
<p>这样所有处理者都有机会来处理请求。</p>
<p>当必须按顺序执⾏多个处理者时， 可以使⽤该模式。 ⽆论你以何种顺</p>
<p>序将处理者连接成⼀条链， 所有请求都会严格按照顺序通过链上的处</p>
<p>理者</p>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>对象行为模式，针对一组算法将每一个算法封装到具有共同解耦的独立的类中，从而是他们能够相互替换。</p>
<h2 id="Spring-使⽤了哪些设计模式？"><a href="#Spring-使⽤了哪些设计模式？" class="headerlink" title="Spring 使⽤了哪些设计模式？"></a>Spring 使⽤了哪些设计模式？</h2><p>Spring 框架中⽤到了哪些设计模式？</p>
<ul>
<li>⼯⼚设计模式 : Spring 使⽤⼯⼚模式通过BeanFactory 、 ApplicationContext 创建 bean 对象。</li>
<li>代理设计模式 : Spring AOP 功能的实现。</li>
<li>单例设计模式 : Spring 中的 Bean 默认都是单例的。</li>
<li>模板⽅法模式 : Spring 中 jdbcTemplate 、 hibernateTemplate 等以Template 结尾的对数据库操作的类，它们就使⽤到了模板模式。</li>
<li>包装器设计模式 : 我们的项⽬需要连接多个数据库，⽽且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>
<li>观察者模式: Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</li>
<li>适配器模式 :Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、spring MVC 中也是⽤到了适配器模式适配 Controller 。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程</title>
    <url>/2024/06/13/21/</url>
    <content><![CDATA[<h2 id="软件工程相关"><a href="#软件工程相关" class="headerlink" title="软件工程相关"></a>软件工程相关</h2><h3 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h3><p>瀑布模型（Waterfall Model）、快速原型模型（Rapid Prototype Model）、V 模型（V-model）、W 模型（W-model）、敏捷开发模型等</p>
<h4 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h4><p><strong>敏捷开发</strong> 是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</p>
<h3 id="软件开发的基本策略"><a href="#软件开发的基本策略" class="headerlink" title="软件开发的基本策略"></a>软件开发的基本策略</h3><h4 id="软件复用"><a href="#软件复用" class="headerlink" title="软件复用"></a>软件复用</h4><p>构建新软件不需要从头开始，可以复用已有的轮子</p>
<h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><h4 id="逐步演进"><a href="#逐步演进" class="headerlink" title="逐步演进"></a>逐步演进</h4><p>不断进行迭代式增量开发<br>MVP(<strong>Minimum Viable Product</strong> 最小可行产品)</p>
<h4 id="优化折中"><a href="#优化折中" class="headerlink" title="优化折中"></a>优化折中</h4><p>不需要完全优化，用有效的投入内以最有效的方式提高现有软件的质量</p>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul>
<li><strong>类名需要使用大驼峰命名法</strong></li>
<li><strong>方法名、参数名、成员变量、局部变量需要使用小驼峰命名法（lowerCamelCase</strong></li>
<li><strong>测试方法名、常量、枚举名称需要使用蛇形命名法（snake_case）</strong> (各个单词之间通过下划线“_”连接，比如<code>should_get_200_status_code_when_request_is_valid</code>、<code>CLIENT_CONNECT_SERVER_FAILURE</code>)</li>
<li>项目文件夹名称使用串式命名法，在串式命名法中，各个单词之间通过连接符“-”连接，比如<code>dubbo-registry</code>。</li>
<li><strong>抽象类命名使用 Abstract</strong></li>
<li><strong>异常类命名使用 Exception 结尾。</strong></li>
<li><strong>测试类命名以它要测试的类的名称开始，以 Test 结尾。</strong></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>运维</title>
    <url>/2024/05/23/22/</url>
    <content><![CDATA[<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>编写docker-compose.yml脚本，配合dockerfile和sh脚本进行搭建</p>
<ul>
<li>示例一：搭建一主二从三哨兵的redis集群 ^220b94<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span> #dockercompose版本
<span class="token property">services</span><span class="token punctuation">:</span> #定义应用的的服务，每个服务运行一个镜像
  <span class="token property">redis-master</span><span class="token punctuation">:</span> #服务名称
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest #镜像
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --appendonly yes --requirepass bronya #启动容器时要执行命令
    <span class="token property">volumes</span><span class="token punctuation">:</span> #挂载数据卷，不存在的目录会自动创建
      - ./data/<span class="token property">master</span><span class="token punctuation">:</span>/data
    <span class="token property">ports</span><span class="token punctuation">:</span> #定义端口映射
      - <span class="token string">"6379:6379"</span>

  <span class="token property">redis-slave1</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --slaveof redis-master 6379 --appendonly yes
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./data/<span class="token property">slave1</span><span class="token punctuation">:</span>/data

  <span class="token property">redis-slave2</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --slaveof redis-master 6379 --appendonly yes
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./data/<span class="token property">slave2</span><span class="token punctuation">:</span>/data

  <span class="token property">redis-sentinel1</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-sentinel /etc/redis/sentinel.conf
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./sentinel1.<span class="token property">conf</span><span class="token punctuation">:</span>/etc/redis/sentinel.conf

  <span class="token property">redis-sentinel2</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-sentinel /etc/redis/sentinel.conf
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./sentinel2.<span class="token property">conf</span><span class="token punctuation">:</span>/etc/redis/sentinel.conf

  <span class="token property">redis-sentinel3</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-sentinel /etc/redis/sentinel.conf
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./sentinel3.<span class="token property">conf</span><span class="token punctuation">:</span>/etc/redis/sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">--build</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>示例二：基于dockerfile<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token property">services</span><span class="token punctuation">:</span>
  <span class="token property">app</span><span class="token punctuation">:</span>
    <span class="token property">build</span><span class="token punctuation">:</span> 
      <span class="token property">context</span><span class="token punctuation">:</span> .
      <span class="token property">dockerfile</span><span class="token punctuation">:</span> Dockerfile
    <span class="token property">ports</span><span class="token punctuation">:</span>
      - <span class="token string">"8080:8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
Dockerfile文件<pre class="line-numbers language-css" data-language="css"><code class="language-css"># 使用官方的java镜像作为基础镜像
FROM <span class="token property">openjdk</span><span class="token punctuation">:</span>8-jdk-alpine

# 设置工作目录
WORKDIR /app

# 将本地的jar包复制到Docker镜像中
COPY ./your-app.jar /app

# 设置启动命令
ENTRYPOINT [<span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"-jar"</span><span class="token punctuation">,</span> <span class="token string">"/app/your-app.jar"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul>
<li>之间的关系：<br><img src="/2024/05/23/22/docker%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="常见命令与他们之间的关系"></li>
<li>使用format对ps的结果进行格式化，更容易观察<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker ps -a --format <span class="token selector">"table</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>.ID<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">\t</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.Image<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">\t</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.Ports<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">\t</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.Status<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">\t</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.Names<span class="token punctuation">}</span><span class="token punctuation">}</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>可以通过编辑/root/.bashrc文件去给常用的命令起别名<pre class="line-numbers language-css" data-language="css"><code class="language-css"># 修改/root/.bashrc文件
vi /root/.bashrc
内容如下：
# .bashrc

# User specific aliases and functions

alias rm=<span class="token string">'rm -i'</span>
alias cp=<span class="token string">'cp -i'</span>
alias mv=<span class="token string">'mv -i'</span>
alias dps=<span class="token string">'docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}\t{{.Names}}"'</span>
alias dis=<span class="token string">'docker images'</span>

# Source global definitions
if [ -f /etc/bashrc ]<span class="token punctuation">;</span> then
        . /etc/bashrc
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><h2 id="网络问题：-容器的ip是一个虚拟ip，其值并不与容器绑定-可以使用docker的网络功能实现容器的互联"><a href="#网络问题：-容器的ip是一个虚拟ip，其值并不与容器绑定-可以使用docker的网络功能实现容器的互联" class="headerlink" title="网络问题：  - 容器的ip是一个虚拟ip，其值并不与容器绑定  - 可以使用docker的网络功能实现容器的互联"></a>网络问题：<br>  - 容器的ip是一个虚拟ip，其值并不与容器绑定<br>  - 可以使用docker的网络功能实现容器的互联</h2></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>os</title>
    <url>/2024/03/06/38/</url>
    <content><![CDATA[<h2 id="OS面试常问"><a href="#OS面试常问" class="headerlink" title="OS面试常问"></a>OS面试常问</h2><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>ASCII码规定了128个字符的编码<br>Unicode 是⼀个很⼤的集合，将世界上所有的符号都纳⼊其中，每⼀个符号都给予⼀个独⼀⽆⼆的编<br>码。可以容纳100多万个符号；但是存储⽅式不确定，还可能浪费字节空间</p>
<p>Unicode 是⼀个很⼤的集合，将世界上所有的符号都纳⼊其中，每⼀个符号都给予⼀个独⼀⽆⼆的编</p>
<p>码。可以容纳100多万个符号；但是存储⽅式不确定，还可能浪费字节空间</p>
<h4 id="utf-8中中文占几个字节"><a href="#utf-8中中文占几个字节" class="headerlink" title="utf-8中中文占几个字节"></a>utf-8中中文占几个字节</h4><ol>
<li>对于单字节，字节的第一位设为0，后面7位位Unicode码，英语字母，UTF-8与ASCII是一样的</li>
<li>对于n字节的符号，第一个字节前n位全是1，第n+1位为0，后面字节的前两位为10，剩下的为Unicode码。中文占用三个字节的存储空间。</li>
</ol>
<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>不同进程的线程间要进行通信需要使用消息通信的方法来实现同步。</p>
<h4 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h4><ol>
<li>互斥锁Mutex：保证同意时间只能有一个线程可以访问共享资源。</li>
<li>信号量Semaphore：一种计数器，控制同时访问某个共享资源的线程数量。</li>
<li>条件变量Confition Variable：一个线程可以等待某个条件的发生，另一个进程可以在满足条件时，通知等待的线程继续执行。</li>
<li>读写Read-Write Lock：允许多个线程同时读取共享资源，但只允许一个线程写入共享资源。</li>
<li>原子操作：</li>
<li>屏障Barrier：让一组下称在某个点上等待，直到所有进程都到达这个点之后再继续执行。</li>
</ol>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>四个条件：互斥、请求和保持、不剥夺、环路等待<br>死锁预防：破坏任一条件<br>死锁避免：银行家算法、一次封锁法、顺序封锁法</p>
<p>一次封锁法是一种简单的锁定策略，事务在开始时一次性获取所有需要的锁，并在事务结束时一次性释放所有锁。这种方法可以避免死锁，但可能会导致锁的持有时间过长，从而降低系统的并发性能。</p>
<p>顺序封锁法是一种更复杂但更有效的锁定策略，分为两个阶段：扩展阶段和收缩阶段。</p>
<ol>
<li><strong>扩展阶段（Growing Phase）</strong>：事务可以获取锁，但不能释放锁。</li>
<li><strong>收缩阶段（Shrinking Phase）</strong>：事务可以释放锁，但不能获取新的锁。</li>
</ol>
<p>这种方法可以确保事务的可串行化，从而保证数据的一致性。</p>
<h4 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h4><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><p>基于缓存加锁和总线加锁。<br>总线锁是使用处理器提供的一个lock#信号，当一个处理器在总线上输出这个信号，其他处理器的请求被阻塞。总线吧cpu贺内存之间的通信锁住了，其他处理器不能操作其他内存地址的数据，所以开销很大<br>缓存锁：频繁使用的内存会在L1、L2、L3高速缓存中，所以原子操作只需要对内部缓存中进行，允许使用MESI缓存一致性机制来保证原子性。<br>但是以下情况不能使用缓存锁：</p>
<ol>
<li>操作的数据不能被缓存在处理器内部或者操作的数据跨多个缓存行</li>
<li>有些处理器不支持缓存锁定</li>
</ol>
<h4 id="锁的区别和使用场景"><a href="#锁的区别和使用场景" class="headerlink" title="锁的区别和使用场景"></a>锁的区别和使用场景</h4><h5 id="互斥锁mutex"><a href="#互斥锁mutex" class="headerlink" title="互斥锁mutex"></a>互斥锁mutex</h5><p>特点是任何时刻都只有一个线程可以访问某个资源或者临界区<br>使用场景：共享资源不能被多个线程同时修改，更新全局变量、修改数据库记录</p>
<h5 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h5><p>控制特定资源的访问线程数<br>场景：限制链接池大小，控制同时访问文件的线程数</p>
<h5 id="临界区-Critical-Section"><a href="#临界区-Critical-Section" class="headerlink" title="临界区 Critical Section"></a>临界区 Critical Section</h5><p>代码中访问共享资源的部分，保证同时只有一个线程可以执行这段代码<br>场景：执行多步骤的事务</p>
<h5 id="循环锁-Spinlock"><a href="#循环锁-Spinlock" class="headerlink" title="循环锁 Spinlock"></a>循环锁 Spinlock</h5><p>一种忙等待锁，反复检查锁的状态，不会让出CPU资源<br>场景：时间很短，持有锁时间很短。</p>
<h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><ol>
<li>读者优先：读线程可以一直，所有的读线程都释放锁后，写线程才能获得写锁。</li>
<li>写着优先：第一个读线程获得锁之后，当写线程到达会被阻塞，但是阻塞过程中新的读线程要排在写线程之后。</li>
<li>公平策略：使用队列，读写按照先进先出原则加锁。</li>
</ol>
<h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><ol>
<li>栈：由操作系统自动分配释放，存放函数的参数值，局部变量等 </li>
<li>堆：一般由程序员分配释放，程序员不释放，程序结束时可能由OS回收，分配方式类似链表</li>
</ol>
<h5 id="虚拟内存-Virt"><a href="#虚拟内存-Virt" class="headerlink" title="虚拟内存 Virt"></a>虚拟内存 Virt</h5><p>抽象层，允许操作系统将硬件内存抽象化，使得每个程序都认为自己有一个连续的、私有的内存区域。内存满了也可以通过swap文件或者分页将部分数据暂存到硬盘上，从而使得程序可以运行在超过物理内存大小的内存空间中。大小 = 程序正在使用的物理内存 + 交换空间 + 未使用但已预留的内存。</p>
<h5 id="常驻内存RES"><a href="#常驻内存RES" class="headerlink" title="常驻内存RES"></a>常驻内存RES</h5><p>实际被加载到物理内存中的部分</p>
<h5 id="共享内存-SHR"><a href="#共享内存-SHR" class="headerlink" title="共享内存 SHR"></a>共享内存 SHR</h5><p>多个进程共同使用的内存部分，允许不同进程访问同一块物理地址，从而节省内存小号并提高数据交换效率。共享内存常用于进程间通信IPC</p>
<h6 id="Free-内存"><a href="#Free-内存" class="headerlink" title="Free 内存"></a>Free 内存</h6><p>系统中完全未使用的内存数量，是系统中真正可用的，没有被其他进程使用的内存。</p>
<h6 id="Available内存"><a href="#Available内存" class="headerlink" title="Available内存"></a>Available内存</h6><p>系统中立刻可以分配给进程的内存数量，包括free内存和一部分被缓存的内存。available = free + buff/chche</p>
<h5 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h5><p>缓冲区适用于存储文件系统元数据的内存。读取/写入文件时，数据首先暂存在Buffers中，来提高读取和写入的效率。</p>
<h5 id="Cached"><a href="#Cached" class="headerlink" title="Cached"></a>Cached</h5><p>缓存：用于存储已经从磁盘读取的文件的副本，这些文件可能是系统频繁使用的文件。由Linux内核自动管理，用于提高系统性能。系统有足够的空闲内存时，会将一些文件的副本保留在Cached中。</p>
<h5 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h5><p><img src="/2024/03/06/38/%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6.png"><br>当内存大于pages_high是，系统内存充足不会进行内存回收<br>当内存小于pages_low时，标识内存存在压力，会触发kswapd0，进行后台内存回收。直到pages_high位置<br>当内存⼩于 pages_min 时，表⽰此时⽤⼾内存耗尽，会触发直接内存回收，进程被阻塞</p>
<p>OOM⸺Out of Memory 如果直接内存回收之后，系统的剩余空闲内存还不⾜以进⾏内存分配，则会<br>进⼀步触发OOM机制。 OOM Killer 机制会根据算法选择并kill掉⼀个占⽤物理内存较⾼的进程，以便<br>释放内存资源，如果物理内存依然不⾜，OOM Killer 会继续杀死占⽤物理内存较⾼的进程，直到释放<br>⾜够的内存位置。</p>
<h5 id="MMU和TLB"><a href="#MMU和TLB" class="headerlink" title="MMU和TLB"></a>MMU和TLB</h5><p>MMU （Memory Management Unit，内存管理单元）<br>用于在CPU和内存之间实现虚拟内存管理。将虚拟地址转换为物理地址，同时提供访问权限的控制和缓存管理等功能。<br>TLB 是高所缓存，哟关于缓存页表转换的结果。存在TLB时，虚拟地址到物理地址的转换过程发生了变化，虚拟地址首先发往TLB确认是否命中Cache</p>
<h5 id="Drop-Cache"><a href="#Drop-Cache" class="headerlink" title="Drop Cache"></a>Drop Cache</h5><p>“Drop Cache” 是一种清理系统缓存的方法。系统缓存包括页面缓存、目录项缓存（dentry cache）和inode缓存。<br>• dirty pages不能回收；</p>
<p>• 共享内存和tmpfs（临时⽂件系统，指位于内存和/或交换分区中的⽂件系统）不能回收(注意观察<br>free命令显⽰的shared值)；</p>
<h5 id="Buddy分配器-amp-Slab分配器"><a href="#Buddy分配器-amp-Slab分配器" class="headerlink" title="Buddy分配器 &amp; Slab分配器"></a>Buddy分配器 &amp; Slab分配器</h5><p>Buddy系统是⼀种⾼效的内存分配技术，因为它避免了内存空间的碎⽚。伙伴系统确保所有分配的块</p>
<p>具有相同的⼤⼩，以便它们可以轻松地与其伙伴块合并在⼀起。伙伴系统的另⼀个主要优点是它允许</p>
<p>快速分配和释放内存块，这是实时系统中提供增强性能的重要要求。Linux内核中使⽤伙伴系统</p>
<p>（buddy system）算法以⻚为单位管理内存，进⾏内存分配。旨在减少外部碎⽚</p>
<p>Slab 系统 是另⼀种⽤于分配内核内存的技术。 slab内存分配系统的主要优点是它消除了由于内存分配</p>
<p>和释放⽽产⽣的碎⽚。换句话说，slab分配系统是操作系统中⽤来管理内核内存的⼀种内存分配策</p>
<p>略。基本原理是从伙伴系统中申请⼀整⻚内存，然后划分成多个⼤⼩相等的⼩块内存被 slab 所管理。</p>
<p>旨在减少内部碎⽚</p>
<h5 id="内存碎⽚-amp-内存整理"><a href="#内存碎⽚-amp-内存整理" class="headerlink" title="内存碎⽚ &amp; 内存整理"></a>内存碎⽚ &amp; 内存整理</h5><p>内存碎⽚（Memory Fragmentation）是指内存的使⽤效率降低的现象，它分为两种形式：内部碎⽚</p>
<p>（Internal Fragmentation）和外部碎⽚（External Fragmentation）。内部碎⽚发⽣在内存块被分配</p>
<p>出去后，剩余的未使⽤空间⽆法被其他请求利⽤。外部碎⽚则是指多次内存分配和释放后，内存中留</p>
<p>下许多⼩的、不连续的空闲区域，这些区域太⼩，⽆法满⾜新的内存请求，尽管总的空闲内存量可能</p>
<p>⾜够。</p>
<p>Linux内存对碎⽚化的整理算法主要应⽤了内核的⻚⾯迁移机制，是⼀种将可移动⻚⾯进⾏迁移后腾出</p>
<p>连续物理内存的⽅法。在内存碎⽚整理开始前，会在内存区的头和尾各设置⼀个指针，头指针从头向</p>
<p>尾扫描可移动的⻚，⽽尾指针从尾向头扫描空闲的⻚，当他们相遇时终⽌整理。</p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote>
<p>&nbsp;<strong>OOM</strong> OOM Killer 机制会根据算法选择一个占用物理内存较高的进程，然后将其杀死，以便释放内存资源，如果物理内存依然不足，OOM Killer 会继续杀死占用物理内存较高的进程，直到释放足够的内存位置。<br>带宽：又叫频宽，是指在固定的的时间可传输的资料数量，亦即在传输管道中可以传递数据的能力。<br>内存管理单元（MMU）<br>位宽 ：位宽就是内存或显存一次能传输的数据量。简单地讲就是一次能传递的数据宽度，就像公路的车道宽度，双向四车道、双向六车道，当然车道越多一次能通过的汽车就越大，所以位宽越大，一次性能舆的数据就越多,对显卡来说对性能的提高很明显。<br>PSW：**<em>包含中断是否开放，处理机执行态等状态的寄存器，叫做处理机状态字 PSW</em>**<br>PCB: 进程控制块<br>TCB: 线程控制模块<br>寄存器分类：CS 代码段寄存器， IP 指令指针寄存器,<br>PC 程序计数器寄存器， PS描述CPU执行状态，主要包含理机当前运行态，处理及优先级，屏蔽外中断等状态<br>shell不是操作系统的一部分，而是终端与操作系统的接口<br>硬件驱动：是一个软件，用于驱动硬件<br>磁道:每个磁头可以读取一段唤醒区域，就是磁道<br>柱面： 所有的磁道合并就是一个柱面<br>上下文切换：由一个程序切换到另一个程序<br>I/O设备：包括设备控制器和设备本身，<br>文件：抽象磁盘空间<br>文件描述符：如果访问文件权限许可，则返回一个小整数，若禁止访问，系统将返回一个错误码<br>管道：一种需文件，可以链接两个进程，进程A要给进程B 发送数据时，要先把它写在管道上，相当于一个输出文件，之后进程B从上面读入并处理<br>PID 进程识别符<br>线程切换要切换栈，否则会弹栈错误<br><strong>切换栈实质就是切换寄存器</strong><br>基本输入输出系统 <strong>BIOS</strong>(Basic Input Output System)</p>
<ol>
<li><p>每台计算机上有一块双亲板，上面有一个叫做 基本输入输出系统 <strong>BIOS</strong>(Basic Input Output System),在BIOS里面有底层I/O软件</p>
</li>
<li><p>设备启动，BIOS启动，检测RAM 的数量和基本硬件的是否已经安装并且响应，</p>
</li>
<li><p>之后通过储存在CMOS存储器中的设备清单决定启动设备</p>
</li>
<li><p>之后操作系统来询问BIOS ，以获得配置信息<br><strong>多路复用：实现时间和空间的复用</strong></p>
</li>
</ol>
</blockquote>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><ul>
<li><p>操作系统是一种系统软件，是软、硬件资源的控制中心，</p>
</li>
<li><p>操作系统提供一个资源集的抽象，并管理这些硬件资源</p>
</li>
<li><p><strong>主要任务是隐藏硬件，呈现给程序的抽象</strong></p>
</li>
<li><p>记录哪个程序在使用什么资源，对资源请求进行评估代价，并且为不同的程序和用户调解互相冲突的资源冲突</p>
</li>
</ul>
<h4 id="功能-："><a href="#功能-：" class="headerlink" title="功能 ："></a>功能 ：</h4><ol>
<li>进程和线程的创建以及管理:创建，撤销，阻塞，唤醒，通信</li>
<li>存储管理：内存和外存的分配管理</li>
<li>文件管理：读写，创建删除</li>
<li>设备管理：完成设备请求和释放，还有启动</li>
<li>网络管理：</li>
<li>安全管理：用户认证，控制访问，文件加密等</li>
</ol>
<h3 id="。。"><a href="#。。" class="headerlink" title="。。"></a>。。</h3><p>线程：<br>jvm中线程崩溃不会导致进程崩溃，原因是什么<br><em><strong>因为JVM自定义了自己的信号处理函数，拦截了SIGSEGV信号</strong></em></p>
<ul>
<li>用户态和内核态的转换：<ol>
<li>系统调用</li>
<li>中断</li>
<li>异常</li>
</ol>
</li>
<li>死锁的解除：<ol>
<li>立刻结束所有进程</li>
<li>结束涉及死锁的所有进程</li>
<li>逐个撤销涉及死锁的进程</li>
<li>抢占资源</li>
</ol>
</li>
<li>内存管理：<ol>
<li>分配回收</li>
<li>地址转换</li>
<li>扩充</li>
<li>映射</li>
<li>优化</li>
<li>安全</li>
</ol>
</li>
<li>inode：索引节点，用于存储文件的元信息，包括文件被分为几块，权限，所有者等，每个文件拥有唯一的inode。inode的数量是固定的</li>
<li>PCB通过列表的方式组织，相同状态的进程链接在一起</li>
<li>进程和线程的对比：<ol>
<li>进程时资源分配的单位和CPU调度的单位</li>
<li>线程只享有部分资源，如寄存器和栈</li>
<li>线程可以享受进程的公共资源</li>
<li>线程切换开销少：<ul>
<li>线程不涉及资源管理信息</li>
<li>线程释放的资源比进程少</li>
<li>同一个进程中的线程切换比进程快，因为线程共享想用的地址空间，在一个进程中的所以后线程都构想一个页表。切换时不需要切换表。</li>
</ul>
</li>
</ol>
</li>
<li>TCP线程控制块</li>
<li>线程分类： <ol>
<li>用户线程：在用户空间实现的线程,由用户态的线程库来管理</li>
<li>内核线程：在内核中实现的线程，由内核管理</li>
<li>轻量级线程：在内核中来支持用户线程</li>
</ol>
</li>
<li>进程调度：<ul>
<li>调度时机: 就绪态-&gt;运行态，运行态-&gt;阻塞态,运行态-&gt;结束态</li>
<li>调度算法：<ul>
<li>非抢占式调度算法 : 进程阻塞或者结束时才会调用另一个进程</li>
<li>抢占式调度算法：对于一个进程，给予一段时间去运行，时间结束后仍然在运行时，将其挂起，会发生时钟中断</li>
</ul>
<ol>
<li>FCFS 先来先服务</li>
<li>SJF 最短作业优先</li>
<li>高响应比优先调度算法</li>
<li>时间片轮转</li>
</ol>
</li>
</ul>
</li>
<li>进程之间的通信方式：<ol>
<li>pipe    linux中 | 会创建两个子进程共同使用一个pipe</li>
<li>消息队列：进程发送消息后就可以继续做工作，另一个进程读取到消息进行处理，消息队列是保存在内核中的消息链表，缺点是：通信不及时，附件大小有限制</li>
<li>共享内存:拿出一块虚拟地址空间，将其映射到相同的物理内存中，即可做到消除拷贝过程、<ul>
<li>缺点：多个进程共同修改共享地址会出现冲突</li>
<li><img src="/2024/03/06/38/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98.png"></li>
</ul>
</li>
<li>信号量：P V 操作 初始量为1时，是互斥操作， 为0时是同步操作</li>
<li>信号： 信号 ≠ 信号量，用于处理异常状态下的工作状态</li>
<li>锁：<ul>
<li>忙等待锁(自旋锁)：当获取不到锁时，线程会一直等待，不做别的事情，直至得到锁。</li>
<li>互斥锁：加锁失败后会释放cpud</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><ul>
<li>用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态；</li>
<li>操作系统收到请求后，进一步将 I/O 请求发送 DMA，然后让 CPU 执行其他任务；</li>
<li>DMA 进一步将 I/O 请求发送给磁盘；</li>
<li>磁盘收到 DMA 的 I/O 请求，把数据从磁盘读取到磁盘控制器的缓冲区中，当磁盘控制器的缓冲区被读满后，向 DMA 发起中断信号，告知自己缓冲区已满；</li>
<li><strong>DMA 收到磁盘的信号，将磁盘控制器缓冲区中的数据拷贝到内核缓冲区中，此时不占用 CPU，CPU 可以执行其他任务</strong>；</li>
<li>当 DMA 读取了足够多的数据，就会发送中断信号给 CPU；</li>
<li>CPU 收到 DMA 的信号，知道数据已经准备好，于是将数据从内核拷贝到用户空间，系统调用返回；</li>
<li>一致哈希算法也用了取模运算，但与哈希算法不同的是，哈希算法是对节点的数量进行取模运算，而<strong>一致哈希算法是对 2^32 进行取模运算，是一个固定的值</strong>。</li>
</ul>
<p>我们可以把一致哈希算法是对 2^32 进行取模运算的结果值组织成一个圆环，就像钟表一样，钟表的圆可以理解成由 60 个点组成的圆，而此处我们把这个圆想象成由 2^32 个点组成的圆，这个圆环被称为<strong>哈希环</strong>，如下图：</p>
<p><img src="https://cdn.xiaolincoding.com//mysql/other/0ea3960fef48d4cbaeb4bec4345301e7.png"></p>
<h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>现代操作系统，内核一般会提供 4 个基本能力：</p>
<ul>
<li>管理进程、线程，决定哪个进程、线程使用 CPU，也就是进程调度的能力；</li>
<li>管理内存，决定内存的分配和回收，也就是内存管理的能力；</li>
<li>管理硬件设备，为进程与硬件设备之间提供通信能力，也就是硬件通信能力；</li>
<li>提供系统调用，如果应用程序要运行更高权限运行的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。<br><em>宏内核</em> ： 内核的所有模块都在内核态<br>微内核：内核只保留基本能力，进程调度，中断等，剩下的放在用户空间<br>混合内核，是宏内核和微内核的结合体，内核中抽象出了微内核的概念，也就是内核中会有一个小型的内核，其他模块就在这个基础上搭建，整个内核是个完整的程序；</li>
</ul>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="寄存器："><a href="#寄存器：" class="headerlink" title="寄存器："></a>寄存器：</h3><ul>
<li>通用寄存器：存放要运算的数据</li>
<li>程序寄存器： 来存储下一条要执行的指令所在的内存第</li>
<li>指令寄存器：存放指令本身</li>
</ul>
<h3 id="总线："><a href="#总线：" class="headerlink" title="总线："></a>总线：</h3><ul>
<li>地址总线： 指定CPU要操作的内存地址</li>
<li>数据总线：读写内存的数据</li>
<li>控制总线 ： 发送和接受信号，中断，设备复位等，CPU响应也需要控制总线</li>
</ul>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a><a href="https://xiaolincoding.com/os/1_hardware/how_cpu_deal_task.html#%E5%AE%8C%E5%85%A8%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6">调度</a></h3><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul>
<li>寄存器；</li>
<li>CPU Cache：使用SRAM 静态存储器，断电丢失数据</li>
<li><img src="/2024/03/06/38/Cache%E5%88%86%E7%B1%BB.png"><ol>
<li>L1-Cache；&nbsp;L1 高速缓存通常分成<strong>指令缓存</strong>和<strong>数据缓存</strong>。速度几乎和寄存器一样快。每个核心都拥有一个</li>
<li>L2-Cache；比L2离CPU远，大小更大，每一个核心都有</li>
<li>L3-Cahce；多核心公用</li>
<li>写入策略：<ul>
<li>写直达（_Write Through_）</li>
<li>写回（_Write Back_）只有当Cache 中的数据被替换时，写入内存</li>
</ul>
</li>
<li><h2 id="Cache一致性-第一点，某个-CPU-核心里的-Cache-数据更新时，必须要传播到其他核心的-Cache，这个称为写传播（-Write-Propagation-）；使用锁-第二点，某个-CPU-核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的，这个称为事务的串行化（-Transaction-Serialization-）。-使用基于总线嗅探的MESI模型-伪共享：-多个线程同时读写同一个-Cache-Line-的不同变量时，而导致-CPU-Cache-失效的现象称为伪共享（-False-Sharing-）-解决：尽量避免这些数据刚好在同一个Cache-Line-将他们变成对齐的情况。-应用层面解决："><a href="#Cache一致性-第一点，某个-CPU-核心里的-Cache-数据更新时，必须要传播到其他核心的-Cache，这个称为写传播（-Write-Propagation-）；使用锁-第二点，某个-CPU-核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的，这个称为事务的串行化（-Transaction-Serialization-）。-使用基于总线嗅探的MESI模型-伪共享：-多个线程同时读写同一个-Cache-Line-的不同变量时，而导致-CPU-Cache-失效的现象称为伪共享（-False-Sharing-）-解决：尽量避免这些数据刚好在同一个Cache-Line-将他们变成对齐的情况。-应用层面解决：" class="headerlink" title="Cache一致性- - 第一点，某个 CPU 核心里的 Cache 数据更新时，必须要传播到其他核心的 Cache，这个称为写传播（_Write Propagation_）；使用锁 - 第二点，某个 CPU 核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的，这个称为事务的串行化（_Transaction Serialization_）。 - 使用基于总线嗅探的MESI模型 -  -  - 伪共享： 多个线程同时读写同一个 Cache Line 的不同变量时，而导致 CPU Cache 失效的现象称为伪共享（_False Sharing_） - 解决：尽量避免这些数据刚好在同一个Cache Line,将他们变成对齐的情况。 - 应用层面解决："></a>Cache一致性-<br> - 第一点，某个 CPU 核心里的 Cache 数据更新时，必须要传播到其他核心的 Cache，这个称为<strong>写传播（_Write Propagation_）</strong>；使用锁<br> - 第二点，某个 CPU 核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的，这个称为<strong>事务的串行化（_Transaction Serialization_）</strong>。<br> - 使用基于总线嗅探的MESI模型<br> - <img src="/2024/03/06/38/%E7%8A%B6%E6%80%81%E5%9B%BE.png"><br> - <img src="/2024/03/06/38/MESI.png"><br> - 伪共享： 多个线程同时读写同一个 Cache Line 的不同变量时，而导致 CPU Cache 失效的现象称为<strong>伪共享（_False Sharing_）</strong><br> - 解决：尽量避免这些数据刚好在同一个Cache Line,将他们变成对齐的情况。<br> - 应用层面解决：<img src="/2024/03/06/38/%E5%BA%94%E7%94%A8%E5%B1%82%E9%9D%A2%E8%A7%A3%E5%86%B3.png"></h2></li>
</ol>
</li>
<li>内存；DRAM 不断刷新，数据才能被存储起来。</li>
<li>SSD/HDD 硬盘： SSD:固态硬盘，HDD机械硬盘</li>
</ul>
<h3 id="伙伴系统："><a href="#伙伴系统：" class="headerlink" title="伙伴系统："></a>伙伴系统：</h3><p>当可分配内存比所需要内存的二倍还大，那么就将其划分为两个大小为一半一半的空闲分区，重复划分，<strong>直到比二倍小就分配给他</strong></p>
<h3 id="分页，分段"><a href="#分页，分段" class="headerlink" title="分页，分段"></a>分页，分段</h3><ol>
<li><p><strong>分段（Segmentation）</strong>： 不连续，不等长，相当于是一小段逻辑的程序</p>
<ul>
<li>分段将内存划分为若干段（segments），每个段具有不同的大小和含义。</li>
<li>每个段都有自己的基地址和长度。段可以包含代码、数据、堆栈等不同类型的信息。</li>
<li>分段允许程序员以逻辑上独立的方式编写程序，并且使得程序的结构更清晰。</li>
<li>分段的缺点是会导致内存碎片化，难以管理。</li>
</ul>
</li>
<li><p><strong>分页（Paging）</strong>： 连续等长</p>
<ul>
<li>分页将内存划分为固定大小的页面（pages），通常为4KB或者更大。</li>
<li>操作系统将进程的虚拟地址空间划分为与页面大小相同的块，称为虚拟页面（virtual pages）。</li>
<li>虚拟页面和物理页面（physical pages）之间建立映射关系，操作系统负责管理这些映射。</li>
<li>分页的优点是可以更有效地利用内存空间，减少内存碎片化，并且实现了更好的内存保护和共享。</li>
<li>解决了外部碎片，但是仍然存在内部碎片</li>
</ul>
</li>
</ol>
<ul>
<li>页帧：把**物理地址间_**划分为大小相同的基本分配单元</li>
<li>页面：把<strong>逻辑地址空间</strong>也划分为相同大小，基本分配单元</li>
<li>页面置换算法：</li>
<li><strong>最佳页面置换算法（OPT，Optimal）</strong>：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。</li>
<li><strong>先进先出页面置换算法（FIFO，First In First Out）</strong> : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 FIFO 队列即可需求。不过，它的性能并不是很好。</li>
<li><strong>最近最久未使用页面置换算法（LRU ，Least Recently Used）</strong>：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。LRU 算法是根据各页之前的访问情况来实现，因此是易于实现的。OPT 算法是根据各页未来的访问情况来实现，因此是不可实现的。</li>
</ul>
<h5 id="LRU算法的弊端："><a href="#LRU算法的弊端：" class="headerlink" title="LRU算法的弊端："></a><em>LRU算法的弊端：</em></h5><p>使用链表：最近使用的数据如果存在，就将其放在头部，如果不存在，就读取数据并放入头部，并删除尾部数据。<br>预读机制：读入数据时，会把相邻的数据一起读入(空间局限性)</p>
<ol>
<li>缓存失效：被预读的数据没有访问，而且把尾部的数据删除，降低了命中率。 解决：实现两个链表，分别存储热数据和冷数据，分别进行LRU算法。预读部分放入冷数据链表，当真正访问时，放入热数据链表</li>
<li>缓存污染：当批量读取数据时，大量数据被放入热数据LRU链表，会导致之前的热点数据失效。解决：提高进入活跃LRU链表的门槛</li>
</ol>
<ul>
<li><p><strong>最少使用页面置换算法（LFU，Least Frequently Used）</strong> : 和 LRU 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。</p>
</li>
<li><p><strong>时钟页面置换算法（Clock）</strong>：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。</p>
<p><strong>局部性原理</strong>是指在程序执行过程中，数据和指令的访问存在一定的空间和时间上的局部性特点。其中，时间局部性是指一个数据项或指令在一段时间内被反复使用的特点，空间局部性是指一个数据项或指令在一段时间内与其相邻的数据项或指令被反复使用的特点。</p>
</li>
</ul>
<h3 id="虚拟内存的作用"><a href="#虚拟内存的作用" class="headerlink" title="虚拟内存的作用"></a>虚拟内存的作用</h3><ol>
<li>使得进程对云翔内存超过物理内存大小，可以把不经常使用的内存换到物理内存之外</li>
<li>每一个进程有自己的页表，所以每个进程的虚拟内存空间时相互独立 的，解决了多进程之间的地址冲突</li>
<li>页表中还存在着一些标记属性的bit，如控制一个页的读写权限，为操作系统提供更好的安全性<br><em>如果没有空闲的物理内存，那么内核就会开始进行<strong>回收内存</strong>的工作，回收的方式主要是两种：直接内存回收和后台内存回收。</em></li>
</ol>
<ul>
<li><strong>后台内存回收</strong>（kswapd）：在物理内存紧张的时候，会唤醒 kswapd 内核线程来回收内存，这个回收内存的过程<strong>异步</strong>的，不会阻塞进程的执行。</li>
<li><strong>直接内存回收</strong>（direct reclaim）：如果后台异步回收跟不上进程内存申请的速度，就会开始直接回收，这个回收内存的过程是<strong>同步</strong>的，会阻塞进程的执行。</li>
<li>OOM 选择一个占用物理内存高的进程，将其杀死，如果不够，重复杀死<ol>
<li>文件页：脏页将其写回磁盘中，再释放， 干净页直接回收内存</li>
<li>匿名页：没有实际载体的文件，将其不常访问写回磁盘</li>
</ol>
</li>
</ul>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程控制块 PCB Process Control Block</p>
<p>描述了进程的标识，空间运行状态，资源使用等信息</p>
<p>PCB是进程存在的唯一标志</p>
<p>每个进程都在操作系统中有一个对应的PCB</p>
<p>操作系统建立一个表格用于描述该进程的存在和状态，这个表格就叫做进程控制块</p>
<ul>
<li>PCB 使用链表和索引表</li>
<li>同一个状态的进程进入一个链表</li>
<li>索引表指向PCB</li>
</ul>
<h4 id="PCB的使用"><a href="#PCB的使用" class="headerlink" title="PCB的使用"></a>PCB的使用</h4><p>进程创建：生成该进程的PCB<br>进程终止：回收它的PCB</p>
<h3 id="进程的状态："><a href="#进程的状态：" class="headerlink" title="进程的状态："></a>进程的状态：</h3><p>创建状态、运行态、就绪态、阻塞态、结束状态<br><img src="/2024/03/06/38/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" alt="进程状态转换"><br>需要一个新的状态，来<strong>描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态</strong>。</p>
<ul>
<li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li>
<li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；<br><img src="/2024/03/06/38/%E6%8C%82%E8%B5%B7.png"></li>
</ul>
<h4 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h4><h3 id="主要的事件：系统初始化，正在运行的程序执行了创建进程的系统调用，用户请求创建一个进程，一个批处理作业的初始化"><a href="#主要的事件：系统初始化，正在运行的程序执行了创建进程的系统调用，用户请求创建一个进程，一个批处理作业的初始化" class="headerlink" title="主要的事件：系统初始化，正在运行的程序执行了创建进程的系统调用，用户请求创建一个进程，一个批处理作业的初始化"></a>主要的事件：系统初始化，正在运行的程序执行了创建进程的系统调用，用户请求创建一个进程，一个批处理作业的初始化</h3><p>进程执行</p>
<p>进程等待</p>
<p>进程抢占</p>
<p>进程唤醒</p>
<p>进程结束</p>
<p>核心状态：运行状态，就绪状态，等待状态，创建状态，结束状态<br>进程挂起：</p>
<ol>
<li><p>处于挂起状态的进程映射在磁盘上，目的是减少进程占用内存</p>
</li>
<li><p>等待挂起状态等待挂起状态</p>
</li>
<li><p>就绪挂起状态 进程在外存，但只要进入内存即可运行</p>
</li>
</ol>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>概念：线程是进程的一部分，描述指令流执行状态。是进程中指令执行流的最小单元，是CPU 调度的基本单位<br>线程 = 进程 - 共享资源<br>进程 = 资源+多组线程</p>
<ul>
<li>优点： 1. 一个进程可以有多个线程2.各个线程之间 2.线程之间可以并发。3. 线程之间可以共享地址和文件资源</li>
<li>缺点：一个线程崩溃 会导致所属的进程的所有线程崩溃</li>
</ul>
<h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>为了避免由于中断处理程序执行时间过长，而影响正常进程的调度，Linux 将中断处理程序分为上半部和下半部：</p>
<ul>
<li>上半部，对应硬中断，由硬件触发中断，用来快速处理中断；</li>
<li>下半部，对应软中断，由内核触发中断，用来异步处理上半部未完成的工作；<br>优点：</li>
</ul>
<ol>
<li>提高CPU效率</li>
<li>实时处理</li>
<li>故障处理</li>
<li>实现分时擦欧总<br>中断的来源是外设，异常是应用程序请求的，属于系统调用</li>
</ol>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>每一个系统调用都需要切换堆栈，系统调用是操作系统提供给用户态程序的接口，用于调用内核。<br>自陷指令： 能够产生异常的指令</p>
<h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行:"></a>并发与并行:</h4><p>并行：两个进程一起进行，单核处理器中不能够并行，多核才可以</p>
<p>并发：单核处理器合理的处理任务的操作，也就是多线程，并不能同时进行多个任务</p>
<p>进程之间的关系：相互独立和相互制约<br>制约： 同步和互斥</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出MySQL</title>
    <url>/2024/09/14/10/</url>
    <content><![CDATA[<h1 id="深入浅出MySQL"><a href="#深入浅出MySQL" class="headerlink" title="深入浅出MySQL"></a>深入浅出MySQL</h1><p>以下内容参考自 《MySQL是怎样运行的：从根儿上理解MySQL》一书，强烈推荐</p>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>对于不同的表可以设置不同的存储引擎</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE tableName (
	xxxx
) ENGINE = 引擎名称;
# 修改
ALTER TABLE tableName ENGINE = xxx;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h3><p>mysql中的utf8默认的是使用的自定义的1~3字节表示的uft8mb3，对于一些特殊的字符，比如emoji，需要我们指定为utf8mb4才能够存储。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE / ALTER DATABASE 数据库名
 CHARACTER SET 字符集名称
 COLLATE 比较规则名称
# 或者对于表来修改
	CREATE TABLE tableName(
	)
	CHARACTER SET 字符集
	COLLATE 比较规则
ALTER tableName CHARACTER SET 字符集名称
## 或者对于某一列
CREATE TABLE 表名(
列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],
其他列...
);
ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><h2 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h2><ol>
<li>页<br>将数据划分为页，以页为单位作为磁盘和内存交互的单位，默认页大小为16KB</li>
<li>行结构<br>记录的单位是行。</li>
</ol>
<h3 id="行格式"><a href="#行格式" class="headerlink" title="行格式"></a>行格式</h3><p>行/记录格式有很多，可以在建表的时候指定行格式</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE tableName(
xxxx;
) ROW_FORMAT=COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol>
<li>COMPACT格式 （重点，最常用）<br><img src="/2024/09/14/10/Compact.png"></li>
</ol>
<ul>
<li>变长字段长度列表，<strong>只会存放变长字段的长度</strong><br>支持VARCHAR等变成字段类型的，结构</li>
</ul>
<ol>
<li>真正的数据内容</li>
<li>占用的字节数<br>所有变长字段的真实占用长度，按照列顺序的<strong>逆序</strong>来进行存放。<br>这个长度占用的字节数：<br>如果可变字段允许的最大字节数超过255字节，并且真实存储的字节数超过127字节，就使用两个字节来表示这个长度，否则使用一个字节来表示。</li>
</ol>
<ul>
<li>NULL值列表<br>Compact将列中的NULL值统一进行管理。而不是放在真实数据里面，从而减少存储占用<br>进行的流程：</li>
</ul>
<ol>
<li>统计允许存储NULL值的列有哪些，如果不存在，NULL值列表就不存在了</li>
<li>表示形式：使用1表示为NULL值，0表示不为NULL，按照<strong>逆序</strong>排序。</li>
<li>要求NULL值列表必须使用整个字节的位来表示，如果不足位数，就在最前面补0<img src="/2024/09/14/10/NULL%E5%80%BC%E8%A1%A8%E7%A4%BA.png"></li>
</ol>
<ul>
<li><p>记录头信息<img src="/2024/09/14/10/%E8%AE%B0%E5%BD%95%E5%A4%B4%E4%BF%A1%E6%81%AF.png"></p>
</li>
<li><p>记录的真实数据</p>
<blockquote>
<p>记录的真实数据除了会有我们定义的数据，还会有MySQL为每一条记录添加的一些隐藏列<img src="/2024/09/14/10/%E9%9A%90%E8%97%8F%E5%88%97.png"></p>
<ol>
<li>row_id 行id，唯一标识一条记录<br>2.(trx_id) transaction_id 事务ID，MVCC中会使用</li>
<li>roll_pointer 回滚指针，事务回滚会用到，undo_log相关</li>
</ol>
</blockquote>
</li>
<li><p>主键选取：<br>优先使用用户定义的主键，如果没设置就选择一个Unique的键作为主键，如果不存在这种，就生成一个隐藏的row_id作为主键，所以 row_id不是 <strong>必须的</strong></p>
</li>
</ul>
<p><em>对于CHAR(M)，MySQL会为分配大于这个值的空间，并且要求至少占用M个字节，即使存的是一个空字符串也会占用M个字节，而VARCHAR(M)没有这个要求。</em></p>
<p>目的是：如果后续更新CHAR(M)的大小，就无需分配一个额外的记录空间，直接在原记录上进行更新即可。就不会造成碎片空间。</p>
<ul>
<li>Redundant行格式(老东西，不常用了)</li>
</ul>
<h4 id="溢出数据存储"><a href="#溢出数据存储" class="headerlink" title="溢出数据存储"></a>溢出数据存储</h4><p>可变数据类型需要占用3部分的存储空间：</p>
<ol>
<li>真实数据</li>
<li>真实数据占用字节的长度</li>
<li>NULL值标识，如果该列有NOT NULL属性则可以没有这部分存储空间<br>如果要存储的列非常大 ，只会保存实际真实数据的一部分，把剩余的数据分散在几个其他页中。</li>
</ol>
<h2 id="数据页-重点，重中之重"><a href="#数据页-重点，重中之重" class="headerlink" title="数据页(重点，重中之重)"></a>数据页(重点，重中之重)</h2><p><img src="/2024/09/14/10/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5.png"><br>大小16KB</p>
<ul>
<li>File Header 文件头部，记录页的一些通用信息</li>
<li>Page Header 页面头部，数据页专有</li>
<li>Infimum + Supremum 最小记录和最大记录， 虚拟行记录</li>
<li>User Records 用户记录  实际存储的行记录内容，一开始没有，每次从Free Space中分配空间</li>
<li>Free Space 空闲空间 页中未使用的空间</li>
<li>PageDirectory 页面目录  页中某些记录的相对位置</li>
<li>File Trailer 文件尾部   检验页是否完整</li>
</ul>
<h3 id="记录头信息"><a href="#记录头信息" class="headerlink" title="记录头信息"></a>记录头信息</h3><ol>
<li>delete_mask 标记记录是否被删除，先做一个标记实际还在磁盘里还没删除。所有删除掉的记录会组成一个垃圾链表，如果后续有新的记录插入表中，可能会直接覆盖这些被删除的记录空间</li>
<li>min_rec_mask B+树的每层非叶子节点中的最小记录都会添加该标记</li>
<li>n_owned 表示当前记录拥有的记录数</li>
<li>heap_no 表示当前记录在记录堆的位置信息。</li>
<li>record_type 记录类型  0普通记录， 1 B+树非叶子节点记录 2最小记录 3最大记录</li>
<li>next_record 表示从当前记录的<strong>真实数据</strong>到下一条记录的<strong>真实数据</strong>的地址偏移量。 指向这个位置，向左就是记录头信息，向右读就是真实数据，同时因为变长字段列表和NULL值列表都是逆序存放的 ，所以可以使得真实数据和他们对应的长度在内存中的地址更近，能够提高缓存的命中率</li>
</ol>
<h3 id="最小记录和最大记录"><a href="#最小记录和最大记录" class="headerlink" title="最小记录和最大记录"></a>最小记录和最大记录</h3><p>最小记录heap_no = 0<br>最大记录heap_no = 1<br><img src="/2024/09/14/10/%E6%9C%80%E5%B0%8F%E8%AE%B0%E5%BD%95%E5%92%8C%E6%9C%80%E5%A4%A7%E8%AE%B0%E5%BD%95.png"><br>这两个记录是自动生成的，所以不放在User_Record中<br><strong>链表中的节点是按照主键值从小到大的顺序连接起来的</strong></p>
<h3 id="MySQL是如何进行查找的"><a href="#MySQL是如何进行查找的" class="headerlink" title="MySQL是如何进行查找的"></a>MySQL是如何进行查找的</h3><p>对于主键查找记录：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们知道MySQL中的记录是根据链表从小到大连接起来的，那么如何快速从不支持随机访问的链表中找到我们需要的数据呢？</p>
<h3 id="Page-Directory"><a href="#Page-Directory" class="headerlink" title="Page Directory"></a>Page Directory</h3><p>MySQL中的设计：</p>
<ol>
<li>将所有的正常记录(不包括最小和最大记录)划分为多个组</li>
<li>每个组的最后一条信息记录的n_owned记录这个组中有多少条记录</li>
<li>将每个组的最后一条记录的地址偏移量单独提取出出来按照顺序存储到靠近 页 尾部的地方，也就是Page Directory页目录，这些偏移量被称为Slot 槽</li>
<li>最小记录为单独一个组，最大记录所在的分组条数只能在1<del>8条，其余分组只能有4</del>8条记录</li>
</ol>
<h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><ol>
<li>根据槽列表通过二分法来计算中间值，默认low 是最小记录的值，也就是0， high是最大记录的偏移量</li>
<li>通过对比中间槽的偏移量的值快速定位到所在的记录的位置，比对这条记录的主键值</li>
<li>对比之后接着通过二分法反复定位，直到 heigh -  low = 1时，也就确认所需要的记录的数据所在的组</li>
<li>通过遍历链表找到该槽中的主键值值最小的那条记录，也就是上一个槽所对应的那条记录的下一条</li>
<li>通过next_record即可遍历该槽所在的组的各个记录</li>
</ol>
<h3 id="Page-Header-页面头部"><a href="#Page-Header-页面头部" class="headerlink" title="Page Header 页面头部"></a>Page Header 页面头部</h3><blockquote>
<p>All problems in computer science can be solved by another level of indirection<br>计算机科学中的所有问题都可以通过增加一个间接层来解决</p>
</blockquote>
<p>在上文中，我们已经可以在一个数据页内部快速定位到我们所需要的记录，但是一张表中不仅仅存在一个数据页，如何快速定位到我们所需要的数据页呢?<br>答案是再加一层抽象：对于每一个下层，我们都对其进行抽象，屏蔽掉其内部细节，方便上层使用。</p>
<blockquote>
<p>Page Header 位于页结构的第二部分，用于存储页总的各种信息，比如第一条记录的地址是什么，本页存储了多少地址，页目录存储了多少个槽</p>
</blockquote>
<p>主要的信息：</p>
<ul>
<li>FIL_PAGE_SPAE_OR_CHECKSUM：校验和，通过算法来计算一个值，方便我们去比较</li>
<li>FIL_PAGE_OFFSET：页号，用于定位页</li>
<li>FIL_PAGE_TYPE：页类型，存放记录的页就是索引页，也是数据页</li>
<li>FIL_PAGE_PREV和FIL_PAGE_NEXT：用于组成双向链表</li>
</ul>
<h3 id="File-Trailer"><a href="#File-Trailer" class="headerlink" title="File Trailer"></a>File Trailer</h3><ol>
<li>存储页的校验和：与Header部分中的校验和对应，如果同步磁盘中同步到一半就失败了，那么Header中的校验和就会变成已经修改后的校验和，而Trailer的校验和还代表着原来的校验和，从而确定同步出现错误</li>
<li>页面最后被修改时对应的日志序列位置LSN</li>
</ol>
<h3 id="数据页结构总结"><a href="#数据页结构总结" class="headerlink" title="数据页结构总结"></a>数据页结构总结</h3><ul>
<li>File Header </li>
<li>Page Header</li>
<li>Infimum + Supremum </li>
<li>User Records</li>
<li>Free Space</li>
<li>Page Directory</li>
<li>File Trailer</li>
</ul>
<h2 id="索引！"><a href="#索引！" class="headerlink" title="索引！"></a>索引！</h2><p>以下部分是重中之重，可以说这篇文章就是为了这里才有写的必要的<br><del>指面试的时候因为忘了而被疯狂拷打</del></p>
<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ol>
<li>InnoDB中数据页通过双向链表连接起来</li>
<li>数据页内部的记录通过双向链表连接起来，并且按照主键从小到大进行排序</li>
<li>Page Directory 保存了每组记录最后一条记录的偏移量，方便我们快速定位到每个组<br><img src="/2024/09/14/10/%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%9E%E9%A1%BE.png"></li>
</ol>
<h3 id="索引为什么会出现"><a href="#索引为什么会出现" class="headerlink" title="索引为什么会出现"></a>索引为什么会出现</h3><ol>
<li>对于主键查找，我们可以使用设计快速定位，而对于其他列，我们没有这种方便的方式可以快速定位</li>
<li>对于不同的页，我们也没办法快速定位到满足查询条件的记录所在的页在哪里，从而只能一个一个进行查找</li>
</ol>
<h3 id="索引的结构与实现原理"><a href="#索引的结构与实现原理" class="headerlink" title="索引的结构与实现原理"></a>索引的结构与实现原理</h3><ol>
<li>数据页链表中，后一个数据页中的主键值必须大于上一个页中用户记录的主键值。</li>
<li>仿照Page Directory，将数据页中的链表项建立目录</li>
<li>key为数据页中最小的主键，page_no为页号<img src="/2024/09/14/10/%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%841.png"></li>
</ol>
<h4 id="MySQL中的实现"><a href="#MySQL中的实现" class="headerlink" title="MySQL中的实现"></a>MySQL中的实现</h4><ol>
<li>使用数据页来存储目录项，通过record_type(0用户记录，1目录项记录，2最小记录，3最大记录)  来与用户记录进行区分<img src="/2024/09/14/10/%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%842.png"></li>
<li>一个数据页中存储的记录是有限的，所以需要使用链表的形式将目录串起来，保证后一个页中的页号要大于前一个</li>
<li>为了方便我们使用二分查找从目录链表中快速定位，我们可以再次将其使用目录记录<img src="/2024/09/14/10/%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%843.png"></li>
<li>反复之后就形成了B+树</li>
</ol>
<h4 id="B-树和B树的区别："><a href="#B-树和B树的区别：" class="headerlink" title="B+树和B树的区别："></a>B+树和B树的区别：</h4><ol>
<li>B+树只在最底层的节点上存储真实数据，其余都是用来存储目录项的，B树的任何一个节点都能保存数据</li>
<li>B+所有叶子节点之间有链表连接，方便范围查询</li>
</ol>
<h3 id="聚簇索引-重点"><a href="#聚簇索引-重点" class="headerlink" title="聚簇索引(重点)"></a>聚簇索引(重点)</h3><p>定义：</p>
<ol>
<li>使用主键值的大小进行记录和页的排序：<ul>
<li>页内记录按照主键大小的单向链表</li>
<li>存放用户记录的页根据主键大小排成双向链表</li>
<li>存放目录项的页也是同一层次排成双向链表</li>
</ul>
</li>
<li>叶子节点存储的是完整记录(包括隐藏列)<br>索引即数据，数据即索引。</li>
</ol>
<h3 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h3><ol>
<li>使用非主键值作为排序标准<ul>
<li>同聚簇索引，不过标准是我们使用的非主键</li>
</ul>
</li>
<li>B+树的叶子节点存储的是 这个列 + 主键两个列的值</li>
<li>目录项记录存的是 这个列 + 页号 + 主键<img src="/2024/09/14/10/%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.png"><br>查询过程：<br>例如查询c2的值为4的记录：</li>
<li>根据页44， 2 &lt; 4 &lt; 9，可以定位到页42</li>
<li>c2没有唯一约束，所以4可能在多个记录中，由此对比可以确定应该在页34和页35，因为 2 &lt;4 &lt; 5</li>
<li>定位到具体的记录</li>
<li>通过具体记录中的主键值进行回表操作—&gt; 也就是根据主键值去聚簇索引中再查找一遍完整的用户记录</li>
</ol>
<h4 id="回表的好坏"><a href="#回表的好坏" class="headerlink" title="回表的好坏"></a>回表的好坏</h4><p>优点：<br>可以不用重新存储完整的数据，减少空间占用<br>缺点：<br>回表会浪费额外的时间</p>
<h3 id="联合索引-重点，加个书签"><a href="#联合索引-重点，加个书签" class="headerlink" title="联合索引(重点，加个书签)"></a>联合索引(重点，加个书签)</h3><p>比如对c2、c3建立联合索引</p>
<ol>
<li>记录和页按照c2进行排序</li>
<li>在这个基础上对c3进行排序</li>
<li>叶子节点存储的是c2、c3和主键的值</li>
<li>仍然是一个二级索引，也是需要回表的</li>
</ol>
<h3 id="MyISAM索引方案的差别"><a href="#MyISAM索引方案的差别" class="headerlink" title="MyISAM索引方案的差别"></a>MyISAM索引方案的差别</h3><ol>
<li>InnoDB使用索引即数据，而MyISAM将索引和数据分开存储。</li>
<li>将数据存在一个文件中，使用行号来快速访问，而不是使用主键值进行排序，无法进行二分查找</li>
<li>索引文件中存储的是主键值 + 行号，也就是所有查询都需要回表，全是二级索引</li>
<li>联合索引存储的也是行号 + 相应的列</li>
</ol>
<h3 id="创建和删除索引的sql"><a href="#创建和删除索引的sql" class="headerlink" title="创建和删除索引的sql"></a>创建和删除索引的sql</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(
	列信息,
	KEY / INDEX 索引名 (需要被索引的单个列或者多个列，联合索引使用 , 隔开列)
)
ALTER TABLE 表名 ADD INDEX / KEY 索引名 (列)
ALTER TABLE 表名 DROP INDEX / KEY 索引名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引的一些常见八股和如何合理使用B-树索引"><a href="#索引的一些常见八股和如何合理使用B-树索引" class="headerlink" title="索引的一些常见八股和如何合理使用B+树索引"></a>索引的一些常见八股和如何合理使用B+树索引</h3><h4 id="如何避免回表？"><a href="#如何避免回表？" class="headerlink" title="如何避免回表？"></a>如何避免回表？</h4><p>需要回表记录越多，使用二级索引的性能就越低。<br>覆盖索引：<br>在查询列表中只包含索引列，即可避免回表。所以一般不建议使用 * 作为查询列表，最好把需要查询的列都依次标明</p>
<h4 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h4><h5 id="全表扫描"><a href="#全表扫描" class="headerlink" title="全表扫描"></a>全表扫描</h5><h5 id="索引扫描"><a href="#索引扫描" class="headerlink" title="索引扫描"></a>索引扫描</h5><p>p139，接着看</p>
<h4 id="最适合建立索引的场景"><a href="#最适合建立索引的场景" class="headerlink" title="最适合建立索引的场景"></a>最适合建立索引的场景</h4><ol>
<li>全值匹配：搜索条件的列和索引列一致，可以快速使用索引</li>
<li>联合索引最左匹配原则</li>
<li>前缀匹配 abc%</li>
<li>索引列的范围查找</li>
<li>对查找出的索引列数据进行排序：索引列本来就是基于排序的，所以可以不需要再内存或文件中进行排序</li>
</ol>
<h4 id="索引失效的场景"><a href="#索引失效的场景" class="headerlink" title="索引失效的场景"></a>索引失效的场景</h4><ol>
<li>LiIKE操作符以通配符开头例如 “%xx”或 “%xx%” ，但是 “xx%” 可以使用索引。</li>
<li>对索引使用函数或者表达式操作 <code>select * from t_user where length(name)=6 </code>， 因为索引存的是原始值</li>
<li>对索引隐式转换，如果查询条件中的类型和列的类型不匹配，MySQL可能会进行类型转换，索引就会失效。因为索引存的是原始值</li>
<li>联合索引非最左匹配，多个普通字段组合在一起创建的索引叫做联合索引，不遵循最左优先的方式就会失效。</li>
<li>where子句中使用了OR，如果OR后的条件不是索引列就会失效</li>
<li>出现NULL值：<strong>不一定不走索引</strong> ，需要看查询的cost和优化器的选择。</li>
<li>联合索引没有对最左列进行范围查找<br>为何失效</li>
<li>like %xx：我们索引是根据列的值大小进行排列的，也就是说，例如我们对 小写字母建立索引，那么我们的索引全是基于 a -&gt; z的大小顺序排列的，同时我们是按照字典序的方式进行排序，也就是说如果前一个相同才会去根据后面的字母进行排序，也就是说当我们匹配abc%xxx的时候，我们可以顺着这个索引去查询，而我们匹配 %abc时，我们无法确认%之前的的字母是什么，于是我们必须走一次全表匹配所以无法走索引去去匹配</li>
<li>使用函数修改的列不满足最原始的排序了</li>
<li>联合索引，通过上文，我们可以很清楚的明白联合索引实际上就是先按照列的顺序去建立索引，只有前一个列相同，我们才会根据后一个列进行排序，也就是说，我们只有这种顺序能够保证是按照大小排序。如果我们没有遵循最左匹配，也就是将顺序倒置，那么后面的列是不能满足大小排序的，也就无法走索引</li>
<li>联合索引只有最左列是完全按照大小排序的，同时数据是基于链表，也就是我们可以很轻易将最左列的范围查找取出。</li>
</ol>
<h4 id="建立索引时应该考虑什么？重点"><a href="#建立索引时应该考虑什么？重点" class="headerlink" title="建立索引时应该考虑什么？重点"></a>建立索引时应该考虑什么？重点</h4><ol>
<li>只为用于搜索、排序、分组的列建立索引，出现在查询列表中的列就没必要建立索引了，因为走不走索引还是看查询条件、排序条件、分组条件，而不是查询的列</li>
<li>考虑列的基数(不重复的数据的个数)，为基数大的列建立索引效果更好</li>
<li>索引的类型尽量小，因为数据类型越小，查询时占用的存储空间越少，查询速度越快，数据页中可以放下更多的记录。</li>
<li>对于一些较长的字符串，可以只对其前缀建立索引<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE person_info(
 name VARCHAR(100) NOT NULL,
 birthday DATE NOT NULL,
 phone_number CHAR(11) NOT NULL,
 country varchar(100) NOT NULL,
 KEY idx_name_birthday_phone_number (name(10), birthday, phone_number)
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>让索引列在比较表达式中单独出现：这个和使用函数去修饰索引列是一个问题，会改变索引列的原来的形式，从而不能够走索引。例如:<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">WHERE c1 * 2 &lt; 4
替换为
WHERE c1 &lt; 4 / 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>插入数据时应该注意主键的顺序，因为当数据页满了，再插入记录时，会导致页分裂-&gt;将本页中的一些记录移动到新创建的野种，从而需要将记录转移，带来性能消耗，所以推荐让主键具有AUTO_INCREMENT</li>
</ol>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="循环嵌套连接"><a href="#循环嵌套连接" class="headerlink" title="循环嵌套连接"></a>循环嵌套连接</h3><p>两表连接，驱动表只访问一次，而被驱动表要访问多次。<br>左外连接左边的是驱动表。右外连接右边的表是驱动表<br>然后每一个被驱动表其实都是一次循环，多个表循环嵌套，驱动表的每一行都要去遍历被驱动表。这种连接被称为嵌套循环连接。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log 会把事务在执行过程中对数据库所做的所有的修改都记录下来，之后系统崩溃重启后可以把事务所做的任何操作都回复出来。</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><img src="/2024/09/14/10/redolog.png"></p>
<ul>
<li>type：表示该redo日志的类型</li>
<li>space ID：表空间ID</li>
<li>page number：页号</li>
<li>data：该条redo 日志的具体内容<br>刷盘时机：</li>
<li>当log buffer空间不足时，当redo log占满了log buffer的一半左右</li>
<li>事务提交时</li>
<li>后台线程自动刷新，约是每秒一次</li>
<li>正常关闭服务器时</li>
</ul>
<h3 id="redo-log-如何保证事务的完整性的"><a href="#redo-log-如何保证事务的完整性的" class="headerlink" title="redo log 如何保证事务的完整性的"></a>redo log 如何保证事务的完整性的</h3><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>undo log 是单独存储的</p>
<p><img src="/2024/09/14/10/undolog%E6%A0%BC%E5%BC%8F.png"></p>
<ul>
<li>trx_id事务id<br>被删除的记录也会通过记录头信息中的next_record组成一个单项链表，然后指向PAGE_FREE空间<img src="/2024/09/14/10/PAGE_FREE.png"><br>事务提交之前，被删除的记录的delete_mask会被设置为1，但是不会被加入垃圾链表中，也就是会处于中间态</li>
</ul>
<h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>只靠MVCC不能解决幻读，需要额外使用锁</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ol>
<li>每一行的数据都有多个版本，更新时不会覆盖原来的数据，而是生成新的版本。</li>
<li>读操作根据ReadView去读</li>
<li>写操作，旧的版本不会被删除，而是放在垃圾链表，将原来的数据写入undo log之后，通过roll_id指向这一行的undo log</li>
</ol>
<h3 id="事务隔离等级和几个并发会出现的问题"><a href="#事务隔离等级和几个并发会出现的问题" class="headerlink" title="事务隔离等级和几个并发会出现的问题"></a>事务隔离等级和几个并发会出现的问题</h3><h4 id="并发常见到的问题"><a href="#并发常见到的问题" class="headerlink" title="并发常见到的问题"></a>并发常见到的问题</h4><ol>
<li>脏读：一个事务读到了另一个未提交事务修改过的数据</li>
<li>不可重复读：一个事务两次读取读取到的数据不同，也就是两次读取之间被其他事务修改了数据</li>
<li>幻读：相同的查询，查出来的结果不同<br>几个等级：<br>脏写 &lt; 脏读 &lt; 不可重复读 &lt; 幻读</li>
</ol>
<h4 id="事务隔离等级"><a href="#事务隔离等级" class="headerlink" title="事务隔离等级"></a>事务隔离等级</h4><ol>
<li>读未提交：允许一个事务读取另一个事务未提交的数据 阻止不了上面几种</li>
<li>读已提交：只允许一个事务读取另一个事务已经提交的修改，可以阻止脏读</li>
<li>可重复读：保证同一个事务多次读取获得的数据是相同的，避免了脏读、不可重复读</li>
<li>可串行化：完全隔离事务，确保事务按照顺序执行，彷佛他们是串行执行的</li>
</ol>
<h4 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h4><p>rolle_pointer：每次对某条聚簇索引进行改动时，会将原来的旧版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改之前的信息。<img src="/2024/09/14/10/%E7%89%88%E6%9C%AC%E9%93%BE.png"><br>每次对记录进行更新后，都会将旧值放到一条undo日志中，就算是该记录中的一个旧版本，随着更新次数的增多，所有的版本都会被role_pointer连接成一个链表，版本链的头节点就是当前记录的最新值，另外，每个版本还包含该版本时对应的事务id</p>
<h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><p>如何判断一条记录是否可以被某个事务可见。<br>ReadView的内容</p>
<ul>
<li>m_ids：表示生成ReadView时当前系统中活跃读写事务id列表</li>
<li>min_trx_id：表示生成ReadView时，当前系统中活跃的最小事务中的最小事务id，也就是m_ids的最小值</li>
<li>max_trx_id：生成ReadView时系统应该分配给下一个事务的id值。</li>
<li>creator_trx_id：表示生成该ReadView的事务的事务id<br>当事务访问某条记录时，进行一下判断访问是否可见：</li>
<li>被访问版本的trx_id == ReadView中的creator_trx_id时，意味着当前事务访问的是自己修改过的记录，可以被当前事务访问</li>
<li>trx_id &lt; ReadView中的min_trx_id，表示该版本是在当前事务之前旧已经提交了，可以访问</li>
<li>trx_id &gt; max_trx_id，表示当前记录的事务是在当前事务之后才开始的，不能访问</li>
<li>min_trx_id &lt; trx_id &lt; max_trx_id，说明创建ReadView时，该版本的事务还是活跃的，需要从m_ids中判断是否存在，如果存在就不能访问，否则就可以访问<br>如果某个版本的数据对于当前的事务不可见，就沿着版本链去找下一个版本的数据，如果版本链中所有的数据都不可见，才意味着这条记录对当前事务不可见，查询条件就不会包括这条记录。</li>
</ul>
<h4 id="读已提交和可重复读的区别"><a href="#读已提交和可重复读的区别" class="headerlink" title="读已提交和可重复读的区别"></a>读已提交和可重复读的区别</h4><p>区别就是二者的ReadView生成时机不同：</p>
<ul>
<li>读已提交在每次执行查询语句时生成一个ReadView，此后不会再重复生成了</li>
<li>可重复读只在第一次进行查询语句时生成一个ReadView，此后查询操作都重复使用这个ReadView，从而做到保证多次读取读取到相同的数据。</li>
</ul>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="锁的结构"><a href="#锁的结构" class="headerlink" title="锁的结构"></a>锁的结构</h3><p><img src="/2024/09/14/10/%E9%94%81%E7%9A%84%E7%BB%93%E6%9E%84.png"><br>对于每一条记录，都会有一个锁对应。当一个事务相对这条记录做改动时，首先会看看内存中是否有与这条记录想关联的锁结构，如果没有就需要生成一个锁结构与之关联。<br>所结构中的最重要的两个属性：</p>
<ul>
<li>trx信息：这个锁结构是由哪个事务生成的</li>
<li>is_waiting：代表当前事务是否在等待</li>
</ul>
<ol>
<li>获取锁成功/加锁：当事务修改这条记录时，如果不存在锁，就会在修改记录之后生成一个锁机构1，trx是这个事务的id，is_waiting是false。</li>
<li>获取锁失败：当其他事务尝试修改这条记录时发现存在了如果发现已经存在了这个锁1，那么就会给自己生成一个锁2，但是is_waiting是true，表示需要等待。</li>
<li>当事务1正常提交之后会把该事务生成的锁结构1删除，然后查看是否还有其他别的事务在等待获取锁，发现事务2在等待，于是就将锁2的is_waiting设置为false，之后将这个事务的线程唤醒，继续执行。</li>
</ol>
<h4 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h4><p>事务使用MVCC进行读取被称为一致性读，或者一致性无锁读，也叫快照读。</p>
<h4 id="锁定读"><a href="#锁定读" class="headerlink" title="锁定读"></a>锁定读</h4><p>行级锁<br>对于读写冲突问题，MySQL使用了MVCC+锁来解决</p>
<ol>
<li>共享锁：Shared Locks S锁，读取记录时需要先获取该记录的S锁</li>
<li>独占锁：也叫排他锁， X锁，修改记录时需要鲜活的该记录的X锁。<br>主动加锁的sql<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ... LOCK IN SHARE MODE; # 加S锁
SELECT ... FOR UPDATE; # 加X锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="多粒度锁"><a href="#多粒度锁" class="headerlink" title="多粒度锁"></a>多粒度锁</h3><p>上文提到的都是行级锁</p>
<ul>
<li>意向共享锁 IS锁：表级锁</li>
<li>意向独占锁 IX锁：表级锁<br>这两个锁时为了之后对表添加表级别的S锁和X锁时可以快判断表中的记录是否被上锁，以免需要使用遍历来确定是否有记录被上锁了。</li>
</ul>
<h3 id="InnoDB中的锁"><a href="#InnoDB中的锁" class="headerlink" title="InnoDB中的锁"></a>InnoDB中的锁</h3><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><ul>
<li>表级的S锁、X锁：</li>
<li>表级的IS锁、IX锁：</li>
<li>表级的AUTO-INC锁：自增AUTO_INCREMENT修饰的列递增赋值</li>
</ul>
<h4 id="行级锁-重点"><a href="#行级锁-重点" class="headerlink" title="行级锁(重点)"></a>行级锁(重点)</h4><ul>
<li>Record Locks：正经记录锁，分为S锁和X锁</li>
<li>Gap Locks：间隙锁，加锁方案解决幻读的关键</li>
<li>Next-Key锁：简单来说就是 record locks + gap locks</li>
<li>Insert Intention Locks：事务在等待的时候也需要在内存中生成一个锁结构，表明有事务想在某个间隙中插入新记录。叫做插入意向锁，目的是避免插入操作的相互阻塞</li>
</ul>
<h4 id="Gap-Locks"><a href="#Gap-Locks" class="headerlink" title="Gap Locks"></a>Gap Locks</h4><p>对于幻读中出现的幻影记录，我们没法加锁，因为他们还未存在。<br>间隙锁就是所著一个范围内所有的间隙，从而阻止其事务在这些间隙中插入数据</p>
<h1 id="八股"><a href="#八股" class="headerlink" title="八股"></a>八股</h1><h2 id="InnoDB为什么是默认引擎"><a href="#InnoDB为什么是默认引擎" class="headerlink" title="InnoDB为什么是默认引擎"></a>InnoDB为什么是默认引擎</h2><ol>
<li>唯一支持事务的引擎</li>
<li>行级锁</li>
<li>支持外键约束</li>
<li>崩溃恢复，redolog和undolog</li>
</ol>
<h2 id="为什么InnoDB使用B-树"><a href="#为什么InnoDB使用B-树" class="headerlink" title="为什么InnoDB使用B+树"></a>为什么InnoDB使用B+树</h2><ol>
<li>支持快速查找：平衡多路查找树，高度较低</li>
<li>有序性：翻遍范围查找分组</li>
<li>插入和删除更搞笑：使用双向链表</li>
<li>适应磁盘存储：节点的大小控制在磁盘页面大小范围内，减少I/O操作</li>
<li>支持有序查找和范围查找</li>
</ol>
<h2 id="MVCC-1"><a href="#MVCC-1" class="headerlink" title="MVCC"></a>MVCC</h2><p>多版本并发控制</p>
<ol>
<li>每一行的记录都维护多个版本，每一行更新时，不会覆盖原来的数据，而是会生成新的版本</li>
<li>读操作只读事务创建之前的</li>
</ol>
<h2 id="MVCC-间隙锁无法解决幻读的场景"><a href="#MVCC-间隙锁无法解决幻读的场景" class="headerlink" title="MVCC + 间隙锁无法解决幻读的场景"></a>MVCC + 间隙锁无法解决幻读的场景</h2><p>(这里我把net-key locks也作为间隙锁了)<br>一般情况下MVCC + 间隙锁就能够解决幻读了，但是有些场景下任然是不够的。原因和间隙锁的作用范围有关：</p>
<ol>
<li>间隙锁只能锁定特定范围内的间隙，如果查询条件不匹配索引，可能会出现没有锁定的间隙，从而允许插入新记录</li>
<li>某些隔离级别下(读已提交)，间隙锁可能不会被使用，从而无法避免幻读</li>
<li>复合查询：当查询设计多个间隙和索引时，间隙锁可能无法覆盖所有的间隙</li>
</ol>
<h2 id="MySQL执行一条sql语句的流程"><a href="#MySQL执行一条sql语句的流程" class="headerlink" title="MySQL执行一条sql语句的流程"></a>MySQL执行一条sql语句的流程</h2><p>主要的组件：</p>
<ol>
<li>连接器</li>
<li>查询缓存</li>
<li>分析器</li>
<li>优化器</li>
<li>执行器</li>
</ol>
<h2 id="慢索引如何优化"><a href="#慢索引如何优化" class="headerlink" title="慢索引如何优化"></a>慢索引如何优化</h2><ol>
<li>使用EXPLAIN语句来查看执行计划，看看是使用了全表扫描，或者索引未命中</li>
<li>优化SQL：1. 加索引 2. 重写查询，使用子查询或者，联合查询 3. 添加过滤条件等</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>python and web or ai</title>
    <url>/2024/02/27/04/</url>
    <content><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install beautifulsoup4 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h2><p>项目结构:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">scrapy.cfg 配置文件
setting.py 定义爬虫的相关配置信息
items.py 定义待爬页面数据的结构
pipelines.py 定义存储爬到的数据的方式
middlewares.py 定义随机切换ip等逻辑
Spiders 在目录里，存放爬虫代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">scrapy startproject projectName 新建一个项目
1.在items模块中定义待爬取内容的数据结构
2.在spiders文件中
scrapy genspider name xxx.com 新建一个爬虫文件
3.pipelines中定义存储方式
4.settings中加入
ITEM_PIPELINES =</span> <span class="token punctuation">{</span>

    <span class="token string">"cnblogPrj.pipelines.CnblogprjPipeline"</span><span class="token punctuation">:</span> 300<span class="token punctuation">,</span>

<span class="token punctuation">}</span>

# 禁用cookies

COOKIES_ENABLED = False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">x = float(input() )

y = float(input())

print("{:.3f} + {:.3f} = {:.3f}".format(x, y, x + y))

print("{:.3f} - {:.3f} = {:.3f}" .format (x, y, x - y))

print("{:.3f} * {:.3f} = {:.3f}" .format (x, y, x * y))

print("{:.3f} / {:.3f} = {:.3f}" .format (x, y, x / &nbsp;y))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>计网</title>
    <url>/2023/10/23/46/</url>
    <content><![CDATA[<h1 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MTU:网络中一次可以传输的最大数据包的大小<br>MSS:TCP中除去TCP和IP的头部，能够传输的最大的数据量<br>SDU，Service Data Unit，服务数据单元。<br>ISP 是 Internet Service Provider 的缩写，翻译为互联网服务提供商。<br>协议<br>Telnet 客户端登录协议，属于应用层<br>TLD 是 Top-Level Domain 的缩写，翻译为顶级域名<br>GBN (Go-Back-N)  退回<br>SR 选择性重传<br>mask 子网掩码<br>SDN 是指软件定义网络（Software-Defined Networking）<br>OSPF（Open Shortest Path First）是一种开放式的链路状态路由协议，用于计算机网络中的动态路由。<br>Secure sockets layer (SSL)</p>
<p><strong>MSL:报文最大生存时间<br>TTL:经过的路由跳数</strong></p>
<p>序列号：在建立连接时由内核生成的随机数作为其初始值，通过 SYN 报文传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。<br>确认号：指下一次「期望」收到的数据的序列号，发送端收到接收方发来的 ACK 确认报文以后，就可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。<br><strong>控制位：</strong> 用来标识 TCP 报文是什么类型的报文，比如是 SYN 报文、数据报文、ACK 报文，FIN 报文等。</p>
<h1 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h1><ul>
<li>UDP是面向报文的：发送方不会对报文进行拆分，所以一个报文就是一个完整的消息，接收方使用队列来区分不同报文</li>
<li>TCP是面向字节流的：粘包问题：TCP报文会拆分成多个，取决于<strong>发送窗口、拥塞窗口以及当前发送缓冲区的大小等条件</strong>，所以不容易知道一个用户消息的边界<ul>
<li><img src="/2023/10/23/46/TcpHeader.png"></li>
<li>控制位是单独的留出来的几个位置</li>
<li>TCP面向字节流的，发送的是一个个连续的字节，而UDP是面向数据报的，一个UDP数据报就是一个完整的消息</li>
<li>重传机制：1.超时重传，重传时间最好略大于包的往返时间，2.快速重传3.SACK重传，选择性确认&nbsp;TCP 头部「选项」字段里加一个&nbsp;<code>SACK</code>&nbsp;的东西，它<strong>可以将已收到的数据的信息发送给「发送方」</strong>，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以<strong>只重传丢失的数据</strong>。4.   Duplicate SACK,只告诉对方有哪些数据被重复接受了</li>
<li>滑动窗口：<strong>无需等待确认应答，而可以继续发送数据的最大值</strong></li>
<li><strong>拥塞窗口 cwnd</strong>是发送方维护的一个的状态变量，它会根据<strong>网络的拥塞程度动态变化的</strong>。 网络没出现拥塞，cwnd增加，出现拥塞cwnd减少</li>
</ul>
</li>
<li>HTTP：最常使用的是HTTP/1.1 <ul>
<li>优化 HTTP/1.1<ol>
<li>减少请求次数：1.使用客户端缓存，2.减少重定向次数，3.合并请求，4.延迟发送，只发送一部分内容</li>
<li>减少响应数据大小：使用压缩方式</li>
</ol>
</li>
</ul>
<ol>
<li>Keep-Alive：用于保持长连接，keepalive，TCP中的保活机制,HTTP1.1默认是开启的，在请求头中使用<code>Connection: Keep-Alive</code></li>
<li>强制缓存：服务器直接要求使用浏览器缓存的数据， 协商缓存：服务器会对比缓存过期时间，决定是否过期，返回给浏览器决定是否使用浏览器的缓存</li>
<li>队头阻塞：服务端在处理请求时耗时较长导致后面的请求无法即使发送，解决方式 ：使用管道：客户端可以直接发送多个请求，服务端根据发送顺序来解决，但是管道技术基本 <strong>没人使用</strong></li>
</ol>
<ul>
<li>演进过程：<ol>
<li>1.1 使用长连接改善短链接的性能开销，使用管道进传输，改善了队头阻塞。缺点是：header未压缩，只能压缩body,只能从客户端开始发送请求，没有请求优先级</li>
<li>2 头部压缩，当同时发送多个请求，如果请求头是一样或者相似的就把重复发部分消除，基于HTTPS的，头部全部使用二进制格式取代原来的纯文本，使用Stream,一个Stream可以包含多个Message,Message中可以包含多个Frame,Frame中包含Headers和Body,Stream都跑在同一个TCP上，客户端收到后会根据相同的Stream ID 有序组装成HTTP消息，Stream流用于多路复用TCP<ul>
<li>缺点是：由于TCP的是基于字节流的，必须保证收到的字节数据是完整且恋雪的才能将数据返回给应用层</li>
</ul>
</li>
<li>HTTP/3 使用UDP协议来解决响应的队头阻塞。<ol>
<li>使用基于UDP的QUIC协议，保证类似的可靠传输</li>
<li>QUIC 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。</li>
<li>当某个流丢包时，只会阻塞这个流，其他流不会阻塞，不存在队头阻塞问题</li>
<li><a href="https://xiaolincoding.com/network/2_http/https_rsa.html#tls-%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B">RSA算法</a>不支持前向加密，只要获取浏览器的私钥，即可破解</li>
<li></li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li>HTTPS: <ol>
<li>使用混合加密：通信建立前使用非对称加密来交换会话密钥， 通信过程中使用对称加密的会话密钥来进行通信</li>
<li>公钥运算出的结果，只有使用私钥来进行逆运算得到结果。 发送时，发送者使用接收者的公钥，公钥是可知的，解决了密钥交换的问题，接收者使用自己的私钥进行解密。</li>
<li>公钥加密，私钥解密：保证传输过程中内容的加密</li>
<li>私钥加密，公钥解密：保证消息不会被篡改。—&gt;数字签名算法</li>
<li>使用权威机构CA(数字证书认证机构)来保存数字证书：个人信息+公钥+数字签名</li>
</ol>
</li>
<li>TCP<ul>
<li>三次握手的过程<ol>
<li>客户端发送带有SYN(同步序列)SEQ(序列号) = x  标志的数据包，客户端进入SYN_SEND状态</li>
<li>服务端发送带有SYN(SEQ = y) + ACK (ACK = x + 1) 标志的数据包，进入SYN_RECV状态</li>
<li>客户端发送 带有ACK(ACK = y + 1) 标志的数据包，二者进入ESTABLISHED状态</li>
</ol>
<ul>
<li>为什么要第二次传回SYN 用于表明所收到的是对应的客户端发送的信号</li>
</ul>
</li>
<li>四次挥手:<ol>
<li>客户端发送FIN(SEQ = x) ，进入FIN-WAIT-1状态</li>
<li>服务端发送ACK(ACK=x+1) 进入CLOSE-WAIT状态，客户端进入FIN-WAIT-2</li>
<li>服务端发送FIN(SEQ=y) 请求关闭,进入LAST-ACK</li>
<li>客户端发送，ACK(ACK=y+1) ，客户端进入TIME-WAIT，服务端接收后进入CLOSE，客户端等待一段时间之后如果没有收到回复，就关闭客户端。</li>
</ol>
</li>
<li>可不可以把ACK和FIN合并起来变成三次挥手： 不行，因为服务器收到断开请求时，可能还有一些数据没有传输完成，所以先发送ACK表明收到请求，等待所有数据发送完成之后发送FIN断开连接</li>
</ul>
</li>
<li>IP<ul>
<li>DNS:域名解析：</li>
<li>DHCP（动态主机配置协议）是一个网络协议，用于自动分配 IP 地址和其他相关配置信息给网络中的设备。这使得设备可以在加入网络时自动获取网络配置，无需手动设置。</li>
<li>ARP工作原理：广播问询，单播响应<ul>
<li>一个局域网中<ol>
<li>维护一个ARP表 &lt;IP,MAC,TTL&gt;</li>
<li>查询ARP表，如果不存在，则构造一个ARP查询分组，将其广播到局域网中，MAC地址为广播地址，然后希望收到的是IP地址</li>
<li>设备接收后查询是否为自己的IP，如果不是则丢弃，如果是，则构造ARP响应分组，发送给查询主机，并在自己的表中构造一条查询主机的IP-MAC映射表，使用的是单播，不再广播</li>
<li>查询的主机接受后，将其加入ARP表中</li>
</ol>
</li>
<li>不在一个局域网中：通过路由器转发查询</li>
</ul>
</li>
<li>NAT:同一个场景下将私有IP转化为共有IP地址</li>
<li>ICMP：互联网控制报文协议，确认Ip包是否<ul>
<li>ping：基于ICMP协议工作的，使用的ICMP类型中0和8，也就是回送应答和会送请求，根据这个来判断是否到达IP地址，如果路由器中间没有找到对应的接收端IP就会往发送端IP发送ICMP报文，8是源主机向目标主机的发送的请求，0是目标主机的回应</li>
<li>各种本地IP代指的区别：<ol>
<li>localhost 默认就是同于127.0.0.1，但是可以修改，是属于域名</li>
<li>0.0.0.0 IPv4中是无效地址，代指的是广播，监听本地的0.0.0.0时，代表的监听本机上所有的IPv4地址</li>
<li>127.0.0.1是回环地址</li>
</ol>
</li>
</ul>
</li>
<li>IGMP：Internet组管理协议，工作哎主机和最后一跳的路由之间。</li>
<li>为何断网了也能ping通127.0.0.1? 因为会把消息交给本地网卡，本地网卡直接把消息发送到本机接受到的消息链表中并触发软中断，由内核线程来传递给上层应用程序</li>
</ul>
</li>
</ul>
<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>分类</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h2 id="如何解决粘包问题"><a href="#如何解决粘包问题" class="headerlink" title="如何解决粘包问题"></a>如何解决粘包问题</h2><p>找到消息的边界就能解决这个问题</p>
<ol>
<li>固定长度</li>
<li>特殊字符作为边界</li>
<li>自定义消息结构</li>
</ol>
<h3 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h3><p>重传是由序列号和确认应答来控制的</p>
<ol>
<li>超时重传，TCP的超时重传策略是间隔时间每次都设置为先前值的两倍，如果出现两次超时，说明网络环境差，不会重传了</li>
<li>快速重传：当收到三个相同ACK报文时，说明出现了丢包，会重传丢失的报文。</li>
</ol>
<h3 id="滑动窗口-4-2-TCP-重传、滑动窗口、流量控制、拥塞控制-小林coding-xiaolincoding-com"><a href="#滑动窗口-4-2-TCP-重传、滑动窗口、流量控制、拥塞控制-小林coding-xiaolincoding-com" class="headerlink" title="[滑动窗口](4.2 TCP 重传、滑动窗口、流量控制、拥塞控制 | 小林coding (xiaolincoding.com))"></a>[滑动窗口](<a href="https://xiaolincoding.com/network/3_tcp/tcp_feature.html#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">4.2 TCP 重传、滑动窗口、流量控制、拥塞控制 | 小林coding (xiaolincoding.com)</a>)</h3><p>TCP头中有一个Window字段，代表滑动窗口大小。表示接受方告诉对方自己还有多少缓冲区可以接受数据。</p>
<h4 id="发送方窗口"><a href="#发送方窗口" class="headerlink" title="发送方窗口"></a>发送方窗口</h4><p><img src="/2023/10/23/46/%E5%8F%91%E9%80%81%E6%96%B9%E7%AA%97%E5%8F%A3.png"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>HTTP是一个在计算机世界中专门在亮点之间传输文字、图片等超文本的约定与规范</p>
<h3 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h3><ol>
<li>1xx 是一种中间状态，实际使用较少</li>
<li>2xx 表示服务器成功处理了请求<ul>
<li>200 OK</li>
<li>204 No Content 与200基本相同，但是响应头没有body数据</li>
<li>206 Partial Content表示响应返回的body数据并不是资源的全部。</li>
</ul>
</li>
<li>3xx 重定向<ul>
<li>301 永久重定向</li>
<li>302 Found 临时重定向，注意301和302都会在响应头中使用Location字段知名后续需要跳转的URL，浏览器会自动重定向到新的URL</li>
<li>304  资源未修改，可以使用缓存资源</li>
</ul>
</li>
<li>4xx 客户端发送的报文有误<ul>
<li>400 请求有误，笼统的错误</li>
<li>403 服务器禁止访问资源</li>
<li>404 服务器不存在或未找到</li>
</ul>
</li>
<li>5xx 客户端请求报文正确，但是服务器处理时，内部出现了错误，属于服务端错误码<ul>
<li>500 笼统错误</li>
<li>501 客户端请求功能不支持，敬请期待</li>
<li>502 网关错误</li>
<li>503 服务器繁忙，无法咱是无法响应客户端。</li>
</ul>
</li>
</ol>
<h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><ol>
<li>强制缓存：浏览器判断缓存没过期就强制使用本地缓存。使用的是Cache-Control和Expires，第一个是相对时间，第二个是绝对时间。第一个优先级更高。<ul>
<li>浏览器第一次请求时，会加上这个过期时间</li>
<li>再次请求时，根据请求时间和这个过期时间进行比较，来判断是否过期，并且更新这个时间</li>
</ul>
</li>
<li>协商缓存： 与服务器协商之后，通过协商结果来判断是否使用本地缓存。<img src="/2023/10/23/46/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.png"></li>
</ol>
<h2 id="不同版本的HTTP特点"><a href="#不同版本的HTTP特点" class="headerlink" title="不同版本的HTTP特点"></a>不同版本的HTTP特点</h2><p>HTTP: 80<br>HTTPS: 443</p>
<h3 id="HTTP缓存-1"><a href="#HTTP缓存-1" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>Cache-Control(相对时间)优先级高于Expires(绝对时间)<br>强制缓存是浏览器中的缓存没过期就强制使用缓存，协商缓存是每次与服务器协商是否过期。</p>
<h3 id="HTTP的迭代和对比"><a href="#HTTP的迭代和对比" class="headerlink" title="HTTP的迭代和对比"></a>HTTP的迭代和对比</h3><h4 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h4><p><strong>已经实现了长连接和管道网络传输(不需要一问一答，可以连续发送请求)</strong><br>解决了 <strong>请求的队头阻塞</strong>，但是没解决响应的队头阻塞。<br>头部冗长，未压缩，请求只能由客户端开始</p>
<h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p>双刃剑：无状态、明文传输<br>缺点：不安全</p>
<ul>
<li>无状态可以使得浏览器不需要额外记忆HTTP的状态，缺点是处理有关联性的操作时会很麻烦<ul>
<li>解决方式就是使用Cookie</li>
</ul>
</li>
<li>明文传输：方便调试的同时不安全</li>
<li>不安全：1. 明文传输2.不验证通信双方的身份3.不能证明报文的完整性 <ul>
<li>解决方式使用HTTPS</li>
</ul>
</li>
</ul>
<h4 id="性能-长连接"><a href="#性能-长连接" class="headerlink" title="性能(长连接)"></a>性能(长连接)</h4><ol>
<li>相比较于1.0，1.1使用了长连接，一次TCP连接发起多次请求</li>
<li>可以使用管道通信，只要请求发送出去后，不需要等待响应结果即可发送下一个请求<br>解决了请求的队头阻塞，但是没有解决响应的队头阻塞，同时不是默认使用的<blockquote>
<p>队头阻塞是指当一个请求因为某种原因被阻塞，会导致后面排队的所有请求都一同被阻塞<br>进步：</p>
</blockquote>
</li>
<li>长连接</li>
<li>支持管道网络传输<br>缺点：</li>
<li>Header部分未经压缩就发送，延迟大，只能压缩Body部分</li>
<li>会出现队头阻塞：服务端响应慢，导致后续的请求不能及时发送</li>
<li>请求只能从客户端开始</li>
</ol>
<h4 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><p>进步：</p>
<ol>
<li>HTTP/2是基于HTTPS，安全有保证</li>
<li>队头压缩：如果同时发出多个请求，他们的请求头是一样的或者是相似的，就会消除重复的部分，原理是客户端和服务端同时维护一张头信息表，所有字段都会存在里面来进行索引</li>
<li>二进制格式：报文使用二进制格式，而不是使用纯文本的格式</li>
<li>并发传输，多路复用，一条TCP连接包含多个Stream，StreamID来区分，不同Stream的帧是可以乱序发送的</li>
<li>服务器可以主动推送资源<br>虽然在HTTP层解决了队头阻塞，但是TCP是字节流协议，导致必须满足一个一个字节才能够读取数据，从而降低效率，一旦丢包，必须进行TCP的重传，就会导致效率降低。</li>
</ol>
<h4 id="HTTP-x2F-3"><a href="#HTTP-x2F-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h4><p>使用UDP来进行传输</p>
<h5 id="QUIC协议"><a href="#QUIC协议" class="headerlink" title="QUIC协议"></a>QUIC协议</h5><p>QUIC协议也实现了Stream的概念，从而某个流发生丢包时，只会则色这个流，而不会阻塞其他流，从而不会存在队头阻塞。<br>QUIC是google设计的一个基于UDP的网络传输协议，旨在替代TCP协议以提供更快的连接建立和数据传输速度。</p>
<ol>
<li>快速建立连接：使用基于TLS的安全连接，同时将连接的建立与TLS握手合并，从而减少了连接所需要的往返时间。</li>
<li>多路复用：允许在单个连接上同时进行多个独立的数据流，从避免了TCP连接中的队头阻塞</li>
<li>零RTT握手：QUIC支持零往返时间握手，允许客户端在第一次连接时发送数据，无需等待握手完成，进一步减少了连接建立时间。</li>
<li>动态调整拥塞控制：使用更先进的拥塞控制算法，能够动态的根据网络条件调增数据传输速率。</li>
<li>错误恢复：QUIC内置了一些错误恢复机制，包括快速重传和前向错误纠正，能够在发生丢包或网络拥塞时更快的恢复数据传输。</li>
</ol>
<p>HTTP/2 是⼀个应⽤层协议，是 HTTP/1.1 的后继版本，旨在提⾼ Web ⻚⾯加载速度和性能。 HTTP/2<br>在传输层使⽤了⼆进制分帧，头部压缩，多路复⽤等技术，以减少延迟和提⾼效率。 HTTP/2 不是⼀个<br>替代传输层协议，⽽是在传输层上实现的 HTTP 协议的增强版本。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><blockquote>
<p>HTTPS是在TCP和HTTP之间加入了SSL/TLS安全协议</p>
</blockquote>
<h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><ol>
<li>混合加密：对称加密和非对称加密的混合加密方式，通信建立之前使用的是非对称加密，建立之后通信使用的对称加密，对称加密只需要使用一个密钥，所以更加高效。</li>
<li>摘要算法 + 数字签名：通过摘要算法获得哈希值，来判断报文是否被修改。而数字签名则能保证通信双方的身份</li>
<li>数字证书：可信的第三方来保证双方身份，主要是CA通过私钥加密双方的公钥数字签名，然后CA的公钥是公开的，之后另一方通过CA的公钥解密获得对方的公钥，之后对方使用私钥加密，就可以使用公钥进行解密了或者是加密通信。<img src="/2023/10/23/46/CA%E7%AE%97%E6%B3%95.png"></li>
</ol>
<h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><ol>
<li>公钥加密，私钥解密：保证内容的安全，只有私钥可以解密内容</li>
<li>私钥加密，公钥解密：保证消息不可冒充，因为私钥是不可以泄漏的，验证双方身份，也就是数字签名算法<img src="/2023/10/23/46/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95.png" alt="|525"></li>
</ol>
<h4 id="流程-RSA算法为例"><a href="#流程-RSA算法为例" class="headerlink" title="流程(RSA算法为例)"></a>流程(RSA算法为例)</h4><ol>
<li>三次握手建立TCP连接</li>
<li>客户端发送ClientHello请求，携带客户端支持的TLS版本信息和客户端随机数Client Random，支持的密码套件列表(比如RSA算法)</li>
<li>ServerHello响应：确定TLS版本，浏览器不支持就断开，服务器随机数Server Random， 使用的加密算法，服务器的数字证书</li>
<li>客户端使用CA的公钥确定证书的真实性，之后取出公钥，加密报文发送：1. 随机数 pre-master key 2.加密通信算法改变通知，表示之后都将使用会话密钥(对称加密)进行通信，客户端握手结束通知，把之前所有的内容进行摘要，给服务器进行校验</li>
<li>双方使用这三个随机数和加密算法生成会话密钥</li>
<li>服务器最后1.加密算法改变 2.握手结束，生成摘要供客户端校验</li>
</ol>
<h4 id="HTTPS抓包-x2F-代理人"><a href="#HTTPS抓包-x2F-代理人" class="headerlink" title="HTTPS抓包/代理人"></a>HTTPS抓包/代理人</h4><p><img src="/2023/10/23/46/%E4%BB%A3%E7%90%86%E4%BA%BA.webp"></p>
<p>抓包工具的原理就是往系统受信任的根证书列表导入抓包工具生成的证书，这个证书会被浏览器新人，也就是转包工具给自己建立了一个CA。<br>如何解决中间人攻击：使用HTTPS双向认证，服务器也对客户端的认证信息进行验证。</p>
<h2 id="计网常问"><a href="#计网常问" class="headerlink" title="计网常问"></a>计网常问</h2><h3 id="一个请求整个网络的处理"><a href="#一个请求整个网络的处理" class="headerlink" title="一个请求整个网络的处理"></a>一个请求整个网络的处理</h3><ol>
<li>浏览器解析URL生成HTTP消息</li>
<li>通过DNS解析获得IP地址</li>
<li>之后将HTTP的传输工作通过调用Socket库交给操作系统的协议栈</li>
<li>TCP简历链接需要三次握手，保证双方都有发送和接收的能力</li>
<li>建立连接之后，TCP报文中的数据部分就是存放HTTP头部+数据，组装好TCP报文之后，交给下面的网络层处理</li>
<li>IP协议里需要源地址和目的地址IP，存在多个网卡时，需要根据路由表规则。</li>
<li>生成IP头部之后，需要在前面加上MAC头部，接收方的MAC地址通过ARP协议获得，并且放入ARP缓存</li>
<li>网卡驱动获得网络包，将其复制到网卡内的缓存区中，从开头加上包头和起始帧分节符，末尾加上用于校验错误的帧校验序列。之后网卡将包转为电信号，通过网线发送</li>
<li>电信号到达网线接口，交换机里的模块进行接收。之后将电信号转化为数字信号。FCS校验没问题后放入缓冲区，之后查询MAC地址，如果找不到，就发除了源端口的所有端口。</li>
<li>电信号到达⽹线接⼝部分，路由器中的模块会将电信号转成数字信号， FCS 进⾏错误校验没问题后确认接收⽅MAC地址，然后去掉MAC头部，查询路由表判断转发⽬标，如果⽹关为空则 IP 头部中的接收⽅ IP 地址就是要转发到的⽬标地址</li>
<li>知道对⽅的 IP 地址之后，接下来需要通过 ARP 协议根据 IP 地址查询 MAC 地址，加上MAC头部，发送⽹络包，通过交换机到达下⼀个路由器</li>
<li>最后数据包抵达了服务器</li>
</ol>
<h3 id="IPv6优点"><a href="#IPv6优点" class="headerlink" title="IPv6优点"></a>IPv6优点</h3><ol>
<li>更⼤的地址空间：IPv6将地址⻓度从IPv4的32位扩展到了128位，理论上可以分配⼤约3.4x10^38个唯⼀的IP地址。</li>
<li>简化的报⽂格式：IPv6头部格式更为简洁，减少了处理的复杂性，提⾼了路由效率。</li>
<li>改进的服务质量（QoS）：IPv6⽀持更好的流量分类和优先级处理，有助于提供更加可靠的服务质量。</li>
<li>内建的安全机制：IPv6原⽣⽀持IPsec（⽹络安全协议），为数据传输提供了端到端的加密和认证。</li>
<li>⾃动配置能⼒：IPv6⽀持有状态和⽆状态的地址⾃动配置（SLAAC），简化了⽹络设备的配置和管理</li>
</ol>
<h3 id="BGP、OSPF协议原理"><a href="#BGP、OSPF协议原理" class="headerlink" title="BGP、OSPF协议原理"></a>BGP、OSPF协议原理</h3><blockquote>
<p>边界⽹关协议(Border Gateway Protocol，简称BGP)和开放最短路径优先协议(Open Shortest Path<br>First，简称OSPF)是世界上最流⾏的两种基于标准的动态路由协议。</p>
</blockquote>
<h3 id="三握四挥"><a href="#三握四挥" class="headerlink" title="三握四挥"></a>三握四挥</h3><p><img src="/2023/10/23/46/%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5.png"></p>
<h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><p><img src="/2023/10/23/46/%E5%A4%B4%E9%83%A8.png" alt="|525"></p>
<ol>
<li>序列号：建立连接时，由计算机生成的随机数作为初始值，通过SYN包传给接收端主机，每发送一次，就累加一次该数据字节数的大小，解决网络包乱序问题。</li>
<li>确认应答号：下一次期望收到数据的序列号。发送端收到这个之后可以认为在这之前的数据都被正常接收，用于解决丢包问题。</li>
<li>控制位为1时：<ul>
<li>ACK：确认应答变为有效，TCP规定除了最初建立连接时的SYN包之外必须设为1</li>
<li>RST：标识连接异常必须强制断开连接</li>
<li>SYN：表示希望建立连接</li>
<li>FIN：今后不会再有数据发送，希望断开连接时，表示今后不再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方可以交换FIN位为1的TCP段。</li>
</ul>
</li>
</ol>
<h4 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h4><blockquote>
<p>攻击者短时间伪造不同的IP地址的SYN报文，沾满服务端的办理按揭队列，导致客户端无法和服务端建立连接。</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li>增大netdev_max_backlog：网卡接收数据包的数据大于内核处理速度时保存数据包的队列长度</li>
<li>增大TCP半连接队列：<ul>
<li>增大net.ipv4.tcp_max_syn_backlog</li>
<li>增大listen()函数中的backlog</li>
<li>增大net.core.somaxconn</li>
</ul>
</li>
<li>开启net.ipv4.tcp_syncookies，就可以在使用SYN半连接的情况下成功建立连接。<img src="/2023/10/23/46/%E4%BD%BF%E7%94%A8cookie%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.png" alt="|550"></li>
</ol>
<ul>
<li>减少SYN+ACK重传次数，tcp_synack_retries内核参数</li>
<li>Anti-DDoS系统拦截客⼾端发送的SYN报⽂，代替服务器向客⼾端发送SYN-ACK报⽂，如果客⼾端不应答，则认为该客⼾端为虚假源；如果客⼾端应答，则Anti-DDoS系统认为该客⼾端为真实源，并将其IP地址加⼊⽩名单，在⼀段时间允许该源发送的所有SYN报⽂通过，也不做代答。</li>
</ul>
<h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>滑动窗口机制允许发送方在等待接收方确认之前发送多个数据包，从而提高数据传输效率。<br>为了解决一发一答的效率问题。窗口的实现实际上是操作系统开辟一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据，如果按期收到确认应答，这个数据就可以从缓冲区删除。<img src="/2023/10/23/46/TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.png"></p>
<h4 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h4><p>当连接开始时，以指数速率增加发送速率，直到第一次报文丢失事件发生为止。<br>初始：拥塞窗口值cwnd = 1 MSS<br>每RTT倍增cwnd<br>每收到一个ACK，增加cwnd<br>初始速率很低，但是以指数增加</p>
<h4 id="阻塞控制"><a href="#阻塞控制" class="headerlink" title="阻塞控制"></a>阻塞控制</h4><ol>
<li>慢启动：发送方每收到一个ACK，拥塞窗口cwnd大小指数增加</li>
<li>拥塞避免算法：当cwnd超过慢启动门限ssthresh就会进入拥塞避免算法：每个 RTT（往返时间）增加 1 个 MSS，而不是每个 ACK 增加 1 个 MSS。</li>
<li>拥塞发生：发生了 超时重传时，sshtresh设置为cwnd/2，cwnd恢复为初始化值，发生快速重传是，cwnd =cwnd/2，ssthresh=cwnd并进入快速恢复算法。</li>
<li>快速恢复<img src="/2023/10/23/46/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D.png"></li>
</ol>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>主机名到IP地址的转换<br>主机别名：一个主机可以有一个规范主机名和多个主机别名。<br>邮件服务器别名：负载分配：DNS实现冗余服务器，一个IP地址集合可以对应同一个规范主机名。</p>
<p>DNS客⼾端设置使⽤的DNS服务器⼀般都是递归服务器，它负责全权处理客⼾端的DNS查询请求，直<br>到返回最终结果。⽽DNS服务器之间⼀般采⽤迭代查询⽅式。<br><img src="/2023/10/23/46/DNS%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h4><blockquote>
<p>通过某些手段获得对某域名的解析控制权，修改此域名的解析结果，导致对该域名的访问由原IP转为修改后的指定IP，记过就是对特定网站不能访问/访问的是假网站</p>
</blockquote>
<p>防止：限制对DNS的访问、设置较小的TTL值，定期修改域名管理系统的账号，使用支持DNSSEC的注册商，使用可靠的DNS服务商。</p>
<blockquote>
<p>DNSSEC（Domain Name System Security Extensions，域名系统安全扩展）是一组用于保护 DNS（域名系统）信息安全的协议和技术。它通过数字签名验证 DNS 数据的真实性和完整性，防止 DNS 缓存投毒和其他类型的攻击。</p>
</blockquote>
<h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>概念：路由器的网状网络<br>提问： 数据怎么通过网络进行传输？</p>
<ul>
<li>电路电路交换：  不可共享资源，会造成资源浪费，不适合计算机之间的通讯，计算机通信的特点： 突发性，耗时短</li>
<li>分组交换： 存储 – 转发  ， 数据转发过程中使用所有的资源，而不是使用一部分pieces，会将所有的的分组都存储之后再进行转发，方便共享的实现</li>
</ul>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ol>
<li>应用架构<ul>
<li>CS体系 客户-服务器:<ul>
<li>服务器： 一直运行，固定ip和周知的端口号，扩展性差</li>
<li>客户端： 主动与服务器通信，可能是动态ip，不直接与其他客户端通信</li>
</ul>
</li>
<li>P2P 每个端都可以作为服务器，点对点</li>
<li>混合体 c/s + P2P</li>
</ul>
</li>
<li>TCP socket ：对于面向连接服务（TCP) 的应用而言，socket是四元组的一个具有本地意义的标示,相当于一个记录特定会话的指针，只需要用socket就可以指定这个应用<ul>
<li>socket 其实是应用层和传输层之间的，使得允许应用能发起通信，与其他主机上的应用进程进行通信</li>
<li>4元组  源IP 源port 目标IP 目标port</li>
<li>唯一指定了一个会话</li>
<li>应用使用这个标示，与远程的应用进程进行通讯</li>
<li>不必在每一个报文中都指定这四元组</li>
<li>udp 只提供源主机的ip 和 port</li>
</ul>
</li>
<li>WebSocket 工作过程：<ol>
<li>客户端发送一个HTTP请求，包含升级字段</li>
<li>服务器接收之后,进行协议升级，如果支持，会返回一个101状态码，包含一些对应响应头</li>
<li>进行双向通信，数据以帧的方式传送。</li>
<li>其中一方发送一个关闭帧，二者关闭TCP连接</li>
<li>通过心跳机制保证WebSocket的稳定性和活跃性</li>
</ol>
</li>
<li>UDP socket<br> UDP 两个进程之间的通信之前不需要建立连接，每个报文独立传输，前后报文可能给不同的分布式进程<br> udp socket 记录本IP 本port 但是传输报文时，需要提供对方ip， port ,接收报文时传输层需要上传对方IP port<br> 二元组： 源IP  源port</li>
</ol>
<p>TCP 服务：</p>
<ul>
<li><p>可靠的传输服务</p>
</li>
<li><p>流量控制：发送方不会淹</p>
</li>
</ul>
<p>没接受方</p>
<ul>
<li>拥塞控制：当网络出现拥</li>
</ul>
<p>塞时，能抑制发送方</p>
<ul>
<li><p>不能提供的服务：时间保证、最小吞吐保证和安全</p>
</li>
<li><p>面向连接：要求在客户端进程和服务器进程之间建立连接</p>
</li>
</ul>
<p>UDP 服务：</p>
<ul>
<li><p>不可靠数据传输</p>
</li>
<li><p>不提供的服务：可靠，流量控制、拥塞控制、时间、带宽保证、建立连接<br>UDP存在的必要性</p>
</li>
<li><p>能够区分不同的进程，而IP服务不能</p>
</li>
<li><p>在IP提供的主机到主机端到端功能的基础上，区分了主机的</p>
</li>
</ul>
<p>应用进程</p>
<ul>
<li>无需建立连接，省去了建立连接时间，适合事务性的</li>
</ul>
<p>应用</p>
<ul>
<li>不做可靠性的工作，例如检错重发，适合那些对实时</li>
</ul>
<p>性要求比较高而对正确性要求不高的应用</p>
<ul>
<li>因为为了实现可靠性（准确性、保序等），必须付出时间代</li>
</ul>
<p>价（检错重发）</p>
<ul>
<li>没有拥塞控制和流量控制，应用能够按照设定的速度</li>
</ul>
<p>发送数据</p>
<ul>
<li>而在TCP上面的应用，应用发送数据的速度和主机向网络发送</li>
</ul>
<p>的实际速度是不一致的，因为有流量控制和拥塞控制</p>
<ul>
<li>安全TCP<br>  TCP和UDP都没有加密，明文传输<br>  使用SSL协议来实现加密，在TCP的基础上实现，提供加密的TCP，私密性，数据完整性，段堆到端的鉴别<br>  SSL socket API 应用通过API将铭文交给socket，SSL将其加密<br>URL : 访问协议 + 用户名 + 口令字 + 端口等</li>
</ul>
<h3 id="常见的应用层协议"><a href="#常见的应用层协议" class="headerlink" title="常见的应用层协议"></a>常见的应用层协议</h3><h4 id="HTTP面试题"><a href="#HTTP面试题" class="headerlink" title="HTTP面试题"></a>HTTP面试题</h4><ul>
<li><p>状态码：</p>
<ol>
<li>200 </li>
<li>204 No Content 响应头没有body数据</li>
<li>206 &nbsp;<strong>Partial Content</strong> 表示返回的body数据不是资源的全部，只是一部分</li>
<li>301 <strong>Moved Permanently</strong> 永久重定向，请求的资源已经不存在的</li>
<li>302: Found: 表示临时重定向，301，302都会在响应头中使用字段Location指明后续要跳转URL,浏览器会自动重定向到新的URL</li>
<li>304：<strong>Not Modified</strong> 告诉客户端可以接着使用缓存资源</li>
<li>400<strong>Bad Request</strong> 报文有错</li>
<li>403 <strong>Forbidden</strong> 禁止访问</li>
<li>404 <strong>Not Found</strong> 资源不存在或者没找到</li>
<li>500 <strong>Internal Server Error</strong> 服务器内部错误</li>
<li><strong>501 Not Implemented</strong> 客户端请求还不支持</li>
<li><strong>502 Bad Gateway</strong> 通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</li>
<li><strong>03 Service Unavailable</strong> 服务器忙，暂时无法响应</li>
</ol>
</li>
<li><p>缓存技术：把请求-响应的数据存到本地，下一次直接都本地数据，不需要等待服务器的想用了</p>
<ol>
<li>强制缓存<ul>
<li><code>Cache-Control</code>， 是一个相对时间；</li>
<li><code>Expires</code>，是一个绝对时间；</li>
</ul>
</li>
<li>协商缓存<ul>
<li>在强制缓存未命中时，服务器第一次请求资源时，会在Response头部加上ETag唯一表示</li>
<li>当浏览器再次请求访问服务器中的资源时，先检查缓存是否过期，如果没有过期直接使用本地缓存，如果过期了会在Request头部上加上If-None-Match紫萼段</li>
<li>服务器再次收到请求之后，会根据请求中的If-None-Match值是否与当前请求的资源生成的唯一标识比较<ul>
<li>如果值相等，返回304 Not Modified 不会返回资源</li>
<li>如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；</li>
</ul>
</li>
<li>浏览器收到304响应码，会从本地加载资源否则更新资源。</li>
</ul>
</li>
</ol>
</li>
<li><p>HTTP/1.1 的优点：简单灵活、应用广泛</p>
<ul>
<li>缺点是：无状态一方面可以不需要服务器使用额外的资源来记录状态信息</li>
<li>坏处是：进行关联性操作时，需要每次都验证一次身份</li>
<li>解决方法：使用Cookie</li>
</ul>
</li>
<li></li>
<li><p>HTTP：超文本传输协议 HTTP默认80 HTTPS默认 443</p>
<ul>
<li>流程： 1. 客户发起一个与服务器的TCP连接，(建立socket) 2. 服务器接受TCP 连接 3. 浏览器和web服务器之间交换HTTP报文 4. TCP连接关闭 </li>
<li>HTTP 是无状态的连接，不会维护任何和客户有关的信息，这时候就需要websocket了</li>
<li>HTTP/1.1 之后默认使用持久连接，保证了多个u第项可以在一个TCP连接上传输 ，非持久连接下载多个文件需要及案例多个TCP连接<br> 响应时间<br> 往返时间 RTT round - trip - time： 一个小的分组从客户端到服务器，再回到客户端的时间，传输时间忽略不计<br> 响应时间为： 2RTT + 传输时间<br> 1. 一个RTT 用来发起TCP请求<br> 2. 一个用来HTTP请求和等待响应<br> 3. 文件传输时间<br> <strong>持久HTTP</strong> ： 一个TCP连接建立之后，不会断开然后进行多个HTTP请求<br> 服务器在发送响应之后仍然保持TCP连接<br> 在相同客户端和服务器之间的后续请求和响应报文通过相同的连接进行传送<br> 客户端，在遇到一个引用对象的时候就可以尽快的发送该对象的请求，<br> 1. 每个对象要两个RTT<br> 2. 操作系统必须为每一个TCP连接分配资源，但是浏览器通常并行打开TPC连接，以获得引用对象<br> 两种方式：<br>     1. 非流线方式的持久HTTP，客户端只能在前一个HTTP请求响应之后才能发送新的请求，每个引用对象花费一个RTT<br>     2. 流水线方式：客户端遇到一个引用对象（一个小的ui所指的资源）之后就立即产生一个请<br>     3. 所有(小)的引用对象只花费一个RTT是有可能的<br> HTTP 报文格式 ： 请求行 + 请求头 + (request body)<br> tips : PUT 请求是将实体对象中文件载到URL指定的路径(一般是更新资源)<br> POST 不需要在URL 中指定资源位置，一般用于创建资源<ul>
<li>缓存：命中率(h)： 百分之多少的请求可以在缓存中满足</li>
<li>接入链路的利用率:  (1-h) *  请求速率 / 带宽</li>
</ul>
</li>
</ul>
</li>
<li><p>FTP 文件传输协议(基于TCP)<br> ftp服务器端口号默认为 21，需要建立两个TCP连接，一个用于控制，一个用于传输</p>
</li>
<li><p>SMIT 电子邮件的邮件传输协议 (默认端口25)<br>  用于上传邮件，和HTTP的区别，HTTP的每个对象封装在各自的响应报文中，SMIT可以将多个 引用对象封装在一个报文中<br>  报文格式：<br>  HEAD<br>  To :<br>  From :<br>  Subject:<br>  BODY:<br>  报文</p>
<ul>
<li>MIME 多媒体邮件扩展</li>
<li>POP 邮局访问协议 用户确认身份(代理 &lt;–&gt;服务器)并下载<ul>
<li>POP3 不保留会话状态 本地管理文件夹</li>
</ul>
</li>
<li>IMAP Internet 邮件访问协议，保留用户状态 远程管理文件夹</li>
</ul>
</li>
<li><p><em>DNS</em> Domain Name System 建立IP 地址和 对应域名之间的映射<br>  <strong><em>DNS默认默认端口是53</em></strong><br>  主要思路：分层，基于域的命名机制，在若干分布式的数据库上完成转换<br>  也可以做到负载均衡<br>  域名结构：使用层次树状结构来进行命名<br>  域名结构：从本域开始往上直至树根，域严格遵循组织界限，而不是物理网络<br>  DNS 记录格式<br>  RP格式: (name,value,type , ttl)<br>  type=A  时， name 为主机 value 为IP<br>  =CNAME  Name 为规范名字的别名<br>  =NS           Name 为域名 (foo.com) value 为该域名的权威服务器的域名<br>  =MX          Value 为name对应邮件服务器名字</p>
<ul>
<li>应用调用 解析器(resolver)</li>
<li>解析器作为客户 向Name Server发出查询报文（封装在UDP段中）</li>
<li>Name Server返回响应报文(name/ip)</li>
<li>本地名字服务器 Local Name Server 起到代理的作用，将查询转发到DNS服务器<ul>
<li>不严格属于层次结构，每个ISP 都有一个本地DNS，优先去本地DNS服务器中查询</li>
<li>递归查询：本地LNS 无，<strong>直接</strong> 去找权威服务器，然后从权威服务器往下开始查询，只需要向一个服务器去请求，然后由这个服务器去查询或者去向其他服务器来进行查找，最终由这个服务器来返回结果</li>
<li>迭代查询：转发到服务器，如果这个服务器没有就告诉发起请求的服务器要去查询下个一个服务器，由请求服务器去接着请求其他服务器，最终由能查询到的服务器来返回结果，就可以降低根服务器的负荷了</li>
</ul>
</li>
<li>缓存，一旦名字服务器得到了一个映射，就将该映射缓存起来，根服务器一般在本地服务器中缓存着，使用TTL (Time to Live)</li>
<li>攻击DNS的方法： <ul>
<li>DDoS攻击：对根服务器进行流量轰炸，发送大量的ping</li>
<li>向TLD(权威，顶级域名)攻击</li>
<li>重定向攻击：</li>
</ul>
</li>
</ul>
</li>
<li><p>CDN 内容分发网络：在CDN节点中存储内容的多个拷贝，用户请求重定向到最近的一个CDN节点</p>
</li>
</ul>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>提供服务：为运行在不同主机上应用程序提供逻辑通信<br>数据元为报文段<br>与网络层的区别：网络层提供不同主机之间的逻辑通信，传输层提供的应用程序之间的通讯<br>tips：TCP和UDP都不提供延时保证和带宽保证，都支持多路复用和解复用，TCP额外提供拥塞控制和流量控制，以及建立连接</p>
<ul>
<li>多路复用/解复用：多路复用指的是许多个信号或数据流共享同一物理通信通道，解复用指的是根据报文段的头背部信息中的IP地址和端口号将接受的报文段发给正确的socket</li>
<li>为何要有UDP ： <ol>
<li>不建立连接(会增加延时)</li>
<li>简单：在发送端和接收端没有连接状态</li>
<li>报文段的头部很小(开销小)</li>
<li>无阻塞控制和流量控制可以保证UDP尽快的发送报文段，应用-&gt; 传输速率 = 主机 -&gt; 网络的速率</li>
<li><u>UDP也会进行校验，但是只是通过校验和的方式来检测是否遭到篡改</u></li>
</ol>
</li>
<li>RDT 是一种模型: RDT（Reliable Data Transfer）是一种可靠的数据传输协议，用于在不可靠的通信信道上实现可靠的数据传输。<ol>
<li>RDT 1.0（停等协议）：相信信道可靠<ul>
<li>发送方只发送一次数据，不进行重传。</li>
<li>接收方只接受一次数据，不进行重传请求。</li>
<li>适用于理想化的通信信道，不考虑错误和丢失。</li>
</ul>
</li>
<li>RDT 2.0（回退N协议）： 相信会出现bits errors<ul>
<li>使用checksum 来进行错误检验</li>
<li>引入了有限状态自动机，来切换来指定发送者和接收者</li>
<li>发送方发送数据帧，并等待接收方的确认帧。</li>
<li>接收方接收数据帧，发送确认帧。</li>
<li>如果发送方未收到确认帧，它将重传数据帧。</li>
<li>接收方可能收到重复的数据帧，但通过带有序号的数据帧来排除重复。</li>
<li>问题：如果ACK或者NCK传错了，就会重复</li>
</ul>
</li>
<li>RDT 3.0 <ul>
<li>机制：在超过合理时间之后进行重传</li>
<li><ul>
<li>如果package（或ACK）只是被延迟了：</li>
<li>重传将会导致数据重复，但利用序列号已经可以处理这个问题</li>
<li>接收方必须指明被正确接收的序列号</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>需要一个倒计数定时器<ol>
<li>停等协议：发送方发送一个分组，然后等待接收方的应答</li>
<li>ACK NAK   NAK 是negative ACK</li>
</ol>
</li>
</ul>
</li>
<li>TCP:<ul>
<li>点对点：一个发送方，一个接收方 </li>
<li>可靠的、按顺序的字节流：没有报文边界 </li>
<li>管道化：TCP拥塞控制和流量控制设置窗口的大小</li>
<li>面向连接：交换数据之前，通过握手来初始化双方的状态变量</li>
<li>流量控制：发送方不会淹没接收方</li>
<li><img src="/2023/10/23/46/tcp%E6%8A%A5%E6%96%87.png" alt="tcp报文"></li>
<li>序号：报文段首字节在字节流的编号</li>
<li>确认号：期望从另一方收到的下一个字节的序号</li>
<li>TCP超时时间= EstimatedRTT + 安全边界时间</li>
<li>。。。。待续</li>
</ul>
</li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>DU 为 数据包</p>
<ul>
<li>服务：在发送和接收主机之间传送段</li>
<li>功能：<ul>
<li>转发：将分组从路由器的输入接口转发到合适的输出接口上</li>
<li>路由：使用路由算法来决定分组从发送主机到目标接收主机的路径</li>
</ul>
</li>
<li>数据平面：转发</li>
<li>控制平面：路径</li>
<li>路由器的结构：<ul>
<li>路由：运行路由选择算法生成路由表</li>
<li>转发：从输入到输出链路交换数据报，根据路由表进行分组的转发</li>
</ul>
</li>
<li>查表方式： <ul>
<li>最长前缀匹配</li>
</ul>
</li>
<li>交换结构：<ul>
<li>通过内存交换，在cpu的直接控制下进行交换</li>
<li>使用总线进行交换： 数据报通过共享总线进行转发，交换速度受限于总线带宽</li>
<li>使用互联网络进行交换</li>
</ul>
</li>
<li>调度机制： 调度指的是选择下一个要通过链路交换的分组<ul>
<li>FIFO</li>
<li>优先权调度</li>
<li>轮询</li>
</ul>
</li>
<li>IP<ul>
<li>IP地址是对主机或者路由器的接口进行编址</li>
<li>接口指的是 主机/路由器 和 物理链路的连接处</li>
<li>关系是1 : 1</li>
<li><strong>子网</strong>：<ol>
<li>一个子网内的节点，他们IP地址的高位部分都相同，这些节点叫做子网</li>
<li>无需路由器介入，子网内的个主机在物理上是可以直接打到</li>
<li>将子网掩码转为二进制，则为1的部分代表着IP地址中的这一部分是网络中的地址，为0的部分是标识子网中的主机</li>
</ol>
</li>
<li>分类：根据第一个8位bit来进行分类<ul>
<li>A 类 最高位固定为0：也就是 1 - 126  7 位网络  24 位主机</li>
<li>B : 10  128 - 191 14位 网络 16主机</li>
<li>C : 110 192 - 223  21位 网络  8位主机</li>
<li>D : 224 - 239 用于多播</li>
<li>E : 240 - 255 保留用于实验和研究目的</li>
</ul>
</li>
<li>CIDR Classless InterDomain Routing 无类域间路由<ul>
<li>也就是 a.b.c.d/x x是子网掩码(mask)</li>
</ul>
</li>
<li>NAT 网络地址转换 <ul>
<li>将私有网络中的内部IP映射到公共网络中的单个IP地址</li>
</ul>
<ol>
<li><p>节省IP地址：NAT允许多个内部设备共享一个公共IP地址，因此可以延长IPv4地址池的使用寿命。</p>
</li>
<li><p>增强网络安全性：因为内部设备的私有IP地址不直接暴露在互联网上，NAT提供了一层基本的安全性，可以隐藏内部网络结构。</p>
</li>
<li><p>简化网络管理：NAT可以使网络管理员更轻松地管理多台设备，而无需为每个设备分配唯一的公共IP地址。</p>
</li>
</ol>
</li>
</ul>
</li>
<li>IPv6 <ul>
<li>IPv4和IPv6通信方式：隧道 Tunneling， 在IPv4路由器之间传输的IPv4报文中携带PIv6的报文</li>
</ul>
</li>
<li>SDN</li>
<li>OpenFlow</li>
<li>route 路由，按照某种指标找到一条从源节点到目标节点的较好路径<ul>
<li>路由算法分为 全局和 分布式</li>
<li>全局：<ul>
<li>所有边都拥有完整(所有的拓扑)的拓扑和边的代价的信息</li>
<li>link state  LS  链路状态路由选择算法</li>
</ul>
</li>
<li>分布式: <ul>
<li>路由器只知道与它物理连接关系的邻居路由器和到响应邻居路由器的代价</li>
<li>迭代的与邻居路由器交换路由信息，计算路由信息</li>
<li>distance vector DV算法  距离矢量路由选择算法</li>
</ul>
</li>
</ul>
</li>
<li>RIP（Routing Information Protocol）是一种用于计算机网络中的距离矢量路由协议</li>
<li>OSP</li>
<li>DNS 主机向要访问-&gt;向DNS查询IP地址-&gt;所查询的DNS服务器未知要查询的IP地址-&gt;向根域名服务器查询-&gt;根域名服务器收录了这个地址 -&gt;返回地址给客户端-&gt;客户端建立通信<br>网络层解决一个两个网络之间的问题，链路层要解决点对点传输的问题</li>
<li><strong>ARP</strong>:以目标IP地址为线索，来定位下一个应该接受数据分包的网络设备的MAC地址，沟通IP和MAC地址 **IP-&gt;MAC **数据元为 frame 帧，帧的头部时使用MAC地址来标示源和目的地<ul>
<li>ARP记录一个&lt;IP,MAC,TTL&gt; 的表，TTL是生存周期</li>
</ul>
</li>
<li><strong>RARP</strong> MAC-&gt;IP<br>实现是在适配器上实现的，例如以太网卡</li>
<li>WAN 广域网 网络形式采用点到点链路</li>
<li>LAN 局域网 一般采用多点连接的方式</li>
<li>奇偶校验<ul>
<li>单bit奇偶校验只能检测单个bit级别的错误，不能纠错</li>
<li>二维奇偶校验可以检测和纠正单个bit错误</li>
<li>checksum </li>
<li>CRC 循环冗余校验</li>
</ul>
</li>
</ul>
<h3 id="网络接口层：等价数据链路层，使用mac地址"><a href="#网络接口层：等价数据链路层，使用mac地址" class="headerlink" title="网络接口层：等价数据链路层，使用mac地址"></a>网络接口层：等价数据链路层，使用mac地址</h3><ul>
<li><p>NIC的驱动程序</p>
</li>
<li><p>NIC 是网络适配器，也就是网卡</p>
</li>
<li><p>PPP也属于数据链路层</p>
</li>
</ul>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h4 id="OSI参考模型-有七个分层"><a href="#OSI参考模型-有七个分层" class="headerlink" title="OSI参考模型 有七个分层"></a>OSI参考模型 有七个分层</h4><p>自上而下 每一层的功能和作用由协议规定，协议的内容是规范</p>
<ol>
<li><p><strong>应用层</strong></p>
<ul>
<li>针对特定应用的协议</li>
</ul>
</li>
<li><p><strong>表示层</strong></p>
<ul>
<li>设备固有数据格式和网络标准数据格式 比如：接受不同表现形式的信息</li>
</ul>
</li>
<li><p><em>会话层</em></p>
<ul>
<li>负责通信管理，负责建立连接和断开，管理传输层以下的分层</li>
</ul>
</li>
<li><p><strong>传输层</strong></p>
<ul>
<li>管理两个节点之间的数据传输，负责可靠传输</li>
</ul>
</li>
<li><p><strong>网络层</strong></p>
<ul>
<li>路由选择与地址管理</li>
</ul>
</li>
<li><p><strong>数据链路层</strong></p>
<ul>
<li>互连设备之间传送，和 识别数据帧</li>
</ul>
</li>
<li><p><strong>物理层</strong></p>
<ul>
<li>界定连接器和网线的规格，比特流和电子信号转换</li>
</ul>
</li>
</ol>
<h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><ul>
<li>对称加密：发送方和接收方的密钥相同</li>
<li>公开密钥加密：发送方使用接收方的公钥进行加密，接收方使用自己的私钥进行解密</li>
<li>数字签名：</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>blog搭建</title>
    <url>/2023/09/30/23/</url>
    <content><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>一次自己blog手动搭建记录<br>技术栈：</p>
<ul>
<li>前端：vue</li>
<li>后端:   express redis</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>TVM</title>
    <url>/2024/03/17/19/</url>
    <content><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>TVM（Tensor Virtual Machine，张量虚拟机）是一个开源的、端到端的机器学习编译器框架，旨在将机器学习算法自动编译成可供下层硬件执行的机器语言，从而利用多种类型的算力。也就是将深度学习模型进行高效推理、内存管理与线程调度优化后，再通过LLVM部署在CPU、GPU、FPGA、ARM等硬件设备上。</p>
]]></content>
  </entry>
  <entry>
    <title>前端学习</title>
    <url>/2023/09/29/36/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul>
<li>head中的<ul>
<li>meta的使用，description可以用来记录文章主要内容，方便搜索引擎使用</li>
<li><code>&lt;link rel="icon" href="./favicon.ico"&gt;</code> 引入ico</li>
</ul>
</li>
</ul>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>文件结构:</p>
<ul>
<li>api 存放封装了Ajax的请求文件</li>
<li>components 公共组件存放目录</li>
<li>views 视图组件</li>
<li>App.vue 主组件，入口文件</li>
<li>main.ts 项目的路口文件</li>
<li>router.ts路由文件</li>
</ul>
<h2 id="打包部署在nginx上"><a href="#打包部署在nginx上" class="headerlink" title="打包部署在nginx上"></a>打包部署在nginx上</h2><p>使用npm run build 进行打包，将dist包放在/usr/share/nginx/html<br>即可，然后root路径要写全<br>本地使用vue，基于脚手架安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> create vue@latest
<span class="token builtin class-name">cd</span> xxx
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>基础语法:</li>
<li>v-bind:xxx 绑定语法，可简写为:xxx 如果绑定的是多个值，比如是一个json数组，那么可以把xxx省略留下 v-bind: = aaa</li>
<li>v-on 监听事件 简写为 @xxx 动态绑定事件 <code>@[事件列表] = "事件函数"</code></li>
<li><code>&lt;template&gt;</code> 不会被渲染，一般作为v-if根</li>
<li>第三个参数表示位置索引：<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for="(value, key, index) in myObject"&gt;
  {{ index }}. {{ key }}: {{ value }}
&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>setup是在建立渲染之前就会调用</li>
<li>想要使用变量就必须要把变量return 出来即可</li>
<li>使用语法糖可以简化代码，不需要一个个return了<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  
   const msg = 'Hello Vite + Vue 3!'  
&lt;/script&gt;  
&lt;template&gt;  
  &lt;div id="app"&gt;  
    &lt;h1&gt;{{msg}}&lt;/h1&gt;  
  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用reactive函数来返回一个响应式对象<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  
   import {reactive} from "vue";  
   const state = reactive({  
     msg: "hell world"  
   })  
   const setState = ()=&gt;{  
     state.msg = "hello vite"  
   }  
&lt;/script&gt;  
&lt;template&gt;  
  {{state.msg}}  
  &lt;button @click="setState"&gt;click&lt;/button&gt;  
&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用ref来返回一个简单响应式对象<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  
    import {ref} from "vue";  
    const msg = ref(0);  
&lt;/script&gt;  
&lt;template&gt;  
  &lt;div id="app"&gt;  
    &lt;button @click="msg++"&gt;count is: {{ msg }}&lt;/button&gt;  
  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>computed对象函数，里面传进去计算逻辑<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  
import {computed, ref} from "vue";  
  const list = ref([1,2,3,4,5]);  
  const filterlist = computed(()=&gt;{  
    return list.value.filter(item=&gt;item&gt;3)  
  })  
&lt;/script&gt;  
&lt;template&gt;  
  &lt;div&gt;    &lt;ul&gt;      &lt;li v-for="item in filterlist" :key="item"&gt;{{item}}&lt;/li&gt;  
    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>watch 监听数据的变化，如果数据变化就执行回调函数，剩下两个参数，immediate 控制立刻执行，deep开启深度监听<ul>
<li>监听一个  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">	&lt;script setup&gt;  
import {ref, watch} from "vue";  
const count = ref(0);  
watch(count,(newCount, oldCount) =&gt; {  
  console.log(`new count is: ${newCount}, old count is: ${oldCount}`)  
})  
const increment = () =&gt; {  
  count.value++;  
}  
&lt;/script&gt;  
&lt;template&gt;  
&lt;button @click="increment"&gt;count is: {{count}}&lt;/button&gt;  
&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>监听多个数据，只需要把参数化成数组即可<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;</span><span class="token punctuation">{</span>
  console.<span class="token function">log</span><span class="token punctuation">(</span>`count或者name变化了，[newCount<span class="token punctuation">,</span> newName]<span class="token punctuation">,</span>[oldCount<span class="token punctuation">,</span>oldName]<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>immediate 在创建时立刻出发<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">watch(count, (newValue, oldValue)=&gt;</span><span class="token punctuation">{</span>
   <span class="token selector">console.log(`count发生了变化，老值为$</span><span class="token punctuation">{</span>oldValue<span class="token punctuation">}</span><span class="token selector">,新值为$</span><span class="token punctuation">{</span>newValue<span class="token punctuation">}</span>`<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token selector">,</span><span class="token punctuation">{</span>
   <span class="token property">immediate</span><span class="token punctuation">:</span> true
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>deep通过watch监听的ref对象是浅层监听的，直接修改嵌套的对象属性是不会回调的，但是开启之后就可以回调了<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;
  // 1. 导入watch
  import { ref, watch } from 'vue'
  const state = ref({ count: 0 })
  // 2. 监听对象state
  watch(state, ()=&gt;{
    console.log('数据变化了')
  })
  const changeStateByCount = ()=&gt;{
    // 直接修改不会引发回调执行
    state.value.count++
  }
&lt;/script&gt;

&lt;script setup&gt;
  // 1. 导入watch
  import { ref, watch } from 'vue'
  const state = ref({ count: 0 })
  // 2. 监听对象state 并开启deep
  watch(state, ()=&gt;{
    console.log('数据变化了')
  },{deep:true})
  const changeStateByCount = ()=&gt;{
    // 此时修改可以触发回调
    state.value.count++
  }
&lt;/script&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>父组件传值给子组件: 1.引入子组件，使用子组件并绑定子组件中props中的属性 2. 子组件使用defineProps来接受父组件的传值<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件
&lt;script setup&gt;  
import son from './components/money.vue'  
&lt;/script&gt;  
  
&lt;template&gt;  
  &lt;son  message="hello world"/&gt;  
&lt;/template&gt;
&lt;!--子组件--&gt;
&lt;script setup&gt;  
const props =  defineProps({  
  message : String  
})  
&lt;/script&gt;  
&lt;template&gt;  
  {{message}}  
&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>子组件传值给父组件: 1.子组件通过defineEmits来生成emit方法 2.子组件使用emit定义事件，并传递参数 3.父组件使用绑定子组件的事件，并绑定自己的函数，定义自己的函数使用传递的值<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">子组件
&lt;script setup&gt;  
const props =  defineProps({  
  message : String  
})  
const emit = defineEmits(['say']) //事件列表  
const hh = ()=&gt;{  
  emit('say','hello world')  
}  
&lt;/script&gt;  
&lt;template&gt;  
  {{message}}  
  &lt;button @click="hh"&gt;click&lt;/button&gt;  
&lt;/template&gt;
父组件
&lt;script setup&gt;  
import son from './components/money.vue'  
const func = (msg,num)=&gt;{  
  console.log(msg,num)  
}  
&lt;/script&gt;  
&lt;template&gt;  
  &lt;son  messoage="hello world" @say="func"/&gt;  
&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>模板使用 新建一个ref 然后在 html 中的ref来进行绑定这个ref即可获得dom元素，但是会在onmounted之后才能访问</li>
<li>父组件默认不会获得子组件的dom因为有setup 所以可以使用<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">defineExpose({
	需要暴漏的属性和方法名或者一个匿名函数
})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>通过provide和inject来跨层传递<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">顶层
provide('key',value) value可以是函数等
底层
const value = inject('key')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>v-text 来更新文本内容，v-html来更新html元素</li>
</ul>
<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>支持前后端分离的简单框架</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-generator <span class="token parameter variable">-g</span>
express --no-view server 新建项目
<span class="token builtin class-name">cd</span> server
<span class="token function">npm</span> <span class="token function">install</span>
ET DEBUG <span class="token operator">=</span> server:* <span class="token operator">&amp;</span> <span class="token function">npm</span> start 开启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user www-data<span class="token punctuation">;</span>
worker_processes auto<span class="token punctuation">;</span>
pid /run/nginx.pid<span class="token punctuation">;</span>
include /etc/nginx/modules-enabled/*.conf<span class="token punctuation">;</span>

events <span class="token punctuation">{</span>
        worker_connections <span class="token number">768</span><span class="token punctuation">;</span>
        <span class="token comment"># multi_accept on;</span>


        <span class="token comment">##自定义服务列表</span>

<span class="token punctuation">}</span>
http <span class="token punctuation">{</span>
        <span class="token comment">##</span>

        sendfile on<span class="token punctuation">;</span>
        tcp_nopush on<span class="token punctuation">;</span>
        types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span>
        <span class="token comment"># server_tokens off;</span>

        <span class="token comment"># server_names_hash_bucket_size 64;</span>
        <span class="token comment"># server_name_in_redirect off;</span>

        include /etc/nginx/mime.types<span class="token punctuation">;</span>
        default_type application/octet-stream<span class="token punctuation">;</span><span class="token builtin class-name">.</span>
         ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span> <span class="token comment"># Dropping SSLv3, ref: POODLE</span>
        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>

        <span class="token comment">##</span>
        <span class="token comment"># Logging Settings</span>
        <span class="token comment">##</span>

        access_log /var/log/nginx/access.log<span class="token punctuation">;</span>
        error_log /var/log/nginx/error.log<span class="token punctuation">;</span>

        <span class="token comment">##</span>
        <span class="token comment"># Gzip Settings</span>
        <span class="token comment">##</span>

        <span class="token function">gzip</span> on<span class="token punctuation">;</span>

        <span class="token comment"># gzip_vary on;</span>
        <span class="token comment"># gzip_proxied any;</span>
        <span class="token comment"># gzip_comp_level 6;</span>
        <span class="token comment"># gzip_buffers 16 8k;</span>
        <span class="token comment"># gzip_http_version 1.1;</span>
        <span class="token comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>

        <span class="token comment">##</span>
        <span class="token comment"># Virtual Host Configs</span>
        <span class="token comment">##</span>
          include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
        include /etc/nginx/sites-enabled/*<span class="token punctuation">;</span>



<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><ul>
<li><p>进度条</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ProgressBar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'progress'</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgressBar</span><span class="token punctuation">(</span><span class="token string">':bar'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> timer <span class="token operator">=</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
    bar<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bar<span class="token punctuation">.</span>complete<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>文件操作  require(‘fs’)</p>
</li>
<li><p>网络开发</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端已连接'</span><span class="token punctuation">)</span>  
    c<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'断开连接'</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>  
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
    <span class="token keyword">throw</span> err  
<span class="token punctuation">}</span><span class="token punctuation">)</span>  
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8124</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已启动'</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>on来绑定事件</p>
</li>
<li><p>udp 使用dgram模块</p>
</li>
<li><p>WebSocket 使用 ws模块，是对socket的具体实现</p>
</li>
<li><p>socket.io框架</p>
</li>
<li><p>常用api<br><img src="/2023/09/29/36/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/2.jpg"><br><img src="/2023/09/29/36/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/1.jpg"></p>
</li>
<li><p>express框架</p>
</li>
<li><p>koa框架</p>
</li>
<li><p>mongoose</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HashMap源码分析与常见八股</title>
    <url>/2024/09/28/24/</url>
    <content><![CDATA[<h1 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h1><p><a href="https://javadoop.com/post/hashmap">Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析 (javadoop.com)</a></p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="基本属性-阈值-amp-系数-amp-容量"><a href="#基本属性-阈值-amp-系数-amp-容量" class="headerlink" title="基本属性(阈值&amp;系数&amp;容量)"></a>基本属性(阈值&amp;系数&amp;容量)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
	<span class="token comment">// 序列号</span>
    <span class="token annotation punctuation">@java.io.Serial</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">362498820763181265L</span><span class="token punctuation">;</span>

	<span class="token comment">// 默认容量，也就是 16</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> 

	<span class="token comment">/**
	 * 最大容量，如果通过构造函数隐式指定了更高的值，则使用此值。
	 * 必须是2的幂且 &lt;= 1&lt;&lt;30。
	 * 也就是最大容量是 2^30
	 */</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>

	<span class="token comment">/**
	 * 构造函数未指定时使用的负载因子。
	 */</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

	<span class="token comment">// 当桶上的节点数&gt;=这个值时会转化为红黑树</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

	<span class="token comment">// 当桶上的节点数小于这个值时会转化为链表</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

	<span class="token comment">// 转化为红黑树对应的所需要的最小的数组容量</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
	<span class="token comment">// 存储元素的数组，容量总是2的幂次倍</span>
	<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
	<span class="token comment">// transient用于标识这个字段不应该被序列化</span>
	<span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>
	<span class="token comment">// 存放元素的个数，</span>
	<span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
	<span class="token comment">// 每次扩容和更改map结构的计数器</span>
	<span class="token comment">/*
	* 1.检测并发修改：在迭代过程中，如果 modCount 发生变化，迭代器会抛出 ConcurrentModificationException，以防止并发修改导致的不一致性。
	2.维护内部状态：在某些操作（如插入、删除、扩容）中，modCount 会增加，以确保 HashMap 的内部状态保持一致
	*/</span>
	<span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>
	<span class="token comment">// 阈值(容量*负载因子) 当实际大小超过阈值时，会进行扩容</span>
	<span class="token keyword">int</span> threshold<span class="token punctuation">;</span>
	<span class="token comment">// 负载因子</span>
	<span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="loadFactor负载因子"><a href="#loadFactor负载因子" class="headerlink" title="loadFactor负载因子"></a>loadFactor负载因子</h4><p>负载因子是控制数组存放数据的疏密程度，loadFactor越接近1，那么数组中存放的数据(entry)也就越多,否则就越少。<br>太大查找元素的效率低，太小利用率太低<br>所以默认 16 * 0.75 = 12，超过这个数据量时，就会进行扩容</p>
<h4 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h4><p>threshold = capacity * loadFacotry，是数组扩容的标准<br>因为hashmap中没有capacity这个属a性，所以即使指定了初始化的capacity，也会被扩容到2的最接近这个大小的幂次方</p>
<h3 id="Node-节点类源码"><a href="#Node-节点类源码" class="headerlink" title="Node 节点类源码"></a>Node 节点类源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 继承Map.Entry&lt;K,V&gt;</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
	<span class="token comment">// hash值，存放元素到hashmap时用来与其他元素进行比较</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>  
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>  
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>  
	<span class="token comment">// 指向下一个节点</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>  
  
    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>  
        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
  
        <span class="token keyword">return</span> o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e  
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="树节点源码"><a href="#树节点源码" class="headerlink" title="树节点源码"></a>树节点源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 仅截取部分源码</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// 父</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>    <span class="token comment">// 左</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>   <span class="token comment">// 右 </span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion  </span>
    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h3><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><ol>
<li>判断数组,若发现数组为空,则进行首次扩容。</li>
<li>判断头节点,若发现头节点为空,则新建链表节点,存入数组。</li>
<li>判断头节点,若发现头节点非空,则将元素插入槽内。</li>
<li>若元素的key与头节点一致,则直接覆盖头节点。</li>
<li>若元素为树型节点,则将元素追加到树中。</li>
<li>若元素为链表节点,则将元素追加到链表中。（追加后,需要判断链表长度以决定是否转为红黑树。若链表长度达到8、数组容量未达到64,则扩容。若链表长度达到8、数组容量达到64,则转为红黑树。）</li>
<li>插入元素后,判断元素的个数,若发现超过阈值则再次扩容。<br>put方法实际就是调用putVal，并且putVal用户不可直接使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token comment">// 如果表为空或长度为0，则进行初始化或扩容</span>
    <span class="token comment">// 将属性中的table赋值，并且判断是否为空或者长度为0，如果是就进行初始化或者扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	    <span class="token comment">// resize()函数就是进行扩容或者初始化</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 计算索引位置，如果当前位置为空，则直接插入新节点</span>
    <span class="token comment">// (n - 1) &amp; hash 确定元素放在哪个桶里，桶为空，新生成节点放入数组中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
        <span class="token comment">// 如果当前位置的节点的哈希值和键都相等，则直接覆盖</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            e <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token comment">// 如果是树节点，则调用树节点的插入方法</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 遍历链表，查找插入位置或相同键的节点</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果链表长度达到阈值，则转换为树结构</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 如果找到相同键的节点，则跳出循环</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果找到相同键的节点，则更新值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 修改计数器</span>
    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
    <span class="token comment">// 如果大小超过阈值，则进行扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
基本逻辑：</li>
<li>如果定位到的数组位置没有元素，则直接插入</li>
<li>如果有元素，就要与插入的key进行比较，如果相同，就覆盖。如果不同就判断p是否是树节点，如果不是就直接遍历链表插入，使用尾插法，否则调用putTreeVal函数</li>
</ol>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> hash<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
    <span class="token comment">// 检查表是否为空且长度大于0，并计算哈希值和索引</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查第一个节点是否匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// 始终检查第一个节点</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> first<span class="token punctuation">;</span>
        <span class="token comment">// 遍历链表或树节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token comment">// 检查链表中的每个节点是否匹配</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果没有找到匹配的节点，返回null</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span> <span class="token comment">// 旧的哈希表</span>
    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 旧的容量</span>
    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span> <span class="token comment">// 旧的阈值</span>
    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 新的容量和阈值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果旧的容量大于0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果旧的容量已经达到最大容量</span>
            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 将阈值设为最大整数值</span>
            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span> <span class="token comment">// 返回旧的哈希表</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 将容量和阈值都翻倍</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 如果旧的阈值大于0</span>
        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span> <span class="token comment">// 将新的容量设为旧的阈值</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果旧的阈值为0，使用默认值</span>
        newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span> <span class="token comment">// 默认初始容量</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认阈值</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果新的阈值为0</span>
        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span> <span class="token comment">// 计算新的阈值</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span> <span class="token comment">// 更新阈值</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建新的哈希表</span>
    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span> <span class="token comment">// 更新哈希表引用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果旧的哈希表不为空</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历旧的哈希表</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果旧表中的桶不为空</span>
                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 清空旧表中的桶</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 如果桶中只有一个节点</span>
                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment">// 直接放入新表</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment">// 如果桶中是树节点</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拆分树节点</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果桶中是链表节点</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 低位链表的头和尾</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 高位链表的头和尾</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
                    <span class="token keyword">do</span> <span class="token punctuation">{</span>
                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 低位链表</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 高位链表</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span> <span class="token comment">// 放入低位链表</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span> <span class="token comment">// 放入高位链表</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span> <span class="token comment">// 返回新的哈希表</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h2 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h2><p>JDK1.7中，ConcurrentHashMap是由多个Segment组合，而每一个Segment都是一个类似于HashMap的结构，可以内部进行扩容，但是Segment的个数一旦初始化就不能改变了。默认支持16个，也就是默认支持16个线程并发<img src="/2024/09/28/24/jdk1.7concurrent.png">Segment 通过继承 ReentrantLock 来进行加锁</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>无参构造中调用了有参构造，传入三个默认值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 默认初始化容量
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 默认负载因子
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 默认并发级别
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CONCURRENCY_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化逻辑</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span><span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数校验</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>loadFactor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> concurrencyLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验并发级别大小，大于 1&lt;&lt;16，重置为 65536</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrencyLevel <span class="token operator">&gt;</span> <span class="token constant">MAX_SEGMENTS</span><span class="token punctuation">)</span>
        concurrencyLevel <span class="token operator">=</span> <span class="token constant">MAX_SEGMENTS</span><span class="token punctuation">;</span>
    <span class="token comment">// Find power-of-two sizes best matching arguments</span>
    <span class="token comment">// 2的多少次方</span>
    <span class="token keyword">int</span> sshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ssize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 这个循环可以找到 concurrencyLevel 之上最近的 2的次方值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ssize <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>sshift<span class="token punctuation">;</span>
        ssize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 记录段偏移量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentShift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> sshift<span class="token punctuation">;</span>
    <span class="token comment">// 记录段掩码</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentMask <span class="token operator">=</span> ssize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置容量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
        initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>
    <span class="token comment">// c = 容量 / ssize ，默认 16 / 16 = 1，这里是计算每个 Segment 中的类似于 HashMap 的容量</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> initialCapacity <span class="token operator">/</span> ssize<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> ssize <span class="token operator">&lt;</span> initialCapacity<span class="token punctuation">)</span>
        <span class="token operator">++</span>c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token constant">MIN_SEGMENT_TABLE_CAPACITY</span><span class="token punctuation">;</span>
    <span class="token comment">//Segment 中的类似于 HashMap 的容量至少是2或者2的倍数</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>
        cap <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// create segments and segments[0]</span>
    <span class="token comment">// 创建 Segment 数组，设置 segments[0]</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">[</span>ssize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> <span class="token constant">SBASE</span><span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ordered write of segments[0]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segments <span class="token operator">=</span> ss<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>校验并发等级大小，如果大于最大值，就重置为最大值</li>
<li>初始化容量为大于并发等级最近的2的幂次方，默认16</li>
<li>记录segmentShift偏移量，2^n 中的n，默认为32 - sshift = 28  </li>
<li>记录segmentMask，默认是ssize - 1 = 16 - 1 = 15</li>
<li>初始化<code>segment[0]</code>，默认大小为2，扩容阈值为 2 * 0.75 = 1.5。插入第二个值时才会进行扩容</li>
</ol>
<h3 id="put-1"><a href="#put-1" class="headerlink" title="put"></a>put</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Maps the specified key to the specified value in this table.
 * Neither the key nor the value can be null.
 *
 * &lt;p&gt; The value can be retrieved by calling the &lt;tt&gt;get&lt;/tt&gt; method
 * with a key that is equal to the original key.
 *
 * @param key key with which the specified value is to be associated
 * @param value value to be associated with the specified key
 * @return the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or
 *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;
 * @throws NullPointerException if the specified key or value is null
 */</span>
<span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// hash 值无符号右移 28位（初始化时获得），然后与 segmentMask=15 做与运算</span>
    <span class="token comment">// 其实也就是把高4位与segmentMask（1111）做与运算</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span>getObject          <span class="token comment">// nonvolatile; recheck</span>
         <span class="token punctuation">(</span>segments<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;&lt;</span> <span class="token constant">SSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SBASE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//  in ensureSegment</span>
        <span class="token comment">// 如果查找到的 Segment 为空，初始化</span>
        s <span class="token operator">=</span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Returns the segment for the given index, creating it and
 * recording in segment table (via CAS) if not already present.
 *
 * @param k the index
 * @return the segment
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segments<span class="token punctuation">;</span>
    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token constant">SSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SBASE</span><span class="token punctuation">;</span> <span class="token comment">// raw offset</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> seg<span class="token punctuation">;</span>
    <span class="token comment">// 判断 u 位置的 Segment 是否为null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> proto <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use segment 0 as prototype</span>
        <span class="token comment">// 获取0号 segment 里的 HashEntry&lt;K,V&gt; 初始化长度</span>
        <span class="token keyword">int</span> cap <span class="token operator">=</span> proto<span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// 获取0号 segment 里的 hash 表里的扩容负载因子，所有的 segment 的 loadFactor 是相同的</span>
        <span class="token keyword">float</span> lf <span class="token operator">=</span> proto<span class="token punctuation">.</span>loadFactor<span class="token punctuation">;</span>
        <span class="token comment">// 计算扩容阀值</span>
        <span class="token keyword">int</span> threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> lf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个 cap 容量的 HashEntry 数组</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// recheck</span>
            <span class="token comment">// 再次检查 u 位置的 Segment 是否为null，因为这时可能有其他线程进行了操作</span>
            <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 自旋检查 u 位置的 Segment 是否为null</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>
                   <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 使用CAS 赋值，只会成功一次</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> seg <span class="token operator">=</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> seg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>计算key的位置，获取指定位置的Segment</li>
<li>如果指定位置的Segment为空，则初始化这个Segment<ul>
<li>如果为null，使用<code>Segment[0]</code>的容量和负载因子创建一个HashEntry数组</li>
<li>再次检查是否为null</li>
<li>使用HashEntry初始化这个Segment</li>
<li>自旋计算得到的指定位置是否为null，使用CAS在这个位置赋值Segment</li>
</ul>
</li>
<li>Segment.put插入key，value<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 ReentrantLock 独占锁，获取不到，scanAndLockForPut 获取。</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">V</span> oldValue<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token comment">// 计算要put的数据位置</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>
        <span class="token comment">// CAS 获取 index 坐标的值</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token function">entryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 检查是否 key 已经存在，如果存在，则遍历链表寻找位置，找到后替换 value</span>
                <span class="token class-name">K</span> k<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// first 有值没说明 index 位置已经有值了，有冲突，链表头插法。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> c <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// 容量大于扩容阀值，小于最大容量，进行扩容</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> threshold <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
                    <span class="token function">rehash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token comment">// index 位置赋值 node，node 可能是一个元素，也可能是一个链表的表头</span>
                    <span class="token function">setEntryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                count <span class="token operator">=</span> c<span class="token punctuation">;</span>
                oldValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li><p><code>tryLock()</code> 获取锁，获取不到使用 <strong><code>scanAndLockForPut</code></strong> 方法继续获取。</p>
</li>
<li><p>计算 put 的数据要放入的 index 位置，然后获取这个位置上的 <code>HashEntry</code> 。</p>
</li>
<li><p>遍历 put 新元素，为什么要遍历？因为这里获取的 <code>HashEntry</code> 可能是一个空元素，也可能是链表已存在，所以要区别对待。</p>
<p>  如果这个位置上的 <strong><code>HashEntry</code> 不存在</strong>：</p>
<ol>
<li>如果当前容量大于扩容阀值，小于最大容量，<strong>进行扩容</strong>。</li>
<li>直接头插法插入。</li>
</ol>
<p>  如果这个位置上的 <strong><code>HashEntry</code> 存在</strong>：</p>
<ol>
<li>判断链表当前元素 key 和 hash 值是否和要 put 的 key 和 hash 值一致。一致则替换值</li>
<li>不一致，获取链表下一个节点，直到发现相同进行值替换，或者链表表里完毕没有相同的。<ol>
<li>如果当前容量大于扩容阀值，小于最大容量，<strong>进行扩容</strong>。</li>
<li>直接链表头插法插入。</li>
</ol>
</li>
</ol>
</li>
<li><p>如果要插入的位置之前已经存在，替换后返回旧值，否则返回 null.</p>
</li>
</ul>
<h3 id="resize-1"><a href="#resize-1" class="headerlink" title="resize"></a>resize</h3><p>扩容使用的是头插法</p>
<h2 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h2><p><img src="/2024/09/28/24/jdk1.8concurrent.png"><br>由原先的Segment数组 + HashEntry转化为Node数组 + 链表/红黑树</p>
<h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>  
    <span class="token keyword">implements</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span> <span class="token comment">// 哈希表数组，存储键值对</span>

<span class="token comment">/**
 * 下一个哈希表数组，仅在扩容时使用，不为空
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span>

<span class="token comment">/**
 * 基础计数器值，主要在没有竞争时使用，也作为表初始化竞争期间的回退。通过CAS更新
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> baseCount<span class="token punctuation">;</span>

<span class="token comment">/**
 * 表初始化和扩容控制。当为负数时，表示表正在初始化或扩容：-1表示初始化，否则为-(1 + 活动扩容线程数)。
 * 否则，当表为空时，保存创建时使用的初始表大小，默认为0。初始化后，保存下一个用于扩容的元素计数值
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span>

<span class="token comment">/**
 * 扩容时要拆分的下一个表索引（加一）
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> transferIndex<span class="token punctuation">;</span>

<span class="token comment">/**
 * 扩容和/或创建CounterCells时使用的自旋锁（通过CAS锁定）
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span>

<span class="token comment">/**
 * 计数单元表。当不为空时，大小为2的幂
 */</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">CounterCell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counterCells<span class="token punctuation">;</span>

<span class="token comment">// views</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">KeySetView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> keySet<span class="token punctuation">;</span> <span class="token comment">// 键集合视图</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ValuesView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span> <span class="token comment">// 值集合视图</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">EntrySetView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span> <span class="token comment">// 键值对集合视图</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>基本与HashMap中的相同，所以略过</p>
<h3 id="initTable"><a href="#initTable" class="headerlink" title="initTable"></a>initTable</h3><p>初始化</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// sizeCtl &lt; 0 说明其他线程CAS成功，正在初始化或</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token comment">// 让出cpu</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
           <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">try</span> <span class="token punctuation">{</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                       <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
                       <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                       table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                       sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                   sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>通过自旋 + CAS操作来完成初始化</li>
<li>sizeCtl 的值<ul>
<li>-1 ： 正在初始化</li>
<li><ul>
<li>N：正在扩容高16位位扩容的标识戳，低16位-1位正在扩容的线程数</li>
</ul>
</li>
<li>0 ：table初始化大小，如果table没有初始化</li>
<li><blockquote>
<p>0 ： 扩容阈值</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="put-2"><a href="#put-2" class="headerlink" title="put"></a>put</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">/** Implementation for put and putIfAbsent */</span>  
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 计算hash</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 计数器，检测链表长度，统计节点个数，控制循环</span>
    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	    <span class="token comment">// f是目标元素的位置, fh是后面存放目标位置元素的hash值</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  
		    <span class="token comment">// 数据桶为空，就先初始化</span>
            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 定位到这个位置之后发现桶中没有数据，就直接放入，不加锁，然后跳出即可</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  
                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin  </span>
        <span class="token punctuation">}</span>  
        <span class="token comment">// 检查当前桶中的第一个节点是否是一个 ForwardingNode。ForwardingNode 是在哈希表扩容时使用的一种特殊节点类型，用于指示该桶的内容已经被移动到新的哈希表中。 </span>
        <span class="token comment">// 如果是就需要helpTranfer</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>  
            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
            <span class="token comment">// 对节点f加锁</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	                <span class="token comment">// 发现是链表</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
                        <span class="token comment">// 循环加入新的节点，或者覆盖</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>  
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>  
                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>  
                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>  
                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>  
                                <span class="token keyword">break</span><span class="token punctuation">;</span>  
                            <span class="token punctuation">}</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>  
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>  
                                                          value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                                <span class="token keyword">break</span><span class="token punctuation">;</span>  
                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                            <span class="token comment">//发现是红黑树</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>  
                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>  
                                                       value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>  
                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>  
                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>  
                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  
                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>  
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>通过key计算hashcode</li>
<li>判断是否需要初始化</li>
<li>定位到Node，如果为空直接用CAS写入，失败就自旋保证成功</li>
<li>如果hashcode == MOVED == - 1需要进行扩容</li>
<li>如果都不满足就使用synchronized锁写入数据</li>
<li>如果数量大于TREEIFY_THRESHOLD调用treeifyBin进行转化<br><strong>值得一提的是synchronized在这里是锁住了这个一个桶，也是这一个Node，而不是一整个表</strong></li>
</ol>
<h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
    <span class="token comment">// key 所在的 hash 位置</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果指定位置元素存在，头结点hash值相同</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// key hash 值相等，key值相同，直接返回元素 value</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// 头结点hash值小于0，说明正在扩容或者是红黑树，find查找</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 是链表，遍历查找</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="常见八股"><a href="#常见八股" class="headerlink" title="常见八股"></a>常见八股</h1><h2 id="HashMap的底层实现是什么"><a href="#HashMap的底层实现是什么" class="headerlink" title="HashMap的底层实现是什么"></a>HashMap的底层实现是什么</h2><p>JDK1.8之前是数组 + 链表，数组是HashMap的主体，链表是用来解决哈希冲突。使用拉链法来解决。<br>JDK1.8之后变为数组+链表/红黑树，当链表长度大于等于阈值 <u>8</u> 时，会转化，如果当前数组长度小于64就学会先进行数组扩容，否则就转化为红黑树，默认大小为16，每次扩容2倍。</p>
<h2 id="拉链法到底是什么"><a href="#拉链法到底是什么" class="headerlink" title="拉链法到底是什么"></a>拉链法到底是什么</h2><p>拉链法就是使用一个链表数组，数组中的每一格都是一个链表，如果遇见哈希冲突，则将冲突的值加到链表中。<br>JDK1.8之后会先判断链表的长度是否大于阈值8，然后去根据数据来判断是否转化为红黑树。<br><img src="/2024/09/28/24/%E6%95%B0%E6%8D%AE+%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt="|450"></p>
<h2 id="为什么使用2作为底数"><a href="#为什么使用2作为底数" class="headerlink" title="为什么使用2作为底数"></a>为什么使用2作为底数</h2><ol>
<li>使用2作为底数可以使用位运算而不是取模去计算索引，比较方便，提高性能</li>
<li>同时容量是2的幂次时，哈希值的低位和高位都可以参与索引的计算，减少哈希冲突(capacity 是 2 的幂次，因此 capacity - 1 的二进制表示全是 1，这样 hash &amp; (capacity - 1) 就能高效地计算出索引。)</li>
<li>扩容更更简单，重新计算哈希只需要检查哈希值的一个额外位</li>
</ol>
<h2 id="讲解一下put的过程"><a href="#讲解一下put的过程" class="headerlink" title="讲解一下put的过程"></a>讲解一下put的过程</h2><ol>
<li>判断map是否为空，如果为空或者长度位0就及逆行初始化或者扩容</li>
<li>之后计算hash值，去匹配Node数组，如果定位到的数组没有位置为空，则直接插入到Node数组中</li>
<li>如果不为空，判断是否是树节点，如果是就调用putTreeVal，否则就去遍历这个数组所对应的链表，如果出现哈希值和key完全一致就覆盖数据，否则就遍历到最后使用尾插法，插入数据</li>
<li>插入或者覆盖数据之后判断是否需要扩容或者转化为树形结构</li>
</ol>
<h2 id="为什么JDK1-8使用尾插法而不是和JDK1-7一样使用头插法"><a href="#为什么JDK1-8使用尾插法而不是和JDK1-7一样使用头插法" class="headerlink" title="为什么JDK1.8使用尾插法而不是和JDK1.7一样使用头插法"></a>为什么JDK1.8使用尾插法而不是和JDK1.7一样使用头插法</h2><p>因为多线程的情况头插法有可能会出现环</p>
<h2 id="HashMap何时会扩容"><a href="#HashMap何时会扩容" class="headerlink" title="HashMap何时会扩容"></a>HashMap何时会扩容</h2><p>当链表的长度大于TREEIFY_THRESHOLD(默认为8)时会开始转化，同时要判断Node数组的个数是否大于MIN_TREEIFY_CAPACITY(默认64)，如果小于就会先进行扩容，而不是转化，如果大于就直接转化为红黑树</p>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Web学习</title>
    <url>/2023/06/17/01/</url>
    <content><![CDATA[<h1 id="新坑-到P83页了。。。"><a href="#新坑-到P83页了。。。" class="headerlink" title="新坑  到P83页了。。。"></a>新坑  到P83页了。。。</h1><h2 id="HTML5基本语法"><a href="#HTML5基本语法" class="headerlink" title="HTML5基本语法"></a>HTML5基本语法</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 一个横线
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span> 用于为input 元素进行标注 其 for 属性应与要绑定的元素的id相同，form属性用于规定其属于哪个或者多个表单
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档声明，目的是让浏览器知道这是什么类型的文件--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档的开始，没有什么实际含义--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--头标记，放在html 内来防止这个文件中的信息，比如提供索引信息或者定义CSS样式等--&gt;</span>
         <span class="token comment">&lt;!--标题标记，网页的标题，也就是上方的标~ 题，不是内容的标题--&gt;</span>            
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> 
           
        我的测试文件
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档正文的开始--&gt;</span> <span class="token comment">&lt;!--文本属性中可以加入text 来表示文本的颜色，bgcolor来表示背景的颜色--&gt;</span>
        <span class="token comment">&lt;!-- &lt;body text="red" bgcolor="blue"&gt;--&gt;</span>
        <span class="token comment">&lt;!--hn 各种大小标题--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--设置字体颜色--&gt;</span>
                蓝色的一级标题
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>
            
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--段落标记--&gt;</span>
            这是我的第一个测试文件
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--文字样式标记--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--加粗--&gt;</span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--斜体--&gt;</span>
            这是加粗斜体字
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--删除线--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">&gt;</span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--下划线--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--放大缩小，加强强调，强调，现实电子邮件或者地址，写代码--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>放大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>缩小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--加强强调--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>加强强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>2354796263@qq.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>
            #include &lt;bits/stdc++.h&gt;
            using namespace std;
            int main(){
                cout &lt;&lt; "Hello World!"&lt;&lt; endl;
                return 0;
            }
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--文字上浮和下浮--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--文字样式标记--&gt;</span>

        <span class="token comment">&lt;!--文本的位置--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">face</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 实现居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--font 还可以设置字体和大小，属性是 face 和 size--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span>  <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>实现右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--照片的操作--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source/image/Elysia.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片丢失时显示<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>鼠标放在上面可以看到<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>导航菜单</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">使用
&lt;ul&gt; + &lt;li&gt; + &lt;a&gt; 即可，之后在css中进行设置样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>设置表格:</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>表格 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> 定义一行 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span><span class="token punctuation">&gt;</span></span> 定义一列 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 定义一个单元格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span> 表格的大标题 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 表头，主要用于行或列的名称，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 相似
实例:
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>#eeeeee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>成绩表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--开始定义表头--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>114<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>514<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
    使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 中的rowspan 和 colspan 来合并单元格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>设置表单</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span> 两个标签
实例：
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    type = "text"
    name 设定文本框的名称，在交互程序中可以用到
    size 数值，设定此一栏位要显示的宽度
    value 预设内容
    maxlength 设置文本可输入的最大最大文字长度 
    type 属性内容:
    type = "radio“ 单选
    可选属性：
    checked 设置某个选项为默认选
    name  name属性内容相同的两个选项只能选中一个
    type = "checkbox" 多选
    可选
    checked
    name 需要将一组选中中的所有复选按钮设置为相同的名称才能让服务器处理时知道这几个选项是一个组的
    type = "password" 密码框
    属性与文本类型相同
    type = "submit" 提交按钮
    type = "reset"  重置按钮
    type = "image"  提交图片
    type = "textarea" 多行文本框
	可选：
    cols 定义文本框的宽度，字符的列数
    rows 字符行数
    wrap 定义换行方式 主要有 off 文字不自动换行， virtual 输入文字时会自动换行，但是如果没有自己按下回车键换行，提交到服务器时结果就时没有换行
    physical 自动换行，提交到服务器结果也是换行
    列表框：
    在form中使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 标签
    在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 中使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>来设置选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>

## class 的用法：

- 一个对象可以包含多个class(方便了在CSS中定义)

  ```css
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
          <span class="token selector">.Ely</span><span class="token punctuation">{</span>
              <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token selector">.red</span><span class="token punctuation">{</span>
              <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ely red<span class="token punctuation">"</span></span> <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Elysia  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol>
<li><p>基本规则:</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">张飞{
    身高：
    体重：
    性别
    民族
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>选择器</p>
<blockquote>
<p>对网页中指定的对象进设置</p>
</blockquote>
<ul>
<li><p>标记选择器：所有同名的标签都会被选择</p>
<p>使用html 的标记标签进行选择，例如：<code>&lt;p&gt;</code></p>
<p>基本语法：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;
h1</span> <span class="token punctuation">{</span>     标签选择
    声明
    <span class="token property">color</span> <span class="token punctuation">:</span>red <span class="token punctuation">;</span>  属性 + 值
    <span class="token property">font_size</span> <span class="token punctuation">:</span>25px<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>类别选择器：实现只修改指定的标签class</p>
<p>基本语法：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span> . + 类别名<span class="token punctuation">(</span>自定义的名字<span class="token punctuation">)</span>
 	声明   
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>ID选择器，**<u>id在HTML中具有唯一性，不可重复，尽量做到一个标签一个id</u>**</p>
<p><strong><u>ヽ（≧□≦）ノ</u></strong></p>
</li>
</ul>
</li>
<li><p>HTML中使用方法：</p>
<ul>
<li><p>行内央视，直接使用 <code>&lt;style&gt;</code>属性 <strong><u>注意，每一个声明之后要加入分号</u></strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p style=<span class="token string">"color : purple; font-size :larger"</span> align = <span class="token string">"center"</span>&gt;Elysia    &lt;/p&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>内嵌式一般放在 <code>&lt;head&gt;</code> 标签之间</p>
</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;head&gt;
    &lt;style type="text/css"&gt;
        .Ely</span><span class="token punctuation">{</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.red</span><span class="token punctuation">{</span>
            <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    &lt;/style&gt;
&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>链接式，将CSS与HTML文件分离 在html中使用 <code>&lt;link&gt;</code> 标签进行 导入</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"文件地址"</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>导入式 使用@import 在html初始化时就会进行导入，而使用链接式只有在需要格式时才进行导入</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*需要放在style 标签中*/</span>
&lt;style&gt;
        <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"1.css"</span><span class="token punctuation">;</span></span>
    &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>Tips:CSS中遵循覆盖规则，对于同一个被选择的对象，后面的定义会覆盖前面的定义，所以可以使用标签进行全局定义，在使用class 来对指定的对象进行微调</p>
</li>
<li><p>Tips2:优先级</p>
<p>最后面导入的样式    &gt;   最后面的连接式 ， 链接式与  <code>&lt;style&gt;</code> 遵循先后顺序， 同一个 <code>&lt;style&gt;</code> 中内嵌式   &gt;    导入式</p>
</li>
<li><p>CSS3新特性：</p>
<p>交集选择器：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">Ely</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span>purple<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p.Ely</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>并集选择器：使用  ， 进行隔开即可</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p,.Ely,h5</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>全局选择器：*  使得所有HTML标签都遵循这个规则</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>后代选择器，空格隔开即可</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li ul</span> <span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">li ul ul</span> <span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">li ul ul ul</span> <span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>只对直接后代有用的选择器： p &gt;   可搭配*使用</p>
</li>
<li><p>ID 选择器：#+id</p>
</li>
<li><p>相邻选择器：A+B 直接兄弟，紧跟着的后面那个</p>
</li>
<li><p>相邻兄弟组选择器：A~B 后面的所有兄弟</p>
</li>
<li><p>属性选择器： 使用中括号进行选择，属性是自定义的</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p ely = <span class="token string">"123"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;  <span class="token comment">/*这里ely是自定义的属性，它的值是123*/</span>




<span class="token selector">p[ely]</span><span class="token punctuation">{</span> <span class="token comment">/*使用这个进行选择，即可*/</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*也可以使用属性+属性的值来进行选择*/</span>
<span class="token comment">/*需要属性的值必须是给定的这个值*/</span>
<span class="token selector">p[ely = "123"]</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*属性包含选择器，只需要属性的值包含给定的值的即可*/</span>
<span class="token selector">p[ely *= "1"]</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


&lt;p ely = <span class="token string">"123 4 5 6"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;
<span class="token comment">/*单词包含选择器 ， 只要包含给定单词即可*/</span>
<span class="token selector">p[ely ~= "123"]</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*以某个单词或者字母开开头的选择器*/</span>
<span class="token selector">p[ely ^= "1"]</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*以什么结尾的选择器，只要以某个单词结尾或则和某个字母结尾即可，数字也行*/</span>
<span class="token selector">p[ely $= "6"]</span><span class="token punctuation">{</span>
    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong><u>结构伪类选择器</u></strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*
基本语法： E是父元素
E : nth - child 第几个元素
E : root 		根元素，HTML中根元素始终为html
还有很多。。。自己去看吧 
给个链接：https://juejin.cn/post/7001869576069873695
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong><u>伪元素选择器  <del>待补</del></u></strong></p>
</li>
</ol>
<h3 id="CSS继承和层叠特性"><a href="#CSS继承和层叠特性" class="headerlink" title="CSS继承和层叠特性"></a>CSS继承和层叠特性</h3><p>子标记会继承夫标记的所有样式风格，但是子标记的改变不会影响父标记</p>
<p>层叠是出现冲突时的处理方式，越特殊的样式，优先级越高，</p>
<p>层叠优先级：行内样式&gt; ID 样式 &gt; 类别样式 &gt;  标记样式</p>
<h2 id="CSS设置文本样式"><a href="#CSS设置文本样式" class="headerlink" title="CSS设置文本样式"></a>CSS设置文本样式</h2><h3 id="单位："><a href="#单位：" class="headerlink" title="单位："></a>单位：</h3><ol>
<li><p>相对类型：</p>
<p>px : 像素，根据设备类分辨率来进行调整，最常用的</p>
<p>em: 设置以目前字符的高度为单位</p>
<p>rem: root em 设置以网页跟元素HTML 字符的高度为单位， 一般浏览器莫默认单位为 <u><strong>1rem = 16px</strong></u></p>
<p>vw 和 vh 基于视图窗口的相对单， 1vw 等于视口宽度的1% 1vh 等于窗口高度的的1%</p>
</li>
<li><p>绝对类型</p>
<p>in 英尺</p>
<p>cm 厘米</p>
<p>mm </p>
<p>pt 点数</p>
<p>pc 印刷单位 1pc = 12pt</p>
</li>
</ol>
<h3 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h3><p>HTML中统一使用RGB模式，基本设置 rgb(red, green , blue , 透明度 )</p>
<h3 id="基本设置："><a href="#基本设置：" class="headerlink" title="基本设置："></a>基本设置：</h3><blockquote>
<p>font-family : 设置字体</p>
<p>font-style : 设置斜体</p>
<p>font-weight: 设置加粗，参数有 normal, bold(加粗) , bolder(更粗),lighter(更细), 100- 900 按每100为为一个阶段，数字越大，字体越粗</p>
<p>font-transform： 大小写转换</p>
<p>font-size:字体大小</p>
<p>text-decoration:文字的修饰，主要有underline 下划线，line-through 删除线,overline为文字加顶线，blink 文字闪烁(部分浏览器支持)</p>
<p>texr-indent：首行缩进，后面跟缩进的长度，一般使用2em来实现缩进两个字</p>
<p>letter-spacing： 控制字母间距</p>
<p>word-sacing:控制单词间距</p>
<p>line-height: 行高</p>
<p>border :添加边框，可以设置粗细，颜色和虚实</p>
<p>margin 外边框 后面两个参数分别是设置上下距离和左右距离</p>
<p>text-align : 设置文本的水平位置，left,right,center, justify(两端对齐)</p>
<p>background: 设置背景色</p>
<p>text-shadow: 给图片添加阴影效果，后面四个参数是x轴的偏移尺寸，y轴的便宜尺寸，阴影半径，阴影颜色</p>
</blockquote>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ul>
<li>rgba () 第四个参数是透明度</li>
</ul>
<h2 id="CSS设置图片属性"><a href="#CSS设置图片属性" class="headerlink" title="CSS设置图片属性"></a>CSS设置图片属性</h2><blockquote>
<p>border-width 设置边框的粗细</p>
<p>border-color  设置边框的颜色</p>
<p>border-style  线性，可以在一些预先定义好的线型中选择</p>
<p>也可以</p>
<p>border-上下左右-属性   来单独设置上下左右的边框</p>
<p>甚至可以直接border ： 后面写大小类型和颜色</p>
<p>例如： border : plum 2px dotted;</p>
<p>实现文字环绕：</p>
<p>float : 将图片移动到页面左侧或者右侧从而使得文字能够从另一端来环绕</p>
</blockquote>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>DOM ：document object model 文档对象模型 ^eb3dd6</p>
<p>padding -border-margin 模型  (顺序是上右下左) </p>
<ul>
<li><strong>Margin(外边距)</strong>&nbsp;- 清除边框外的区域，外边距是透明的。</li>
<li><strong>Border(边框)</strong>&nbsp;- 围绕在内边距和内容外的边框。</li>
<li><strong>Padding(内边距)</strong>&nbsp;- 清除内容周围的区域，内边距是透明的。</li>
<li><strong>Content(内容)</strong>&nbsp;- 盒子的内容，显示文本和图像。</li>
</ul>
<p>一个盒模型包括：content(内容) 、padding(内边距) 、border(内容的边框), margin (外边距)</p>
<p>标准文档流：normal  document stream  </p>
<blockquote>
<p>div  区块容器标记，里面可以容纳各种HTML元素，可以将div看作一个对象</p>
<p>span 也是区块标记</p>
<p>二者区别： div 内的元素可以自动换行，</p>
<p>span 不会换行，没结构上的意义，仅仅是一个行内元素，当其他行内元素不适合的时候就可以使用span了</p>
<p>span 可以包含在div中，但是div不能包含在span 中，使用display来让行内元素表现的像块级元素</p>
<p>相邻的两个行内元素的margin 是第一个的right-margin 第二个的left-margin 之和</p>
</blockquote>
<h3 id="边距控制"><a href="#边距控制" class="headerlink" title="边距控制"></a>边距控制</h3><ul>
<li>border-bottom</li>
</ul>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote>
<p>background-image : url() 插入图片，</p>
<p>一般情况下，图片会自动向水平和数值两个方向平铺，可以使·用以下属性来进行控制</p>
<p>background-repeat : </p>
<p>repeat 默认，沿水平和竖直方向平铺</p>
<p>no-repeat 不平铺，只显示一次</p>
<p>repeat-x 沿水平平铺</p>
<p>repeat-y 沿竖直方向平铺</p>
<p>background-position 设置背景的位置</p>
<p>也是可以合并为一行的: 直接background + 属性即可</p>
<p>background-radius： 来设置盒模型的四个角是否圆滑 ， 后面的四个参数是从左上角开始，顺时针旋转的</p>
<p>box-shadow 给盒模型设置阴影， 后面四个参数分别是水平偏移量，垂直偏移量，模糊，阴影扩展尺寸，阴影颜色，外部阴影或者是内部阴影</p>
</blockquote>
<h2 id="background-函数"><a href="#background-函数" class="headerlink" title="background 函数"></a>background 函数</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span>指定渐变方向<span class="token punctuation">,</span>color-stop1<span class="token punctuation">,</span>...<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>链接：</p>
<h2 id="想要打开一个新的窗口，需要在a标签中使用target-属性，并将其设置为-bank-对鼠标的操作进行反应的元素-任何html元素都能做到-常规选择器-link-常规状态-visited-点击过之后-hover-悬停状态-active-点击时-使用CSS对超链接进行修饰-text-decoration-包括color-line-style-thickness"><a href="#想要打开一个新的窗口，需要在a标签中使用target-属性，并将其设置为-bank-对鼠标的操作进行反应的元素-任何html元素都能做到-常规选择器-link-常规状态-visited-点击过之后-hover-悬停状态-active-点击时-使用CSS对超链接进行修饰-text-decoration-包括color-line-style-thickness" class="headerlink" title="想要打开一个新的窗口，需要在a标签中使用target 属性，并将其设置为_bank### 对鼠标的操作进行反应的元素(任何html元素都能做到)常规选择器 + : +- link 常规状态- visited 点击过之后- hover 悬停状态- active 点击时### 使用CSS对超链接进行修饰- text-decoration 包括color,line,style,thickness"></a>想要打开一个新的窗口，需要在a标签中使用target 属性，并将其设置为_bank<br>### 对鼠标的操作进行反应的元素(任何html元素都能做到)<br>常规选择器 + : +<br>- link 常规状态<br>- visited 点击过之后<br>- hover 悬停状态<br>- active 点击时<br>### 使用CSS对超链接进行修饰<br>- text-decoration 包括color,line,style,thickness</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">{</span><span class="token comment">/*通用*/</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*以下是使用了CSS伪类型属性来进行修饰*/</span>
<span class="token comment">/*
设置顺寻时 LoVw HaTe 爱恨
link 
visited
hover
active
*/</span>
<span class="token selector">a:link</span><span class="token punctuation">{</span> <span class="token comment">/*普通浏览*/</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a:visited</span><span class="token punctuation">{</span><span class="token comment">/*点击过之后*/</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a:hover</span><span class="token punctuation">{</span>  <span class="token comment">/*鼠标指针经过时*/</span>
   <span class="token property">color</span><span class="token punctuation">:</span> plum<span class="token punctuation">;</span>
   <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a:active</span><span class="token punctuation">{</span><span class="token comment">/*点击时*/</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a><br>修饰鼠标指针</p>
<blockquote>
<p>cursor :属性即可</p>
</blockquote>
<p>修饰列表</p>
<blockquote>
<p>list-style-type：</p>
<p>属性有：</p>
<p>disc 实心圆、</p>
<p>circle 空心圆</p>
<p>square :正方形</p>
<p>decimal : 十进制数字</p>
<p>upper-alpha 大写字母</p>
<p>lower-alpha 小写字母</p>
<p>upper-roman 大写罗马数字</p>
<p>lower-roman 小写罗马数字</p>
<p>none 不显示任何符号</p>
</blockquote>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><pre class="line-numbers language-none"><code class="language-none">
~~比起c语法更像是Java~~

组成：

ECMAScript,DOM , BOM

1. ECMScript 语言
2. DOM 文档对象模型，使用节点来web
3. BOM 浏览器对象模型

### 语法：

区分大小写，变量无类型，只需要使用let进行声明即可，可初始化为任意类型的值
### 数据类型
```js
number 数字包括，整数小数,NaN Not a Number
string
boolean
null 对象未空
undefined 当声明的变量未初始化时该变量的默认值
使用typeof 来获取数据的类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注释与C相同</p>
<p><strong>HTML中的调取方式：</strong></p>
<p>1.使用 script 标签直接调用</p>
<p>2.通过 script 中src属性进行调用外部文件</p>
<p><strong>var和let的区别</strong></p>
<blockquote>
<p><strong>var 声明是全局作用域或函数作用域，而 let 和 const 是块作用域</strong>。 var 变量可以在其范围内更新和重新声明； let 变量可以被更新但不能重新声明； const 变量既不能更新也不能重新声明。 它们都被提升到其作用域的顶端</p>
</blockquote>
<p><strong><u>判断</u></strong></p>
<p>JavaScript中 == 在比较两侧对象时，如果不同吗，会将其转化为同一个类型再比较，而 === 严格等于不会强制类型转换</p>
<p>!=  不等于    !== 不严格等于</p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><blockquote>
<p>是JavaScript的一个库，简化 了js的操作</p>
</blockquote>
<p>包含功能:</p>
<ul>
<li>HTML 元素选取</li>
<li>HTML 元素操作</li>
<li>CSS 操作</li>
<li>HTML 事件函数</li>
<li>JavaScript 特效和动画</li>
<li>HTML DOM 遍历和修改</li>
<li>AJAX</li>
<li>Utilities<br>使用方式: 查询使用版本，F12打开控制台之后从console中输入$.fn.jquery 即可查询<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src = "本地的jQuery文件或者CDN的url即可"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>基础语法: 通过选取HTML元素对选取的元素执行操作 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
selector 选择符 查询和查找<span class="token constant">HTML</span>元素
<span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 执行对元素的操作
<span class="token comment">//示例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 隐藏当前元素
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  隐藏所有<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>元素
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p.test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"test"</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token string">"test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
防止在文档未完全加在就绪之前就运行jQuery代码，可以使用以下两种方式之一来解决<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// 开始写 jQuery 代码... </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
或者
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
<span class="token comment">// 开始写 jQuery 代码... </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
选择器:</li>
<li><ul>
<li>所有元素</li>
</ul>
</li>
<li>this</li>
<li>.class </li>
<li>“#id”</li>
<li>xxx:first 第几个xxx元素</li>
<li>后代用空格隔开</li>
<li>“[herf]” 选取带有herf 属性的元素</li>
<li>“A[B=’C’]” 或者 “A[B!=’C’]” 选取所有B属性值为C或者不为C的A的元素</li>
<li>:button 选取所有type = button的元素<br>常用的事件方法：</li>
<li>click()点击</li>
<li>dbclick()双击</li>
<li>mouseenter鼠标穿过元素时会发生</li>
<li>mouseleave鼠标离开元素</li>
<li>mousedown 鼠标移动到元素上并进行按下</li>
<li>mouseup 松开鼠标按键</li>
<li>hover悬停</li>
<li>focus 获得焦点</li>
<li>blur 失去焦点<br>效果:</li>
<li>hide，隐藏，show显示</li>
<li>toggle 在hide和show之间进行切换</li>
<li>fadeIn淡入，fadeOut 淡出, fade Toggle()切换淡入淡出</li>
<li>fade To() 允许渐变给不透明度</li>
<li>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</li>
<li>滑动 slideDown向下滑， slideUp向上滑, slideToggle()切换</li>
<li>动画操作: $(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</li>
<li>params定义动画CSS属性，可使用相对值, +xxx</li>
<li>使用队列:<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> div<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span><span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>停止动画: stop()</li>
<li>动画链: 连续点即可 $(“#p1”).css(“color”,”red”).slideUp(2000).slideDown(2000);</li>
</ul>
<h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><ul>
<li>text 设置或返回所选元素的文本内容</li>
<li>html 设置或返回所选元素的内容 包括html标签</li>
<li>val  设置或返回表单字段的值</li>
<li>attr 获得属性值</li>
<li>append 在被选中元素的结尾追加内容</li>
<li>prepend 在被选中元素的开头插入内容‘</li>
<li>after 在被选中元素之后加入内容</li>
<li>before 在被选中元素之前加入内容</li>
<li>remove 删除元素</li>
<li>empty 从被选中元素删除子元素</li>
</ul>
<h4 id="操作CSS类-要提前定义css样式才能添加"><a href="#操作CSS类-要提前定义css样式才能添加" class="headerlink" title="操作CSS类 (要提前定义css样式才能添加)"></a>操作CSS类 (要提前定义css样式才能添加)</h4><ul>
<li>addClass 向被选中元素添加一个或多个类</li>
<li>removeClass 从被选中元素删除一个或多个类</li>
<li>toggleClass 对被选中元素进行添加/删除的切换擦偶哦在</li>
<li>css 设置或返回样式属性 (可直接添加属性值)</li>
<li>$(“p”).css(“background-color”,”yellow”); </li>
<li>$(“p”).css({“background-color”:”yellow”,”font-size”:”200%”})<br>尺寸</li>
<li>width , height , (context大小)</li>
<li>innerWidth , innerHight ,(内边框,padding)</li>
<li>outerWidth , outerHight (margin)<br>遍历DOM树</li>
</ul>
<ol>
<li>向上遍历<ul>
<li>parent</li>
<li>parent 向上到根元素</li>
<li>parentsUntil 返回介于两个给定元素之间的祖先元素</li>
</ul>
</li>
<li>向下遍历<ul>
<li>children 直接子元素</li>
<li>find 查找到最后一个元素</li>
</ul>
</li>
<li>同级遍历<ul>
<li>siblings 所有同级元素</li>
<li>next 下一个同胞元素</li>
<li>nextAll 下一个所有同胞</li>
<li>nextUntil</li>
<li>jQuery prev(), prevAll() &amp; prevUntil()</li>
</ul>
</li>
<li>过滤<ul>
<li>first 被选元素的首个元素</li>
<li>last</li>
<li>eq返回都带有指定索引号的元素(索引从0开始)</li>
<li>filter 过滤条件</li>
<li>not</li>
</ul>
</li>
</ol>
<h3 id="jQuery-AJAX使用"><a href="#jQuery-AJAX使用" class="headerlink" title="jQuery AJAX使用"></a>jQuery AJAX使用</h3><ul>
<li>load 从服务器加在数据并把返回的数据放入备选元素中</li>
<li>$(selector).load(URL,data,callback)</li>
<li>get() post()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"demo_test.php"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">///////////////////////////////////////</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://www.runoob.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: \n"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<p>例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出为</span>
<span class="token boolean">true</span> 
<span class="token boolean">false</span>

 	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不进行类型转换</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进行类型转换</span>
<span class="token comment">//输出为:</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>for of 语句 (和foreach 一样)</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>for in  枚举对象的的属性</p>
<p>函数：两种写法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">.</span>

<span class="token comment">//或者</span>
<span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过使用argumens对象，可以 不用声明形参的名称</p>
<p>arguments[0] 即为第一个形参</p>
<p>arguments.length() 可以获得传入函数中的参量个数，从而用于判断。</p>
<p><strong><u>箭头函数(类似于Lambda表达式)</u></strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>类是具有相同属性和功能的“对象” 的抽象</strong></p>
<p><strong>对象是从类中创建的实例</strong></p>
<p>属性是对象中的变量</p>
<p>方法是类中的函数</p>
<p>引用类型：Boolean ， Number 和String 类比Java</p>
<p>对象：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">xxx</span> <span class="token operator">:</span> xxx  
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>赋值</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">size</span> <span class="token operator">:</span> <span class="token string">"large"</span><span class="token punctuation">,</span>
   <span class="token literal-property property">color</span> <span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>
   <span class="token function-variable function">eat</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃吃吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>size <span class="token punctuation">,</span> color<span class="token punctuation">}</span> <span class="token operator">=</span> myCar<span class="token punctuation">;</span> <span class="token comment">// 同名可用这种方式一键赋值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>   数组进行复制:</p>
   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">//补充，对象复制</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">"Bob"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   JavaScript中数组内容的类型可以不一致</p>
<p>   解构数组：</p>
<p>   array的函数</p>
<ul>
<li><p>push , pop</p>
</li>
<li><p>unshift() 从头部增加 shift() 从头部开始删除第一个元素，并返回</p>
</li>
<li><p>splice(start , deleteCount) 删除指定位置 第二个参数可选，并且代表要删除几个元素</p>
</li>
<li><p>sort</p>
</li>
<li><p>indexOf() 从头开始查找 lastIndexOf () 从尾开始查找，两个参数分别是要查找的内容和开始查找的位置</p>
</li>
<li><p>forEach() 为每一个元素执行一个函数</p>
</li>
<li><p>map() 返回一个由指定函数调用后得到的新数组</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> e <span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用map建立一个新数组</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">let</span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//filter用于过滤数组的某些数据</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出了map[a[]] = b[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>every 每个元素都当作参数，所有都满足才返回true</p>
</li>
<li><p>some 部分满足即可true</p>
</li>
<li><p>slice 截取一部分</p>
</li>
<li><p>joint(‘,’) 将数组转化为字符串并返回</p>
</li>
<li><p>展开运算符  数组[…] 即可展开</p>
</li>
</ul>
<p>   Map</p>
<ul>
<li>set(“key” ,”value”)</li>
<li>for (let [key , value] of map)</li>
<li>for (let key of map)   for (let value of map)</li>
<li>forEach(函数)</li>
<li>合并 自己看文档喽</li>
</ul>
<p>   Set</p>
<ul>
<li>add</li>
<li>并集，交集，差集 自己看</li>
</ul>
<h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ol>
<li><p>window对象，用于操作浏览器的窗口</p>
<p>常用的有  第三个参数与新窗口有关，自己去看</p>
<pre><code>- moveBy(x , y) 将窗口向又或者向下移动
- moveTo(x ,y) 移动到指定位置
- resizeBy (dw , dh) 缩放
- resizeTo (w ,h )  缩放到指定窗口大小
- alert() 输出
- prompt() 读入用户输入
- confirm() 显示确认和取消 确定 返回值是true
- setinterval() 按照指定周期来调用函数和表达式 参数未函数 + 毫秒数
- setTimeout() 在指定毫秒数后调用函数计算表达式
</code></pre>
</li>
<li><p>location 对象，用于分析和设置页面的URL，主要是window 和 document 对象的属性<br> 直接使用location . xxx 即可</p>
<p>有以下属性</p>
<pre><code>- hash 如果URL包含书签#，则返回#后边的内容
- host 服务器的名称
- &lt;u&gt;**herf**&lt;/u&gt; 当前载入的完整的URL 
- pathname URL 中主机后面的部分
- port 请求端口
- protocol 协议
- search 执行GET请求的URL中 ? 之后的部分
</code></pre>
<p>补充：URL</p>
<blockquote>
<p><strong>URL</strong> 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的 URL。</p>
</blockquote>
</li>
<li><p>navigator 对象， 进行客户端检测</p>
<pre><code>- appCodeName 浏览器代码名的字符串表示
- appName 官方浏览器名的字符串表示
- appVersion 浏览器版本信息表示
- javaEnabled() 是否启用了Java
- platform 运行浏览器的计算机平台字符串表示
- plugins 安装在浏览器中的插件组数
- userAgent 用户代理头字符串的字符串表示 最常用
</code></pre>
</li>
<li><p>screen 对象 也是 window对象的属性</p>
<pre><code>- availHeight 窗口可以使用的屏幕高度
- availWidth
- colorDepth 用户表示颜色位数
- height 屏幕高度
- width 
</code></pre>
</li>
<li><p>history 导航历史记录</p>
<pre><code>- go( ) 前进后退几页，也可以使用字符串，导航到包哦含这个字符串的第一个也米娜
- back()
- forward()
- length 历史记录中有多个条目，可以来判断当前是不是你的第一个页面
</code></pre>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>将标记语言的各个组成部分封装为对应的对象</p>
<blockquote>
<p>Document 整个文档对象<br>Element 元素对象<br>Text   文本对象<br>Comment 注释对象 </p>
</blockquote>
<p>js可以通过DOM对HTML进行操作和做出反应 ^6aefb6</p>
</li>
</ol>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol>
<li>[[Web学习#^6aefb6|Core DOM 所有文档类型的标准模型]] </li>
<li>XML DOM XML 文档的标准模型</li>
<li>HTML DOM HTML 文档的标准模型</li>
</ol>
<p>	</p>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>具体的标签对象的属性和函数去MDN里看看 </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过id值查找对象</span>
<span class="token keyword">var</span> h1 <span class="token operator">=</span> doucument<span class="token punctuation">.</span><span class="token function">getElementById1</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>
<span class="token comment">//以下函数无法查找特定的某一个对象，所以返回的一个对象数组</span>
<span class="token comment">//根据标签名查找对象</span>
<span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
<span class="token comment">//根据name来获取</span>
<span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span>
<span class="token comment">//根据class 来获取</span>
<span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>事件绑定</p>
<ol>
<li>通过HTML标签中的属性来绑定<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">value1</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">on</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">alert</span> <span class="token punctuation">(</span><span class="token string">'我被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>通过DOM元素来绑定<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>按钮2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
	document.getElementById('btn').onclick = function(){
		alert('我被点击了');	
	}
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>   JavaScript的一个第三方库</p>
<p>   react app 由组件组成，react组件是返回html标签的JavaScript函数</p>
<p>   react 的组件可以用作类似于html的标签，区别是React 组件必须以大写字母开头，HTML标签必须以小写字母开头</p>
<p>   JavaScript的component实际上就是JavaBean</p>
<p>   例如:</p>
   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">I</span>'m a button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   之后MyButton可作为标签使用</p>
   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome to my app<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>MyButton <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   <strong>hotloader</strong>是好东西</p>
<p>   <strong>React命名:</strong></p>
<blockquote>
<p>HTML中的类为 class ，而React中的class命名为className</p>
<p><code>&lt;h4 className="Profile-subTitle"&gt;About Me&lt;/h4&gt;</code></p>
<p>类名为：组件名(文件名) 扩折号 文件中的作用名，遵循驼峰</p>
</blockquote>
<p>   使用 import xxx from “xxx” 来在js文件中导入其他的component</p>
<p>   使用 import “xxx.css” 来从导入css文件</p>
<p>   使用 export default xxx 来导出这个组件，从而让其他文件能够调用这个组件</p>
<p>   具体可看示例 catbook-react </p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote>
<p>使用js对象标记法书写的文本</p>
</blockquote>
<p>格式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这个变量是一个字符串类型的，不是对象</span>
<span class="token keyword">var</span> 变量 <span class="token operator">=</span> <span class="token string">'{"key1" : value1 , "key2" : value2}'</span><span class="token punctuation">;</span><span class="token comment">//单引号来表名时变量类型</span>
<span class="token comment">//JSON 字符串和js对象转化</span>
<span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userStr<span class="token punctuation">)</span>
<span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>组成：URL + Methods + Request Headers + Request Body</p>
<blockquote>
<p>URL 文件定位，网址 (定位)<br>URI主要用于标识网络资源名称（比如网址）标识唯一的资源 (身份证)</p>
</blockquote>
<h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h3><ul>
<li>ip:计算机在网络中的唯一标识	</li>
<li>端口: 应用程序在计算机中的唯一表示</li>
<li>传输协议:<ul>
<li>tcp 安全协议，三次握手,四次挥手 <a href="https://ost.51cto.com/posts/17361">教程</a></li>
<li>udp 不安全协议</li>
</ul>
</li>
</ul>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul>
<li>请求行大写请求方式，URL,请求协议，版本号</li>
<li>请求头存放请求参数和值，键值对的方式， 参数名:参数值</li>
<li>请求空行一行来区分请求头和请求体</li>
<li>get方式没有请求体</li>
</ul>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul>
<li><code>GET</code> 方法请求一个指定资源的表示形式，使用 <code>GET</code> 的请求应该只被用于获取数据。</li>
<li><code>HEAD</code> 方法请求一个与 <code>GET</code> 请求的响应相同的响应，但没有响应体</li>
<li><code>POST</code> 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</li>
<li><code>PUT</code> 方法用有效载荷请求替换目标资源的所有当前表示。</li>
<li><code>DELETE</code> 方法删除指定的资源。</li>
<li><code>CONNECT</code> 方法建立一个到由目标资源标识的服务器的隧道。</li>
<li><code>OPTIONS</code> 方法用于描述目标资源的通信选项。</li>
<li><code>TRACE</code> 方法沿着到目标资源的路径执行一个消息环回测试。</li>
<li><code>PATCH</code> 方法用于对资源应用部分修改。</li>
</ul>
<hr>
<p><strong>响应部分</strong></p>
<ul>
<li>响应行 :  协议，版本号，状态码，状态描述信息</li>
<li>响应头 :  参数和值， 参数名 : 参数值 </li>
<li>响应体 : html 格式<br>状态码：</li>
</ul>
<p>1xx：信息</p>
<p>2xx：succeeded</p>
<p>3xx：redirect 重定向</p>
<p>4xx:  你请求出错</p>
<p>5xx：服务器出错</p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote>
<p><strong>应用程序接口</strong>（英语：<strong>a</strong>pplication <strong>p</strong>rogramming <strong>i</strong>nterface[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-%E5%88%98%E7%91%9E%E6%96%B02018-1">1]</a>），缩写为<strong>API</strong>[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-UnmehopaVemuri2006-2">2]</a>，是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97">计算</a><a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E8%B3%87%E8%A8%8A%E7%A7%91%E6%8A%80)">接口</a>，它定义多个<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B">中介</a>之间的<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%A4%E4%BA%92&amp;action=edit&amp;redlink=1">交互</a>，以及可以进行的<a href="https://zh.wikipedia.org/w/index.php?title=%E8%B0%83%E7%94%A8&amp;action=edit&amp;redlink=1">调用</a>（call）或<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AF%B7%E6%B1%82&amp;action=edit&amp;redlink=1">请求</a>（request）的种类，如何进行调用或发出请求，应使用的数据格式，应遵循的惯例等。它还可以提供<a href="https://zh.wikipedia.org/w/index.php?title=%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6&amp;action=edit&amp;redlink=1">扩展机制</a>，以便用户可以通过各种方式对现有功能进行不同程度的扩展[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-Fisher1-3">3]</a>。一个API可以是完全定制的，针对某个组件的，也可以是基于行业标准设计的以确保互操作性。通过<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">信息隐藏</a>，API实现了<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">模块化编程</a>，从而允许用户实现独立地使用接口。</p>
</blockquote>
<p>目的：</p>
<p><img src="/2023/06/17/01/1690524156434.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token comment">//加上这个之后变为请求处理类  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>  
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
<span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一些参数的实现<br><img src="/2023/06/17/01/%E5%8F%82%E6%95%B0.png"><br><img src="/2023/06/17/01/%E5%90%8C%E4%B8%80%E7%9A%84%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C.png"></p>
<h2 id="形式良好的-XML-文档"><a href="#形式良好的-XML-文档" class="headerlink" title="形式良好的 XML 文档"></a>形式良好的 XML 文档</h2><p>“形式良好”的 XML 文档拥有正确的语法。</p>
<p>在前面的章节描述的语法规则：</p>
<ul>
<li>XML 文档必须有一个根元素</li>
<li>XML元素都必须有一个关闭标签</li>
<li>XML 标签对大小写敏感</li>
<li>XML 元素必须被正确的嵌套</li>
<li>XML 属性值必须加引号<br>在 XML 中，有 5 个预定义的实体引用：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&amp;</td>
<td>&amp;</td>
<td>ampersand</td>
</tr>
<tr>
<td>&amp;apos;</td>
<td>‘</td>
<td>apostrophe</td>
</tr>
<tr>
<td>"</td>
<td>“</td>
<td>quotation mark</td>
</tr>
</tbody></table>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>是接口，使用时要自己实现</p>
<h4 id="web-xml中配置（可用注解实现了，暴怒需要这么写了）"><a href="#web-xml中配置（可用注解实现了，暴怒需要这么写了）" class="headerlink" title="web.xml中配置（可用注解实现了，暴怒需要这么写了）"></a>web.xml中配置（可用注解实现了，暴怒需要这么写了）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">	<span class="token comment">&lt;!-- Servlets --&gt;</span>
	<span class="token comment">&lt;!-- 配置类名和路径--&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.example.servelet_study.servlet.ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  
<span class="token comment">&lt;!-- 配置请求路径 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 配置servlet的init时间 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span> 数字 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span> 数字为正数时可以在服务器启动时被创建，为 负数时可以在第一次访问的时候进行加载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span> <span class="token string">"/..."</span><span class="token punctuation">,</span><span class="token string">"/..."</span><span class="token punctuation">,</span><span class="token string">"/..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在第一次创建<span class="token class-name">Servlet</span>时被调用
<span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在被访问时会被调用，会适当的调用doGet等方法
<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">getSercletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取配置文件
getServletInfo <span class="token punctuation">(</span><span class="token punctuation">)</span> 获取servlet版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">## 分层解耦
### 三层架构
1. controller : 控制层 ，接受前端发送的请求，对请求进行处理，并响应数据
2. service: 业务逻辑层，处理具体的业务逻辑
3. dao 数据访问层(Data Access Object ) (持久层),负责数据的访问操作，包括增删改查
### IOC &amp; DI
```java
@Component 将当前类交给IOC 容器 //加在需要被new的对象所在的层
@Autowired 运行时IOC 容器会提供该类型的bean并赋值给变量 依赖注入 //加在controller层

加上之后就不需要自己进行new对象了，直接建立对象变量即可
//其他注解
@Component 声明bean的基础注解
//以下在web中常用
@Controller 标注在控制器上
@Service 标注在业务类上
//DI注解
@Autowired 默认是按照类型进行的，如果存在多个相同的类型的bean就会出现报错
@Primary 想要哪个bean被注入就直接加在那个类前面
@Qualifier("value") 在使用的时候加上这个，value为bean的名字
@Resource (name = "") 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="HttpServletRequest中常用的方法"><a href="#HttpServletRequest中常用的方法" class="headerlink" title="HttpServletRequest中常用的方法"></a>HttpServletRequest中常用的方法</h3><ul>
<li>Map&nbsp;getParameterMap()<br>  获取包含所有请求参数及值的 Map 对象。需要注意，该 Map 的 value 为 String[]，即一个参数所对应的值为一个数组。说明一个参数可以对应多个值。</li>
<li>Enumeration&nbsp;getParameterNames()<br>  获取请求参数 Map 的所有 key,即获取所有请求参数名。</li>
<li>String[] getParameterValues(String name)<br>  根据指定的请求参数名称，获取其对应的所有值。这个方法一般用于获取复选框(checkbox)数据。</li>
<li>String getParameter(String name)<br>  根据指定的请求参数名称，获取其对应的值。若该参数名称对应的是多个值，则该方法获取到的是第一个值。这个方法是最常用的方法。</li>
</ul>
<p>获取客户端信息的方法：</p>
<ul>
<li>getRequestURL方法返回客户端发出请求时的完整URL。</li>
<li>getRequestURI方法返回请求行中的资源名部分。</li>
<li>getQueryString 方法返回请求行中的参数部分。</li>
<li>getRemoteAddr方法返回发出请求的客户机的IP地址</li>
<li>getRemoteHost方法返回发出请求的客户机的完整主机名</li>
<li>getRemotePort方法返回客户机所使用的网络端口号</li>
<li>getLocalAddr方法返回WEB服务器的IP地址。</li>
<li>getLocalName方法返回WEB服务器的主机名</li>
<li>getMethod得到客户机请求方式<pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 暂存req请求中的信息

equest<span class="token punctuation">.</span><span class="token function">getRequestDispacther</span><span class="token punctuation">(</span><span class="token string">"/test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> 转发


response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h3><blockquote>
<p>由于表单的post 提交方式，所以要编写好编码的过滤器来支持中文存取</p>
</blockquote>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>免除js中的 DOM操作简化书写</p>
<ol>
<li>新建html页面引入Vue.js文件</li>
<li>创建Vue核心对象，定义数据模型<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">el</span> <span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment">//Vue要控制哪个区， #+id 类似css的选择器</span>
	<span class="token literal-property property">data</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//数据模型</span>
		<span class="token literal-property property">message</span> <span class="token operator">:</span> <span class="token string">"hello Vue"</span>	
	<span class="token punctuation">}</span>
	<span class="token literal-property property">method</span> <span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token comment">//定义函数</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>编写视图<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> //绑定数据模型
	{{ message }} //直接获取数据模型中的数据进行展示
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
//
{{}} 插值表达式，中间可以填入 变量，三元运算符，函数调用，算数运算
v-model = "" 模型绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span>bind 为<span class="token constant">HTML</span> 标签绑定属性值，例如设置href <span class="token punctuation">,</span> css 样式
<span class="token literal-property property">或者直接</span> <span class="token operator">:</span> <span class="token operator">+</span> href <span class="token operator">...</span>
v<span class="token operator">-</span>model 在表单元素上实现双向数据绑定
v<span class="token operator">-</span>on 为<span class="token constant">HTML</span>绑定事务 v<span class="token operator">-</span>on<span class="token operator">:</span>click 可简写为@click
<span class="token comment">//</span>

<span class="token comment">//</span>
v<span class="token operator">-</span><span class="token keyword">if</span> 
v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 条件性的渲染某元素
v<span class="token operator">-</span><span class="token keyword">else</span>
v<span class="token operator">-</span>show 根据条件显示某元素，区别是切换的是display属性的值
v<span class="token operator">-</span><span class="token keyword">for</span> 列表渲染，遍历容器的元素或对象的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="生命周期及其对应的方法"><a href="#生命周期及其对应的方法" class="headerlink" title="生命周期及其对应的方法"></a>生命周期及其对应的方法</h3><h2 id="Ajax-异步的js和xml"><a href="#Ajax-异步的js和xml" class="headerlink" title="Ajax : 异步的js和xml"></a>Ajax : 异步的js和xml</h2><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>简化了Axios<br><code> npm install axios</code><br>在入口文件引入</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>  
<span class="token comment">//把axios全局导出  </span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>发送多个请求<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义两个异步函数</span>
<span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
<span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">//等待两个都执行完毕再返回结果</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>acct<span class="token punctuation">,</span> perm<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ... });</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用时只需要在axios中传入config即可</li>
<li>创建一个自定义的实例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span> 
	<span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> 
	<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'X-Custom-Header'</span><span class="token operator">:</span> <span class="token string">'foobar'</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><a href="https://axios-http.com/zh/docs/req_config">config配置详解</a></li>
<li>拦截器<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加请求拦截器</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在发送请求之前做些什么</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对请求错误做些什么</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加响应拦截器</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2xx 范围内的状态码都会触发该函数。</span>
    <span class="token comment">// 对响应数据做点什么</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 超出 2xx 范围的状态码都会触发该函数。</span>
    <span class="token comment">// 对响应错误做点什么</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><a href="https://axios-http.com/zh/docs/handling_errors">错误处理</a></li>
</ul>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p><strong>Nginx (engine x)</strong>&nbsp;是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。<br><strong>什么是反向代理？</strong></p>
<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。
nginx <span class="token parameter variable">-s</span> quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。
nginx <span class="token parameter variable">-s</span> reload     因改变了Nginx相关配置，需要重新加载配置而重载。
nginx <span class="token parameter variable">-s</span> reopen     重新打开日志文件。
nginx <span class="token parameter variable">-c</span> filename   为 Nginx 指定一个配置文件，来代替缺省的。
nginx <span class="token parameter variable">-t</span>            不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。
nginx <span class="token parameter variable">-v</span>            显示 nginx 的版本。
nginx <span class="token parameter variable">-V</span>            显示 nginx 的版本，编译器版本和配置参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动nginx服务，启动时会一闪而过是正常的</p>
<p>start nginx</p>
<p>查看任务进程是否存在，dos或打开任务管理器都行</p>
<p>tasklist /fi “imagename eq nginx.exe”</p>
<h2 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h2><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>用于项目管理构建和依赖管理，将依赖写入到maven配置文件中即可自动下载到项目中</p>
<ol>
<li><a href="https://m.imooc.com/wiki/mavenlesson-maveninstall">https://m.imooc.com/wiki/mavenlesson-maveninstall</a></li>
<li>构建项目<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.mic.tech <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>firstProject <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>maven-archetype-quickstart <span class="token parameter variable">-DinteractiveMode</span><span class="token operator">=</span>false
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<ul>
<li><strong>-DgourpId</strong>: 组织名，一般为公司网址的反写；</li>
<li><strong>-DartifactId</strong>: 项目名-模块名；</li>
<li><strong>-DarchetypeArtifactId</strong>: 用来指定 ArchetypeId，这里用到的是maven-archetype-quickstart，即创建一个简单 Java 应用；</li>
<li><strong>-DinteractiveMode</strong>: 是否使用交互模式。</li>
</ul>
<ol start="3">
<li>idea已经内置maven</li>
</ol>
<p>添加外部依赖</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">将外部文件导入到项目中，配置pom.xml
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 在这里添加你的依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ldapjdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 库名称，也可以自定义 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ldapjdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--库名称，也可以自定义--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--版本号--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--作用域--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${basedir}\src\lib\ldapjdk.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--项目根目录下
        的lib文件夹下--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>cookie存储在客户端，session 存储在服务器端</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;% 代码 %&gt;
&lt;%! int i = 0 ; %&gt; 变量声明
&lt;%= 表达式 %&gt;  表达式声明
&lt;%-- 注释 --%&gt; 注释，注释内容 不会被发送到浏览器
&lt;!-- html注释 --&gt; 可以通过查看源代码来进行查看
if --else 语法
&lt;% if (day == 1 || day == 7) { %&gt;
      &lt;p&gt;今天是周末&lt;/p&gt;
&lt;% } else { %&gt;
      &lt;p&gt;今天不是周末&lt;/p&gt;
&lt;% } %&gt;
switch 
&lt;% 
switch(day) {
case 0:
   out.println("星期天");
   break;
case 1:
   out.println("星期一");
   break;
case 2:
   out.println("星期二");
   break;
case 3:
   out.println("星期三");
   break;
case 4:
   out.println("星期四");
   break;
case 5:
   out.println("星期五");
   break;
default:
   out.println("星期六");
}
%&gt;
for循环
&lt;%for ( fontSize = 1; fontSize &lt;= 3; fontSize++){ %&gt;
   &lt;font color="green" size="&lt;%= fontSize %&gt;"&gt;
    菜鸟教程
   &lt;/font&gt;&lt;br /&gt;
&lt;%}%&gt;
while循环
&lt;%while ( fontSize &lt;= 3){ %&gt;
   &lt;font color="green" size="&lt;%= fontSize %&gt;"&gt;
    菜鸟教程
   &lt;/font&gt;&lt;br /&gt;
&lt;%fontSize++;%&gt;
&lt;%}%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSP行为"><a href="#JSP行为" class="headerlink" title="JSP行为"></a>JSP行为</h3><p>使用xml语法来控制servlet引擎，能够动态插入一个文件重用Javabean组件，切换页面</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp</span> <span class="token attr-name">:action_name</span> <span class="token attr-name">attribute</span> <span class="token attr-name">attribute</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
action_name :
include 在当前页面包含静态
useBean 寻找和初始化一个java组件
setProperty 设置JavaBean组件的值
getProperty 将JavaBean 组件的值插入到output中
forward 从一个jsp文件向另一个文件传递一个包含用户请求的request 对象
plugin 再生成的html页面中包含Applet和JavaBean对象
element 动态创建一个xml元素
attribute 定义动态创建的xml元素的属性
body 动态创建xml元素主体
text 用于封装数据
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ 指令 %&gt;  
主要指令有: 
page  定义网页依赖属性 脚本语言,error页面，缓存需求等
	page相关的属性
	buffer 指定out对象使用缓冲区大小
	autoFlush 控制out 对象的缓存区
	conteneType 指定当前JSP 页面发生异常时需要转向的错误处理页面
	error Page 指定当JSP页面发生异常时需要转向的错误处理页面
	isErrorPage 指定当前页面是否可以作为另一个JSP页面的错误处理页面
	extends servlet 从哪个类继承
	import 导入要使用的java 类
	info 定义jsp页面的表述信息
	isThreadSafe 指定对JSP页面的访问是否为线程安全
	language 定义JSP页面所用的脚本语言，默认是Java
	session 指定JSP页面是否使用session
	isELIgnored 指定是否执行EL表达式
	isScriptingEnabled 确定脚本元素能否被使用
	
include 包含其他文件
	&lt;%@ include file = "文件的相对url" %&gt;
taglib  引入标签库的定义，可以自定义标签
	&lt;% tagelib uri = "uri" prefix = "refix0Tag" %&gt;
	uri 标签库的位置   prefix 指定标签库的前缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSP动作元素"><a href="#JSP动作元素" class="headerlink" title="JSP动作元素"></a>JSP动作元素</h3><p>JSP动作元素在请求阶段处理阶段起作用，且使用的时xml语法</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">语法：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span></span> <span class="token attr-name">action_name</span> <span class="token attr-name">attribute</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
include 在页面被请求的时候引入一个文件
	page = "url" flush = "true or false" 定义在包含资源前是否刷新缓存区
useBean 寻找或者实例化一个JavaBean
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>useBean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>package.class<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
	class指定Bean的完整包名。
	type 指定将引用该对象变量的类型。
	beanName 通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。
setProperty 设置JavaBean的属性
	将其放在useBean中只会在找到一个Bean示例才会进行执行
	放在外部则不论是否找到bean都会执行
	属性: name 表示要设置属性的是哪个bean
	property 无论要设置哪个属性都有一个特殊用法
	value 指定bean属性的值
	param 指定用哪个参数作为Bean属性的值
getProperty 输出某个JavaBean的属性
	提取对应的Bean属性的值，转化为字符串然后输出
	name 药检所的bean属性名称
	property 表示要提取属性的值
forward 把请求转到一个新的界面
plugin 根据浏览器类型为Java插件生成obeject 活embed 标记
element 定义动态xml元素
attribute 设置动态定义的xml属性
body 动态定义的xml内容
text 在jsp页面和文档中使用写入文本的模板<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSP隐式对象，可以直接使用而不显示声明"><a href="#JSP隐式对象，可以直接使用而不显示声明" class="headerlink" title="JSP隐式对象，可以直接使用而不显示声明"></a>JSP隐式对象，可以直接使用而不显示声明</h3><ol>
<li>request 对象 ^8a3722</li>
<li>response对象</li>
<li>out</li>
<li>session 用来追踪在各个客户端请求间的会话</li>
<li>application 代表这这个JSP页面</li>
<li>config </li>
<li>pageContext 代表整个jsp页面，存储了request和response的引用，application 对象，config , session .  out可以访问这个对象来导出</li>
<li>page == this</li>
<li>exception</li>
</ol>
<h4 id="request-同servlet中的request"><a href="#request-同servlet中的request" class="headerlink" title="request(同servlet中的request)"></a>request(同servlet中的request)</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><strong>Cookie[] getCookies()</strong><br><br>返回客户端所有的Cookie的数组</td>
</tr>
<tr>
<td>2</td>
<td><strong>Enumeration getAttributeNames()</strong><br><br>返回request对象的所有属性名称的集合</td>
</tr>
<tr>
<td>3</td>
<td><strong>Enumeration getHeaderNames()</strong><br><br>返回所有HTTP头的名称集合</td>
</tr>
<tr>
<td>4</td>
<td><strong>Enumeration getParameterNames()</strong><br><br>返回请求中所有参数的集合</td>
</tr>
<tr>
<td>5</td>
<td><strong>HttpSession getSession()</strong><br><br>返回request对应的session对象，如果没有，则创建一个</td>
</tr>
<tr>
<td>6</td>
<td><strong>HttpSession getSession(boolean create)</strong><br><br>返回request对应的session对象，如果没有并且参数create为true，则返回一个新的session对象</td>
</tr>
<tr>
<td>7</td>
<td><strong>Locale getLocale()</strong><br><br>返回当前页的Locale对象，可以在response中设置</td>
</tr>
<tr>
<td>8</td>
<td><strong>Object getAttribute(String name)</strong><br><br>返回名称为name的属性值，如果不存在则返回null。</td>
</tr>
<tr>
<td>9</td>
<td><strong>ServletInputStream getInputStream()</strong><br><br>返回请求的输入流</td>
</tr>
<tr>
<td>10</td>
<td><strong>String getAuthType()</strong><br><br>返回认证方案的名称，用来保护servlet，比如 “BASIC” 或者 “SSL” 或 null 如果 JSP没设置保护措施</td>
</tr>
<tr>
<td>11</td>
<td><strong>String getCharacterEncoding()</strong><br><br>返回request的字符编码集名称</td>
</tr>
<tr>
<td>12</td>
<td><strong>String getContentType()</strong><br><br>返回request主体的MIME类型，若未知则返回null</td>
</tr>
<tr>
<td>13</td>
<td><strong>String getContextPath()</strong><br><br>返回request URI中指明的上下文路径</td>
</tr>
<tr>
<td>14</td>
<td><strong>String getHeader(String name)</strong><br><br>返回name指定的信息头</td>
</tr>
<tr>
<td>15</td>
<td><strong>String getMethod()</strong><br><br>返回此request中的HTTP方法，比如 GET,，POST，或PUT</td>
</tr>
<tr>
<td>16</td>
<td><strong>String getParameter(String name)</strong><br><br>返回此request中name指定的参数，若不存在则返回null</td>
</tr>
<tr>
<td>17</td>
<td><strong>String getPathInfo()</strong><br><br>返回任何额外的与此request URL相关的路径</td>
</tr>
<tr>
<td>18</td>
<td><strong>String getProtocol()</strong><br><br>返回此request所使用的协议名和版本</td>
</tr>
<tr>
<td>19</td>
<td><strong>String getQueryString()</strong><br><br>返回此 request URL包含的查询字符串</td>
</tr>
<tr>
<td>20</td>
<td><strong>String getRemoteAddr()</strong><br><br>返回客户端的IP地址</td>
</tr>
<tr>
<td>21</td>
<td><strong>String getRemoteHost()</strong><br><br>返回客户端的完整名称</td>
</tr>
<tr>
<td>22</td>
<td><strong>String getRemoteUser()</strong><br><br>返回客户端通过登录认证的用户，若用户未认证则返回null</td>
</tr>
<tr>
<td>23</td>
<td><strong>String getRequestURI()</strong><br><br>返回request的URI</td>
</tr>
<tr>
<td>24</td>
<td><strong>String getRequestedSessionId()</strong><br><br>返回request指定的session ID</td>
</tr>
<tr>
<td>25</td>
<td><strong>String getServletPath()</strong><br><br>返回所请求的servlet路径</td>
</tr>
<tr>
<td>26</td>
<td><strong>String[] getParameterValues(String name)</strong><br><br>返回指定名称的参数的所有值，若不存在则返回null</td>
</tr>
<tr>
<td>27</td>
<td><strong>boolean isSecure()</strong><br><br>返回request是否使用了加密通道，比如HTTPS</td>
</tr>
<tr>
<td>28</td>
<td><strong>int getContentLength()</strong><br><br>返回request主体所包含的字节数，若未知的返回-1</td>
</tr>
<tr>
<td>29</td>
<td><strong>int getIntHeader(String name)</strong><br><br>返回指定名称的request信息头的值</td>
</tr>
<tr>
<td>30</td>
<td><strong>int getServerPort()</strong><br><br>返回服务器端口号</td>
</tr>
</tbody></table>
<h3 id="Token是一种令牌，用来识别访问人员的"><a href="#Token是一种令牌，用来识别访问人员的" class="headerlink" title="Token是一种令牌，用来识别访问人员的"></a>Token是一种令牌，用来识别访问人员的</h3>]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty源码初探</title>
    <url>/2024/10/01/34/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人在尝试使用Netty来手写RPC时，学习到了很多Netty知识，在此进行一些记录</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下时服务端的简单启动示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1是指定一个线程用于处理连接，0表示不处理连接</span>
        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 里面的参数是线程数，这里是处理消息的线程数,false是指定线程工厂是否是守护线程</span>
        <span class="token class-name">DefaultEventExecutorGroup</span> serviceHandlerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span>
                <span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">getProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">newNamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"service-handler-group"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">/**
             * boss线程组用于处理连接工作，worker线程组用于数据处理
             * 依次的结构是 group -&gt; channel -&gt; childHandler -&gt; handler
             * group 用于处理连接，channel 用于处理数据，childHandler 用于处理连接的数据，handler 用于处理数据的
             * 所属关系:一个 group 可以有多个 channel，一个 channel 可以有多个 childHandler，一个 childHandler 可以有多个 handler
             * 一个 channel 只能有一个 childHandler，一个 childHandler 可以有多个 handler
             */</span>
            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">TRACE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                                    .addLast(new HttpServerCodec())</span>
<span class="token comment">//                                    .addLast(new HttpObjectAggregator(65536))</span>
<span class="token comment">//                                    .addLast(new ChunkedWriteHandler())</span>
                                    <span class="token comment">// 30之内没有收到客户端请求，就会触发IdleStateHandler的userEventTriggered方法</span>
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtocolEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtocolDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>serviceHandlerGroup<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                                    .addLast(new TestNettyHandler());</span>
                            <span class="token comment">// todo 接收消息，将消息先编码，然后解码成ZMessage格式，最后交由NettyHttpServerHandler处理</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server is now listening on port "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文就基于这一段代码来进行深入探究Netty是如何实现的</p>
<h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>我们进入NioEventLoopGroup的源码中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们沿着this不断往下查找，发现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">SelectorProvider</span> selectorProvider<span class="token punctuation">,</span> <span class="token class-name">SelectStrategyFactory</span> selectStrategyFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>selectorProvider<span class="token punctuation">,</span> selectStrategyFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandlers</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后进入super之后，发现nThreads这个参数影响的是这里</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_EVENT_LOOP_THREADS</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SystemPropertyUtil</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"io.netty.eventLoopThreads"</span><span class="token punctuation">,</span> <span class="token class-name">NettyRuntime</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token keyword">protected</span> <span class="token class-name">MultithreadEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">super</span><span class="token punctuation">(</span>nThreads <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">DEFAULT_EVENT_LOOP_THREADS</span> <span class="token operator">:</span> nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终发现：<br>一切的根源是<code>MultithreadEventExecutorGroup</code>这个类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">EventExecutorChooserFactory</span> chooserFactory<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化 terminatedChildren 和 terminationFuture</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>terminatedChildren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>terminationFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token punctuation">(</span><span class="token class-name">GlobalEventExecutor</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 检查 nThreads 是否为正数</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkPositive</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> <span class="token string">"nThreads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果 executor 为空，则使用默认的线程工厂创建一个新的 ThreadPerTaskExecutor</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newDefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始化 children 数组</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventExecutor</span><span class="token punctuation">[</span>nThreads<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建并初始化每个 EventExecutor</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> var18 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            var18 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建新的子 EventExecutor</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> executor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            var18 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var19<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果创建失败，抛出异常</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"failed to create a child event loop"</span><span class="token punctuation">,</span> var19<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>var18<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果创建失败，关闭已创建的 EventExecutor</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">EventExecutor</span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                e<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">2147483647L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> var20<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果创建失败，关闭已创建的 EventExecutor</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">EventExecutor</span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">2147483647L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> var22<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建 EventExecutorChooser</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>chooser <span class="token operator">=</span> chooserFactory<span class="token punctuation">.</span><span class="token function">newChooser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建并添加 terminationListener</span>
    <span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> terminationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>terminatedChildren<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 为每个 EventExecutor 添加 terminationListener</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventExecutor</span> e <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>terminationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建只读的 children 集合</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventExecutor</span><span class="token punctuation">&gt;</span></span> childrenSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>childrenSet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>readonlyChildren <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span>childrenSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们debug走进去，到这个地方<br><img src="/2024/10/01/34/Netty%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/1.png"><br>发现在这里使用了默认的线程工厂创建了一个ThreadPerTaskExecutor，接着往下走<br>发现从<code>this.children = new EventExecutor[nThreads];</code>这一行开始，在创建并初始化每一个Executor<br>接着往下看</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>chooser <span class="token operator">=</span> chooserFactory<span class="token punctuation">.</span><span class="token function">newChooser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里创建了一个 EventExecutorChooser对象用于在多个 EventExecutor 之间选择一个执行任务<br>之后往下看，可以发现，为每一个children数组中的对象添加了TerminationListener这个监听器<img src="/2024/10/01/34/addListener.png"><br>TerminationListener的作用是，监听每一个EventExecutor的终止事件，当所有的EventExecutor都终止之后，会将TerminationFuture设置为成功状态，表示整个MultithreadEventExecutorGroup 已经完全终止<br>TerminationListener是个匿名内部类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> terminationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>terminatedChildren<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法的最后，将所有的children中的EventExecutor转化为一个不可修改的集合，从而保证readonlyChildren集合中的元素不可修改，从而保证线程安全和数据的完整性<br>到这里第一部分的源码就分析完毕，接下来让我们关注到ServerBootstrap这个类</p>
<h2 id="ServerBootstrap"><a href="#ServerBootstrap" class="headerlink" title="ServerBootstrap"></a>ServerBootstrap</h2><p>先回顾一波示例代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>  
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">TRACE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                        <span class="token annotation punctuation">@Override</span>  
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token comment">//                                    .addLast(new HttpServerCodec())  </span>
<span class="token comment">//                                    .addLast(new HttpObjectAggregator(65536))  </span>
<span class="token comment">//                                    .addLast(new ChunkedWriteHandler())  </span>
                                    <span class="token comment">// 30之内没有收到客户端请求，就会触发IdleStateHandler的userEventTriggered方法  </span>
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtocolEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtocolDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>serviceHandlerGroup<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">//                                    .addLast(new TestNettyHandler());  </span>
                            <span class="token comment">// todo 接收消息，将消息先编码，然后解码成ZMessage格式，最后交由NettyHttpServerHandler处理  </span>
                        <span class="token punctuation">}</span>  
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><img src="/2024/10/01/34/group.png"><br>让我们点进去查看：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ServerBootstrap</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token class-name">EventLoopGroup</span> parentGroup<span class="token punctuation">,</span> <span class="token class-name">EventLoopGroup</span> childGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token comment">// 将parentGroup设置为父组</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>parentGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childGroup <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"childGroup set already"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>childGroup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EventLoopGroup</span><span class="token punctuation">)</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>childGroup<span class="token punctuation">,</span> <span class="token string">"childGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里我们可以发现几个有趣的地方：</p>
<ol>
<li>链式调用实际上就是在方法结束的时候返回this本身，这个指针</li>
<li>parentGroup需要去看父类<br>先让我们聚焦到ServerBootstrap这个类</li>
</ol>
<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerBootstrap</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBootstrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerBootstrap</span><span class="token punctuation">,</span> <span class="token class-name">ServerChannel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 用于记录日志的静态常量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> logger <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">ServerBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 存储子通道选项的 Map</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelOption</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> childOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 存储子通道属性的 Map</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> childAttrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ServerBootstrap 的配置对象</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerBootstrapConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrapConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 子事件循环组，使用 volatile 修饰以保证线程安全</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">EventLoopGroup</span> childGroup<span class="token punctuation">;</span>

    <span class="token comment">// 子通道处理器，使用 volatile 修饰以保证线程安全</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ChannelHandler</span> childHandler<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里我们就会发现，构造函数中的那些属性全都是在这里的<br>让我们继续溯源到AbstractBootstrap</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBootstrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBootstrap</span><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>

	<span class="token comment">// 空的 ChannelOption 数组常量</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelOption</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_OPTION_ARRAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 空的 AttributeKey 数组常量</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ATTRIBUTE_ARRAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 事件循环组，使用 volatile 修饰以保证线程安全</span>
<span class="token keyword">volatile</span> <span class="token class-name">EventLoopGroup</span> group<span class="token punctuation">;</span>

<span class="token comment">// 通道工厂，使用 volatile 修饰以保证线程安全</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ChannelFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> channelFactory<span class="token punctuation">;</span>

<span class="token comment">// 本地地址，使用 volatile 修饰以保证线程安全</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">;</span>

<span class="token comment">// 存储通道选项的 Map</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelOption</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 存储通道属性的 Map</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通道处理器，使用 volatile 修饰以保证线程安全</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">;</span>

<span class="token comment">// 扩展类加载器，使用 volatile 修饰以保证线程安全</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ClassLoader</span> extensionsClassLoader<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里有个很有意思的继承关系<br>这个定义是一个抽象类 <code>AbstractBootstrap</code>，它有两个泛型参数 <code>B</code> 和 <code>C</code>，并且实现了 <code>Cloneable</code> 接口。</p>
<ul>
<li><code>B extends AbstractBootstrap&lt;B, C&gt;</code>：表示泛型参数 <code>B</code> 必须是 <code>AbstractBootstrap</code> 类的子类，并且具有相同的泛型参数 <code>B</code> 和 <code>C</code>。这种定义方式通常用于实现流式 API，使方法可以返回当前对象的类型。</li>
<li><code>C extends Channel</code>：表示泛型参数 <code>C</code> 必须是 <code>Channel</code> 类的子类。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token class-name">EventLoopGroup</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"group set already"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
从这里可以看到<br><img src="/2024/10/01/34/supergroup.png"><br>这里设置的group实际上就是在给从<code>AbstractBoostrap</code>中集成到的group进行赋值，而childGroup则是<code>ServerBoostarap</code>自己的新增的属性赋值<br>接着关注到.handler进入之后可以看到将handler赋值给属性了，这段源码比较简单，就不贴出来了<br>接着关注childHandler<br><img src="/2024/10/01/34/childHandler.png"><br>在这里我们可以给连接后产生的SocketChannel配置一些东西，比如通过.addLast来添加连接处理器，handler是给Boss初0始化的，而childHandler则是给Worker进行初始化<br>最后<br>.option 和 .childOption 是 Netty 中 ServerBootstrap 类的方法，用于配置服务器通道和子通道的选项。<br>其中.option是<code>AbstractBoostrap</code>中的属性。<br>以上都不是很难的部分，真正核心的在下面👇</li>
</ul>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一段代码是将我们的ChannelFuture通过Boostrap启动类初始化之后，来绑定结果，ChannelFuture就是一个类似于Future的一个东西，提供了一些与Channel相关的方法，后文会展开，这里先跳过。<br>然我们跟着bind的调用链去揭开谜底！<br><img src="/2024/10/01/34/bind1.png"><br><img src="/2024/10/01/34/bind2.png"><br>到这里我们才意识到，一切的根源都在doBind这个方法中。<br>先贴源码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ChannelFuture</span> <span class="token function">doBind</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化并注册Channel</span>
    <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> regFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initAndRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> regFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 如果注册过程中出现异常，直接返回注册的Future</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> regFuture<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 如果注册已经完成，创建一个新的ChannelPromise并执行绑定操作</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChannelPromise</span> promise <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doBind0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 如果注册未完成，创建一个PendingRegistrationPromise并添加监听器</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">PendingRegistrationPromise</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingRegistrationPromise</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        regFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果注册过程中出现异常，设置Promise为失败状态</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    promise<span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> 
                <span class="token comment">// 如果注册成功，标记Promise为已注册并执行绑定操作</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    promise<span class="token punctuation">.</span><span class="token function">registered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">AbstractBootstrap</span><span class="token punctuation">.</span><span class="token function">doBind0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开始分析<br><img src="/2024/10/01/34/initAndRegister.png"><br>让我们关注到<code>initAndRegister</code>这个方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> <span class="token function">initAndRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建新的Channel实例</span>
        channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>channelFactory<span class="token punctuation">.</span><span class="token function">newChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化Channel</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果初始化过程中出现异常，关闭Channel并返回失败的Promise</span>
        <span class="token comment">// promise 是一种用于表示异步操作结果的对象。它允许你在异步操作完成后执行某些操作，而不需要阻塞当前线程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            channel<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultChannelPromise</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token class-name">GlobalEventExecutor</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果Channel为null，返回一个失败的Promise</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultChannelPromise</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FailedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">GlobalEventExecutor</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 注册Channel到EventLoopGroup</span>
    <span class="token class-name">ChannelFuture</span> regFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果注册过程中出现异常，关闭Channel</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            channel<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回注册的Future</span>
    <span class="token keyword">return</span> regFuture<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于<code>channel = this.channelFactory.newChannel();</code>这一行，我们debug进去，<br>最终在<img src="/2024/10/01/34/ChannelFactory.png">找到了如何初始化的，<img src="/2024/10/01/34/constructor.png"></p>
<blockquote>
<p>Constructor 是 Java 反射机制中的一个类，用于表示类的构造方法。通过 Constructor 类，你可以动态地创建类的实例、获取构造方法的参数类型、访问修饰符等信息。</p>
</blockquote>
<p><img src="/2024/10/01/34/newInstance1.png"><br>这里通过反射获得了io.netty.channel.ReflectiveChannelFactory<br><img src="/2024/10/01/34/delegeting.png"><br>这里可以找到，实际上是通过DelegatingConstructorAccessorImpl来实现的，不断深入，最后在这里找到答案<img src="/2024/10/01/34/newInstance0.png"><br>奥，原来是调用了一个本地方法来实现的服务注册！</p>
<h3 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h3><p>补充一下ChannelFuture的定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//</span>
<span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span>
<span class="token comment">// (powered by FernFlower decompiler)</span>
<span class="token comment">//</span>

<span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">GenericFutureListener</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelFuture</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 返回与此Future相关联的Channel。
     * @return 相关联的Channel
     */</span>
    <span class="token class-name">Channel</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 添加一个监听器，当操作完成时会通知该监听器。
     * @param listener 要添加的监听器
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 添加多个监听器，当操作完成时会通知这些监听器。
     * @param listeners 要添加的监听器数组
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">addListeners</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 移除一个监听器。
     * @param listener 要移除的监听器
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 移除多个监听器。
     * @param listeners 要移除的监听器数组
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">removeListeners</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 等待操作完成并同步返回结果，如果操作被中断则抛出InterruptedException。
     * @return 当前的ChannelFuture实例
     * @throws InterruptedException 如果操作被中断
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 等待操作完成并同步返回结果，不会被中断。
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">syncUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 等待操作完成。
     * @return 当前的ChannelFuture实例
     * @throws InterruptedException 如果操作被中断
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 等待操作完成，不会被中断。
     * @return 当前的ChannelFuture实例
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 检查此Future是否是Void类型。
     * @return 如果是Void类型则返回true，否则返回false
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ChannelFuture就是定义了一系列的监听Channel行为的监听器</p>
<h3 id="doBind"><a href="#doBind" class="headerlink" title="doBind"></a>doBind</h3><p>接着顺着doBind往下看<br><img src="/2024/10/01/34/doBind.png"><br>在这里如果出现各种异常行为，会给promise设置异常之后退出，否则则调用doBind0</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doBind0</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> regFuture<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在 channel 的事件循环中执行绑定操作</span>
    channel<span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 检查注册操作是否成功</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果注册成功，绑定到本地地址，并在失败时关闭 channel</span>
                channel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span><span class="token constant">CLOSE_ON_FAILURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果注册失败，设置 promise 的失败原因</span>
                promise<span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过EventLoop的类关系图可以知道，EventLoop实际上就是一个封装的Executor，所以实际上是使用的Executor来跑一个线程来进行绑定<br>至此，ServerBootstrap的初始化我们就已经完整的探究了一遍</p>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中NULL值是否会影响索引的使用</title>
    <url>/2024/09/29/55/</url>
    <content><![CDATA[<h1 id="为何写这一篇文章"><a href="#为何写这一篇文章" class="headerlink" title="为何写这一篇文章"></a>为何写这一篇文章</h1><p>🐭🐭在面试的时候被问到NULL值是否会走索引的时候，感到有点不理解，于是事后就有了这篇文章<br>问题：<br>为name建立索引，name可以为空<br><code>select * from user where name is null</code>是否会使用索引？<br>生活会拷打每一个做事不认真的人😭</p>
<h1 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h1><p>详细的可以参照我的上一篇文章深入浅出MySQL，里面有关于索引的详细介绍<br>在InnoDB引擎中，索引分为聚簇索引和二级索引，对于二级索引，在这个场景下我们要考虑的就是是否会为NULL建立索引和如果列中存在NULL值，是否会走索引去查找这个NULL</p>
<h1 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h1><p>访问方法是MySQL来实际访问数据的执行方法<br>大致分为：</p>
<ol>
<li>全表扫描</li>
<li>使用索引扫</li>
</ol>
<h2 id="测试表"><a href="#测试表" class="headerlink" title="测试表"></a>测试表</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE user (  
                          `id` int(11) NOT NULL AUTO_INCREMENT,  
                          `name` varchar(20) NOT NULL,  
                          `age` int(11) DEFAULT NULL,  
                          `sex` varchar(20) DEFAULT NULL,  
                          PRIMARY KEY (`id`)  
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;  
  
INSERT INTO user (`id`, `name`, `age`, `sex`) VALUES ('1', 'Bob', '20', '男');  
INSERT INTO user (`id`, `name`, `age`, `sex`) VALUES ('2', 'Jack', '20', '男');  
INSERT INTO user (`id`, `name`, `age`, `sex`) VALUES ('3', 'Tony', '20', '男');  
INSERT INTO user (`id`, `name`, `age`, `sex`) VALUES ('4', 'Alan', '20', '男');  
  
CREATE  UNIQUE  INDEX indexName ON user(name(20));  
# 为age建立索引  
CREATE INDEX indexAge ON user(age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>通过主键或者唯一二级索引列来定位一条记录的访问方法<br><code>explain select * from user where id = 1;</code><br>解决如下：<br><img src="/2024/09/29/55/const.png" alt="|1150"><br>通过type我们可以看见访问方法是const</p>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>如果二级索引列不是唯一的，那么就使用二级索引的值去匹配，之后再回表<br><img src="/2024/09/29/55/ref.png"><br><code>explain select * from user where age = 20;</code><br><img src="/2024/09/29/55/ref-result.png"><br>如图使用的是ref方法<br><strong>二级索引列值为NULL时</strong>：<br>二级索引列对NULL值的数量时不限制的，所以key is NULL最多使用的是ref，而不是const</p>
<h2 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a>ref_or_null</h2><p>有时候我们需要找出二级索引等于常数和为NULL的记录一同找出<br><code>explain select * from user where age = 20 or age is null ;</code><br><img src="/2024/09/29/55/ref_or_null-result.png"><br>执行的流程：<br>如图，NULL是放在每一层中最左侧的，并且是连在一起的<br><img src="/2024/09/29/55/ref_or_null.png"></p>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>使用索引进行范围访问，可以是聚簇索引，也可以是二级索引。<br><code>explain select * from user where age &gt; 11 and age &lt;= 20;</code><br><img src="/2024/09/29/55/range.png"></p>
<h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>遍历二级索引记录的执行方式，常常出现在查询列和条件都包含在索引中，不需要回表，所以直接遍历即可</p>
<h2 id="all"><a href="#all" class="headerlink" title="all"></a>all</h2><p>全表扫描</p>
<h1 id="NULL在二级索引中的位置"><a href="#NULL在二级索引中的位置" class="headerlink" title="NULL在二级索引中的位置"></a>NULL在二级索引中的位置</h1><p>通过查询资料，发现如果索引列允许NULL值，那么NULL在二级索引中是被当作最小值放在树的每一层的最左侧的，也就是NULL值会被当成索引列的数据使用的，所以NULL值匹配是可能会走索引的</p>
<ol>
<li>如果在索引列上使用IS NULL或IS NOT NULL，MySQL通常会走索引<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// type为ref，所以走索引了</span>
explain select <span class="token operator">*</span> from user where age is <span class="token keyword">null</span><span class="token punctuation">;</span>  
<span class="token comment">// type为range，所以走索引了</span>
explain select <span class="token operator">*</span> from user where age is not <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>符合索引，如果签到列不为NULL，后续的列也是可以走索引的</li>
</ol>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLoocal原理解析</title>
    <url>/2024/09/30/51/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>ThreadLocal实际起作用的是ThreadLocal内部的ThreadLocalMap类，对于每一个Tread，都有一个ThreadLocalMap属性，从而实现线程隔离，然后set的时候就通过获取当前线程然后给他的ThreadLcoalMap属性添加值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  
<span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
	<span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>  
  
    <span class="token comment">/**  
     * The entries in this hash map extend WeakReference, using     * its main ref field as the key (which is always a     * ThreadLocal object).  Note that null keys (i.e. entry.get()     * == null) mean that the key is no longer referenced, so the     * entry can be expunged from table.  Such entries are referred to     * as "stale entries" in the code that follows. */</span>
     <span class="token comment">// Entry是节点，继承了WeakReferentce，定义了一个value</span>
     <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> 
		  <span class="token class-name">Object</span> value<span class="token punctuation">;</span>

            <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                value <span class="token operator">=</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			    <span class="token comment">// 获取当前线程</span>
		        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 通过当前线程获取线程中维护的ThreadLocalMap对象</span>
		        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		        <span class="token punctuation">}</span>
		    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="为何使用弱引用"><a href="#为何使用弱引用" class="headerlink" title="为何使用弱引用"></a>为何使用弱引用</h3><p>因为ThreadLocalMap的key是Thread，如果像普通的key-value的定义，只要线程未销毁<br>就会一直存在，所以使用弱引用就可以在不存在强引用的时候就将这个销毁。</p>
]]></content>
  </entry>
  <entry>
    <title>ThreadLocal技术分析与选型</title>
    <url>/2024/10/19/10/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们分析了一波ThreadLocal的源码，我们知道ThreadLoca是为了为每一个线程保存一个本线程的变量，但是某些场景下，我们可能需要在线程之间共享一些变量，比如异步操作和使用线程池进行任务等，接下来我们来分析一下有哪些可以满足我们的需求，具体的使用方式就不贴上来了，基本和ThreadLcoal一样的，这里重点分析他们的实现</p>
<h1 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h1><p>InheritThreadLocal是ThreadLocal的一个子类，他的代码基本就是一些定义，和包装好供我们使用的，主要是为了给ThreadLoca中的inheritableThreadLocals进行赋值等操作。精髓还是在ThreadLocal中<br>首先先上结论：<br>InheritableThreadLocal只能在父子线程之间传递变量，而不适用于线程池的场景。</p>
<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>首先看一段代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">MAIN_THREAD_LOCAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadlocal 默认值："</span><span class="token operator">+</span><span class="token class-name">ThreadLocalTest</span><span class="token punctuation">.</span><span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"child thread value :"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadlocal 设置子线程值之后："</span><span class="token operator">+</span><span class="token class-name">ThreadLocalTest</span><span class="token punctuation">.</span><span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocalTest</span> threadLocalTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">MAIN_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"父线程的值 set 111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动:"</span><span class="token operator">+</span>threadLocalTest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadLocalTest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            ThreadUtil.execAsync(threadLocalTest);</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束："</span><span class="token operator">+</span>threadLocalTest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是一段启动子线程的代码，我们顺着 new Thread进去Thread中来到这段代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
                     <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>
                     <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>那么我们就去找inheritThreadLocals这个变量，最后在400多行的一个函数中找到了这个变量的位置(具体位置每个版本的行数不一样，直接搜索inheritThreadLocals就行了)<img src="/2024/10/19/10/itl1.png"><br>他会使用ThreadLocal.createInheriteaMap去进行赋值，我们就去看这个方法是如何做的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">ThreadLocalMap</span> <span class="token function">createInheritedMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalMap</span> parentMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span>parentMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>接着进去看</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalMap</span> parentMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parentTable <span class="token operator">=</span> parentMap<span class="token punctuation">.</span>table<span class="token punctuation">;</span>
           <span class="token keyword">int</span> len <span class="token operator">=</span> parentTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
           <span class="token function">setThreshold</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
           table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>

           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">:</span> parentTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
                   <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">Object</span> value <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">childValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token class-name">Entry</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">int</span> h <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                           h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
                       size<span class="token operator">++</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>到这里，我们其实一目了然了，原来就是新建了一个ThreadLocalMap，然后将传进来的父ThreadLocalMap中的内容一个一个复制过去。。。可以看出，实际上高大上的技术其实往往都是很简单的实现，所以源码该看的还是得看。</p>
<h2 id="为什么线程池中无法共享"><a href="#为什么线程池中无法共享" class="headerlink" title="为什么线程池中无法共享"></a>为什么线程池中无法共享</h2><p>通过之前我们对线程池源码的分析，我们可以发现，线程池也使用的new Thread创建子线程的，也就是，实际上给是可以实现线程池之间的共享的，但是问题是，线程池中的线程是重用的，也就是我们没办法确认哪几个线程之间共享了哪个InheritedLocal</p>
<h1 id="TransmittableThreadLocal"><a href="#TransmittableThreadLocal" class="headerlink" title="TransmittableThreadLocal"></a>TransmittableThreadLocal</h1><p>这个是来自阿里巴巴开源的一个库中的类，简称TTL，这个是可以满足线程池之间传递变量的。<br>先给出使用实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserContextHolder</span> <span class="token punctuation">{</span>

    <span class="token comment">// 初始化一个 ThreadLocal 变量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOGIN_USER_CONTEXT_THREAD_LOCAL</span>
            <span class="token operator">=</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 设置用户 ID
     *
     * @param value
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGIN_USER_CONTEXT_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstants</span><span class="token punctuation">.</span><span class="token constant">USER_ID</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 获取用户 ID
     *
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token constant">LOGIN_USER_CONTEXT_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstants</span><span class="token punctuation">.</span><span class="token constant">USER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取到的用户ID："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 删除 ThreadLocal
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGIN_USER_CONTEXT_THREAD_LOCAL</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先看定义<img src="/2024/10/19/10/ttl1.png"><br>可以看出TTL是InheritableThreadLocal的子类，进行了一些补充。<br>我们去看上面示例中的withInitial方法<img src="/2024/10/19/10/ttl2.png"><br>插个题外话，我们先关注一下这个Supplier：</p>
<blockquote>
<p>Supplier 接口在 Java 中的作用是提供一个结果的供应者。它是一个函数式接口，意味着它可以用作 lambda 表达式或方法引用的目标。函数式接口的意义在于它们使代码更加简洁和可读，特别是在使用 Java 8 引入的流式 API 时</p>
</blockquote>
<p>源代码比较长，<del>(有点懒得写)</del> 可以看这位<a href="https://www.cnblogs.com/intotw/p/14740215.html">大佬的分析</a>，这里就做一些简单的总结 ：</p>
<ol>
<li>定义了一个静态变量：holder(InheritableThreadLocal来存储WeakHashMap，父子线程共享)，负责保存所有的TTL示例</li>
<li>get、set、remove方法会将当前实例从holder中添加或者移除</li>
<li>withInitial 和 withInitialAndCopier提供用于创建具有初始值和复制器的TTL变量</li>
<li>核心 Transmitter 内部类提供了 capture(将当前线程中的holder里的TTL捕获出来设置到HashMap中）、replay(将捕获的HashMap设置到新线程的TTL实例中)、clear 和 restore(将之前捕获的HashMap恢复到当前线程的TTL中) 方法，用于捕获和恢复线程本地变量的值。</li>
</ol>
<p>TTL做的实际上就是将原本与Thread绑定的线程变量，缓存一份到TtlRunnable对象中，在执行子线程任务前，将对象中缓存的变量值设置到子线程的ThreadLocal中以供run()方法的代码使用，然后执行完后，又恢复现场，保证不会对复用线程产生影响。</p>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出future</title>
    <url>/2024/09/30/01/</url>
    <content><![CDATA[<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="Callable-amp-FutureTask"><a href="#Callable-amp-FutureTask" class="headerlink" title="Callable &amp; FutureTask"></a>Callable &amp; FutureTask</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callableTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token string">"Callable Task Result"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>  
  
<span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callableTask<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>  
thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token string">"CompletableFuture Result"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="深入使用"><a href="#深入使用" class="headerlink" title="深入使用"></a>深入使用</h3><p>以下示例来自：<a href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html#:~:text=%E6%9C%AC%E7%AB%A0%E8%8A%82%E4%B8%BAComple">CompletableFuture原理与实践-外卖商家端API的异步化 - 美团技术团队 (meituan.com)</a><br>CF的使用是基于构造依赖树的，一个CompletableFuture的使用会触发另外一系列依赖它的CF执行<br><img src="/2024/09/30/01/CF%E4%BE%9D%E8%B5%96.png"><br>服务依赖</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无依赖</span>
<span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 直接发起异步调用  </span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cf1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"result1"</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 直接返回一个已经完成的CompletableFuture  </span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cf2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"result2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 单个依赖</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cf3 <span class="token operator">=</span> cf1<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result1: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token string">"result3"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cf4 <span class="token operator">=</span> cf1<span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span>cf2<span class="token punctuation">,</span> <span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token comment">//result1和result2分别为cf1和cf2的结果  </span>
    <span class="token keyword">return</span> <span class="token string">"result4"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 多依赖</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> cf6 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>cf3<span class="token punctuation">,</span> cf4<span class="token punctuation">,</span> cf5<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> cf6<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token comment">//这里的join并不会阻塞，因为传给thenApply的函数是在CF3、CF4、CF5全部完成时，才会执行 。  </span>
    result3 <span class="token operator">=</span> cf3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    result4 <span class="token operator">=</span> cf4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    result5 <span class="token operator">=</span> cf5<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//根据result3、result4、result5组装最终result;  </span>
    <span class="token keyword">return</span> <span class="token string">"result"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者使用anyOf，只要有一个依赖完成即可完成</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="源码解读-基于JDK1-8"><a href="#源码解读-基于JDK1-8" class="headerlink" title="源码解读(基于JDK1.8)"></a>源码解读(基于JDK1.8)</h1><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>Callable是用于定义和返回结果，并且可能抛出异常的任务，类似于Runnable</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>  
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
    <span class="token comment">/**  
     * call 方法是 Callable 接口中的唯一方法，用于执行任务并返回结果。它与 Runnable 接口的 run 方法类似，但 call 方法可以返回一个结果并且可以抛出受检异常
     */</span>    
     <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>先梳理一下继承关系，Future是一个接口，定义了一些属性，然后</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Sets this Future to the result of its computation
     * unless it has been cancelled.
     */</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以FutureTask就是一个Future的实际实现，是基于Runnable实现的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token comment">// 任务的运行状态，初始为 NEW。状态只在 set、setException 和 cancel 方法中转换为终止状态。</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NEW</span>          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COMPLETING</span>   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NORMAL</span>       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">EXCEPTIONAL</span>  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span>    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INTERRUPTING</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INTERRUPTED</span>  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

	<span class="token comment">// 重要的属性</span>
	<span class="token comment">// 底层的callable，运行后置为null</span>
	<span class="token keyword">private</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">;</span>
	<span class="token comment">// get()方法返回的结果或者抛出的异常</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> outcome<span class="token punctuation">;</span> <span class="token comment">// non-volatile, protected by state reads/writes</span>
	<span class="token comment">// 运行callable的线程,在run()期间CAS设置</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> runner<span class="token punctuation">;</span>
	<span class="token comment">// 等待线程的Triber栈</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">WaitNode</span> waiters<span class="token punctuation">;</span>
	<span class="token comment">// 返回结果或者返回异常 </span>
	<span class="token keyword">private</span> <span class="token class-name">V</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> x <span class="token operator">=</span> outcome<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NORMAL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;=</span> <span class="token constant">CANCELLED</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CancellationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 构造函数，接收callable作为参数来执行任务</span>
    <span class="token keyword">public</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callable <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> callable<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">NEW</span><span class="token punctuation">;</span>       <span class="token comment">// ensure visibility of callable</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取执行结果</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>
		<span class="token comment">// 如果还处于未完成的状态则调用awaitDone</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> <span class="token constant">COMPLETING</span><span class="token punctuation">)</span>
            s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 返回执行结果或者异常</span>
        <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 核心执行</span>
    <span class="token comment">// 因为封装了Runnable接口，所以可以直接执行使用主线程</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">// 如果任务状态不是NEW或者使用CAS无法将runner设置为当前线程，直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token constant">NEW</span> <span class="token operator">||</span>
            <span class="token operator">!</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>
                                         <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> <span class="token constant">NEW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">V</span> result<span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token comment">// 调用callable的call方法去执行callable封装的任务</span>
                    result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>
					<span class="token comment">// 设置返回结果</span>
                    <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// runner must be non-null until state is settled to</span>
            <span class="token comment">// prevent concurrent calls to run()</span>
			<span class="token comment">// 线程置为null,防止并发调用线程</span>
            runner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// state must be re-read after nulling runner to prevent</span>
            <span class="token comment">// leaked interrupts</span>
            <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;=</span> <span class="token constant">INTERRUPTING</span><span class="token punctuation">)</span>
                <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 停止执行任务实际上就是将执行任务的写线程从runner属性中取出然后调用interupt信号，这里省略</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// </span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过分析源码，我们发现Future获取结果的方式是通过阻塞实现的，会阻塞当前线程，如何避免阻塞呢？</p>
<h2 id="CompletableFuture-以下简称CF"><a href="#CompletableFuture-以下简称CF" class="headerlink" title="CompletableFuture(以下简称CF)"></a>CompletableFuture(以下简称CF)</h2><h3 id="为何会选择CF呢？"><a href="#为何会选择CF呢？" class="headerlink" title="为何会选择CF呢？"></a>为何会选择CF呢？</h3><ul>
<li>可组合：可以将多个依赖操作通过不同的方式进行编排</li>
<li>操作融合：将数据流中使用的多个操作符以某中方式组合起来从而降低开销</li>
<li>延迟执行</li>
<li>学习成本低</li>
<li>相比于只能通过阻塞或者轮询获得结果而且不支持回调方法的Future，CF支持回调的方式进行处理结果，同时支持组合操作支持进一步的编排</li>
</ul>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>让我们首先关注它的定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以发现奥秘就在<code>CompletionStage</code>这个接口中，<code>CompletionStage</code>用于标识执行过程中的一个步骤(Stage)，从而实现了服务编排</p>
<h4 id="CompletionStage"><a href="#CompletionStage" class="headerlink" title="CompletionStage"></a>CompletionStage</h4><p>定义了一系列任务的步骤，具体实现看CompletableFuture是如何实现的</p>
<h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token comment">// 用于存储当前CF的结果	</span>
	<span class="token keyword">volatile</span> <span class="token class-name">Object</span> result<span class="token punctuation">;</span>      
	<span class="token comment">// stack用于表示当前CF完成后需要触发的依赖动作</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Completion</span> stack<span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从这里我们看出，使用了类似于”观察者”模式设计思想，被观察者是CompletableFuture，而观察者是这些需要回调的依赖动作</p>
<h4 id="Completion的定义"><a href="#Completion的定义" class="headerlink" title="Completion的定义"></a>Completion的定义</h4><p>Completion是定义在CompletableFuture里的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Completion</span> <span class="token keyword">extends</span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span>
       <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">AsynchronousCompletionTask</span> <span class="token punctuation">{</span>
       <span class="token keyword">volatile</span> <span class="token class-name">Completion</span> next<span class="token punctuation">;</span>      <span class="token comment">// Treiber stack link</span>

       <span class="token comment">/**
        * Performs completion action if triggered, returning a
        * dependent that may need propagation, if one exists.
        *
        * @param mode SYNC, ASYNC, or NESTED
        */</span>
       <span class="token keyword">abstract</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryFire</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token comment">/** Returns true if possibly still triggerable. Used by cleanStack. */</span>
       <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span> <span class="token function">tryFire</span><span class="token punctuation">(</span><span class="token constant">ASYNC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> <span class="token function">tryFire</span><span class="token punctuation">(</span><span class="token constant">ASYNC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Void</span> <span class="token function">getRawResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setRawResult</span><span class="token punctuation">(</span><span class="token class-name">Void</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="依赖的流程"><a href="#依赖的流程" class="headerlink" title="依赖的流程"></a>依赖的流程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApply</span><span class="token punctuation">(</span>  
    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token function">uniApplyStage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">uniApplyStage</span><span class="token punctuation">(</span>  
    <span class="token class-name">Executor</span> e<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Object</span> r<span class="token punctuation">;</span>  
    <span class="token comment">// 如果已经任务已经完成了，直接调用uniApplyNow</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  
        <span class="token keyword">return</span> <span class="token function">uniApplyNow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 创建一个新的未完成CompletableFuture</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token function">newIncompleteFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token comment">// 将这个新的UniApply压栈 </span>
    <span class="token function">unipush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UniApply</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">uniApplyNow</span><span class="token punctuation">(</span>  
    <span class="token class-name">Object</span> r<span class="token punctuation">,</span> <span class="token class-name">Executor</span> e<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">Throwable</span> x<span class="token punctuation">;</span>  
	<span class="token comment">// 创建一个新的CompletableFuture</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token function">newIncompleteFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">AltResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AltResult</span><span class="token punctuation">)</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span>ex<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            d<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token function">encodeThrowable</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">return</span> d<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>        r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
			<span class="token comment">// 不是异常就执行新的UniApply任务</span>
            e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UniApply</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> r<span class="token punctuation">;</span>  
            d<span class="token punctuation">.</span>result <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">encodeValue</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        d<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token function">encodeThrowable</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

 <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">unipush</span><span class="token punctuation">(</span><span class="token class-name">Completion</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 尝试将c压栈，知道成功或者任务完成为止</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryPushStack</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">NEXT</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                c<span class="token punctuation">.</span><span class="token function">tryFire</span><span class="token punctuation">(</span><span class="token constant">SYNC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>简单理解一下就是，在CF完成任务时，会去观察者链中出栈一个，然后执行，并且返回一个新的CompletableFuture，然后后续继续去完成后续依赖任务</li>
<li>如果原始任务还没完成，那么就会将新的任务推入栈中，等待原始任务完成</li>
</ul>
<h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>以 supplyAsync为例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 有自定义线程池的调用函数</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span>  
                                                   <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

<span class="token comment">// 没有自定义线程池会使用自带的线程池</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> <span class="token constant">ASYNC_POOL</span> <span class="token operator">=</span> <span class="token constant">USE_COMMON_POOL</span> <span class="token operator">?</span>  
    <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">commonPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token constant">ASYNC_POOL</span><span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span class="token comment">// 实际执行者</span>
<span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> e<span class="token punctuation">,</span>  
                                                 <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 调用线程池去执行</span>
    e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncSupply</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过阅读源码，我们可以发现，原来CompletableFuture执行任务是会使用我们提交给它的线程池或者它自己默认去生成一个线程池去执行的，相比FutureTask通过阻塞去等待结果，确实是提升了性能。<br><strong>关于线程池的源码和原理解析，以及一些八股知识，欢迎翻看鄙人的另一篇《深入浅出线程池》博客观看</strong></p>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出动态代理</title>
    <url>/2024/09/22/32/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面试中经常被问到动态代理相关内容，每次都答得不够完美，又因近期在尝试手写RPC框架，了解到不少的动态代理相关的内容，顺道总结一下，于是就有了这篇文章</p>
<h1 id="静态代理-动态代理！"><a href="#静态代理-动态代理！" class="headerlink" title="静态代理? 动态代理！"></a>静态代理? 动态代理！</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>静态代理是在编译期间就生成了实际的字节码和对应的class文件，而动态代理可以在运行中动态生成代理类。</p>
<ul>
<li>静态代理示例<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 实际类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealService</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Performing service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 代理类也要实现和被代理的类实现的同一个接口才能进行代理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将需要代理的类封装到自己的内部</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Service</span> realService<span class="token punctuation">;</span>
	
    <span class="token keyword">public</span> <span class="token class-name">StaticProxy</span><span class="token punctuation">(</span><span class="token class-name">Service</span> realService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realService <span class="token operator">=</span> realService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 实际就是在实现的方法中进行代理操作，然后执行被代理的类的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static Proxy: Before performing service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        realService<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static Proxy: After performing service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
实际上就是通过将被代理类封装到内部，然后调用。缺点很明显：没新增一个代理都需要重新新建一个类然后重新写一个包装。</li>
<li>动态代理实例(JDK代理)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealService</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Performing service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// </span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dynamic Proxy: Before performing service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dynamic Proxy: After performing service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Service</span> realService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Service</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                realService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                realService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span>realService<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        proxyInstance<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p><a href="https://www.cnblogs.com/mingshan/p/17793555.html">参考</a></p>
<h3 id="解密Proxy"><a href="#解密Proxy" class="headerlink" title="解密Proxy"></a>解密Proxy</h3><p>(以下是基于Java8的源码)<br>我们在使用JDK动态代理的时候使用的最多的就是<code>Proxy.newProxyInstance()</code>方法，接下来我们就来解密这个方法是如何实现我们的动态代理。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                         <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>
                                         <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>
       <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span>
   <span class="token punctuation">{</span>
    <span class="token comment">// 检查空指针异常</span>
       <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfs <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 安全检查</span>
       <span class="token keyword">final</span> <span class="token class-name">SecurityManager</span> sm <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span><span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// 生成代理类</span>
       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token comment">/*
        * Invoke its constructor with the designated invocation handler.
        */</span>
       <span class="token keyword">try</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">checkNewProxyPermission</span><span class="token punctuation">(</span><span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

           <span class="token keyword">final</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">final</span> <span class="token class-name">InvocationHandler</span> ih <span class="token operator">=</span> h<span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span><span class="token operator">|</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">Throwable</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数解析:</p>
<ul>
<li>loader：类加载器，用于自定义加载类</li>
<li>interface 接口数组，代理类将实现这些接口</li>
<li>h 调用处理器，处理代理实例上的方法调用<br>这段代码的主要意思是获取调用者类和代理类构造函数。<br>接着关注getProxyClass0方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 规定对实现的接口数量不得超过这个数量</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"interface limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// If the proxy class defined by the given loader implementing</span>
       <span class="token comment">// the given interfaces exists, this will simply return the cached copy;</span>
       <span class="token comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span>
       <span class="token keyword">return</span> proxyClassCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
接着看proxyClassCache<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用WeakCache降低出现内存泄漏的概率</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span>  
    proxyClassCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClassFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
核心是ProxyClassFactroy，让我们关注它<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 核心是实现BiFunction</span>
<span class="token comment">/**
 * ProxyClassFactory 是一个工厂类，用于生成和定义代理类。
 * 它实现了 BiFunction 接口，接受 ClassLoader 和接口数组作为输入，
 * 返回生成的代理类。
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ProxyClassFactory</span>
    <span class="token keyword">implements</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// 所有代理类名称的前缀</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> proxyClassNamePrefix <span class="token operator">=</span> <span class="token string">"$Proxy"</span><span class="token punctuation">;</span>

    <span class="token comment">// 用于生成唯一代理类名称的下一个数字</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> nextUniqueNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 生成并定义代理类。
     *
     * @param loader 用于定义代理类的��加载器
     * @param interfaces 代理类要实现的接口数组
     * @return 生成的代理类
     * @throws IllegalArgumentException 如果接口数组中的任何接口不可见或不是接口，或接口重复
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 使用 IdentityHashMap 检查接口是否重复</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> interfaceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdentityHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/*
             * 验证类加载器是否将此接口的名称解析为相同的 Class 对象。
             */</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
	            <span class="token comment">// 对于每一个使用指定的加载器去加载他的对象</span>
                interfaceClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">!=</span> intf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    intf <span class="token operator">+</span> <span class="token string">" is not visible from class loader: "</span> <span class="token operator">+</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/*
             * 验证 Class 对象是否实际代表一个接口。
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is not an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/*
             * 验证此接口是否重复。
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceSet<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">"repeated interface: "</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> proxyPkg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 定义代理类的包</span>
        <span class="token keyword">int</span> accessFlags <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">;</span>

        <span class="token comment">/*
         * 记录非公共代理接口的包，以便代理类将在同一包中定义。
         * 验证所有非公共代理接口是否在同一包中。
         */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> flags <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                accessFlags <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> pkg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    proxyPkg <span class="token operator">=</span> pkg<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>proxyPkg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                        <span class="token string">"non-public interfaces from different packages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果没有非公共代理接口，使用 com.sun.proxy 包</span>
            proxyPkg <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token constant">PROXY_PACKAGE</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*
         * 选择要生成的代理类的名称。
         */</span>
        <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> proxyName <span class="token operator">=</span> proxyPkg <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>

        <span class="token comment">/*
         * 生成指定的代理类。
         */</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>
            proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span>
                                proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/*
             * 这里的 ClassFormatError 意味着（除非代理类生成代码中有错误），
             * 否则是代理类创建时提供的参数存在其他无效方面（例如虚拟机限制超出）。
             */</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
BiFunction 是 Java 8 引入的一个函数式接口，位于 java.util.function 包中。它代表一个接受两个输入参数并返回一个结果的函数。BiFunction 接口定义如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他默认方法</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
然后我们顺着往下找，通过generateProxyClass -&gt;generateClassFile -&gt;generateMethod<br>代码过长这里只给出比较重要的部分<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>
	<span class="token comment">// 获取InvocationHandler字段</span>
	 out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>opc_getfield<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span>
                superclassName<span class="token punctuation">,</span>
                handlerFieldName<span class="token punctuation">,</span> <span class="token string">"Ljava/lang/reflect/InvocationHandler;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 加载Method对象</span>
            <span class="token function">code_aload</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>

            out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>opc_getstatic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span>
                <span class="token function">dotToSlash</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">,</span>
                methodFieldName<span class="token punctuation">,</span> <span class="token string">"Ljava/lang/reflect/Method;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 后面紧跟处理方法参数的部分，这部分省略</span>

	<span class="token comment">// 重点！</span>
	<span class="token comment">// 调用InvocationHandler.invoke方法</span>
	 out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>opc_invokeinterface<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getInterfaceMethodRef</span><span class="token punctuation">(</span>
                <span class="token string">"java/lang/reflect/InvocationHandler"</span><span class="token punctuation">,</span>
                <span class="token string">"invoke"</span><span class="token punctuation">,</span>
                <span class="token string">"(Ljava/lang/Object;Ljava/lang/reflect/Method;"</span> <span class="token operator">+</span>
                    <span class="token string">"[Ljava/lang/Object;)Ljava/lang/Object;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 后面设置返回值和异常处理等信息，最后返回方法的信息</span>
	<span class="token keyword">return</span> minfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
到这里我们才终于发现JDK动态代理的原理：<br>原来就是在代理方法中通过Proxy引用了自定义的InvocationHandler！！<br>通过Proxy.newProxyInstance()方法将invocationHandler传入，然后生成代理类来继承Proxy类，从而拿到InvocationHandler，最后在代理类中调用invoke()方法</li>
</ul>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>aop</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出，从源码搞清Bean的加载过程</title>
    <url>/2024/10/03/28/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Bean的加载过程算是面试中的老生常谈了，今天我们就来从源码层面深入去了解一下Spring中是如何进行Bean的加载的</p>
<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>先看示例代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:/spring/text.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stringutil"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们就从这个getBean去探索Spring如何进行类的加载。<br>首先我们先看看ClassPathXmlApplicationContex的继承关系：</p>
<span id="more"></span>
<p><img src="/2024/10/03/28/%E5%85%B3%E7%B3%BB.png"><br>而DefaultResourceLoader又是实现的ResourceLoader接口<br><img src="/2024/10/03/28/%E5%AE%9E%E7%8E%B0.png"></p>
<p>我们通过不断去溯源<code>new ClassPathXmlApplicationContext</code>这个构造方法<br><img src="/2024/10/03/28/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%951.png"><br>我们先通过super一直溯源到最后<img src="/2024/10/03/28/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%952.png"><br>我们再来看看setParent的源码：<br><img src="/2024/10/03/28/setParent.png"><br>发现这里仅仅是给ApplicationContex设设置上下文。<br>所以真正的重点还是上面的<code>refresh</code>那里。</p>
<!--more-->
<h2 id="refresh"><a href="#refresh" class="headerlink" title="refresh"></a>refresh</h2><p>先看源码，源码有点长，但是我加了注解，请慢慢看，我会在里面进行一些分析的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
		<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// refresh的前置准备，比如设置startTime，开启激活状态、关闭close状态等等等</span>
			<span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">//告诉子类去刷新内容Bean工厂(从类图中可以明显看出来入口类实例也是个bean工厂)</span>
			<span class="token comment">// 观察和刷新BeanFactory</span>
			<span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">//提前设置一些在该context中使用的属性，比如Classloader、Callback、environment等</span>
			<span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				<span class="token comment">// 通知context子类，后置处理beanFactory。比如用一系列的Webcontext子类</span>
				<span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 将BeanFactoryPostProcessor在当前Context中注册为Bean</span>
				<span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 注册BeanPostProcessor来拦截Bean创建的后置处理。</span>
				<span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 为当前Context初始化MessageSource</span>
				<span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 为当前context初始化应用事件广播</span>
				<span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 初始化其他特殊的bean对象 比如webcontext</span>
				<span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 检查监听Bean 并发布他们(ApplicationListener)</span>
				<span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 实例化BeanFactory中所有的其他的单例对象集合(非延迟的)</span>
				<span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 最后发布LifecycleProcessor和ContextRefreshedEvent事件</span>
				<span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>
							<span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>

				<span class="token comment">// 失败销毁bean</span>
				<span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// Reset 'active' flag.</span>
				<span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// Propagate exception to caller.</span>
				<span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">finally</span> <span class="token punctuation">{</span>
				<span class="token comment">// Reset common introspection caches in Spring's core, since we</span>
				<span class="token comment">// might not ever need metadata for singleton beans anymore...</span>
				<span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单总结一下就是刷新Spring应用的上下文，确保所有的Bean和相关组件都被正确初始化和配置。</p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>我们顺着getBean去看源码<img src="/2024/10/03/28/BeanFactory.png"><br>BeanFacoty是用来加载Bean的重要接口，那么我们这里的实现类在哪呢？<br>让我们接着debug进去看看<br><img src="/2024/10/03/28/abapp.png"><br>为什么来到这里了呢？让我们看看<code>AbstractApplicationContext</code>的类关系<br><img src="/2024/10/03/28/factory%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png"><br>原来如此，我们最终还是要在<code>AbstractApplicationContext</code>里面去实现getBean的。<br>接着我们来看看这个BeanFactory是如何出现的，关注到上面的refresh源码中的这一行<img src="/2024/10/03/28/%E8%8E%B7%E5%8F%96%E5%B7%A5%E5%8E%82.png"><br>以下是源码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>看来重点在refreshBeanFactory()</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果又beanFactory了，就销毁bean关闭beanFactory</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
	        <span class="token comment">// 创建 DefaultListableBeanFactory</span>
            <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 加载BeanDefinition，在这里是解析XML中的Bean标签，并装载到BeanDefinition中</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将加载号的beanFactory赋值给Context</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token keyword">protected</span> <span class="token class-name">DefaultListableBeanFactory</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInternalParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而这个DefaultListableBeanFactory实际上也是BeanFactory的另一个实现<br>我们顺着loadBeanDefinitions去看，发现在我们的xml加载例子中，我们进入了这个类<img src="/2024/10/03/28/xml.png"><br>让我研究研究这个源码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token comment">// 使用给定的beanFactory来创建XmlBeanDefinitionReader实例</span>
       <span class="token class-name">XmlBeanDefinitionReader</span> beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
       beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ClassPathXmlApplicationContext也是一个ResouceLoader</span>
       beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 使用XmlBeanDefinitionReader来解析生成Bean</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对这个XmlBeanDefinitionReader，我们可以看见他是这样的继承关系<img src="/2024/10/03/28/reader.png"><br>从右边可以看见，还有着Groovy和Properties两种实现，不过我们不在意他们的实现，接着我们关注到<code>this.loadBeanDefinitions(beanDefinitionReader);</code>这一行，我们debug进去</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">XmlBeanDefinitionReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
       <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着让我们进入loadBeanDefinitons这个方法中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>locations<span class="token punctuation">,</span> <span class="token string">"Location array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> locations<span class="token punctuation">;</span>
        <span class="token keyword">int</span> var4 <span class="token operator">=</span> locations<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var5 <span class="token operator">&lt;</span> var4<span class="token punctuation">;</span> <span class="token operator">++</span>var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> location <span class="token operator">=</span> var3<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>
            count <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接着上文</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span class="token comment">// 最终的实现</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> actualResources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取资源加载器</span>
    <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 上文中我们已经DefaultResrouceLoader实例记载进去了，所以这里走else</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果资源加载器为空，抛出异常</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Cannot load bean definitions from location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]: no ResourceLoader available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count<span class="token punctuation">;</span>
        <span class="token comment">// 如果资源加载器是 ResourcePatternResolver 的实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ResourcePatternResolver</span> resourcePatternResolver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span>resourceLoader<span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取资源数组</span>
                <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> resourcePatternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 加载 Bean 定义</span>
                count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果实际资源集合不为空，将资源添加到集合中</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>actualResources<span class="token punctuation">,</span> resources<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 如果日志级别为 TRACE，记录日志</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from location pattern ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> count<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 捕获 IO 异常并抛出 BeanDefinitionStoreException</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Could not resolve bean definition resource pattern ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果资源加载器不是 ResourcePatternResolver 的实例</span>
            <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 加载单个资源的 Bean 定义</span>
            count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">)</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果实际资源集合不为空，将资源添加到集合中</span>
                actualResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 如果日志级别为 TRACE，记录日志</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们接着追踪loadBeanDefinitions，最终在XmlBeanDefinitionReader中找到答案：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接上</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">,</span> <span class="token string">"EncodedResource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loading XML bean definitions from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
		<span class="token comment">//... 省略代码</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 前边我们传入的test.xml的输入流</span>
			<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				<span class="token class-name">InputSource</span> inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">//真正的从xml中load bean definition</span>
				<span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">finally</span> <span class="token punctuation">{</span>
				inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token comment">// 接上</span>
<span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">InputSource</span> inputSource<span class="token punctuation">,</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 解析xml文件为Document</span>
			<span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 省略代码</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token comment">// 接上</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Document</span> doc<span class="token punctuation">,</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">{</span>
		<span class="token class-name">BeanDefinitionDocumentReader</span> documentReader <span class="token operator">=</span> <span class="token function">createBeanDefinitionDocumentReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> countBefore <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 从reader中注册BeanDefinition到工厂</span>
		documentReader<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token function">createReaderContext</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> countBefore<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果接着往下走就会发现，将输入流中的xml标签解析然后注册BeanDefiniton工厂中<br>至此我们成功把xml解析成功了，接下来我们回到这里<img src="/2024/10/03/28/ob.png"><br>让我们关注这个函数<img src="/2024/10/03/28/finish.png"><br><img src="/2024/10/03/28/preInstance.png"><br>我们关注到这个函数，然后我们关注getBean<img src="/2024/10/03/28/getBean2.png"><br><img src="/2024/10/03/28/doGetBean.png"><br>我们第一次进来这里会式null，所以会走下面的逻辑，等后续我们实例代码中使用getBean的时候这里就不为空了<img src="/2024/10/03/28/doGet.png"><br>然后下面的else的内容就是使用BeanFactory去创建一个Bean，代码很长，有兴趣可以自己看，我们要关注的是这一段之后的内容</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>
			<span class="token comment">// 首次进来为空  最后会走下边的逻辑</span>
		<span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 通过this.beanDefinitionMap得到的  具体可自行查看源码。这里不太花篇幅讲述。</span>
		<span class="token keyword">final</span> <span class="token class-name">RootBeanDefinition</span> mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//...</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token annotation punctuation">@Override</span>
						<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
							<span class="token keyword">try</span> <span class="token punctuation">{</span>
							 	<span class="token comment">//最终创建Bean的逻辑</span>
								<span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
							<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
								<span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
								<span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
	<span class="token comment">//....		</span>
	<span class="token comment">// 注意这里，会把单例cache起来，在后边可以直接使用</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>newSingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>    
	
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这之后经过一系列的Bean的初始化，然后放入缓存中，就算是大功告成了，最后返回示例代码中的getBean即可从单例缓存中拿到bean !!!</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/10/03/28/Bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png"><br>Spring加载Bean的过程为：</p>
<ol>
<li>创建Spring容器</li>
<li>读取配置(或者注解)，解析内容，封装到BeanDefinition的实现类中(通过registerBeanDefiniton方法来注册到ConcurrentHashMap中，然后将beanName放到list中方便取出)</li>
<li>实例化Bean放到Spring容器中<br>至于一些实例化之类的主要就是BeanPostProcessor了，可以从我的手写rpc项目的文章中找到</li>
</ol>
<h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><ol>
<li>创建Bean的实例：Bean容器会先找到Bean的定义，然后通过Java反射API来创建Bean的实例</li>
<li>Bean属性赋值/填充：为Bean设置相关属性和依赖，例如填入@Autowired等注解注入的对象，setter方法和构造函数</li>
<li>Bean初始化:<img src="/2024/10/03/28/Bean%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="Bean的初始化"></li>
<li>销毁Bean：把Bean的销毁方法记录下来，将爱需要销毁Bean或者销毁容器时，调用这些方法去释放Bean所持有的资源<ul>
<li>如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li>
<li>如果 Bean 在配置文件中的定义包含 <code>destroy-method</code> 属性，执行指定的 Bean 销毁方法。或者，也可以直接通过<code>@PreDestroy</code> 注解标记 Bean 销毁之前执行的方法。<br>实例化和初始化的区别：<br>初始化会调用PostConstruct来调用Bean的初始化方法</li>
</ul>
</li>
</ol>
<h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>循环依赖的详细介绍可以去我的另一篇文章中找到，这里就带大家找到三级缓存的实际位置<br><img src="/2024/10/03/28/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.png"><br>解决流程如下：<br><img src="/2024/10/03/28/%E8%A7%A3%E5%86%B3.png"></p>
<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>SpringBoot实际上就是通过自定义注解去标记，然后启动的时候去扫描这些注解来创建Bean，从而替代Spring的xml配置方式，所以这里先略过，后续会单独出一片文章深入探讨SpringBoot，大体介绍一下流程：</p>
<ol>
<li>启动类: 启动类上使用 @SpringBootApplication 注解，包含了 @ComponentScan 和 @EnableAutoConfiguration。</li>
<li>自动配置: 通过 @EnableAutoConfiguration 注解加载自动配置类，这些类通常使用 @Conditional 注解来控制 Bean 的创建。</li>
<li>组件扫描: 扫描启动类所在包及其子包中的组件（如 @Component, @Service, @Repository, @Controller 等）。</li>
<li>条件注解: 根据条件注解的配置，有选择地注册 Bean</li>
</ol>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出线程池</title>
    <url>/2024/09/29/15/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鄙人在公司实习时，看见了公司的自定义线程池结合CompletableFuture异步获取结果，对线程池的实现感兴趣，于是花了些时间来解决来弄清楚线程池的执行原理<br>本文将会探讨<br>Executor、Executors、ExecutorService、AbstractExecutorService、ThreadPoolExecutor、ForkJoinPool之间的关系<br>先简单介绍一下之间的关系，Executor是最底层的定义,ExecutorService继承了Executor<br><img src="/2024/09/29/15/%E5%85%B3%E7%B3%BB1.png"></p>
<p>AbstractExecutorService是ExecutorService的默认实现，而ThreadPoolExecutor和ForkPool都是AbstrackExecutor的子类<img src="/2024/09/29/15/%E5%85%B3%E7%B3%BB2.png"></p>
<h1 id="Executor-——-gt-一切的根源"><a href="#Executor-——-gt-一切的根源" class="headerlink" title="Executor ——> 一切的根源"></a>Executor ——&gt; 一切的根源</h1><p><img src="/2024/09/29/15/Executor-execute.png"><br>Executor接口是JUC提供的一个接口，通常用于提交Runnable任务，用于显示替代创建线程。</p>
<h1 id="ExecutorService-——-gt-线程池管理接口"><a href="#ExecutorService-——-gt-线程池管理接口" class="headerlink" title="ExecutorService ——> 线程池管理接口"></a>ExecutorService ——&gt; 线程池管理接口</h1><p>ExecutorService 是 Java 中用于管理和控制线程池的接口。它提供了管理线程生命周期的方法，并允许提交任务以供执行。换句话说，Executor中只定义了一个execute方法，管理线程池的方法全都是在这个接口中定义的</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个固定大小的线程池  </span>
    <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 提交一个异步任务  </span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 模拟长时间运行的任务  </span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 处理异步任务的结果  </span>
    future<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 关闭线程池  </span>
    executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>本文仅仅探究线程池的使用，关于CompletableFuture的部分，鄙人还有另外一篇源码解析的文章，欢迎观看！</strong><br>这里简单提一下，CompletableFuture实际上是使用我们传进去的线程池参数来执行任务的，会调用线程池Executor中定义的execute方法，而这个地方这个方法的实现者是ThreadPoolExecutor，后文会详细分析，这里先简单介绍。</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>

    <span class="token comment">// 启动有序关闭，已提交任务会执行，但不接受新任务。</span>
    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 尝试停止所有正在执行的任务，返回等待执行的任务列表。</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回此执行器是否已关闭。</span>
    <span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回所有任务是否在关闭后已完成。</span>
    <span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 阻塞直到所有任务在关闭请求后完成，或超时，或当前线程中断。</span>
    <span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">// 提交一个返回值的任务用于执行，并返回表示任务结果的Future。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 提交一个Runnable任务用于执行，并返回表示任务的Future。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 提交一个Runnable任务用于执行，并返回表示任务的Future。</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行给定的任务，返回表示其状态和结果的Future列表。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行给定的任务，返回表示其状态和结果的Future列表。在所有任务完成或超时后返回。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行给定的任务，返回一个已成功完成的任务结果。未完成的任务会被取消。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行给定的任务，返回一个已成功完成的任务结果。在成功完成或超时前返回，未完成的任务会被取消。</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现，ExecutorService定义了一系列线程池管理方法</p>
<h1 id="AbstractExecutorService-——-gt-ExecutorService-接口的默认实现"><a href="#AbstractExecutorService-——-gt-ExecutorService-接口的默认实现" class="headerlink" title="AbstractExecutorService ——>  ExecutorService 接口的默认实现"></a>AbstractExecutorService ——&gt;  ExecutorService 接口的默认实现</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 提供了 ExecutorService 的默认实现
 * 实现了 submit, invokeAny 和 invokeAll 方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span>

    <span class="token comment">// 构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 返回一个 RunnableFuture，用于包装 Runnable 任务和默认值</span>
    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回一个 RunnableFuture，用于包装 Callable 任务</span>
    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 提交一个 Runnable 任务</span>
    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 提交一个 Runnable 任务，并返回一个 Future</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 提交一个 Callable 任务</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行一组任务，返回第一个成功完成的任务结果</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">doInvokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span>
                              <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行一组任务，返回第一个成功完成的任务结果</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行一组任务，返回第一个成功完成的任务结果，带超时</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span>
                           <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行一组任务，返回所有任务的 Future 列表</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行一组任务，返回所有任务的 Future 列表，带超时</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span>
                                         <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 取消所有 Future</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 取消从索引 j 开始的所有 Future</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略具体步骤</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>源码中实现并定义了一些线程池的管理和操作，有一个地方是比较有意思的<br><img src="/2024/09/29/15/%E5%AD%90%E7%B1%BB%E8%B0%83%E7%94%A8.png"></p>
<p>AbstractExecutorService并没有实现execute方法，从而这个地方的调用实际上是调用的AbstractExecutorService的子类实现的方法，这中设计方法叫做<strong>模板方法模式</strong></p>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>由父类定义一个算法的骨架，将一些步骤实现延迟到子类中，子类可以重写这些步骤来实特定的行为，但是算法的整体逻辑由父类来设计</p>
<p>回到上面的示例代码中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 提交一个异步任务  </span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 模拟长时间运行的任务  </span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们进入到Executors中，我们就能找到真相<img src="/2024/09/29/15/newFixedThreadPool.png"><br>原来如此，execute实际调用的是ThreadPoolExecutor中的实现！</p>
<h1 id="ThreadPoolExecutor-——-gt-灵活的方式来创建和管理线程池"><a href="#ThreadPoolExecutor-——-gt-灵活的方式来创建和管理线程池" class="headerlink" title="ThreadPoolExecutor ——> 灵活的方式来创建和管理线程池"></a>ThreadPoolExecutor ——&gt; 灵活的方式来创建和管理线程池</h1><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
    corePoolSize<span class="token punctuation">,</span> <span class="token comment">// 核心线程数</span>
    maximumPoolSize<span class="token punctuation">,</span> <span class="token comment">// 最大线程数</span>
    keepAliveTime<span class="token punctuation">,</span> <span class="token comment">// 线程空闲时间</span>
    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token comment">// 时间单位</span>
    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 任务队列</span>
    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 拒绝策略</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提交任务</span>
executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭线程池</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h2><table>
<thead>
<tr>
<th>参数</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>corePoolSize</td>
<td>线程池中的核心线程数</td>
</tr>
<tr>
<td>workQueue</td>
<td>存放提交的task</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>线程池中允许的最大线程数</td>
</tr>
<tr>
<td>threadFactory</td>
<td>线程工厂, 用来创建线程, 由<code>Executors#defaultThreadFactory</code>实现</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>空闲线程存活时间(默认是临时线程, 也可设置为核心线程)</td>
</tr>
<tr>
<td>unit</td>
<td>空闲线程存活时间单位枚举</td>
</tr>
</tbody></table>
<h3 id="工作队列相关"><a href="#工作队列相关" class="headerlink" title="工作队列相关"></a>工作队列相关</h3><p>线程池的队列主要有以下几种：</p>
<h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>有界阻塞队列，性能高，不能动态扩展，高并发下可能会导致线程阻塞</p>
<h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><p>Executors.newFixedThreadPool默认的队列就是这个队列，容易造成内存耗尽，<br>所以不建议直接使用Executors来new一个线程池</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                      <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>链表实现的有界或者无界队列，容量可以动态扩展，高并发下性能好，缺点：内存占用大，有可能会导致资源耗尽</p>
<h4 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h4><p>不存储元素的队列，每个插入操作必须等待一个相应的删除操作，适用于任务交给工作线程来。<br>缺点：<br>高并发场景下，可能会造成线程阻塞，不适合需要缓存任务的场景</p>
<h4 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><p>优点：基于优先级的无界阻塞队列，元素按照优先级顺序出队，适用于需要任务优先级调度的场景。<br>缺点：插入和删除操作的时间复杂度为 O(log n)，性能较低；无界队列可能导致内存溢出。</p>
<h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>优点：基于优先级队列的无界阻塞队列，元素只有在其延迟期满后才能出队，适用于需要延迟执行任务的场景。<br>缺点：插入和删除操作的时间复杂度为 O(log n)，性能较低；无界队列可能导致内存溢出。</p>
<h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><h4 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h4><p>如果线程池没关闭将其提交到线程池当中，直接执行execute<br>如果线程池关闭，则直接丢弃</p>
<h4 id="AbortPolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h4><p>拒绝并抛弃任务，抛出异常</p>
<h4 id="DiscardPolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h4><p>直接抛弃任务，做任何操作。</p>
<h4 id="DiscardOldestPolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h4><p>如果线程池没有关闭，丢弃最老的任务，然后将任务提交并执行<br>如果线程池关闭，就直接丢弃</p>
<h2 id="关于线程创建后任务会如何执行"><a href="#关于线程创建后任务会如何执行" class="headerlink" title="关于线程创建后任务会如何执行"></a>关于线程创建后任务会如何执行</h2><ol>
<li>线程数小于核心线程数时，直接创建线程来执行任务</li>
<li>大于核心线程且工作队列没满就将任务提交给工作队列</li>
<li>大于核心线程数且队列已满，直接创建一个临时线程来处理任务</li>
<li>大于最大线程数，工作队列已满，执行拒绝策略</li>
</ol>
<h2 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h2><p>当我们进入到这个类中，会发现有好多代码，这里就不贴出来了，我们只挑重点的来解析，我们来顺着上面的示例代码来深入</p>
<h2 id="定义和属性"><a href="#定义和属性" class="headerlink" title="定义和属性"></a>定义和属性</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span>
	<span class="token comment">// 用于同时存储线程池状态和工作线程数量的原子整数</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 用于存储线程数量的位数</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNT_BITS</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">SIZE</span> <span class="token operator">-</span> <span class="token number">3</span>

	<span class="token comment">// 用于提取线程数量部分的掩码</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNT_MASK</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	
	<span class="token comment">// runState 存储在高位</span>
	<span class="token comment">// 线程池正在运行，可以接受新任务并处理队列中的任务</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNNING</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 线程池关闭状态，不再接受新任务，但会处理队列中的任务</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SHUTDOWN</span>   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 线程池停止状态，不再接受新任务，也不处理队列中的任务，并中断正在执行的任务</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STOP</span>       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 线程池整理状态，所有任务都已终止，工作线程数量为 0</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIDYING</span>    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 线程池终止状态，terminated() 方法已完成</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TERMINATED</span> <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span>
		

	<span class="token comment">// 阻塞队列，主要用于生产者-消费者模式，在多线程环境中非常有用。它提供了线程安全的方式来在队列中添加和移除元素，并且在队列为空或已满时，线程可以被阻塞，直到有空间或元素可用。</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">;</span>
	
	<span class="token comment">// 访问 workers 集合和相关簿记的锁</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 包含线程池中所有工作线程的集合</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 支持 awaitTermination 的条件</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> termination <span class="token operator">=</span> mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 记录达到的最大线程池大小</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span>
	
	<span class="token comment">// 已完成任务的计数器</span>
	<span class="token keyword">private</span> <span class="token keyword">long</span> completedTaskCount<span class="token punctuation">;</span>
	
	<span class="token comment">// 所有用户控制参数都声明为 volatile，以便基于最新值进行操作</span>
	
	<span class="token comment">// 用于创建新线程的工厂</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">;</span>
	
	<span class="token comment">// 执行时饱和或关闭时调用的处理程序</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">;</span>
	
	<span class="token comment">// 空闲线程等待工作的超时时间（纳秒）</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span>
	
	<span class="token comment">// 如果为 false（默认），核心线程即使在空闲时也保持存活</span>
	<span class="token comment">// 如果为 true，核心线程使用 keepAliveTime 超时等待工作</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span>
	
	<span class="token comment">// 核心线程池大小</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span>
	
	<span class="token comment">// 最大线程池大小</span>
	<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们点进去new ThreadPoolExecutor</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  
                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>  
                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>  
                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>  
                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>  
                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>  
         <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从这里我们可以看见有一个参数是Executors中的工厂方法，这里我们稍后再提<br>顺着this去翻找<img src="/2024/09/29/15/this%E8%B5%8B%E5%80%BC.png"><br>发现这里仅仅进行了一些赋值，emm，线索好像断了。没关系，还记得我们上文提到的execute方法吗？ThreadPoolExecutor中需要实现这个方法，让我们去看看吧</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果传入的任务为空，则抛出 NullPointerException</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 获取当前的控制状态 ctl</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 如果当前运行的线程数少于 corePoolSize，尝试添加一个新的工作线程来执行任务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果成功添加了工作线程，则返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// 否则，重新获取当前的控制状态 ctl</span>
        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 如果线程池正在运行，并且任务可以成功加入到工作队列中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 再次检查线程池的运行状态</span>
        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果线程池不再运行且任务成功移除，则拒绝任务</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果没有运行的工作线程，尝试添加一个新的工作线程</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 如果任务无法加入队列，尝试添加一个新的工作线程</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 如果添加工作线程失败，则拒绝任务</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里就是我们上文提到的提交任务时会遇到的情况：</p>
<ol>
<li>运行中的线程数 &lt; 核心线程数，就尝试添加一个新的工作线程来执行任务</li>
<li>大于核心线程数，就尝试将任务加到工作队列中</li>
<li>如果无法加入队列就尝试添加一个新的工作线程</li>
<li>再失败就拒绝任务<br>接着来看addWorker<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    retry<span class="token operator">:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 仅在必要时检查队列是否为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> firstTask <span class="token operator">!=</span> <span class="token keyword">null</span>
                <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果工作线程数量超过限制，返回 false</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
                <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token constant">COUNT_MASK</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// 尝试增加工作线程数量</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>
            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重新获取 ctl</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>
            <span class="token comment">// 否则 CAS 失败，重试内部循环</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Worker</span> w <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新的 Worker</span>
        <span class="token keyword">final</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span> <span class="token comment">// 获取 Worker 的线程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>
            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加锁</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 再次检查线程池的运行状态</span>
                <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 如果线程池正在运行，或者线程池未停止且任务为空</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span><span class="token constant">NEW</span><span class="token punctuation">)</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加 Worker 到集合</span>
                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> largestPoolSize<span class="token punctuation">)</span>
                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 更新最大池大小</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程</span>
                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>workerStarted<span class="token punctuation">)</span>
            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果线程启动失败，执行失败处理</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
我们到这里就很清楚了，所谓的线程池不过是管理的一堆线程的工具，实际上就是帮助我们判断合适去新增线程何时复用线程。<br>最后让我们去看看线程复用是如何实现的！</li>
</ol>
<h3 id="线程复用的奥秘"><a href="#线程复用的奥秘" class="headerlink" title="线程复用的奥秘"></a>线程复用的奥秘</h3><p>ThreadPoolExecutor中有一个静态内部类Worker</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6138294804551838833L</span><span class="token punctuation">;</span>

    <span class="token comment">// 运行此 Worker 的线程。如果工厂创建线程失败，则为 null</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"serial"</span><span class="token punctuation">)</span> <span class="token comment">// 不太可能是可序列化的</span>
    <span class="token keyword">final</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>

    <span class="token comment">// 要运行的初始任务。可能为 null</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"serial"</span><span class="token punctuation">)</span> <span class="token comment">// 静态类型为非可序列化</span>
    <span class="token class-name">Runnable</span> firstTask<span class="token punctuation">;</span>

    <span class="token comment">// 每个线程的任务计数器</span>
    <span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span>

    <span class="token comment">// 创建具有给定初始任务和线程工厂的 Worker</span>
    <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 runWorker 之前禁止中断</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 将主运行循环委托给外部的 runWorker 方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 锁定以防止中断任务</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 尝试获取锁</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 尝试释放锁</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 锁定此 Worker</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 尝试锁定此 Worker</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 解锁此 Worker</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 检查当前线程是否持有锁</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 中断此 Worker 的线程</span>
    <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Worker是定义了一个线程和要执行的初始任务，而线程复用要关注到这行<br><img src="/2024/09/29/15/run.png"><br>跳转之后，发现是调用的ThreadPoolExecutor中定义的runWorker方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>
    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许中断</span>
    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果线程池正在停止，确保线程被中断；</span>
            <span class="token comment">// 如果没有，确保线程没有被中断。这需要在第二种情况下重新检查，</span>
            <span class="token comment">// 以处理 shutdownNow 竞赛，同时清除中断</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                 <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>
                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现这里的逻辑：</p>
<ol>
<li>获取当前线程、获取Worker中的初始任务并清空，解锁Worker允许中断</li>
<li>只要任务不为null或者从getTask，也就是不停的从wokerQueue中获取到新任务就一直循环执行，从而达到线程复用</li>
<li>检测线程池状态，进行一些钩子方法<br>到这里我们才真正找到线程池的奥秘，原来是通过循环来不断从任务队列中获取任务执行，而不是执行完任务之后就终止线程！！！</li>
</ol>
<h3 id="线程池中线程销毁的原理"><a href="#线程池中线程销毁的原理" class="headerlink" title="线程池中线程销毁的原理"></a>线程池中线程销毁的原理</h3><p><del>本来没打算写这个的，可是在牛课上看见了问这个的，但是我好像答不出来</del><br>看到这一行代码：<br><img src="/2024/09/29/15/task.png"><br>当woker执行过一次之后，task = null ，也就是这个循环是否进行就全看getTask()函数了<br>让我们关注到getTask()的源码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Runnable</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 上一次进行poll()任务出列是否超时</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">/**
		* 这是ctl的定义，他是一个AtomicInteger类型的变量，是原子操作的，用来控制线程池的状态和工作线程的数量
		* private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
		*/</span>
        <span class="token comment">// 仅在必要时检查队列是否为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token comment">// 当前线程池中工作线程的数量</span>
        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	        <span class="token comment">//worker工作线程会不会被回收 </span>
	        <span class="token comment">// alloW是控制核心线程是否会被销毁的 </span>
            <span class="token comment">//1. allowCoreThreadTimeOut == true,核心线程和非核心线程空闲keepAliveTime被销毁，workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)  </span>
            <span class="token comment">//2. allowCoreThreadTimeOut == false,非核心线程空闲keepAliveTIme销毁，workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) </span>
            <span class="token comment">//  ,核心线程会被阻塞，不会被销毁workQueue.take()</span>
        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">&gt;</span> corePoolSize<span class="token punctuation">;</span>
		<span class="token comment">// 如果允许核心线程被淘汰或者存活线程数大于核心线程数并且超时了，或者线程数大于最大线程数，开始淘汰线程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">&gt;</span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据是否允许超时，选择poll或take方法获取任务</span>
            <span class="token class-name">Runnable</span> r <span class="token operator">=</span> timed <span class="token operator">?</span>
                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> r<span class="token punctuation">;</span>
            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以简单总结一下：<br>workQueue为空，线程就会被销毁，具体的实现是通过阻塞队列workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)来控制线程是否销毁的，如果使用poll就会在指定时间内等待元素可用否则返回null，从而等待keepAlive来决定是否销毁<br>两种情景：</p>
<ol>
<li>allowCoreThreadTimeOut == true，也就是允许核心线程销毁，两种线程使用poll来进行调用，一段时间后销毁</li>
<li>allowCoreThreadTimeOut == false，也就是非核心线程会被销毁，核心线程永远不会销毁，非核心线程会调用poll，而核心线程会调用take，从而一直阻塞这个线程来做到永不销毁<br>然后这个逻辑之后我们回到上面的调用的代码<img src="/2024/09/29/15/finally.png"><br>之后会走这个流程，不过销毁的过程我们就不看了。</li>
</ol>
<h1 id="ForkJoinPool-——-gt-递归拆分！让并行嗨起来！并行流的原理！"><a href="#ForkJoinPool-——-gt-递归拆分！让并行嗨起来！并行流的原理！" class="headerlink" title="ForkJoinPool ——> 递归拆分！让并行嗨起来！并行流的原理！"></a>ForkJoinPool ——&gt; 递归拆分！让并行嗨起来！并行流的原理！</h1><p>篇幅有限简单介绍一下</p>
<h2 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h2><ol>
<li>ForkJoinTask：任务的基本单位，提供fork、join，用于任务的分解和合并</li>
<li>ForkJoinWorkerThread：执行ForkJoinTask的工作线程</li>
<li>WorkQueue：工作线程用于存储任务</li>
<li>ForkJoinPool：管理和调度ForkJoinTask的执行</li>
</ol>
<h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><p>工作窃取法：</p>
<ul>
<li>工作窃取：当一个工作线程完成了自己的任务队列中的任务后，它会尝试从其他线程的队列中窃取任务来执行。</li>
<li>双端队列：每个工作线程的任务队列是一个双端队列，线程从队列的一端（通常是头部）获取任务执行，而其他线程从队列的另一端（通常是尾部）窃取任务。</li>
</ul>
<h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><ul>
<li>使用stream()方法将数据源转换为顺序流，或使用parallelStream()方法将数据源转换为并行流。</li>
<li>使用中间操作（如filter、map、sorted等）和终端操作（如forEach、collect、reduce等）定义流的处理逻辑。</li>
<li>执行并行处理：</li>
<li>并行流会自动使用ForkJoinPool来并行处理数据。每个操作会被拆分成多个子任务，并由ForkJoinPool中的工作线程并行执行。</li>
</ul>
<h1 id="常见八股"><a href="#常见八股" class="headerlink" title="常见八股"></a>常见八股</h1><h2 id="为什么使用抽象类来实现接口"><a href="#为什么使用抽象类来实现接口" class="headerlink" title="为什么使用抽象类来实现接口"></a>为什么使用抽象类来实现接口</h2><ol>
<li>因为普通类去实现接口中的方法，子类在继承的时候必须重写父类中的方法不利于代码的复用</li>
<li>抽象类可以提供一些默认实现，从而使得子类直接使用即可</li>
<li>可以强制子类去实现某个方法(abstract)</li>
</ol>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>es</title>
    <url>/2024/04/14/28/</url>
    <content><![CDATA[<h1 id="Elasticsearch学习笔记"><a href="#Elasticsearch学习笔记" class="headerlink" title="Elasticsearch学习笔记"></a>Elasticsearch学习笔记</h1><h2 id="Analyzer"><a href="#Analyzer" class="headerlink" title="Analyzer"></a>Analyzer</h2><p>Analyzer是ES中的一个组件，用于将输入的文本转化为索引时锁使用的文本特征向量。将文本分解，然后转化为特定的文本特征。</p>
<h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>分片就是将索引内部的数据分割成多个部分的机制，用于分布、存储和管理索引的数据 。允许索引被拆分为多个物理或逻辑部分从而实现分布式存储和处理数据的能力</p>
<h1 id="面试常问："><a href="#面试常问：" class="headerlink" title="面试常问："></a>面试常问：</h1><ol>
<li>索引文档的过程：<br> 1. 协调节点默认使用文档ID参与计算，为路由提供合适的分片，转发请求<br> 2. 分片所在节点接收到请求之后，将请求写入内存缓冲区，定时refresh到文件系统缓存，经过这一步既可以被搜索到了，当Filesystem cache中的数据写入到磁盘中时，才会清除掉translog，这个过程叫做flush；<ol start="2">
<li>es的删除：es中的文件并没有删除，每个段都有一个.del文件，删除是在这里进行标志，该文档仍然能够匹配到，但是会在结果中被过滤掉，后续在执行merge(周期性的将较小的段合并为一个较大的段)操作时，会被彻底清除掉</li>
<li>更新：每次更新都是先标记旧的文档为已删除，重新建立一个文档，并通过版本号来区分</li>
<li>搜索过程：<ul>
<li>Query Then Fetch</li>
</ul>
<ol>
<li>查询广播到每一个分片，分片本地执行搜索，建立一个优先队列，搜索只能搜到文件缓存的内容，所以并不是完全实时的</li>
<li>分片返回优先队列中文档的ID和排序值给协调节点，协调节点合并结果并排序</li>
<li>协调节点确定要取回的文档，然后向对应分片发送请求，最后协调节点返回给客户端</li>
</ol>
</li>
<li>写过程：客户端选择一个node(作为协调节点）发请求，协调节点对文档进行路由，将请求转发给有这个文档的主分片的节点，主分片处理请求，并将将数据同步到副本中，之后协调节点根据完成状态，相应给客户端</li>
<li>读过程：协调节点根据doc id来查询，然后对doc id进行hash来确认到了哪个分片上，然后转发请求到对应的节点，使用负载均衡 来选取一个分片来处理，并转发给它，之后由这个节点来读取并返回给协调节点，协调节点返回给客户端</li>
<li>es相对于mongodb，mysql的优势：1.全文检索，相关性排名 2.近实时性3.分布式处理4.数据分析 缺点：不支持事务</li>
</ol>
</li>
</ol>
<ul>
<li>DSL查询：由es提供的基于JSON的DSL语句<ul>
<li>叶子查询：在特定字段中查询特定值</li>
<li>符合查询：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式</li>
<li>指定高亮字段：<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">GET /</span><span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span><span class="token selector">/_search</span>
<span class="token punctuation">{</span>
  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"match"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"搜索字段"</span><span class="token punctuation">:</span> <span class="token string">"搜索关键字"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token selector">,
  "highlight":</span> <span class="token punctuation">{</span>
    <span class="token string">"fields"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"高亮字段名称"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"pre_tags"</span><span class="token punctuation">:</span> <span class="token string">"&lt;em&gt;"</span><span class="token punctuation">,</span>
        <span class="token string">"post_tags"</span><span class="token punctuation">:</span> <span class="token string">"&lt;/em&gt;"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>索引 :<img src="/2024/04/14/28/%E4%B8%8Emysql%E5%AF%B9%E6%AF%94.png" alt="|725"><ul>
<li>倒排索引和正排索引的区别：<ul>
<li>正排索引是词条分到文档中</li>
<li>倒排索引是给词条统计文档</li>
<li><img src="/2024/04/14/28/%E4%BA%8C%E8%80%85%E5%8C%BA%E5%88%AB.png" alt="|275"></li>
</ul>
</li>
<li>使用索引模板来加快索引的创建与属性设置</li>
<li>索引结构：倒排索引，使用分词，记录每一个分词出现的文档编号和在文档中出现的位置<ul>
<li><img src="/2024/04/14/28/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.jpg"></li>
<li>搜索模块，路由值时，</li>
</ul>
</li>
<li>索引搜索：<ul>
<li>当搜索请求不带路由值时，接收到请求的节点成为协调节点，之后会选择使用的分片，之后会转发请求到拥有这些分片的节点上，每个分片产生一部分的局部结果汇总给协调节点，由协调节点汇总并排序之后返回。</li>
<li>使用路由条件进行搜索时，会将请求转发，之后直接由选中的节点进行返回</li>
</ul>
</li>
<li>索引映射：<ul>
<li>相当于指定了索引字段的名字和能够存储的类型</li>
<li>常用的数据类型：long , integer,short,byte,double,date(date可以在后面加一个format字段来执行时间的格式转换),keyword(用于保存原始文本，不会进行分词处理，用于精确匹配)，boolean,geo_poinst经纬度类型，json格式(需要使用properties来指定内部对象的属性，实际存储时会使用 . 来表示层次结构)，lists(数组)</li>
<li>**<em>如何既能快速匹配，又能精确匹配?</em>**，给字段添加一个fields参数，然后在里面放一个keyword字段</li>
<li>在每一个字段的后面使用：”copy_to”:”复制出来的新字段名字” 可以做到复制这些字段的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">PUT mysougoulog/_mapping</span> 
<span class="token punctuation">{</span>
  <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
      <span class="token string">"visitTime"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"date"</span><span class="token punctuation">,</span>
        <span class="token string">"format"</span><span class="token punctuation">:</span><span class="token string">"yyyy-MM-dd HH:mm:ss || epoch_millis"</span><span class="token punctuation">,</span>
        <span class="token string">"ignore_malformed"</span><span class="token punctuation">:</span>true # 这个字段类型不对时，不写入，但是不影响其他字段的写入
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector"># 二者兼得
PUT mysougoulog/_mapping</span> 
<span class="token punctuation">{</span>
    <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token string">"key"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
          <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>
          <span class="token string">"fields"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token string">"keyword"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
              <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"keyword"</span><span class="token punctuation">,</span>
              <span class="token string">"ignore_above"</span><span class="token punctuation">:</span>256 # 表示256个字符后面的内容被忽略，用来节省字段
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>文档：<ul>
<li>CRUD时如何控制并发：<ul>
<li>修改时，加上?if_seq_no = xx&amp;if_primary_term=xx来使用乐观锁来控制，这两个字段是可以查到的，Elastisearch不支持事务管理</li>
</ul>
</li>
<li>文本分析：<ul>
<li>文本分析需要经过&gt;=0个字符过滤器一个分词器，&gt;=0 个分词过滤器<ul>
<li>字符过滤器：对原始文档本进行转换，如去掉html标签</li>
<li>分词器：按照规则切分为单词，</li>
<li>分词过滤器：过滤掉一些没有用的词比如，的，删除停用词,也可进行分词的处理，如大小写转化，添加同义词</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>分词器：<ul>
<li>创建倒排索引时对文档进行分词，用户搜索时，对输入的内容进行分词</li>
<li>IK分词器：<ul>
<li>ik_smart 智能切分模式，粗粒度</li>
<li>ik_max_word：最细切分，细粒度</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="数据：-搜索数据：-1-精确搜索：搜索内容不经过文本分析直接进行文本匹配，适用于非text类，一般用于keyword字段-2-全文检索：对检索内容和字段都会进行文本分析-3-经纬度搜索，可以指定某个区域，例如⚪-4-复合搜索：-布尔搜索：通过指定布尔逻辑条件来组织多条查询语句，同时满足整个布尔条件的才会被搜索出来-等等-父子关联-因为es会把数据折叠起来，使用点，所以当一个对象有多个相同的key时，不能进行搜索了，例如goods商品，里面存放商品id和生产时间，就会被折叠-警告：-避免使用对象数组-解决方法：使用嵌套对象-使用join字段来明确父子关系-聚集统计：用于分析索引和文档，类似于mysql中的聚集操作"><a href="#数据：-搜索数据：-1-精确搜索：搜索内容不经过文本分析直接进行文本匹配，适用于非text类，一般用于keyword字段-2-全文检索：对检索内容和字段都会进行文本分析-3-经纬度搜索，可以指定某个区域，例如⚪-4-复合搜索：-布尔搜索：通过指定布尔逻辑条件来组织多条查询语句，同时满足整个布尔条件的才会被搜索出来-等等-父子关联-因为es会把数据折叠起来，使用点，所以当一个对象有多个相同的key时，不能进行搜索了，例如goods商品，里面存放商品id和生产时间，就会被折叠-警告：-避免使用对象数组-解决方法：使用嵌套对象-使用join字段来明确父子关系-聚集统计：用于分析索引和文档，类似于mysql中的聚集操作" class="headerlink" title="数据：  - 搜索数据：      1. 精确搜索：搜索内容不经过文本分析直接进行文本匹配，适用于非text类，一般用于keyword字段      2. 全文检索：对检索内容和字段都会进行文本分析      3. 经纬度搜索，可以指定某个区域，例如⚪      4. 复合搜索：          - 布尔搜索：通过指定布尔逻辑条件来组织多条查询语句，同时满足整个布尔条件的才会被搜索出来          - 等等  - 父子关联:      - 因为es会把数据折叠起来，使用点，所以当一个对象有多个相同的key时，不能进行搜索了，例如goods商品，里面存放商品id和生产时间，就会被折叠 警告： 避免使用对象数组      - 解决方法：使用嵌套对象      - 使用join字段来明确父子关系  - 聚集统计：用于分析索引和文档，类似于mysql中的聚集操作"></a>数据：<br>  - 搜索数据：<br>      1. 精确搜索：搜索内容不经过文本分析直接进行文本匹配，适用于非text类，一般用于keyword字段<br>      2. 全文检索：对检索内容和字段都会进行文本分析<br>      3. 经纬度搜索，可以指定某个区域，例如⚪<br>      4. 复合搜索：<br>          - 布尔搜索：通过指定布尔逻辑条件来组织多条查询语句，同时满足整个布尔条件的才会被搜索出来<br>          - 等等<br>  - 父子关联:<br>      - 因为es会把数据折叠起来，使用点，所以当一个对象有多个相同的key时，不能进行搜索了，例如goods商品，里面存放商品id和生产时间，就会被折叠 <strong>警告：</strong> 避免使用对象数组<br>      - 解决方法：使用嵌套对象<br>      - 使用join字段来明确父子关系<br>  - 聚集统计：用于分析索引和文档，类似于mysql中的聚集操作</h2></li>
<li>集群：<ol>
<li>新集群的产生：master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理，主节点和数据节点不是一个<ul>
<li>初始化投票配置：将配置文件中的候选节点写入投票配置，所有节点均可参与投票</li>
<li>选举主节点：超过半数就可成为主节点</li>
<li>发现集群中的其他节点，节点尝试连接主节点，连接上之后主节点把最新的状态发布到这些节点中</li>
<li>集群完成，对外启动统一的服务</li>
</ul>
</li>
<li>集群状态的发布过程:  <strong>删除或者新增节点时触发</strong><ul>
<li>主节点把最新的集群状态发送到每个节点上，每个节点将数据保存并向主节点发送确认响应</li>
<li>主节点接收到半数以上的确认消息，开始提交，发送给每个节点通知使用最新的集群状态，子节点接收后发送确认响应，所有的都确认即可完成发布</li>
<li>响应超过时间限制，则删除这个子节点</li>
</ul>
</li>
</ol>
</li>
<li>如何实现master选举？<ul>
<li>对于所有可以成为master的节点，根据nodeId来排序，每个节点把自己直到的节点排一次序，然后选出第一个节点，认为他是master节点，入股某个节点到达可以成为超过master节点的一半，那就成为了master节点</li>
</ul>
</li>
<li>脑裂问题：<ul>
<li>设置最小主节点设置，设置的值应该是集群中节点总数的一半 + 1</li>
</ul>
</li>
<li>读写一致：<ul>
<li>版本控制：每个文档在ES中都有一个版本号，每次被修改后，版本号会增加，获取文档时，会同时或者它的版本号，更新时可以指定这个版本号，如果版本号不匹配，更新操作就会被拒绝</li>
<li>刷新与同步：向ES中写入数据时，数据先被写入内存缓冲区，然后每隔一段时间刷新一次或者缓冲区满时被刷新到磁盘后就可以被搜索到了，但是没有被写入磁盘，之后定期同步到磁盘中，同步后就是持久化存储了</li>
<li>副本和分片:只有主节点可以写入数据，然后被复制到副本分片中，读取数据时可以从任何一个包含该数据的分片中获取</li>
<li>设置写入确认级别</li>
</ul>
</li>
<li>代码中使用:<img src="/2024/04/14/28/%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%811.png" alt="|575"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testMatchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建Request</span>
    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.组织请求参数</span>
    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.发送请求</span>
    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.解析响应</span>
    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">SearchResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.获取总条数</span>
    <span class="token keyword">long</span> total <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共搜索到"</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">"条数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.遍历结果数组</span>
    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3.得到_source，也就是原始json文档</span>
        <span class="token class-name">String</span> source <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.反序列化并打印</span>
        <span class="token class-name">ItemDoc</span> item <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token class-name">ItemDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="MeiliSearch-gt-轻量级的ES"><a href="#MeiliSearch-gt-轻量级的ES" class="headerlink" title="MeiliSearch->轻量级的ES"></a>MeiliSearch-&gt;轻量级的ES</h2><p>ES虽然扩展性和实时性都比较好，但是中小型项目中，ES有些过剩，对设备的要求也比较高，可以使用MeiliSearch来替代。同时MeiliSearch本身就支持中文搜索，而无需配置</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2024/03/30/44/</url>
    <content><![CDATA[<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 使用Netty替代springboot的tomcat作为服务器</li>
<li><input disabled type="checkbox"> 使用Netty替代websocket来通信</li>
<li><input disabled type="checkbox"> 更新一下一致性哈希算法，如何更高效，顺便加上解释</li>
</ul>
<h1 id="基本介绍和使用介绍"><a href="#基本介绍和使用介绍" class="headerlink" title="基本介绍和使用介绍"></a>基本介绍和使用介绍</h1><h2 id="I-x2F-O模型："><a href="#I-x2F-O模型：" class="headerlink" title="I/O模型："></a>I/O模型：</h2><ol>
<li>阻塞I/O BIO：程序向内核发起I/O调用，发起调用的线程就一直等待内核返回结果。如果使用BIO实现异步，只能使用多线程模型，会导致增加线程切换的开销。</li>
<li>同步非阻塞IO NIO：应用程序通过轮询的方式获取请求结果。</li>
<li>多路复用I/O：多个进程的I/O可以注册到一个复用器上(Selector)，如果Selector监听的所有的I/O内核缓冲区都没有可读数据，select调用会被阻塞，直到任意I/O在内核缓冲区中有刻度数据时，会立刻返回。并通知其他进程再次发起I/O，也就是使用一个线程监控多个IO操作。 </li>
<li>信号驱动I/O：进程预先告知内核，向内核注册一个信号处理函数，之后进程返回不阻塞，进程通过信号处理函数继续调用I/O读取数据。IO操作就绪后，操作系统会发送信号通知应用程序。 通知何时可以开始一个I/O操作</li>
<li>异步I/O AIO：应用程序发起IO操作之后，立刻返回，操作系统在IO操作执行后，会通知应用程序，应用程序无需轮询IO状态。 通知I/O操作何时结束</li>
</ol>
<ul>
<li>BIO和NIO的区别: <img src="/2024/03/30/44/BIOandNIO.png"></li>
<li>AIO-&gt;异步I/O</li>
</ul>
<h3 id="Reactor-模型"><a href="#Reactor-模型" class="headerlink" title="Reactor 模型"></a>Reactor 模型</h3><blockquote>
<p>是一种处理并发I/O操作的设计模式。核心思想是通过实践多路复用机制来管理多个I/O事件。<br>主要的组件：1. 事件多路分发器(负责监听多个I/O事件，将这些事件分发给相应的事件处理器)<br>2.事件处理器 3.事件分发器：将事件从多路分发器中分发到响应的处理器。</p>
</blockquote>
<h3 id="select、poll、epoll的区别"><a href="#select、poll、epoll的区别" class="headerlink" title="select、poll、epoll的区别"></a>select、poll、epoll的区别</h3><ol>
<li>select：将已连接的Socket都放在一个文件描述符集合中，然后调用select函数将文件描述集合拷贝到内核中，让内核来检查是否有网络事件发生，检查方式就是遍历文件描述符集合。</li>
<li>poll：与select区别是，不再使用BitMap来存储文件描述符，突破了个数上限</li>
<li>epoll：内核使用红黑树来关注待检测的Socket高效，使用事件驱动，内核维护了一个链表来记录就绪事件，只会将事件发生的Socket集合传递给应用程序吗，而不是轮询整个集合</li>
</ol>
<h2 id="如何解决对象创建和销毁问题"><a href="#如何解决对象创建和销毁问题" class="headerlink" title="如何解决对象创建和销毁问题"></a>如何解决对象创建和销毁问题</h2><ol>
<li>对象池服用技术</li>
<li>零拷贝技术：Netty在进行I/O读写时，直接使用DirectBuffer，从而直接避免了数据在堆内存和堆外内存之间的拷贝</li>
</ol>
<h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><blockquote>
<p>数据从读取到内核缓冲区，然后直接由内核缓冲区发送到网络。而不是拷贝到用户缓冲区域再拷贝到内核缓冲区进行发送。</p>
</blockquote>
<p>Netty零拷贝实现</p>
<ul>
<li>使用堆外内存，避免JVM堆内存到堆外内存的数据拷贝</li>
<li>CompositeByteBuf 类，可以组合多个 Buffer 对象合并成一个逻辑上的对象，避免通过传统内存拷贝的方式将几个 Buffer 合并成一个大的 Buffer。</li>
<li>通过 Unpooled.wrappedBuffer 可以将 byte 数组包装成 ByteBuf 对象，包装过程中不会产生内存拷贝。</li>
<li>ByteBuf.slice ，slice 操作可以将一个 ByteBuf 对象切分成多个 ByteBuf 对象，切分过程中不会产生内存拷贝，底层共享一个 byte 数组的存储空间。</li>
<li>Netty 使用 封装了transferTo() 方法 FileRegion，可以将文件缓冲区的数据直接传输到目标 Channel，避免内核缓冲区和用户态缓冲区之间的数据拷贝</li>
</ul>
<h3 id="Java中的IO模型"><a href="#Java中的IO模型" class="headerlink" title="Java中的IO模型"></a>Java中的IO模型</h3><ol>
<li>BIO java.io是BIO</li>
<li>NIO java.nio包是NIO的实现，实质上仍然是同步的，读写操作时非同步的，但是这些操作是由应用程序主动发起和处理的，所以仍然是同步的。</li>
<li>AIO java.nio.channels是NIO的实现</li>
</ol>
<h2 id="按照定义来说，Netty是一个异步的、事件驱动的、用来做高性能高可靠性的网络应用的框架"><a href="#按照定义来说，Netty是一个异步的、事件驱动的、用来做高性能高可靠性的网络应用的框架" class="headerlink" title="按照定义来说，Netty是一个异步的、事件驱动的、用来做高性能高可靠性的网络应用的框架"></a>按照定义来说，Netty是一个异步的、事件驱动的、用来做高性能高可靠性的网络应用的框架</h2><p>Netty相比于Tomcat，不需要遵循Serlet规范，可以最大化的发挥NIO的特性。<br>如果需要面向TCP的网络应用开发，那么Netty才是最佳选择</p>
<h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><ol>
<li>Channel &amp; Buffer</li>
<li>Selector</li>
<li>Bootstrap</li>
</ol>
<h4 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h4><p><img src="/2024/03/30/44/Netty%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91.png"></p>
<ol>
<li>网络通信层：支持多种网络协议，当网络数据读取到内核缓冲区后，会触发各种网络事件，会分发给事件调度层进行处理。核心是<ul>
<li>BootStrap，负责Netty客户端的启动、初始化、服务器连接等过程</li>
<li>ServerBootStrap：用于服务端绑定本地端端口，会绑定Boss和Worker两个EventLoopGroup</li>
<li>Channle 通道，基于NIO更高层次的抽象吗</li>
</ul>
</li>
<li>事件调度层：通过Reactor线程模型对各种事件进行聚合处理。通过Selector主循环线程继承u洞中时间，实际业务处理逻辑是交由服务编排曾中的Handler解决的。<ul>
<li>EventLoopGroup（核心）：本质是一个<strong>线程池</strong>，主要负责接收I/O请求，并分配线程执行处理请求。通过创建不同的EventLoopGroup参数可以支持Reactor三种线程模型：<ul>
<li>单线程模型：Group中只包含一个EventLoop，Boss和Worker使用同一个Group</li>
<li>多线程：多个EventLoop，B和W使用同一个</li>
<li>主从多线程：多个EventLoop，B和W使用不同的Group</li>
</ul>
</li>
<li>EventLoop负责处理Channel生命周期中所有的I/O事件，一个EventLoopGroup包含一个或者多个EventLoop，一个EventLoop同一时间只会绑定一个Channel，Channel生命周期内可以和多个EventLoop进行多次绑定和解绑<img src="/2024/03/30/44/EventLoop.png"></li>
</ul>
</li>
<li>服务编排层：负责组装各种服务，是核心处理链。<ul>
<li>ChannelPipeline核心编排组件，负责组装各种ChannelHandler，I/O读写触发时，会依次调用Handler进行拦截和处理。</li>
<li>ChannelHandler完成具体的树decode和encode工作和处理公国。</li>
<li>ChannelHandlerContext：用于保存上下文，通过HandlerContext可以知道Pipeline和Handler的关联关系，包含Handler生命周期的所有事件。</li>
</ul>
</li>
</ol>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><blockquote>
<p>Netty客户端的启动</p>
</blockquote>
<h2 id="ServerBootStrap"><a href="#ServerBootStrap" class="headerlink" title="ServerBootStrap"></a>ServerBootStrap</h2><blockquote>
<p>服务端启动，会绑定Boss和 Worker两个EventLoopGroup</p>
</blockquote>
<p>Boss线程会不断接受新的连接，然后将连接分给Worker去处理</p>
<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><h3 id="常用的Channel实现类"><a href="#常用的Channel实现类" class="headerlink" title="常用的Channel实现类"></a>常用的Channel实现类</h3><ul>
<li>NioServerSocketChannel 异步 TCP 服务端。</li>
<li>NioSocketChannel 异步 TCP 客户端。</li>
<li>OioServerSocketChannel 同步 TCP 服务端。</li>
<li>OioSocketChannel 同步 TCP 客户端。</li>
<li>NioDatagramChannel 异步 UDP 连接。</li>
<li>OioDatagramChannel 同步 UDP 连接。</li>
</ul>
<h3 id="Channel与事件"><a href="#Channel与事件" class="headerlink" title="Channel与事件"></a>Channel与事件</h3><ul>
<li>channelRegistered：Channel创建后被注册后被注册</li>
<li>channelUnregistered：Channel创建后未注册或者从EventLoop取消注册</li>
<li>channelActive：Channel处于就绪状态，可以被读写</li>
<li>channelInactive：处于非就绪状态</li>
<li>channelRead：Channel可以从远端读取数据</li>
<li>channelReadComplete：Channel读取数据完成</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>ChannelFuture<ul>
<li>其 addListener()方法会注册一个ChannelFutureListener来等待通知</li>
</ul>
</li>
<li>ChannelHandler：事件处理的具体逻辑<ol>
<li>生存周期：handlerAddedChannelHandler被添加到ChannelPipeline中时被调用，handlerRemoved被被移除，exceptionCaught处理过程中在ChannelPipeline中有错误产生时。</li>
<li>ChannelInboundHandler-&gt;处理入站数据及状态变化。<ul>
<li>方法：<img src="/2024/03/30/44/ChannelInboundHandler.png"></li>
<li>SimpleChannelInboundHandler会自动释放资源</li>
<li><img src="/2024/03/30/44/ChannelOutboundHandler.png"></li>
</ul>
</li>
</ol>
</li>
<li>ChannelPipeline<ul>
<li>每建立一个新的Channel都会分配一个ChannelPipeline，不可修改</li>
<li>提供了 ChannelHandler 链的容器，channel被创建时会被分配到ChannelPipeline中，ChannelHandler会被安装到其中</li>
<li>流程： ChannelInitializer的实现被注册进ServerBootstrapy中</li>
<li>调用initChannel()方法， ChannelInitializer会在ChannelPipeline中安装一组自定义的ChannelHandler</li>
<li>ChannelInitializer将自己从 ChannelPipeline中移除<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token comment">//添加一个EchoServerHandle到子Channel的ChannelPipeline</span>
                        <span class="token comment">//ChannelInitializer是一个特殊的处理程序，用于帮助用户配置新的Channel</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                            <span class="token comment">//EchoServerHandle被标注为@Shareable，所以我们可以总是使用同样的实例</span>
                            <span class="token comment">//@Shareable表示一个ChannelHandler可以被多个Channel安全地共享</span>
                            <span class="token comment">//在哪标注的呢？在EchoServerHandle类上</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>serverHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>ChannerlHandlerContext接口<ol>
<li>用于管理关联的ChannelHandler和同一个pipeline中其他的Handler</li>
<li></li>
</ol>
</li>
<li>二者的联系和区别：<img src="/2024/03/30/44/PipeLine%E5%92%8CHandler%E7%9A%84%E5%8C%BA%E5%88%AB.png"><br>  通过使用作为参数传递到每个方法的 ChannelHandlerContext，事件可以被传递给当前ChannelHandler 链中的下一个 ChannelHandler。<ul>
<li>ChannelInboundHandler </li>
<li>SimpleChannelInboundHandler&lt; T &gt; T是要处理消息的Java类型，适用于只需要解码消息并处理逻辑<ul>
<li>channelRead0(ChannelHandlerContext,T)</li>
</ul>
</li>
</ul>
</li>
<li>BootStrap 引导类，用于为应用程序的网络层配置提供了容器<ol>
<li>Bootstrap 用于客户端 ，可以直接.connect来连接服务器，</li>
<li>ServerBootstrap 用于客户端，需要.connect(new  InetSocketAddress) 才能等待客户端的连接</li>
</ol>
</li>
<li>Channel接口：<ul>
<li>方法：</li>
<li><img src="/2024/03/30/44/Channel%E6%96%B9%E6%B3%95.png"></li>
<li>Channel的生命周期：ChannelUnregistered已创建但是没有注册到EventLoop中；已注册ChannelRegistered；ChannelActive处于活跃状态，已经连接到远程节点， ChannelInactive 没有连接到远程给节点。</li>
</ul>
</li>
<li>内置的传输<ol>
<li>NIO 非阻塞-&gt;基于选择器 <img src="/2024/03/30/44/Selector.png"><ul>
<li><img src="/2024/03/30/44/Selector%E6%B5%81%E7%A8%8B.png"></li>
</ul>
</li>
<li>Epoll -&gt; 基于JNI驱动的，速度更快，完全非阻塞的<ul>
<li>使用：EpollEventLoopGroup 和EpollServerSocketChannel.class</li>
</ul>
</li>
<li>OIO -&gt;阻塞流</li>
<li>Local-&gt;在VM内部通过管道进行本地传输</li>
<li>Embedded 测试ChannelHandler使用</li>
</ol>
</li>
<li>ByteBuf<ol>
<li>使用两个索引：readIndex和writerIndex，开始时，两个都位于开头。也就是队列</li>
<li>ByteBufHolder接口用来存储各种属性值。</li>
<li>Netty提供了两种ByteBufAllocator的实现：PooledByteBufAllocator和UnpooledByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。后者不池化。</li>
<li>Unpooled缓冲区：静态工具类来创建未池化的ByteBuf实例<img src="/2024/03/30/44/Unpooled.png"></li>
<li></li>
</ol>
</li>
<li>RPC框架的调用流程<br><img src="/2024/03/30/44/RPC%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.png"></li>
<li>解码器：ByteToMessageDecoder 编码器：MessageToByteEncoder实际上这两个实现了Handler</li>
<li>协议的支持，自己去看数，Netty实战</li>
</ul>
<h3 id="EventLoopGroup-事件调度层"><a href="#EventLoopGroup-事件调度层" class="headerlink" title="EventLoopGroup 事件调度层"></a>EventLoopGroup 事件调度层</h3><ul>
<li><input disabled type="checkbox"> 如何使用自定义线程池，如何确定线程池的参数<br>EventLoopGroup是一个线程池，负责接受I/O请求并分配线程执行处理请求。<br><img src="/2024/03/30/44/EventLoop%E5%92%8CChannel.png"></li>
</ul>
<ol>
<li>EventLoopGroup包含多个EventLoop</li>
<li>EventLoop用于处理Channel生命周期内的所有I/O事件</li>
<li>EventLoop同一时间只会与一个线程绑定，每个EventLoop处理多个Channel</li>
<li>Channel在生命周期内可以对EventLoop进行多次绑定和解绑</li>
</ol>
<h3 id="服务编排层"><a href="#服务编排层" class="headerlink" title="服务编排层"></a>服务编排层</h3><ul>
<li>ChannelPipeline<br>负责组装各种ChannelHandler，内部通过双向链表将不同的ChannelHandler链接起来，依次调用，对Channel中的数据进行拦截和处理。<br>ChannelPipeline是线程安全的，因为一个新的Channel都会绑定一个新的ChannelPipeline，一个ChannelPipeline关联一个EventLoop，然后一个EventLoop绑定一个线程<img src="/2024/03/30/44/%E8%BF%9B%E5%87%BA%E7%AB%99.png"></li>
<li>ChannelHandler &amp; ChannelHandlerContext<br><img src="/2024/03/30/44/ChannelHandler.png"><br>ChannelHandlerContext用于保存ChannelHanler的上下文，可以实现ChannelHandler之间的交互。<br>同时包含了ChannelHandler生命周期的所有事件。<br>使用方式：</li>
</ul>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 如何做，搜搜<br>如果ChannelHandler有一些通用的逻辑需要实现，那么就可以放在这里。</li>
</ul>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><h2 id="Netty实现的一些有特色"><a href="#Netty实现的一些有特色" class="headerlink" title="Netty实现的一些有特色"></a>Netty实现的一些有特色</h2><h3 id="FastThreadLocal"><a href="#FastThreadLocal" class="headerlink" title="FastThreadLocal"></a>FastThreadLocal</h3><p>使用Object数组替代Entry数据，<code>Object[0]</code>存储的是一个<code>Set&lt;FastThreadLocal&lt;?&gt;&gt;</code>集合，1以后都是存value的数据，而不是使用键值对的方式实现。<br>set方法：</p>
<ol>
<li>找到index位置，设置新的value</li>
<li>将<strong>FastThreadLocal对象保存到待清理的Set中</strong><br>优点：</li>
<li>高效查找：可以直接通过数组下标获取，而且扩容不需要进行rehash</li>
<li>安全性更高：ThreadLocal有可能会造成内存泄漏，只能等待线程销毁，但是的线程池下只能主动检测，而FastThreadLocal则封装了FastThreadLocalRunnable，任务执行完成之后一定会执行<code>FastThreadLocal.removeAll()</code>，从而将Set中所有的对象都销毁。</li>
</ol>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 以下内容是新开的文章《深入浅出Netty：原理与源码解读》记得新开一篇文章</li>
<li><input disabled type="checkbox"> 看看能不能写个爬虫把这个文章爬下来，或者自己复制下来<br><a href="https://www.cnblogs.com/grey-wolf/p/12017818.html">曹工杂谈：Spring boot应用，自己动手用Netty替换底层Tomcat容器 - 三国梦回 - 博客园 (cnblogs.com)</a><br><a href="https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/Netty%20%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86%e5%89%96%e6%9e%90%e4%b8%8e%20RPC%20%e5%ae%9e%e8%b7%b5-%e5%ae%8c/00%20%e5%ad%a6%e5%a5%bd%20Netty%ef%bc%8c%e6%98%af%e4%bd%a0%e4%bf%ae%e7%82%bc%20Java%20%e5%86%85%e5%8a%9f%e7%9a%84%e5%bf%85%e7%bb%8f%e4%b9%8b%e8%b7%af.md">00 学好 Netty，是你修炼 Java 内功的必经之路 (lianglianglee.com)</a></li>
</ul>
<h1 id="深入和源码解读"><a href="#深入和源码解读" class="headerlink" title="深入和源码解读"></a>深入和源码解读</h1><h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p>所有的I/O操作都由一个线程完成，会造成积压</p>
<h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h3><p>业务逻辑交给多个线程进行处理</p>
<h3 id="主从多线程模型"><a href="#主从多线程模型" class="headerlink" title="主从多线程模型"></a>主从多线程模型</h3><p>MainReactor负责处理客户端的连接，SubReactor分配线程池中的线程处理连接生命周期内的所有的I/O模型</p>
<h2 id="Netty内部的逻辑流程"><a href="#Netty内部的逻辑流程" class="headerlink" title="Netty内部的逻辑流程"></a>Netty内部的逻辑流程</h2><p><img src="/2024/03/30/44/%E9%80%BB%E8%BE%91%E6%B5%81%E7%A8%8B.png"></p>
]]></content>
  </entry>
  <entry>
    <title>MQ</title>
    <url>/2024/04/07/18/</url>
    <content><![CDATA[<h1 id="面试常问："><a href="#面试常问：" class="headerlink" title="面试常问："></a>面试常问：</h1><h2 id="生产者出现堆积如何解决"><a href="#生产者出现堆积如何解决" class="headerlink" title="生产者出现堆积如何解决"></a>生产者出现堆积如何解决</h2><ol>
<li>增加消费者</li>
<li>优化消费者的处理速度</li>
<li>使用优先队列，优先处理优先级高的消息</li>
<li>消息压缩：如果网络带宽是瓶颈</li>
<li>升级设备</li>
<li>消息过滤：生产者端发送真正需要处理的消息</li>
<li>调整生产者的速度</li>
</ol>
<h2 id="生产消费过程中如果服务出现异常，如何恢复"><a href="#生产消费过程中如果服务出现异常，如何恢复" class="headerlink" title="生产消费过程中如果服务出现异常，如何恢复"></a>生产消费过程中如果服务出现异常，如何恢复</h2><ol>
<li>重试机制：</li>
<li>死信队列：将无法处理的消息放在一个特殊的队列中，由人工去处理或者特殊处理</li>
<li>备份和恢复：对于重要数据应该定期进行备份，当服务出现异常时，从备份中恢复数据。</li>
<li>服务降级</li>
<li>容错和冗余设计</li>
</ol>
<h2 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h2><ul>
<li>AMQ Model组件：<ol>
<li>Producer </li>
<li>Exchange 交换器，从Producer中收集消息并根据路由规则发送到对应的消息队列中</li>
<li>Queue 消息队列，存储消息，直到消息被安全的投递到了消费者</li>
<li>Binding 定义了 mq 和 exchange之间的关系，是路由表</li>
<li>Consumer</li>
</ol>
</li>
</ul>
<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p><a href="https://javaguide.cn/high-performance/message-queue/rocketmq-questions.html">常见问题</a></p>
<p><img src="/2024/04/07/18/%E8%A7%92%E8%89%B2.png"></p>
<ol>
<li>生产者组-&gt;发送消息的一方<ul>
<li>消息的类型：<ol>
<li>普通消息：并发消息，并发消息没有顺序</li>
<li>分区有序消息:把一个Topic消息分为多个分区，保护和消费，分区内的消息就是队列，FIFO</li>
<li>全局有序：把一个Topic分区数设为1，所有的消息都支持FIFO</li>
<li>延迟消息：消息发送后，消费者不能立刻消费，需要等待</li>
<li>事务消息：涉及分布式事务，保证多个操作同时成功或者失败，消费者才能使用</li>
<li><img src="/2024/04/07/18/%E4%B8%8D%E5%90%8C%E6%B6%88%E6%81%AF%E7%89%B9%E7%82%B9.png"></li>
</ol>
</li>
<li>消息保证机制：<ol>
<li>客户端保证：重试机制和客户端容错(选择延迟较低的Broker来发送消息)</li>
<li>Broker保证</li>
</ol>
</li>
<li>消息发送流程:<ol>
<li>业务层调用Client 发送API业务代码</li>
<li>消息处理层：Client获取消息对象后进行参数检查，准备和封装</li>
<li>通信层：基于Netty封装的RPC通信</li>
</ol>
</li>
</ul>
</li>
<li>Topic：</li>
<li>消费者组： <ul>
<li>订阅关系：一个消费者组订阅一个Topic中的某一个Tag</li>
<li>消费模式：<ul>
<li>集群消费模式：同一个组中的消费者实例负载均衡的消费Topic中的消息，消费进度保存在Broker端，即使应用崩溃，消费进度也不会出错</li>
<li>广播消费：所有消息广播分发，全部的消费者实例可以消费整个Topic中的所有消息，消费进度保存子啊客户端文件中，适用于通知其他服务刷新缓存</li>
</ul>
</li>
<li>可靠消费保证：<ol>
<li>重试-死信机制：正常Topic遭遇消费失败后-&gt;消息被保存在重试Topic中-&gt;多次间隔时间进行重新消费后仍然失败-&gt;进入死信Topic，经由人工处理，不会再被消费者消费</li>
<li>Rebalance机制：重平衡， 用于在发生Broker掉线、Topic扩容和缩容、消费者扩容和缩容等变化时，自动感知并调整自身消费，以尽量减少甚至避免消息没有被消费。</li>
</ol>
</li>
<li>消费方式：<ol>
<li>pull 用户主动pull消息，自主管理位点，由用户代码来进行管理</li>
<li>push 自动pull消息，用户可直接使用，</li>
</ol>
</li>
<li>消费过滤，Broker端可以根据tag进行消费过滤，只返回满足的tag,broker端使用Hash过滤，客户端再进行一次Tag字符串过滤， 因为Hash过来吧可以快速过滤大量数据，但是存在Hash碰撞</li>
</ul>
</li>
</ol>
<ul>
<li>Namesrv集群：一个无状态的元数据管理，Namesrv之于RocketMQ等价于Zookeeper之于Kafka。Topic路由注册和管理、Broker注册和发现的管理者</li>
</ul>
<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><a href="https://javaguide.cn/high-performance/message-queue/rabbitmq-questions.html">常见问题</a></p>
<h2 id="RabbitMQ主要架构"><a href="#RabbitMQ主要架构" class="headerlink" title="RabbitMQ主要架构"></a>RabbitMQ主要架构</h2><p><img src="/2024/04/07/18/RabbitMQ%E6%9E%B6%E6%9E%84.png" alt="RabbitMQ架构"></p>
<ul>
<li><p>**<code>publisher</code>**：生产者，也就是发送消息的一方</p>
</li>
<li><p>**<code>consumer</code>**：消费者，也就是消费消息的一方</p>
</li>
<li><p>**<code>queue</code>**：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</p>
</li>
<li><p>**<code>exchange</code>**：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。不会持久化数据</p>
</li>
<li><p>**<code>virtual host</code>**：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue，也就是将exchange和queue进行分组</p>
</li>
</ul>
<h2 id="Spring中使用"><a href="#Spring中使用" class="headerlink" title="Spring中使用"></a>Spring中使用</h2><p>使用Spring AMQP来实现</p>
<h3 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h3><p>使用RabbitTemplate来发送消息</p>
<h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">{</span>
        <span class="token comment">// 利用RabbitListener来声明要监听的队列信息</span>
    <span class="token comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span>
    <span class="token comment">// 可以看到方法体中接收的就是消息体的内容</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueueMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring 消费者接收到消息：【"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="交换机的类型："><a href="#交换机的类型：" class="headerlink" title="交换机的类型："></a>交换机的类型：</h2><h3 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a><strong>Fanout</strong></h3><p>广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机<br>特点：</p>
<ol>
<li>可以有多个队列</li>
<li>每个队列都要绑定到Exchange</li>
<li>生产者发送的消息只能发送到交换机</li>
<li>交换机把消息发送给绑定过的所有队列</li>
<li>订阅队列的消费者都能拿到消息</li>
</ol>
<h3 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a><strong>Direct</strong></h3><p>订阅，基于RoutingKey（路由key）发送给订阅了消息的队列<br>特点：</p>
<ol>
<li>队列需要与交换机绑定，指定一个RountingKey</li>
<li>消息发送方发送时也需要指定RountingKey</li>
<li>Exchange把消息发送给RountingKey对应的队列</li>
</ol>
<h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a><strong>Topic</strong></h3><p>通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</p>
<ul>
<li><p><code>#</code>：匹配一个或多个词</p>
</li>
<li><p><code>*</code>：匹配不多不少恰好1个词<br>举例：</p>
</li>
<li><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p>
</li>
<li><p><code>item.*</code>：只能匹配<code>item.spu</code><br>与DIrect类似，但是可以使用通配符来进行队列绑定</p>
</li>
<li><p><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC</title>
    <url>/2024/06/17/36/</url>
    <content><![CDATA[<h1 id="RPC（Remote-Procedure-Call）-远程调用"><a href="#RPC（Remote-Procedure-Call）-远程调用" class="headerlink" title="RPC（Remote Procedure Call） 远程调用"></a><strong>RPC（Remote Procedure Call）</strong> 远程调用</h1><h2 id="RPC原理"><a href="#RPC原理" class="headerlink" title="RPC原理"></a>RPC原理</h2><p>可以分为五个部分实现</p>
<ol>
<li>客户端(服务消费端)： 调用方法的一端</li>
<li>客户端Stub(桩):代理类，将调用的方法、类、方法参数作为信息传递到服务端</li>
<li>网络传输: 将信息传输到服务端，并且将返回结果发挥给调用端，推荐使用Netty</li>
<li>服务端Stub: 接收信息，去执行对应的方法，将结果返回</li>
<li>服务端(服务提供端): 提供服务的一端<br>过程：</li>
<li>服务消费端client以本地调用的方式去调用远程服务</li>
<li>客户端Stub (client stud) 接收调用后将方法、参数等组装进能够进行网络传输的消息体(序列化之后) : RpcRequest</li>
<li>客户端Stub 找到远程服务的地址，将消息发送到服务提供端</li>
<li>服务端Stub 收到消息后，反序列化为RpcRequest 对象</li>
<li>服务端Stub 根据RpcRequest中的类，方法，方法参数等信息调用本地方法1</li>
<li>服务端Stub 将得到的结果封装为 RpcResponse序列化后发送给消费方</li>
<li>客户端Stub接收消息并将其反序列化为RpcReponse</li>
</ol>
<h2 id="Invoker是什么"><a href="#Invoker是什么" class="headerlink" title="Invoker是什么"></a>Invoker是什么</h2><p>Inboker 是Dubbo对远程调用的抽象<img src="/2024/06/17/36/invoker.png"></p>
<h2 id="Dubbo-的SPI机制"><a href="#Dubbo-的SPI机制" class="headerlink" title="Dubbo 的SPI机制"></a>Dubbo 的SPI机制</h2><p>SPI (Service Provider Interface)：将接口的实现放在配置文件中，在程序的执行过程中读取配置文件，通过反射加载实现类。也就是提供接口，允许第三方实现这个接口</p>
<h2 id="Dubbo-的微内核架构"><a href="#Dubbo-的微内核架构" class="headerlink" title="Dubbo 的微内核架构"></a>Dubbo 的微内核架构</h2><blockquote>
<p>微内核架构模式又名插件架构模式，是基于产品应用程序的一种自然模式。允许用户添加额外的应用到核心应用。例如IDE</p>
</blockquote>
<h2 id="Dubbo的负载均衡策略"><a href="#Dubbo的负载均衡策略" class="headerlink" title="Dubbo的负载均衡策略"></a>Dubbo的负载均衡策略</h2>]]></content>
  </entry>
  <entry>
    <title>Spring 循环依赖会出现什么情况？ 如何解决?</title>
    <url>/2024/05/13/00/</url>
    <content><![CDATA[<h2 id="一、什么是循环依赖"><a href="#一、什么是循环依赖" class="headerlink" title="一、什么是循环依赖?"></a>一、什么是循环依赖?</h2><p>在Spring项目中我们经常使用 @Autowired或者@Resource去注入Bean，我们称之为依赖。<br>当多个Bean之间存在互相依赖的关系，并且出现了循环调用时，Spring就会找不到依赖的七点，就会死循环直到抛出异常。<br>例如：A依赖B,B依赖C,C依赖A，三者必须在依赖的类初始化之后才会初始化自己，从而出现死循环。</p>
<h2 id="二、实战场景"><a href="#二、实战场景" class="headerlink" title="二、实战场景"></a>二、实战场景</h2><p>笔者是在使用Spring Security 编写登录和权限验证代码时出现了循环依赖的场景。</p>
<h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>省流： 笔者使用的方法</p>
<ol>
<li>使用@Lazy延迟创建对象</li>
<li>将@Resource替换为@Autowired</li>
<li>新建一个空Bean，来解决依赖问题： 例如 A依赖B,B依赖A,我们可以新建一个C，然后让A依赖C，B实现C即可将直接依赖转化为间接依赖关系 中介方式打破循环链<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 新的接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// B实现C</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// A依赖C，而不是直接依赖B</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">C</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="四、扩展：-Autowired是如何解决循环依赖的的问题的"><a href="#四、扩展：-Autowired是如何解决循环依赖的的问题的" class="headerlink" title="四、扩展：@Autowired是如何解决循环依赖的的问题的"></a>四、扩展：@Autowired是如何解决循环依赖的的问题的</h2><p>解决的核心是使用了Spring的三级缓存：</p>
<ul>
<li>第一级缓存：singletonObjects，用于存放完全初始化好的bean，避免重复创建，单例池</li>
<li>二级缓存：earlySingletonObjects 存放原始的bean对象，尚未填充属性，同时也没有进行完成依赖注入的类 (<strong>核心</strong>)</li>
<li>三级缓存：singletonFactories 用于存放bean工厂对象中的getObject方法，用于产生原始的bean或者代理对象(如果Bean被AOP切面代理)来放入二级缓存<br>首先我们要知道，实例化 ≠ 完全初始化，当Spring容器创建bean时，会从一级缓存中寻找，如果没找到，会搜索二级缓存，如果存在就会把它注入，如果没有会找三级缓存。当bean初始化时，如果发现依赖的类没有完成完全初始化，就会先使用二级缓存中的bean实例，当所有的bean都初始化之后再从一级缓存中获取完全初始化的bean<br>而我们使用的@Resource并不存在这种机制，会直接抛出BeanCurrentlyInCreationException<br><strong>只用两级缓存可以吗？</strong><br>如果没有AOP的情况下只是用一级和三级缓存就能解决，但是涉及到AOP时，必须使用了<br>如果发生循环依赖的话，就去 <strong>三级缓存 <code>singletonFactories</code></strong> 中拿到三级缓存中存储的 <code>ObjectFactory</code> 并调用它的 <code>getObject()</code> 方法来获取这个循环依赖对象的前期暴露对象（虽然还没初始化完成，但是可以拿到该对象在堆中的存储地址了），并且将这个前期暴露对象放到二级缓存中，这样在循环依赖时，就不会重复初始化了！</li>
</ul>
<hr>
]]></content>
  </entry>
  <entry>
    <title>SpringSecurity和其他的认证相关</title>
    <url>/2024/03/30/39/</url>
    <content><![CDATA[<h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><blockquote>
<p>RBAC模型： Role-Based Access Control 基于角色的权限控制访问控制，角色关联权限，角色又关联用户的授权方式<br>一个用户可以有多个角色，每一个角色又可以分配多个权限</p>
</blockquote>
<p>AuthenticationProvider是AuthenticationManager的一个组成部分，它负责处理特定类型的Authentication对象。AuthenticationManager可能会有多个AuthenticationProvider，每个AuthenticationProvider都会尝试验证传入的Authentication对象。</p>
<h4 id="使用流程："><a href="#使用流程：" class="headerlink" title="使用流程："></a>使用流程：</h4><p><a href="https://shusheng007.top/2023/02/15/springsecurity/">参考</a></p>
<ol>
<li>controller</li>
<li>配置拦截器/Filter，继承OncePerRequestFilter，验证token</li>
<li>配置security，在这里可以指定自定义的provider<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationConfiguration</span> authConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> authConfig<span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//我们自定义的拦截器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//基于token，所以不需要csrf防护</span>
        httpSecurity<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//基于token，所以不需要session</span>
                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//登录注册不需要认证</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/user/register"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//除上面的所有请求全部需要鉴权认证</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//禁用缓存</span>
        httpSecurity<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将我们的JWT filter添加到UsernamePasswordAuthenticationFilter前面，因为这个Filter是authentication开始的filter，我们要早于它</span>
        httpSecurity<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> httpSecurity<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h1 id="认证相关的概念和原理"><a href="#认证相关的概念和原理" class="headerlink" title="认证相关的概念和原理"></a>认证相关的概念和原理</h1><h3 id="Cookie被禁用了Session还能使用吗"><a href="#Cookie被禁用了Session还能使用吗" class="headerlink" title="Cookie被禁用了Session还能使用吗"></a>Cookie被禁用了Session还能使用吗</h3><p>可以使用，可以把SessionID放在请求路径中，同时可以对SessionID进行加密</p>
<h2 id="为什么Cookie无法防止CSRF攻击，而Token可以"><a href="#为什么Cookie无法防止CSRF攻击，而Token可以" class="headerlink" title="为什么Cookie无法防止CSRF攻击，而Token可以"></a>为什么Cookie无法防止CSRF攻击，而Token可以</h2><p>CSRF(<strong>Cross Site Request Forgery</strong>) 跨站请求伪造，Token存在localStorage浏览器本地缓存，然后每次发送请求携带这个即可。而Cookie是可以被别的获取的<br>XSS 跨站脚本攻击（Cross Site Scripting）</p>
<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>xxxxx.yyyyy.zzzz</p>
<h4 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h4><p>描述JWT的元数据，定义了生成签名的算法以及Token的类型</p>
<ul>
<li>typ(Type) ：令牌类型，也就是JWT</li>
<li>alg(Algorithm) ：签名算法</li>
</ul>
<h4 id="PAYLOAD"><a href="#PAYLOAD" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h4><p>存放实际要传输的数据，包含Claims(声明，包含JWT的相关信息)</p>
<ul>
<li>注册声明：预定义的一些声明</li>
<li>公有声明：JWT签发方可以自定义的声明</li>
<li>私有声明：签发方因为项目中需要而自定义的声明</li>
</ul>
<h4 id="SIGNATURE-签名"><a href="#SIGNATURE-签名" class="headerlink" title="SIGNATURE (签名)"></a>SIGNATURE (签名)</h4><p>通过Payload和Header和Secret是哟个Header中指定的签名算法<br>用于防止JWT被篡改<br>这个签名的生成需要用到：</p>
<ul>
<li>Header + Payload。</li>
<li>存放在服务端的密钥(一定不要泄露出去)。</li>
<li>签名算法。</li>
</ul>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h2 id="SSO-单点登录"><a href="#SSO-单点登录" class="headerlink" title="SSO 单点登录"></a>SSO 单点登录</h2><h2 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><h2 id="权限设计"><a href="#权限设计" class="headerlink" title="权限设计"></a>权限设计</h2><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>基于角色的权限控制</p>
<h3 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h3><p>基于属性的控制访问</p>
]]></content>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/2024/04/11/19/</url>
    <content><![CDATA[<p>执行kubeadm 时报错，</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2024/03/30/46/</url>
    <content><![CDATA[<h2 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问:"></a>面试常问:</h2><ul>
<li>延迟加载提高加载效率：</li>
</ul>
<h3 id="Mybatis的缓存"><a href="#Mybatis的缓存" class="headerlink" title="Mybatis的缓存"></a>Mybatis的缓存</h3><ul>
<li>一级缓存：也即是本地缓存，是SqlSession级别的,读个sql语句之间不会共享缓存，使用@Transactional来生效，也就是说在一次事务中多次查询会使用到一级缓存<ul>
<li>默认开启，可以在配置中关闭<ol>
<li>当我们执行查询操作时，MyBatis会先去一级缓存中查找是否有之前查询过的数据。如果有，直接返回缓存中的数据；如果没有，去数据库查询数据，并将查询结果放入一级缓存中。  </li>
<li>当我们执行更新操作（包括insert、update、delete）时，MyBatis会清空一级缓存。这是为了保证缓存中的数据和数据库中的数据是一致的。  </li>
<li>当SqlSession结束或关闭时，一级缓存也就清空了。</li>
</ol>
</li>
<li>二级缓存:<ul>
<li>在mapper.xml上方加上<code>&lt;Cache&gt;&lt;/Cache&gt;</code> 即可</li>
<li>根据mapper.xml中命名空间来区分，是mapper级别的，只用当执行同一个mapper中的增改删语句时才会失效，增删改频繁时二级缓存基本失效，并且，微服务中多台服务中只有被调用的那一台的二级缓存才会删除，其余的不删除，造成不一致。</li>
</ul>
</li>
</ul>
</li>
<li>Springboot Cache，会缓存方法的返回值，但是同样也只能在一个节点生效，并且，@Cacheable不会主动刷新缓存，但是@CachePut会强制刷新缓存，并把新的缓存放入</li>
<li>共享的缓存！Redis 可以在配置文件中将springboot的缓存类型设置为Redis</li>
</ul>
<h3 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{} 和 ${} 的区别是什么？"></a>#{} 和 ${} 的区别是什么？</h3><ul>
<li><code>#{}</code> 是Propeties文件中的变量占位符，会被原样替换</li>
<li><code>${}</code>是sql的参数占位符，Mybatis会把他替换成 <code>?</code> 后续通过反射进行替换数据</li>
</ul>
<h3 id="xml-映射文件中，除了常见的-select、insert、update、delete-标签之外，还有哪些标签？"><a href="#xml-映射文件中，除了常见的-select、insert、update、delete-标签之外，还有哪些标签？" class="headerlink" title="xml 映射文件中，除了常见的 select、insert、update、delete 标签之外，还有哪些标签？"></a>xml 映射文件中，除了常见的 select、insert、update、delete 标签之外，还有哪些标签？</h3><h4 id="resultMap-定义查询结果的映射规则"><a href="#resultMap-定义查询结果的映射规则" class="headerlink" title="resultMap 定义查询结果的映射规则"></a>resultMap 定义查询结果的映射规则</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_bio<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="sql：定义可复用的SQL代码段"><a href="#sql：定义可复用的SQL代码段" class="headerlink" title="sql：定义可复用的SQL代码段"></a>sql：定义可复用的SQL代码段</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userColumns<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ${alias}.id, ${alias}.username, ${alias}.password, ${alias}.email, ${alias}.bio <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>
  select
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userColumns<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alias<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
  from some_table user
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="parameterType-定义SQL语句的输入参数类型"><a href="#parameterType-定义SQL语句的输入参数类型" class="headerlink" title="parameterType 定义SQL语句的输入参数类型"></a>parameterType 定义SQL语句的输入参数类型</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  insert into users (username, password, email, bio)
  values (#{username}, #{password}, #{email}, #{bio})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="resultType：定义-SQL-语句的输出结果类型。"><a href="#resultType：定义-SQL-语句的输出结果类型。" class="headerlink" title="resultType：定义 SQL 语句的输出结果类型。"></a><code>resultType</code>：定义 SQL 语句的输出结果类型。</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUsernames<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  select username from users
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="association：定义一对一的关联关系。"><a href="#association：定义一对一的关联关系。" class="headerlink" title="association：定义一对一的关联关系。"></a><code>association</code>：定义一对一的关联关系。</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Address<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>street<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_street<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_city<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_state<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zip<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_zip<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_country<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="collection：定义一对多的关联关系。"><a href="#collection：定义一对多的关联关系。" class="headerlink" title="collection：定义一对多的关联关系。"></a><code>collection</code>：定义一对多的关联关系。</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post_id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post_subject<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post_body<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="dynamic-标签如-if、choose、when、otherwise、trim、where、set：用于构建动态-SQL。"><a href="#dynamic-标签如-if、choose、when、otherwise、trim、where、set：用于构建动态-SQL。" class="headerlink" title="dynamic&nbsp;标签如&nbsp;if、choose、when、otherwise、trim、where、set：用于构建动态 SQL。"></a><code>dynamic</code>&nbsp;标签如&nbsp;<code>if</code>、<code>choose</code>、<code>when</code>、<code>otherwise</code>、<code>trim</code>、<code>where</code>、<code>set</code>：用于构建动态 SQL。</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findActiveBlogLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  SELECT * FROM BLOG WHERE state = 'ACTIVE' 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    AND title like #{title}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>执行过程<ul>
<li>java程序加载config文件，创建SqlSessionFactory对象，之后通过SqlSessionFactory创建SqlSession对象，之后通过SqlSession对象执行映射配置文件中定义的SQL语句，最后通过SqlSession对象提交事务，关闭SqlSession对象</li>
<li><img src="/2024/03/30/46/%E5%88%86%E5%B1%82.png"></li>
</ul>
</li>
</ul>
<h3 id="Dao接口-Mapper接口-的原理"><a href="#Dao接口-Mapper接口-的原理" class="headerlink" title="Dao接口(Mapper接口)的原理"></a>Dao接口(Mapper接口)的原理</h3><h4 id="Dao中的方法，参数不同时，可以重载吗"><a href="#Dao中的方法，参数不同时，可以重载吗" class="headerlink" title="Dao中的方法，参数不同时，可以重载吗"></a>Dao中的方法，参数不同时，可以重载吗</h4><p>  Mapper中的方法<strong>可以</strong> 重载，使用的是全限定名 + 方法名 拼接的字符串作为key去匹配。 但是xml文件中的id只能指定一个，也即是重载的所有方法都是用一个sql语句，而这个sql语句我们可以使用动态sql来实现</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllStu<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  select * from student
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      id = #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Dao接口的原理：<br>MyBatis运行时会使用JDK动态代理来为Dao生成代理proxy对象，代理对象会拦截接口方法，转而执行MappedStatement中的sql</p>
<h3 id="MyBatis的分页"><a href="#MyBatis的分页" class="headerlink" title="MyBatis的分页"></a>MyBatis的分页</h3><p>nihao</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>答：**(1)** MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；**(2)** 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能，**(3)** 也可以使用分页插件来完成物理分页。</p>
<h4 id="分页插件的原理"><a href="#分页插件的原理" class="headerlink" title="分页插件的原理"></a>分页插件的原理</h4><ol>
<li>插件设置一个ThreadLocal变量来存储分页参数</li>
<li>当执行查询时，MyBatis会调用所有注册的拦截器。</li>
<li>PageHelper 首先会保存原始的查询SQL，然后生成一个新的SQL，这个新的SQL在原始的SQL基础上添加了LIMIT和OFFSET</li>
<li>PageHelper 将新的SQL替换成原始的SQL然后执行</li>
<li>最后PageHelper会清除ThreadLocal中变量，避免内存泄漏</li>
</ol>
<h3 id="MyBatis动态sql是什么的，有哪些，原理"><a href="#MyBatis动态sql是什么的，有哪些，原理" class="headerlink" title="MyBatis动态sql是什么的，有哪些，原理"></a>MyBatis动态sql是什么的，有哪些，原理</h3><h4 id="常用的动态sql标签"><a href="#常用的动态sql标签" class="headerlink" title="常用的动态sql标签"></a>常用的动态sql标签</h4><ul>
<li><code>&lt;if&gt;&lt;/if&gt;</code></li>
<li><code>&lt;where&gt;&lt;/where&gt;(trim,set)</code></li>
<li><code>&lt;choose&gt;&lt;/choose&gt;（when, otherwise）</code></li>
<li><code>&lt;foreach&gt;&lt;/foreach&gt;</code></li>
<li><code>&lt;bind/&gt;</code></li>
</ul>
<h4 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h4><p><strong>OGNL</strong> (Object-Graph Navigation Language)表达式，通过他可以在XML配置文件中引用Java对象和方法，在动态SQL中，常常使用其进行判断条件</p>
<ul>
<li>常见的OGNL语法：<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">person.name #访问对象的属性
person.getName() # 调用对象的方法
persons.</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> # 获取persons对象的name属性
person.age &gt; 18 ? <span class="token string">'adult'</span> <span class="token punctuation">:</span> <span class="token string">'child'</span> # 条件表达式
person.agge + 1 # 算术表达式
person.age &gt; 18 &amp;&amp; person.gender == <span class="token string">'male'</span> # 逻辑表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="MyBatis如何将sql执行结果封装为目标对象并返回"><a href="#MyBatis如何将sql执行结果封装为目标对象并返回" class="headerlink" title="MyBatis如何将sql执行结果封装为目标对象并返回"></a>MyBatis如何将sql执行结果封装为目标对象并返回</h4><ol>
<li>使用<code>&lt;resultMap&gt;</code> 标签去映射列表名和对象属性名之间的映射关系</li>
<li>使用sql列别名方式，将列名书写为对象属性名，例如：T_NAME AS NAME 对应的属性名是name，会忽略大小写<br>当映射关系建立之后，MyBatis会通过反射创建对象，然后给对象的属性一一赋值</li>
</ol>
<h3 id="MyBatis延迟加载的原理-待写"><a href="#MyBatis延迟加载的原理-待写" class="headerlink" title="MyBatis延迟加载的原理 待写"></a>MyBatis延迟加载的原理 待写</h3><p>MyBatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的是1v1，collection是1v多</p>
<h4 id="Executor执行器"><a href="#Executor执行器" class="headerlink" title="Executor执行器"></a>Executor执行器</h4><ul>
<li>SimpleExecutor 每执行一次 update或select，就开启一个Statement对象，用完立刻关闭Statement对象</li>
<li>ReuseExecutor 执行update/select 以sql为key查找Statement对象，不存在就创建，使用后放在Map中，供下一次使用</li>
<li>BatchExecutor 执行update 时，将所有的sql都添加到批处理中，之后统一执行，缓存多个Statement对象，每个Statement对象都是等待sql添加之后，等待逐一执行</li>
</ul>
<h2 id="深入解读"><a href="#深入解读" class="headerlink" title="深入解读"></a>深入解读</h2><h3 id="基础支持层"><a href="#基础支持层" class="headerlink" title="基础支持层"></a>基础支持层</h3><ul>
<li>解析器模块<ol>
<li>DOM解析将xml的标签组织成一颗DOM树，将整个xml文档加载进内存</li>
<li>SAX基于时间模型的xml解析方式。加载一部分到内存中，并且当程序处理过程中满足条件时，会结束解析，不必解析剩余的xml内容。但是不支持层次关系和父子关系的保存</li>
</ol>
<ul>
<li>XPathParser：MyBatis提供的XPathParser类封装了XPath、Document、EntityResolver</li>
</ul>
</li>
</ul>
<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a><a href="https://baomidou.com/introduce/">MyBatis Plus</a></h1><h2 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h2><h3 id="自定义填充字段"><a href="#自定义填充字段" class="headerlink" title="自定义填充字段"></a>自定义填充字段</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusDateHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dataBaseConfigurationByAdmin"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBaseConfiguration</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 分页插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptorByAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用时，只需要在自己定义的方法上加上一个Page类型的变量就可以进行分页查询了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第1页，每页10条记录</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">selectUsers</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2024/05/13/08/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> <a href="https://www.yuque.com/tulingzhouyu/db22bv/gd98aqe6nn6e73qq">金三银四精选面试题系列-徐庶 (yuque.com)</a>专门写一个线程池相关的文章</li>
<li><input disabled type="checkbox"> 泛型相关的<a href="https://www.yuque.com/tulingzhouyu/db22bv/avpxs3qirk1w4qod">👍 2024金三银四100道面试题笔记资料 (yuque.com)</a></li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol>
<li>CAS (Compare-And-Swap，比较并交换)，是一种用于实现多线程同步的原子操作。主要原理：1.比较内存中的某个位置的当前值和预期值 2.交换如果当前值与预期值相等，则将该位置的值更新为新值，否则不进行任何操作。<ul>
<li>因为是原子操作所以在多线程中很高效。可以实现无锁编程，避免了上下文切换的开销。</li>
<li>缺点是如果CAS操作失败后，通常会进行自旋，消耗CPU资源。</li>
</ul>
</li>
<li>自旋：当一个线程尝试获取锁但是所以经被其他线程获取时，该线程不会进入睡眠模式，而是会在一个循环中不断的检查锁的状态，直到锁被释放，这种方式叫做自旋。<ul>
<li>优点是：低开销，可以避免线程上下文切换的开销，因为线程不会进入睡眠状态。适用于短时间的锁定，因为时间段，自旋等待的开销可能比线程切换开销更低。</li>
<li>缺点是：CPU消耗搞，自旋不断等待占用CPU，也不适合长时间锁定，因为线程会长时间占用CPU资源进行无效的检查。</li>
</ul>
</li>
<li>并发：一段时间内进行  并行：同一时刻同时进行</li>
</ol>
<h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p><img src="/2024/05/13/08/CPU%E6%A6%82%E5%BF%B5.png"></p>
<h3 id="处理器如何实现原子操作的"><a href="#处理器如何实现原子操作的" class="headerlink" title="处理器如何实现原子操作的"></a>处理器如何实现原子操作的</h3><ol>
<li>使用总线锁来保证原子性：如果多个处理器同时对共享变量进行读改写操作(例如i++)，共享会被多个处理器同时进行操作，导致共享变量的值与期望不同。<img src="/2024/05/13/08/i++.png">因为他们会从自己的缓存中读取变量i，然后分别进行+1，之后分别写入系统内存中<ul>
<li>处理器总线锁：使用了处理器提供的LOCK#信号，当一个处理器在总线上发出这个信号，其他处理器的请求将被阻塞住。从而实现独占共享内存。</li>
</ul>
</li>
<li>使用缓存锁：总线锁会导致其他处理器不能处理其他内存地址的数据，我们只需要保证对某个内存地址的操作是原子的就行。<ul>
<li>频繁使用的内存会缓存在处理器的L1、L2、L3高速缓存中。</li>
<li>缓存锁定：缓存锁定是某个CPU对缓存数据进行更改时，会通知缓存了该数据的该数据的CPU抛弃缓存的数据或者从内存重新读取。</li>
</ul>
</li>
</ol>
<h2 id="多线程就一定快吗？"><a href="#多线程就一定快吗？" class="headerlink" title="多线程就一定快吗？"></a>多线程就一定快吗？</h2><p>不一定，因为线程切换涉及到上下文切换和线程创建的开销</p>
<h2 id="如何减少上下文的切换次数"><a href="#如何减少上下文的切换次数" class="headerlink" title="如何减少上下文的切换次数"></a>如何减少上下文的切换次数</h2><ol>
<li>无锁并发编程：避免使用锁，利用将数据的ID按照Hash算法取模运算，不同线程处理不同段的数据</li>
<li>CAS算法：不需要加锁</li>
<li>使用最少线程：避免创建不需要的线程</li>
<li>协程：单线程中实现多任务的调度，并且再单线程中维持多个任务间的切</li>
</ol>
<h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>并发编程中，如果多线程占用的资源超过系统资源的限制，实际上仍然是串行执行的，而且因为有上下文切换的影响，反而会更慢</p>
<h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ol>
<li>避免一个线程同时获得多个锁</li>
<li>避免一个线程在锁内同事占用多个资源，尽量保证每个锁只占用一个资源</li>
<li>尝试使用定时锁 <code>lock.tryLock(timeout)</code>来替代内部锁机制</li>
<li>对于数据库锁，枷锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况</li>
</ol>
<h2 id="常用的线程分析工具"><a href="#常用的线程分析工具" class="headerlink" title="常用的线程分析工具"></a>常用的线程分析工具</h2><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>常用指令，具体的参数自己去搜，这里主要看的是cs指标，代表每秒上下文切换次数</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">vmstat [delay] [count] 后面参数可选
每隔delay秒输出一次统计信息，总共输出count次
vmstat -s 显示系统的累计统计信息
	   -d 显示统计信息
	   -p +指定分区 显示指定分区的统计信息
	   -a 显示活动内存和非活动内存的信息
	   -m 显示slabinfo信息<span class="token punctuation">(</span>`slabinfo` 是 Linux 内核中用于显示 slab 分配器（slab allocator）信息的工具<span class="token punctuation">)</span>
	   -t 在输出中添加时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Java中的多线程"><a href="#Java中的多线程" class="headerlink" title="Java中的多线程"></a>Java中的多线程</h2><p>当在一个JVM进程里面开多个线程时，这些线程被分成两类：守护线程和非守护线程。默认开的都是非守护线程。在Java中有一个规定：当所有的非守护线程退出后，整个JVM进程就会退出。意思就是守护线程“不算作数”，守护线程不影响整个 JVM 进程的退出。例如，垃圾回收线程就是守护线程，它们在后台默默工作，当开发者的所有前台线程（非守护线程）都退出之后，整个JVM进程就退出了。</p>
<h2 id="Wait方法为什么不定义在Thread中？"><a href="#Wait方法为什么不定义在Thread中？" class="headerlink" title="Wait方法为什么不定义在Thread中？"></a>Wait方法为什么不定义在Thread中？</h2><p>Wait释放的锁是写在Java对象头中，所以是写在Object中而非当前线程</p>
<h3 id="锁的分类和对比"><a href="#锁的分类和对比" class="headerlink" title="锁的分类和对比"></a>锁的分类和对比</h3><p>Java中锁存在四种状态</p>
<ol>
<li>无锁状态</li>
<li>偏向锁状态</li>
<li>轻量级锁状态</li>
<li>重量级锁状态<br>锁可以升级但是不能降级，这种设定能够提高获得锁和释放锁的效率<br><img src="/2024/05/13/08/%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9.png"></li>
</ol>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>大多数情况下锁不仅不存在多线程竞争，而且总是由同意线程多次获得。<br>当一个线程访问同步块并且获得锁时，会在对象头和栈帧中的锁记录里面存锁偏向的线程ID，以后该线程进入/推出额同步块块时，不需要进行CAS来进行枷锁和解锁，只需要测试对象头Mark Word里是否存储着这项当前线程的偏向锁。<br>如果测试失败就看偏向锁的标识是否为1，1是偏向锁，如果不是就用CAS竞争锁，否则尝试使用CAS将偏向锁设置为当前线程</p>
<h5 id="偏向锁的撤销"><a href="#偏向锁的撤销" class="headerlink" title="偏向锁的撤销"></a>偏向锁的撤销</h5><ol>
<li>偏向锁只有其他线程尝试竞争偏向锁时持有偏向锁的线程才会释放锁。</li>
<li>偏向锁的撤销，需要在全局安全点(在这个事件电商没有正在执行的字节码)，会先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否或者，如果线程处于不活跃状态，则将对象头设置成无锁状态；如果线程仍然存活，则拥有偏向锁的栈会被执行，便利偏向对象的锁记录，要么重新偏向其他线程，要么恢复到无锁或者标记独享不适合作为偏向锁，最后唤醒暂停的线程。</li>
</ol>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><h5 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h5><blockquote>
<p>线程在执行同步块之前，JVM会在当前线程的栈帧中创建用于存储锁记录的空间，并且将对象头中的Mark Word复制到锁记录中(Displaced Mark Word替)。然后线程尝试使用CAS将对象头中的Mark Word替换为只想所记录的指针。如果成功，当前线程获得锁，如果失败，尝试使用自旋来获得锁。</p>
</blockquote>
<h5 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h5><blockquote>
<p>会使用原子的CAS操作将Displaced Mark Word替换回对象头。如果成功则说明没有竞争发生，如果失败，标识当前锁存在竞争。锁会升级成重量级锁。</p>
</blockquote>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile是轻量级的synchronized，保证了共享变量的可见性，同时不会引起上下文的切换和调度。<br>但是i++不能保证原子性的，因为i++是读写两次操作。<br>JVM中并没有要求64位long/double写入是原子的。所以多线程读取时又可以读到的是”一半”的值。这个时候就需要使用volatile了</p>
<h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ol>
<li>保证单词写入/读入原子性</li>
<li>内存可见性</li>
<li>禁止重排序</li>
</ol>
<h4 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h4><p><img src="/2024/05/13/08/%E5%89%8D%E7%BD%AE%E6%A6%82%E5%BF%B5.png"></p>
<h4 id="volatile是如何实现的？"><a href="#volatile是如何实现的？" class="headerlink" title="volatile是如何实现的？"></a>volatile是如何实现的？</h4><ol>
<li>转变成汇编语言之后会多一个Lock前缀，这个前缀会将当前处理器缓存行的数据写回系统内存，同时其他CPU中缓存了该内存地址的数据无效。修改volatile变量会强制将修改之后的值刷新到内存中同时导致其他线程中的该变量值失效。</li>
<li>处理器会根据MESI(修改、独占、共享、无效)控制协议去维护内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。</li>
</ol>
<p>可见性：<br>修改volatile变量会强制将修改之后的值刷新到内存中<br>同时导致其他线程中的该变量值失效。<br>有序性：遵循happen-before<br>内存屏障：JVM通过内存屏障来实现的</p>
<h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><p>CPU防止代码进行重排序而提供的指令。<br>Unsafe提供了以下的内存屏障方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//内存屏障，禁止load、store操作重排序</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="重排序问题"><a href="#重排序问题" class="headerlink" title="重排序问题"></a>重排序问题</h4><blockquote>
<p>执行程序时，为了提高性能编译器和处理器常常会对执行进行重排序。</p>
<ol>
<li>编译器优化的重排序：不改变单线程语义的情况下，可以重新安排语句的执行顺序</li>
<li>指令级并行的重排序：现代处理器采用了指令级并行技术来讲多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统的重排序：由于处理器使用缓存和读/写缓冲区，是的加载和存储操作看上去可能时再乱序执行</li>
</ol>
</blockquote>
<p><img src="/2024/05/13/08/%E9%87%8D%E6%8E%92%E5%BA%8F.png"></p>
<h5 id="as-if-serial"><a href="#as-if-serial" class="headerlink" title="as-if-serial"></a>as-if-serial</h5><p>多线程程序中的重排序，编译器和CPU只能保证每个线程的线程内部之间都是“看似完全串行的”，但是多个线程会相互读取和写入共享的变量不会进行考虑。</p>
<h5 id="happen-before"><a href="#happen-before" class="headerlink" title="happen-before"></a>happen-before</h5><p>保证一个线程的执行结果对另一个线程可见。<br>#todo </p>
<ul>
<li><input disabled type="checkbox"> synchronized原理</li>
</ul>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><h4 id="是可重入的吗"><a href="#是可重入的吗" class="headerlink" title="是可重入的吗"></a>是可重入的吗</h4><blockquote>
<p>可重入（Reentrant）是指在多线程环境中，一个函数可以被多个线程同时调用而不会引起任何问题。</p>
</blockquote>
<p>是可重入的，因为synchronized关键字是基于JVM内部的监视器锁，这种锁是依赖于对象头中的标记字段来管理锁的状态。<br>当线程第一次获得锁时，他的线程ID会被记录在对象头的标记字段中，并且计数器设置为1，如果同一线程需要再次进入由自己持有锁的synchronized块时，计数器就会+1，当synchronized块时，计数器-1。当计数器回到0时，锁才真正被释放，此时其他线程可以尝试获取这个锁。</p>
<h4 id="synchronized可以锁的类型"><a href="#synchronized可以锁的类型" class="headerlink" title="synchronized可以锁的类型"></a>synchronized可以锁的类型</h4><ol>
<li>对于普通同步方法，锁的是实例对象</li>
<li>对于静态同步方法，锁的是当前类的Class对象，包括这个类的所有对象</li>
<li>对于同步方法块，锁的是Synchornized括号里的对象</li>
</ol>
<h4 id="实现和原理"><a href="#实现和原理" class="headerlink" title="实现和原理"></a>实现和原理</h4><ol>
<li>synchronized用的锁是存在Java对象头里的，如果对象是数组类型，则虚拟机用三个字宽存储对象头。<img src="/2024/05/13/08/Java%E5%AF%B9%E8%B1%A1%E5%A4%B4.png"></li>
<li>对象头会随着锁标志位的变化而变化 <img src="/2024/05/13/08/%E5%AF%B9%E8%B1%A1%E5%A4%B4%E4%BC%9A%E9%9A%8F%E7%9D%80%E9%94%81%E6%A0%87%E5%BF%97%E4%BD%8D%E7%9A%84%E5%8F%98%E5%8C%96%E8%80%8C%E5%8F%98%E5%8C%96.png" alt="对象头会随着锁标志位的变化而变化"></li>
</ol>
<h3 id="Java内存模型的基础"><a href="#Java内存模型的基础" class="headerlink" title="Java内存模型的基础"></a>Java内存模型的基础</h3><p>并发编程中常常需要解决线程之间如何进行通信和如何进行同步。<br>在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>
<blockquote>
<p>共享内存是线程共享程序的公共状态，通过读写内存的公共状态来进行通信。消息传递则是线程之间必须通过发送消息来显示的进行通信。</p>
</blockquote>
<p>Java中使用的是共享内存模型。<img src="/2024/05/13/08/Java%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%85%B1%E4%BA%AB.png"><br>他们之间的通信需要修改共享变量，然后由另一个去读取共享变量来实现。<br>JDK5 开始，Java使用JSP-133内存模型，使用happens-before：前一个操作的结果对后一个操作可见 </p>
<h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><h4 id="什么是CountDownLatch？"><a href="#什么是CountDownLatch？" class="headerlink" title="什么是CountDownLatch？"></a>什么是CountDownLatch？</h4><p>CountDownLatch 是通过一个计数器来实现的，计数器的初始值就是线程的数量，每当一个线程执行完毕之后，计数器的值就-1，然后在闭锁上等待的线程就可以恢复工作了。<br>主要使用场景：</p>
<ul>
<li>用于等待多个线程完成一个整体的前提任务<br>实例：在进行业务之前将两个数据库中的数据进行同步(非集群的数据库)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseSync</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncDatabase1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是同步数据库1的代码</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncDatabase2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是同步数据库2的代码</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">syncDatabase1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">syncDatabase2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待两个数据库同步操作完成</span>
        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Both databases have been synchronized."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">DatabaseSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="JUC包"><a href="#JUC包" class="headerlink" title="JUC包"></a>JUC包</h3><h4 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h4><p>Future的缺点：不支持异步任务的编排，同时get方法是阻塞调用<br>完全可控的Fututure<br>使⽤线程池时，我们应该尽量避免将耗时任务提交到线程池中执⾏。对于⼀些⽐较耗时的操作，如<br>⽹络请求、⽂件读写等，可以采⽤ CompletableFuture 等其他异步操作的⽅式来处理，以避<br>免阻塞线程池中的线程<br>示例代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> adminClient<span class="token punctuation">.</span><span class="token function">distributedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="CompletableFuture源码分析"><a href="#CompletableFuture源码分析" class="headerlink" title="CompletableFuture源码分析"></a>CompletableFuture源码分析</h4><ul>
<li>runAsync不允许返回值，适合需要一步操作但是不关心返回结果 </li>
<li>supplyAsync需要返回值，适合需要返回值的异步操作</li>
<li>thenApply、thenAccept、thenRun、whenComplete 可以对结果进行进一步处理</li>
<li>异常处理使用handle</li>
<li>合并future结果，thenCompose是链接两个CompletabelFuture，并将前一个结果作为下一个任务参数，thenCombine会将两个任务都结束之后，将两个任务的结果合并，并行执行</li>
<li>allOf等待所有的执行完成之后再调用<br>默认使用的是ForkJoinPool.commonPool作为执行器，这个线程池全局共享，可能会被其他任务占用</li>
</ul>
<h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>线程安全的HashMap，多线程情况下HashMap进行put操作会进入死循环。而使用HashTable效率又很低，因为当一个线程访问HashTable的同步方法，其他线程也访问时，会进入阻塞或轮询状态，所有的线程都必须竞争同一把锁。而我们只需要有多把锁，每一把锁都只锁住某一部分数据即可。这就是ConcurrentHashMap使用的锁分段技术。<br>JDK1.7使用的是分段的数据+链表实现的，JDK1.8使用的数据结构跟HashMap一职，数组+链表/红黑树。使用的是Node数组+链表+红黑树，通过synchronized和CAS操作来帮正线程安全</p>
<h4 id="实现原理-具体看源码"><a href="#实现原理-具体看源码" class="headerlink" title="实现原理 具体看源码"></a>实现原理 具体看源码</h4><h5 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h5><p>Segment数组(不可扩容) 作为分段锁，是可重入锁，对其中的一部分加锁<img src="/2024/05/13/08/JDK1.67%E5%AE%9E%E7%8E%B0.png"></p>
<h4 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h4><p>使用的是Node数组+链表/红黑树，Node只适用于链表的情况，而红黑树需要TreeNode。使用Node+CAS+synchronized来保证线程安全<img src="/2024/05/13/08/JDK1.8%E5%AE%9E%E7%8E%B0.png"></p>
<h5 id="常用的api"><a href="#常用的api" class="headerlink" title="常用的api"></a>常用的api</h5><h6 id="get"><a href="#get" class="headerlink" title="get"></a>get</h6><p>先进性一次散列，然后使用这个散列值定位到Segment，再进行散列定位到元素。<br>get不需要加锁，因为get方法中使用的共享变量都顶i成volatile类型，额能够在线程之间保持可见性。保证不会读到过期的值，但是只能被单线程写(如果写入的值依赖原值)<br>根据happen before原则，对volatile字段的写是优先于读的。</p>
<h6 id="put"><a href="#put" class="headerlink" title="put"></a>put</h6><p>对共享变量进行写入操作，为了线程安全必须加锁。<br>先定位到Segment，之后再Segment里进行操作，所以只需要锁住一个Segment即可<br>扩容机制：只会对某个segment进行扩容。</p>
<h6 id="count"><a href="#count" class="headerlink" title="count"></a>count</h6><p>先尝试不加锁来统计各个Segment的大小，如果两次中出现了不同的数值，就采用加锁的方式来统计所有Segment大小。<br>原理是格局modCount变量，put、remove、clean方法都会把modCount+1</p>
<h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>线程安全的&nbsp;List，用来替代Vector<br>Vector的核心思想是每次访问都上锁，使用synchronized进行加锁，会导致性能很差<br>而CopyOnWriteArrayList则是使用了跟读写锁相似的思想，读读不互斥。写不会堵塞读取操作，只有写写才会出现互斥，核心思想是写时复制：不会直接修改原数组，而是先创建底层数组的副本，对副本进行修改，修改完之后再将修改后的数据赋值回去。</p>
<h4 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h4><p>线程安全的队列，是非阻塞实现的</p>
<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>入队<br>使用CAS算法实现的</p>
<ol>
<li>定位尾节点</li>
<li>使用CAS算法来不断尝试将节点加入队列：如果尾节点的next是null表示已经是尾节点了，如果不是说明其他县城更新了尾节点，需要重新或如当前队列的尾节点。<br>出队<br>先获得头节点的元素，判断头节点元素是否为空，如果为空就是已经被别的线程取走，如果不为空就用CAS尝试出队</li>
</ol>
<h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p>有多种实现<br>值得注意的时Pirority和Delay<br>阻塞队列，当队列满时，队列会阻塞插入元素的线程，之道队列布满。<br>当队列为空时，获取元素的线程会等待队列变成非空<br>常用于成缠着消费者问题</p>
<h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><p>通知模式实现</p>
<blockquote>
<p>通知模式是生产者往满的队列中添加队列时会阻塞住生产者。当消费者消费了一个队列中的元素后，会通知生产者当前的队列可用</p>
</blockquote>
<h4 id="CountDownLatch-1"><a href="#CountDownLatch-1" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>示例代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>同步屏障<br>功能是让一组线程到达一个屏障(同步点)时被阻塞，直到最后一个线程到达屏障时才开门，所有被阻塞的线程才会继续运行。<br>与CountDownLatch的区别：countdownlatch只能使用一次，计数器无法重置。cyclicbarrier可以多次重复使用，当所有的线程到达同步点之后屏障会重置。</p>
<p><strong>CyclicBarrier：用于让一组线程互相等待，直到所有线程都到达某个屏障点，然后所有线程再继续执行。可以重用。<br>CountDownLatch：用于一个或多个线程等待其他线程完成某些操作。不能重用。</strong> </p>
<p>二者使用方法相似<br>如何选择：<br>简单的一次性同步任务可以使用countdownlatch，例如初始化一些配置<br>多阶段反复同步线程或者并发任务需要分阶段执行，每个阶段都需要等待所有的线程完成，选择cyclicbarrier</p>
<h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>信号量，控制同时访问特定资源的线程数量。</p>
<h4 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h4><p>进行线程之间协作的工具类。提供一个同步点，两个线程可以在这个同步点交换彼此的数据。</p>
<h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>Atomic包</p>
<h3 id="Java中的线程池"><a href="#Java中的线程池" class="headerlink" title="Java中的线程池"></a>Java中的线程池</h3><h4 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h4><ol>
<li>判断核心线程池里的线程是否都在执行任务，如果不是则新建一个工作线程来执行任务；如果都在执行任务，则进入下一个流程</li>
<li>判断工作 队列是否已经满，如果没满，将新提交的任务存储在这个工作队列里，如果满了，进入下一个流程</li>
<li>判断线程池中 当线程是否都在工作中，如果没有就创建一个新的工作线程来执行任务，如果已经满了，则交给饱和策略来处理这个任务<br><img src="/2024/05/13/08/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png"><br><img src="/2024/05/13/08/jdk%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></li>
</ol>
<h4 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h4><ol>
<li>核心线程数：任务队列没满时可以同时执行的最大线程数</li>
<li>最大线程数：任务队列满时，可以同时运行的线程数</li>
<li>线程空闲时间：线程数量超过核心线程数时，多余的空闲线程再中止前等待新任务的最长时间</li>
<li>时间单位</li>
<li>任务队列：</li>
<li>线程工厂</li>
<li>拒绝策略：当任务无法提交到线程池时的处理策略。<ul>
<li><code>AbortPolicy</code>：抛出&nbsp;<code>RejectedExecutionException</code>&nbsp;异常（默认策略）。</li>
<li><code>CallerRunsPolicy</code>：由调用线程处理该任务。</li>
<li><code>DiscardPolicy</code>：直接丢弃任务。</li>
<li><code>DiscardOldestPolicy</code>：丢弃队列中最旧的任务，然后重新提交新任务。<br><img src="/2024/05/13/08/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></li>
</ul>
</li>
</ol>
<h4 id="任务执行顺序"><a href="#任务执行顺序" class="headerlink" title="任务执行顺序"></a>任务执行顺序</h4><ol>
<li>当前运行中的线程数小于核心线程数，就新建一个线程来执行任务，即使线程池中存在空闲线程</li>
<li>如果大于等于核心线程数，但是小于最大线程数，就把任务加入到任务队列中</li>
<li>如果队列已满，但是线程数小于最大线程数，就新建一个线程来执行任务</li>
<li>如果新创建线程会导致当前运行中的线程数大于最大线程数，就会调用拒绝策略</li>
</ol>
<h3 id="生产者-消费者模型："><a href="#生产者-消费者模型：" class="headerlink" title="生产者-消费者模型："></a>生产者-消费者模型：</h3><p>一个内存队列，多个生产线程往内存队列中放数据，多个消费者线程从内存对俄中取数据。</p>
<ol>
<li>内存队列本身需要枷锁，才能实现线程安全</li>
<li>阻塞。当内存队列满了，生产者被阻塞，内存队列为空时消费者被阻塞。</li>
<li>双向通知：消费者被阻塞之后，生产者放入新数据，要通知消费者，反之要通知生产者。</li>
</ol>
<h1 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h1><p>主要功能</p>
<ol>
<li>内存屏障</li>
</ol>
<h1 id="ReenTrantLock"><a href="#ReenTrantLock" class="headerlink" title="ReenTrantLock"></a>ReenTrantLock</h1><h2 id="实现原理-3"><a href="#实现原理-3" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现是一种自旋锁，使用循环调用CAS操作来进行加锁。</p>
<h1 id="线程同步的方法"><a href="#线程同步的方法" class="headerlink" title="线程同步的方法"></a>线程同步的方法</h1><ol>
<li>Synchronized</li>
<li>ReentrantLock</li>
<li>CountDownLatch</li>
<li>CyclicBarrier</li>
<li>Semaphore</li>
<li>Wait和No</li>
</ol>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 加上书签</li>
</ul>
<h1 id="Fork-x2F-Join与线程池的区别"><a href="#Fork-x2F-Join与线程池的区别" class="headerlink" title="Fork/Join与线程池的区别"></a>Fork/Join与线程池的区别</h1><p>核心是ForkJoinPool，使用的是工作窃取方来平衡</p>
<h1 id="AQS-AbstactQueuedSynchronizer"><a href="#AQS-AbstactQueuedSynchronizer" class="headerlink" title="AQS (AbstactQueuedSynchronizer)"></a>AQS (AbstactQueuedSynchronizer)</h1><p>是一个抽象类，提供了线程同步的底层实现机制，</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm-practice</title>
    <url>/2023/09/17/02/</url>
    <content><![CDATA[<h1 id="Springboot练习"><a href="#Springboot练习" class="headerlink" title="Springboot练习"></a>Springboot练习</h1><p>通过atguigu的今日头条项目进行项目驱动式学习<br>前端已准备</p>
<h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><p>要求：后端使用springboot整合mybatis和springmvc来进行简单的增删改查</p>
<ol>
<li>导入依赖:<ul>
<li>springboot启动包，springboot-web项目启动包，mybatis插件，数据库配置启动器springboot-starter-jdbc，druid启动器，mysql驱动类，lombok，aop,test,打包插件</li>
</ul>
</li>
<li>编写配置类:<br>mybatis的配置类可以使用yaml格式或者是properties格式的文件，推荐使用yaml格式的文件，有分层的效果<br>[[Tools#yaml|查看Tools中的yaml]]<br><a href="https://www.runoob.com/w3cnote/yaml-intro.html">菜鸟教程</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">具体配置</a><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># server配置</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token comment">#默认的根路径</span>

<span class="token comment"># 连接池配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>///sm_db1
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
      <span class="token key atrule">password</span><span class="token punctuation">:</span> root
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver

<span class="token comment"># mybatis-plus的配置</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.pojo
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> isDeleted  <span class="token comment">#全局逻辑删除</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto <span class="token comment">#直接使用springboot来进行配置，就不需要再加上这个注解了</span>
      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> news_ <span class="token comment"># 设置表的前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>druid兼容文件<pre class="line-numbers language-none"><code class="language-none">文件名:
org.springframework.boot.autoconfigure.AutoConfiguration.imports
内容:
com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>编写启动类main<br><strong>疑问： 什么是乐观锁和悲观锁</strong><br>配置使用的插件 [[Java#^f13de1]]<br><a href="https://baomidou.com/pages/2976a3/#%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98-sql-%E8%A7%A3%E6%9E%90">教程</a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mapper"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//配置mybatis-plus插件</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分页</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乐观锁</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlockAttackInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//防全局修改和删除</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>工具类封装:主要是统一返回结果的类<br> 结果封装类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 全局统一返回结果类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">//T是要使用的泛型，要在这里声明</span>
    <span class="token comment">// 返回码</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token comment">// 返回消息</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token comment">// 返回数据</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 返回数据</span>
    <span class="token comment">//泛型方法，要将 要使用的泛型在返回类型之前进行声明</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span> resultCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * 操作成功
     * @param data  baseCategory1List
     * @param &lt;T&gt;
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决枚举类<br>枚举类可以使用 常量(具体的常量内容来进行枚举)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 统一返回结果状态信息类
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCodeEnum</span> <span class="token punctuation">{</span>

    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USERNAME_ERROR</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span><span class="token string">"usernameError"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PASSWORD_ERROR</span><span class="token punctuation">(</span><span class="token number">503</span><span class="token punctuation">,</span><span class="token string">"passwordError"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">NOTLOGIN</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">,</span><span class="token string">"notLogin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USERNAME_USED</span><span class="token punctuation">(</span><span class="token number">505</span><span class="token punctuation">,</span><span class="token string">"userNameUsed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>MD5加密工具类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MD5Util</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> strSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> hexChars<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">,</span> <span class="token char">'5'</span><span class="token punctuation">,</span> <span class="token char">'6'</span><span class="token punctuation">,</span> <span class="token char">'7'</span><span class="token punctuation">,</span> <span class="token char">'8'</span><span class="token punctuation">,</span>
                    <span class="token char">'9'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'f'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> strSrc<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获得m5的实例</span>
            <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bytes <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span> b <span class="token operator">=</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                chars<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> hexChars<span class="token punctuation">[</span>b <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                chars<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> hexChars<span class="token punctuation">[</span>b <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"MD5加密出错！！+"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>使用mybatisX插件，选中表之后逆向工程生成实体类和接口(注意自己补充和删减一些注释)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@TableId</span> <span class="token comment">//主键</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userPwd<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Version</span> <span class="token comment">//版本</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableLogic</span> <span class="token comment">//逻辑删除</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDeleted<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
补充:<br>[[Java#^86b436||逻辑删除]]</li>
<li>使用jwt来生成[[Web学习#Token是一种令牌，用来识别访问人员的|Token]]</li>
<li>JSON Web Token JWT由三部分组成: header(头部).payload(载荷).signature(签名)<br>1. 导入依赖</li>
</ol>
<pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
<ol start="2">
<li><p>编写配置</p>
<p> application.yaml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#jwt配置</span>
<span class="token key atrule">jwt</span><span class="token punctuation">:</span>
  <span class="token key atrule">token</span><span class="token punctuation">:</span>
    <span class="token key atrule">tokenExpiration</span><span class="token punctuation">:</span> <span class="token number">120</span> <span class="token comment">#有效时间,单位分钟</span>
    <span class="token key atrule">tokenSignKey</span><span class="token punctuation">:</span> headline123456  <span class="token comment">#当前程序签名秘钥 自定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>导入工具类</p>
<p> 封装jwt技术工具类</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"jwt.token"</span><span class="token punctuation">)</span> <span class="token comment">//使用这个就可以省略前缀，如果后面的变量名和配置中相同的话就可以自动装配而不用手动装配了</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtHelper</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span>  <span class="token keyword">long</span> tokenExpiration<span class="token punctuation">;</span> <span class="token comment">//有效时间,单位毫秒 1000毫秒 == 1秒</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> tokenSignKey<span class="token punctuation">;</span>  <span class="token comment">//当前程序签名秘钥</span>

    <span class="token comment">//生成token字符串</span>
    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tokenExpiration = "</span> <span class="token operator">+</span> tokenExpiration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tokenSignKey = "</span> <span class="token operator">+</span> tokenSignKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"YYGH-USER"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tokenExpiration<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//单位分钟</span>
                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS512</span><span class="token punctuation">,</span> tokenSignKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compressWith</span><span class="token punctuation">(</span><span class="token class-name">CompressionCodecs</span><span class="token punctuation">.</span><span class="token constant">GZIP</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> token<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//从token字符串获取userid</span>
    <span class="token keyword">public</span>  <span class="token class-name">Long</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>tokenSignKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userId<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token comment">//判断token是否有效</span>
    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">isExpiration</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> isExpire <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>tokenSignKey<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//没有过期，有效，返回false</span>
            <span class="token keyword">return</span> isExpire<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//过期出现异常，返回true</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>编写controller<br>知识点：跨域: 例如从不同的服务器或域名获取信息。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="时间格式解决"><a href="#时间格式解决" class="headerlink" title="时间格式解决"></a>时间格式解决</h2><p><img src="/2023/09/17/02/timeFormat.png" alt="timeformat"></p>
]]></content>
  </entry>
  <entry>
    <title>微服务加密探讨</title>
    <url>/2024/10/04/15/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2024/03/05/33/</url>
    <content><![CDATA[<h2 id="Quarkus"><a href="#Quarkus" class="headerlink" title="Quarkus"></a>Quarkus</h2><ul>
<li>GreetingResourceTest是在jvm中测试</li>
</ul>
<h2 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h2><p><a href="https://ticknet-studio.feishu.cn/docx/TNCGdBx2vodggwxqLcCcK3hTnpc">微服务面试</a></p>
<ul>
<li><p>CAP理论：任何一个分布式系统都无法做到一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）全部满足。</p>
<ul>
<li>C数据一致</li>
<li>A读写操作必须都能成功</li>
<li>P分区容错，当分布式系统节点之间出现网络故障导致节点之间无法通信，导致出现了分区 必须要满足的</li>
</ul>
</li>
<li><p>BASE理论：<img src="/2024/03/05/33/BASE.png"></p>
<ul>
<li>基于BASE理论的柔性事务，不同于ACID的刚性事务，通过一些新的方案，只要保证最终一致性即可</li>
</ul>
</li>
<li><p>AP：无需锁定数据，实现最终一致即可</p>
</li>
<li><p>CP：各个子事务执行后不要提交，锁定资源，不允许其他人访问。</p>
</li>
<li><p>SpringCloud </p>
</li>
<li><p>分布式事务：</p>
<ul>
<li>接口幂等性：接口的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。</li>
<li>XA/两阶段提交：<ul>
<li>第一阶段：存在一个负责协调各个本地资源管理的事务管理器，事务管理器在第一阶段询问各个资源管理器是否就绪，如果收到的没辙资源的回复都是yes，在在第二阶段提交事务时，任意一个回复no就回滚事务</li>
<li>第二阶段：事务管理器根据所有本地资源管理器的返回，通知所有本地资源管理器，步调一致的在所有分支上提交或者回滚事务</li>
<li>缺点：<ul>
<li>同步阻塞：当参与事务者存在占用公共资源的情况，齐总一个占用了资源，其他参与者只能等待资源释放，处于阻塞装填。</li>
<li>单点故障：一旦事务管理器故障，整个系统都不可用了</li>
<li>数据不一致：在阶段二如果事务管理器只发送了部分commit消息，如果出现网络异常，那么只有部分参与者会提交事务</li>
<li>不确定性：当协事务管理器发送 commit 之后，并且此时只有一个参与者收到了 commit，那么当该参与者与事务管理器同时宕机之后，重新选举的事务管理器无法确定该条消息是否提交成功。</li>
</ul>
</li>
</ul>
</li>
<li>TCC Try-Confirm-Cancel <img src="/2024/03/05/33/TCC%E4%BC%98%E7%82%B9.png"><ol>
<li>Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）  </li>
<li>Confirm 阶段：确认执行真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源，Confirm 操作满足幂等性。要求具备幂等设计，Confirm 失败后需要进行重试。  </li>
<li>Cancel 阶段：取消执行，释放 Try 阶段预留的业务资源 Cancel 操作满足幂等性 Cancel 阶段的异常和 Confirm 阶段异常处理方案基本上一致。</li>
</ol>
</li>
<li>本地消息表：依靠MQ实现<img src="/2024/03/05/33/%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8.png"> <img src="/2024/03/05/33/%E6%B6%88%E6%81%AF%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7.png" alt="|500"></li>
</ul>
</li>
<li><p>路由：</p>
<ul>
<li>gateway<ul>
<li>配置<ul>
<li><code>id</code>：路由的唯一标示</li>
<li><code>predicates</code>：路由断言，其实就是匹配条件</li>
<li><code>filters</code>：路由过滤条件，后面讲</li>
<li><code>uri</code>：路由目标地址，<code>lb://</code>代表负载均衡，从注册中心获取目标微服务的实例列表，并且负载均衡选择一个访问。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Nacos:</p>
<ul>
<li>namespace：用于环境隔离 <img src="/2024/03/05/33/namespace.png" alt="|500"></li>
<li>分级模型：<img src="/2024/03/05/33/Nacos%E5%88%86%E7%BA%A7%E6%A8%A1%E5%9E%8B.png"><img src="/2024/03/05/33/Nacos%E5%88%86%E7%BA%A7%E6%A8%A1%E5%9E%8B%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.png"><ul>
<li>namespace 命名空间<ul>
<li>group分组<ul>
<li>服务service<ul>
<li>集群cluster 对应不同的机房/ip<ul>
<li>实例instance：</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Nacos挂了能不能正常访问：答案是能，Nacos会把注册的服务的地址推送给他们，他们各自维护一个列表，所以Nacos挂了也不影响调用</li>
<li>nacos和eureka的区别：<ul>
<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>
<li>临时实例心跳不正常会被删除，非临时实例不会呗删除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos默认使用AP方式，</li>
</ul>
</li>
<li>nacos读取配置的流程<img src="/2024/03/05/33/nacos%E8%AF%BB%E5%85%A5%E9%85%8D%E7%BD%AE%E7%9A%84%E6%B5%81%E7%A8%8B.png"></li>
<li>配置热更新：<ul>
<li><h2 id="动态路由：-需要实现Nacos动态监听配置接口-引入配置"><a href="#动态路由：-需要实现Nacos动态监听配置接口-引入配置" class="headerlink" title="动态路由：  - 需要实现Nacos动态监听配置接口  - 引入配置"></a>动态路由：<br>  - 需要实现Nacos动态监听配置接口<br>  - 引入配置</h2></li>
</ul>
</li>
</ul>
</li>
<li><p>OpenFeign：</p>
<ul>
<li>执行过程：<img src="/2024/03/05/33/OpenFeign%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91.png"><ol>
<li>获取请求中的serviceId</li>
<li>根据serviceId负载均衡，找到一个可用的服务实例</li>
<li>利用服务实例ip和port信息重构url</li>
<li>向真正的url发起请求</li>
</ol>
</li>
</ul>
</li>
<li><p>负载均衡：</p>
<ul>
<li>使用LoadBalancer实现负载均衡</li>
<li>使用Ribbon组件实现：发起远程调用时，ribbon先从注册中心拉取服务地址列表，然后按照一定的路由策略选择一个发起远程调用，</li>
<li>Ribbon发负载均衡策略： 已经被集成到Eureka-client和Nacos-Discovery中，后来被废弃，使用LoadBalancer了，OpenFeign也整合了LoadBalancer<ul>
<li>轮询，根据权重选择，随机选择一个可用的，</li>
<li>区域敏感策略，以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询(默认)</li>
</ul>
</li>
</ul>
</li>
<li><p>服务保护</p>
<ul>
<li>Sentinel：<ul>
<li>线程隔离：<ol>
<li>线程池隔离：给每个服务调用业务分配一个线程池，利用线程池本身进行隔离<ul>
<li>支持主动超时，支持异步调用</li>
<li>缺点是线程的额外开销较大</li>
<li>使用场景低扇出</li>
</ul>
</li>
<li>信号量隔离：不创建线程池而是使用计数器模式，记录业务使用的线程数量，打到信号量上限时，禁止新的请求<ul>
<li>优点：轻量级，无额外开销</li>
<li>缺点：不支持主动超时，不支持异步调用</li>
<li>适合高频调用高扇出(一个服务需要调用其他许多服务，那么我们就可以说这个服务有高扇出)</li>
</ul>
</li>
</ol>
</li>
<li>限流：<ul>
<li>滑动窗口算法：</li>
<li>令牌桶算法：<ul>
<li>固定速率生成令牌，桶满了就舍弃，每个请求必须向桶中获取令牌才能被处理，没有获得令牌的请求等待或者丢弃</li>
<li>一般情况下每秒产生的令牌数量就是QPS上限，但是当前这一秒没有请求进入，下一半秒涌入了超过2N个请求，然后这一秒生成了N个令牌，所以放行了2N个请求，超过了阈值，所以要预留一定的波动空间</li>
</ul>
</li>
<li>漏桶算法：请求放入队列中，以固定的速率去取出并处理请求。</li>
</ul>
</li>
</ul>
</li>
<li>限流：<ul>
<li>使用nginx基于漏桶实现限流</li>
<li>使用gateway 的令牌桶算法，根据ip或者路径进行限流</li>
<li>Feign整合sentinel，在配置文件中开启即可</li>
</ul>
</li>
<li>熔断：对于超过QPS上限的请求或者延迟较高的请求，对其进行熔断，同时设置一个降级处理逻辑。<ul>
<li><img src="/2024/03/05/33/%E6%96%AD%E8%B7%AF%E5%99%A8%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="断路器的工作状态机|475"><ol>
<li>closed关闭装填，放行所有请求，并开始统计异常比例、满请求比例，超过阈值切换到open</li>
<li>open服务调用被熔断，访问这个被熔断的请求会被拒绝，快速失败，走降级逻辑。持续一段时间之后转到half-open</li>
<li>half-open 半开模式，放行一次请求，根据执行结果来判断接下来的操作<ul>
<li>请求成功：切换到closed状态</li>
<li>请求失败：切换到open状态</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>分布式事务：</p>
<ul>
<li>使用seata解决分布式事务：<ul>
<li>seata有三个重要角色：<img src="/2024/03/05/33/seata%E6%9E%B6%E6%9E%84.png" alt="|500"><ul>
<li>TC 事务协调者：维护全局和分支失物的状态，协调全局事务的</li>
<li>TM 事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务</li>
<li>RM 资源管理器：管理分支事务，与TC交谈以注册分之十五和报告分支事务的状态，并驱动分支事务的提交和回滚</li>
</ul>
</li>
<li>xa模式：<ul>
<li>RM一阶段工作：<ol>
<li>注册分支事务到TC</li>
<li>执行分支事务sql但不提交</li>
<li>报告执行状态到TC</li>
</ol>
</li>
<li>TC二阶段工作：<ul>
<li>TC检测各分支事务执行状态<ul>
<li>如果都成功则通知所有RM提交事务</li>
<li>如果都失败则通知所有RM回滚事务</li>
</ul>
</li>
</ul>
</li>
<li>RM二阶段工作：<ul>
<li>接收TC指令，提交或回滚事务</li>
</ul>
</li>
<li>优点：强一致性，没有代码侵入</li>
<li>缺点：一阶段需要锁定数据库资源，等待二阶段结束才释放，性能差</li>
<li>依赖关系型数据库实现事务</li>
</ul>
</li>
<li>at模式：<ol>
<li>阶段一RM：<img src="/2024/03/05/33/AT%E4%B8%80%E9%98%B6%E6%AE%B5.png" alt="|525"><ul>
<li>注册分支事务，</li>
<li>记录undo-log 快照数据</li>
<li>执行业务sql并提交</li>
<li>报告事务状态</li>
</ul>
</li>
</ol>
<ul>
<li>二阶段<img src="/2024/03/05/33/AT%E4%BA%8C%E9%98%B6%E6%AE%B5.png" alt="|500"><ol>
<li>阶段而提交时RM工作：删除undo-log</li>
<li>回滚时，RM工作：根据undo-log恢复数据到更新前</li>
</ol>
</li>
</ul>
</li>
<li>两者区别：<ul>
<li>XA一阶段不提交事务，锁定资源，AT一阶段提交事务，不锁定资源</li>
<li>XA模式伊利数据库实现回滚，AT模式利用数据快照实现数据回滚</li>
<li>XA模式强一致性，AT模式最终一致</li>
</ul>
</li>
<li>TCC模式：TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：<img src="/2024/03/05/33/TCC%E6%A8%A1%E5%BC%8F.png"><ul>
<li><code>try</code>：资源的检测和预留；</li>
<li><code>confirm</code>：完成资源操作业务；要求 <code>try</code> 成功 <code>confirm</code> 一定要能成功。</li>
<li><code>cancel</code>：预留资源释放，可以理解为try的反向操作。</li>
<li>优点：一阶段完成直接提交事务，释放资源，无需快照，无需依赖数据库事务，可用于关系型数据库</li>
<li>缺点：代码侵入严重，软状态，事务最终一致</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接口幂等性：</p>
<ul>
<li>使用token+redis实现接口幂等性，第二次请求之后每次请求都会携带之前的token，后台先对redis进行验证，如果存在token则执行业务，同时删除token，如果不存再则直接返回，保证了幂等性，保证了同一个token只处理一次业务</li>
</ul>
</li>
<li><h2 id="MQ：-组成-producer消息的生产者-broker-消息的保存-consumer-消息的消费者-选择："><a href="#MQ：-组成-producer消息的生产者-broker-消息的保存-consumer-消息的消费者-选择：" class="headerlink" title="MQ：  - 组成      - producer消息的生产者      - broker 消息的保存      - consumer 消息的消费者  - 选择："></a>MQ：<br>  - 组成<br>      - producer消息的生产者<br>      - broker 消息的保存<br>      - consumer 消息的消费者<br>  - 选择：<img src="/2024/03/05/33/MQ%E7%9A%84%E9%80%89%E6%8B%A9.png"></h2></li>
</ul>
<h3 id="Kafka面试题"><a href="#Kafka面试题" class="headerlink" title="Kafka面试题"></a>Kafka面试题</h3><ul>
<li>如何保证消息不丢失：<ol>
<li>producer时，可以使用异步回调发送，如果消息发送失败，我们可以通过回调获取失败后的消息信息，可以重试或者记录日志，也可以后续进行不成</li>
<li>broker中消息丢失，通过kafka的复制机制来保证消息不丢失，在生产者发送消息的时候，可以设置一个acks的参数位all，这样就会在broker的leader和foller分区都保存确认，只有所有的副本都确认之后才算是成功过发送了消息</li>
</ol>
</li>
<li>consumer时使用pull，还是push：<ul>
<li>Kafka使用了pull模式，consumer可以自主决定是否批量从broker拉取数据。push为了避免consumer崩溃而采用较低的推送速率，到一次只推送较少的消息造成浪费，pull模式下，consumer可以根据自己的消费能力而去决定如何拉取消息</li>
<li>缺点：如果broker没有提供可消费的消息，将导致consumer不断循环中轮询，直到最新消息到达。</li>
<li>Kafka可以有个参数可以让consumer阻塞知道新消息的到达，或者阻塞直到消息的数量到达某个特定的量就可以批量发送。</li>
</ul>
</li>
<li>Kafka将Topic分成了若干分区，每个分区同一时间只能被有一个consumer消费，意味着每个分区被消费的消息在日志中的位置仅仅是有一个简单的整数：offset ，consumer可以把offset调成一个较老的值，从而重新消费老消息</li>
<li>主从复制：一个topic可以有多个副本<ul>
<li>主节点将消息写入本地日志，从节点从主节点拉取信息，写入本地日志，之后向主节点发送确认消息，如果主节点收到所有从节点的确认消息，该消息就会被认为是已提交的，主节点会更新自己的高水位，消费者只能消费已提交的消息</li>
<li>优点：保证了主节点崩溃消息也不会丢失</li>
</ul>
</li>
<li>脑裂问题：<ul>
<li>只有领导者负责处理生产者和消费者的读写请求，追随者只能从领导者那里复制数据</li>
<li>Kafka的选举是由ZooKeeper协调的，ZooKeeper可以保证在任何时候只有一个领导者被选举出来</li>
<li>Zookeeper是如何做到的？<ul>
<li>当Zookeeper启动或者领导者崩溃时，所有的Zookeeper节点都会进入选举状态</li>
<li>投票阶段：每个节点会将自己作为领导者后端，然后发送投票信息给其他节点，当一个节点收到其他节点的投票信息是，如果ZXID更大，也就是收到的消息更，会更新自己的投票信息，并将新的投票信息发送给其他节点</li>
<li>确定阶段：当一个节点收到超过半数节点的相同投票信息中，他就认为选举结束，选举出的领导者就是投票信息中的候选节点，然后将结果发送给其他节点。</li>
</ul>
</li>
</ul>
</li>
<li>消息重复消费如何解决<ul>
<li>kafka都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，如果出现重复消费的问题，我们需要禁用自动提交offset，改为手动提交，消费成功后报告给broker，为了维护消息的幂等性，我们可以设置唯一主键进行区分，或者是枷锁，数据库的锁或者是Redis的分布式锁都能解决幂等问题。</li>
</ul>
</li>
<li>如何保证消息的顺序性：<ol>
<li>将消息都存储在同一个分区下</li>
<li>发送消息时按照相同的业务设置相同的key，默认的分区是通过key的hashcode值来选择分区的，如果hash值一样，分区也是一样的。</li>
</ol>
</li>
<li>高可用：<ul>
<li>集群：多个broker，即使一台宕机，其他可以继续服务<ul>
<li>broker如何实现消息同步？<ul>
<li>主从同步，Leader Broker接受消息后，将消息写入本地日志，Follower拉取消息，写入本地日志，当所欲的ISR(同步复制保存的follower)都完成，Leader就会向生产者发送确认消息。</li>
</ul>
</li>
<li>通过过程中Leader宕机了，该怎么办？<ul>
<li>Kafka回从ISR列表中选择一个新的Leader，ISR列表中的都是已经同步最新数据的副本，当Follower同步完成后，会重新加入到ISR列表中。</li>
</ul>
</li>
</ul>
</li>
<li>数据清洗：<ul>
<li>日志清洗：<ul>
<li>根据消息保留时间，超过指定时间触发清洗，默认是168小时</li>
<li>根据topic存储的数据大小，大于一定法制，开始删除最久的消息，默认关闭。</li>
</ul>
</li>
</ul>
</li>
<li>高性能设计：<ul>
<li>消息分区：不受单台服务器限制，处理更多数据</li>
<li>顺序读写：顺序读写，提高读写效率</li>
<li>页缓存：磁盘中的数据缓存到内存，把磁盘的访问变为对内存的访问</li>
<li>零拷贝：减少上下文切换及数据拷贝</li>
<li>消息压缩：减少磁盘IO和网络IO</li>
<li>分批发送：分批发送，将消息打包批量发送，减少网络开销</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><ol>
<li>方便更改微服务的ip和 端口号</li>
<li>如果存在多个服务，可以配置负载均衡</li>
<li>方便维护<br>服务注册中心：实现微服务之间的动态注册与发现<br><img src="/2024/03/05/33/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E4%BD%9C%E7%94%A8.png"></li>
</ol>
<h3 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h3><p>功能：</p>
<ol>
<li>服务发现 支持 http和dns</li>
<li>健康监测</li>
<li>KV存储 配置</li>
<li>多数据中心</li>
<li>可视化Web界面<br>在main方法上使用 @EnableDiscoveryClient<br>controller 层上<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">PaymentSrv_URL</span> <span class="token operator">=</span> <span class="token string">"http://cloud-payment-service"</span><span class="token punctuation">;</span><span class="token comment">//服务注册中心上的微服务名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-cssx" data-language="cssx"><code class="language-cssx">consul agent -dev 进入开发者模式 localhost:8500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--SpringCloud consul discovery --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">  <span class="token selector">####Spring Cloud Consul for Service Discovery
spring:
    cloud: # 服务注册
      consul: # consul注册中心
        host: localhost # consul地址
        port: 8500 # consul端口
        discovery: # 服务发现
          service-name: $</span><span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span> # 服务名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
RestTemplate提供了多种便捷访问远程Http服务的方法，</li>
</ol>
<p>&nbsp;</p>
<p>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集</p>
<blockquote>
<p>applicaiton.yml是用户级的资源配置项</p>
</blockquote>
<p>bootstrap.yml是系统级的，优先级更加高</p>
<p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p>
<p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">spring:
  application:
    name: cloud-payment-service
    ####Spring Cloud Consul for Service Discovery
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: $</span><span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
      <span class="token property">config</span><span class="token punctuation">:</span>
        <span class="token property">profile-separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> # default value is <span class="token string">","</span>，we update <span class="token string">'-'</span>
        <span class="token property">format</span><span class="token punctuation">:</span> YAML

# config/cloud-payment-service/data
#       /cloud-payment-service-dev/data
#       /cloud-payment-service-prod/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>&nbsp;application.yml文件改为bootstrap.yml,这是很关键的或者两者共存<br>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml </p>
<ul>
<li>consul kv写法</li>
<li>config/配置文件/data  里面写配置</li>
<li>动态刷新：在main上写 : @RefreshScope<br>问题: 重启consul之后，配置丢失，如何持久化配置？</li>
</ul>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul>
<li>客户端负载和服务器负载<br>loadbalancer本地负载均衡客户端 VS Nginx服务端负载均衡区别</li>
</ul>
<p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的。</p>
<p>loadbalancer本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p>
<ul>
<li>LoadBalancer 在工作时分成两步：</li>
</ul>
<p><strong>第一步</strong>，先选择ConsulServer从服务端查询并拉取服务列表，知道了它有多个服务(上图3个服务)，这3个实现是完全一样的，</p>
<p>默认轮询调用谁都可以正常执行。类似生活中求医挂号，某个科室今日出诊的全部医生，客户端你自己选一个。</p>
<p><strong>第二步</strong>，按照指定的负载均衡策略从server取到的服务注册列表中由客户端自己选择一个地址，所以LoadBalancer是一个<strong>客户端的</strong>负载均衡器。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--loadbalancer--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问时即可在多个服务器中切换<br>均衡算法默认为轮询：<br>可以切换为随机算法：<br>修改RestTemplateConfig:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>
        <span class="token comment">//下面的value值大小写一定要和consul里面的名字一样，必须一样</span>
        value <span class="token operator">=</span> <span class="token string">"cloud-payment-service"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">RestTemplateConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">ReactorLoadBalancer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span>
                                                            <span class="token class-name">LoadBalancerClientFactory</span> loadBalancerClientFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClientFactory</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomLoadBalancer</span><span class="token punctuation">(</span>loadBalancerClientFactory<span class="token punctuation">.</span><span class="token function">getLazyProvider</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>Feign是一个<strong>声明性web服务客户端</strong>。它使编写web服务客户端变得更容易。使用Feign创建一个接口并对其进行注释。它具有可插入的注释支持，包括Feign注释和JAX-RS注释。Feign还支持可插拔编码器和解码器。Spring Cloud添加了对Spring MVC注释的支持，以及对使用Spring Web中默认使用的HttpMessageConverter的支持。Spring Cloud集成了Eureka、Spring Cloud CircuitBreaker以及Spring Cloud LoadBalancer，以便在使用Feign时提供负载平衡的http客户端。</p>
<p>OpenFeign能干什么</p>
<p>前面在使用<strong>SpringCloud LoadBalancer</strong>+RestTemplate时，利用RestTemplate对http请求的封装处理形成了一套模版化的调用方法。**<em>但是在实际开发中，</em>**</p>
<p>由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，OpenFeign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在OpenFeign的实现下，我们只需创建一个接口并使用注解的方式来配置它(在一个微服务接口上面标注一个**_@FeignClient_**注解即可)，即可完成对服务提供方的接口绑定，统一对外暴露可以被调用的接口方法，大大简化和降低了调用客户端的开发量，也即由服务提供者给出调用接口清单，消费者直接通过OpenFeign调用即可，O(∩_∩)O。</p>
<p>OpenFeign同时还集成SpringCloud LoadBalancer</p>
<p>可以在使用OpenFeign时提供Http客户端的负载均衡，也可以集成阿里巴巴Sentinel来提供熔断、降级等功能。而与SpringCloud LoadBalancer不同的是，通过OpenFeign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p>
<ul>
<li>引入依赖:<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--openfeign--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>配置文件<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">server:
  port: 80

spring:
  application:
    name: cloud-consumer-openfeign-order
  ####Spring Cloud Consul for Service Discovery
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true #优先使用服务ip进行注册
        service-name: $</span><span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
main函数上使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">//该注解用于向使用consul为注册中心时注册服务</span>
<span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">//启用feign客户端,定义服务+绑定接口，以声明式的方法优雅而简单的实现服务调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
api接口上使用:<br>@FeignClient(value = “xxx”)</li>
<li>超时控制<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sspring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">openfeign</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span>

          <span class="token comment"># default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span>
          <span class="token key atrule">default</span><span class="token punctuation">:</span>
             <span class="token comment">#连接超时时间</span>
             <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">4000</span>
             <span class="token comment">#读取超时时间</span>
             <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">4000</span>

          <span class="token comment"># 为serviceC这个服务单独配置超时时间，单个配置的超时时间将会覆盖全局配置</span>

          <span class="token key atrule">serviceC</span><span class="token punctuation">:</span>
             <span class="token comment">#连接超时时间</span>
             <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
             <span class="token comment">#读取超时时间</span>
             <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><strong>服务雪崩</strong></p>
<p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.</p>
<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p>
<p>所以，</p>
<p>通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p>
<h2 id="CircuitBreaker-断路器"><a href="#CircuitBreaker-断路器" class="headerlink" title="CircuitBreaker  断路器"></a>CircuitBreaker  断路器</h2><p>配置参考<br><img src="/2024/03/05/33/%E6%96%AD%E8%B7%AF%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="断路器配置"></p>
<p>断路器的状态：</p>
<ol>
<li>CLOSED</li>
<li>OPEN</li>
<li>HALF_OPEN 半开<br><img src="/2024/03/05/33/%E7%8A%B6%E6%80%81.png"><br>pox<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--resilience4j-circuitbreaker--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-circuitbreaker-resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 由于断路保护等需要AOP实现，所以必须导入AOP包 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2024/03/05/33/%E5%8E%9F%E7%90%86.png"></li>
</ol>
<h2 id="分布式链路追踪"><a href="#分布式链路追踪" class="headerlink" title="分布式链路追踪"></a>分布式链路追踪</h2><p>原因:<br><img src="/2024/03/05/33/%E5%8E%9F%E5%9B%A0.png" alt="原因"><br><strong>ZipKin概述</strong></p>
<p>Zipkin是一种分布式链路跟踪系统图形化的工具，Zipkin 是 Twitter 开源的分布式跟踪系统，能够收集微服务运行过程中的实时调用链路信息，并能够将这些调用链路信息展示到Web图形化界面上供开发人员分析，开发人员能够从ZipKin中分析出调用链路中的性能瓶颈，识别出存在问题的应用程序，进而定位问题和解决问题<br>运行: java -jar zipkin-server-3.0.0-rc0-exec.jar</p>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p><img src="/2024/03/05/33/%E7%BD%91%E5%85%B3.png" alt="网关"></p>
<h3 id="执行流程："><a href="#执行流程：" class="headerlink" title="执行流程："></a>执行流程：</h3><ol>
<li>路由判断：用户端的请求到达网关之后，根据Gateway Handler Mapping 处理，会进行断言判断</li>
<li>路由过滤：很多Handler 组成的Fileter Chain</li>
<li>服务处理：后端服务会对请求进行处理</li>
<li>响应过滤：返回给-Gateway的过滤器会再次进行处理，逻辑上可以乘坐Post-Filters</li>
<li>响应返回：响应经过过处理之后，返回给客户端</li>
</ol>
<ul>
<li>作用<ol>
<li>反向代理</li>
<li>鉴权</li>
<li>流量控制</li>
<li>熔断</li>
<li>日志监控</li>
</ol>
</li>
</ul>
<h3 id="Spring-Cloud-Gateway如何实现动态路由"><a href="#Spring-Cloud-Gateway如何实现动态路由" class="headerlink" title="Spring Cloud Gateway如何实现动态路由"></a>Spring Cloud Gateway如何实现动态路由</h3><p>可以使用Nacos作为注册中心去动态更改<br>配置的路由断言类型</p>
<h3 id="Gateway过滤器的类型"><a href="#Gateway过滤器的类型" class="headerlink" title="Gateway过滤器的类型"></a>Gateway过滤器的类型</h3><ul>
<li>Pre类型：在请求被转发到微服务之前及逆行拦截和修改</li>
<li>Post ： 微服务处理请求之后，返回响应给网关，网关可以再次进行处理，例如修改相应内容或者响应头，日志输出，流量监控<br>或者</li>
<li>GatewayFilter：局部过滤器，应用在单个路由或者一组路由上的过滤器</li>
<li>GlobalFilter：全局过滤器<br>pom<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--gateway--&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
yml<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway <span class="token comment">#以微服务注册进consul或nacos服务列表内</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span> <span class="token comment">#配置consul地址</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
	<span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> pay_routh1 <span class="token comment">#pay_routh1                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>                <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/pay/gateway/get/<span class="token important">**</span>              <span class="token comment"># 断言，路径相匹配的进行路由id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>                <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/pay/gateway/info/<span class="token important">**</span>              <span class="token comment"># 断言，路径相匹配的进行路由      </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="SpringCloud-1"><a href="#SpringCloud-1" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p><img src="/2024/03/05/33/alibaba.png" alt="阿里巴巴"></p>
<ul>
<li>功能<br><img src="/2024/03/05/33/%E5%8A%9F%E8%83%BD.png" alt="功能"></li>
<li>组件<br><img src="/2024/03/05/33/%E7%BB%84%E4%BB%B6.png" alt="组件"></li>
</ul>
<h3 id="服务注册-Nacos-x3D-x3D-consul"><a href="#服务注册-Nacos-x3D-x3D-consul" class="headerlink" title="服务注册 Nacos == consul"></a>服务注册 Nacos == consul</h3><p><strong>注意是根据ID来区分的不是根据名字来区分命名空间的，所以ID要填自己想填的</strong></p>
<p><img src="/2024/03/05/33/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AF%B9%E6%AF%94.png" alt="对比"></p>
<ul>
<li><p>命令行</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">startup.cmd -m standalone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>服务提供者<br>pom:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#配置Nacos地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>main函数上使用@EnableDiscoveryClient<br>业务类示范<br><img src="/2024/03/05/33/controller%E7%A4%BA%E8%8C%83.png" alt="示范"></p>
</li>
<li><p>消费者<br>pom</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--nacos-discovery--&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!--loadbalancer--&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>xml</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">
server:
  port: 83

spring:
  application:
    name: nacos-order-consumer
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
#消费者将要去访问的微服务名称(nacos微服务提供者叫什么你写什么)
service-url:
  nacos-user-service: http://nacos-payment-provider<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>main上也使用@EnableDiscoveryClient</p>
</li>
</ul>
<p>restTemplate配置</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">ackage com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @auther zzyy
 * @create 2023-11-23 17:20
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Nacos作为配置中心，进行动态配置<br>导入pom<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--bootstrap--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!--nacos-config--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
为什么进行两个配置？ bootstrap和application?<br>Nacos同Consul一样，在项目初始化时，要保证先从配置中心进行配置拉取，<br>拉取配置之后，才能保证项目的正常启动，为了满足动态刷新和全局广播通知<br>springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application<br>bootstrap<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector"># nacos配置
spring:
  application:
    name: nacos-config-client
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 #Nacos服务注册中心地址
      config:
        server-addr: localhost:8848 #Nacos作为配置中心地址
        file-extension: yaml #指定yaml格式的配置

# nacos端配置文件DataId的命名规则是：
# $</span><span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token selector">-$</span><span class="token punctuation">{</span>spring.profile.active<span class="token punctuation">}</span><span class="token selector">.$</span><span class="token punctuation">{</span>spring.cloud.nacos.config.file-extension<span class="token punctuation">}</span>
# <span class="token property">本案例的DataID是</span><span class="token punctuation">:</span>nacos-config-client-dev.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
application<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">server</span><span class="token punctuation">:</span>
  <span class="token property">port</span><span class="token punctuation">:</span> 3377

<span class="token property">spring</span><span class="token punctuation">:</span>
  <span class="token property">profiles</span><span class="token punctuation">:</span>
    <span class="token property">active</span><span class="token punctuation">:</span> dev # 表示开发环境
      #<span class="token property">active</span><span class="token punctuation">:</span> prod # 表示生产环境
    #<span class="token property">active</span><span class="token punctuation">:</span> test # 表示测试环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
controller层上使用@RefreshScope //在控制器类加入@RefreshScope注解使当前类下的配置支持Nacos的动态刷新功能。</li>
</ul>
<p><em><strong>问题1：</strong></em></p>
<p>实际开发中，通常一个系统会准备</p>
<p>dev开发环境</p>
<p>test测试环境</p>
<p>prod生产环境。</p>
<p>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢？</p>
<p><em><strong>问题2:</strong></em></p>
<p>一个大型分布式微服务系统会有很多微服务子项目，</p>
<p>每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境……</p>
<p>那怎么对这些微服务配置进行分组和命名空间管理呢？</p>
<p><img src="/2024/03/05/33/model.png" alt="model"></p>
<h2 id="Sentinel-等价于-Circuit-Breaker-自己去官网看"><a href="#Sentinel-等价于-Circuit-Breaker-自己去官网看" class="headerlink" title="Sentinel 等价于 Circuit Breaker 自己去官网看"></a>Sentinel 等价于 Circuit Breaker 自己去官网看</h2><p><img src="/2024/03/05/33/%E9%9B%AA%E5%B4%A9.png"><br><img src="/2024/03/05/33/%E9%99%8D%E7%BA%A7.png"><br><img src="/2024/03/05/33/%E7%86%94%E6%96%AD.png"><br><img src="/2024/03/05/33/%E9%99%90%E6%B5%81.png"><br><img src="/2024/03/05/33/%E9%9A%94%E7%A6%BB.png"><br><img src="/2024/03/05/33/%E9%9A%94%E7%A6%BB.png"><br><img src="/2024/03/05/33/%E8%B6%85%E6%97%B6.png"></p>
<p>pom</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--SpringCloud alibaba sentinel --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>yml</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">server</span><span class="token punctuation">:</span>
  <span class="token property">port</span><span class="token punctuation">:</span> 8401

<span class="token property">spring</span><span class="token punctuation">:</span>
  <span class="token property">application</span><span class="token punctuation">:</span>
    <span class="token property">name</span><span class="token punctuation">:</span> cloudalibaba-sentinel-service
  <span class="token property">cloud</span><span class="token punctuation">:</span>
    <span class="token property">nacos</span><span class="token punctuation">:</span>
      <span class="token property">discovery</span><span class="token punctuation">:</span>
        <span class="token property">server-addr</span><span class="token punctuation">:</span> <span class="token property">localhost</span><span class="token punctuation">:</span>8848         #Nacos服务注册中心地址
    <span class="token property">sentinel</span><span class="token punctuation">:</span>
      <span class="token property">transport</span><span class="token punctuation">:</span>
        <span class="token property">dashboard</span><span class="token punctuation">:</span> <span class="token property">localhost</span><span class="token punctuation">:</span>8080 #配置Sentinel dashboard控制台服务地址
        <span class="token property">port</span><span class="token punctuation">:</span> 8719 #默认8719端口，假如被占用会自动从8719开始依次+1扫描<span class="token punctuation">,</span>直至找到未被占用的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2024/03/05/33/%E6%87%92%E5%8A%A0%E8%BD%BD.png" alt="懒加载"></p>
<ul>
<li>流控规则<br><img src="/2024/03/05/33/%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99.png"></li>
<li>熔断降级<br>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，</li>
</ul>
<p>让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。、</p>
<h3 id="如何处理分布式-事务"><a href="#如何处理分布式-事务" class="headerlink" title="如何处理分布式 事务"></a>如何处理分布式 事务</h3><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p><img src="/2024/03/05/33/senta.png" alt="senta"></p>
<p>去官网看</p>
<p>面试题：<br><img src="/2024/03/05/33/AT%E9%9D%A2%E8%AF%95%E9%A2%98.png"><br><img src="/2024/03/05/33/AT%E9%9D%A2%E8%AF%95%E9%A2%981.png"></p>
<p><img src="/2024/03/05/33/%E6%8F%90%E4%BA%A4.png"><br><img src="/2024/03/05/33/%E5%9B%9E%E6%BB%9A.png"></p>
<h2 id="分布式详细"><a href="#分布式详细" class="headerlink" title="分布式详细"></a>分布式详细</h2><h3 id="分布式ID-分布式ID-https-javaguide-cn-distributed-system-distributed-id-design-html"><a href="#分布式ID-分布式ID-https-javaguide-cn-distributed-system-distributed-id-design-html" class="headerlink" title="[分布式ID](### 分布式ID https://javaguide.cn/distributed-system/distributed-id-design.html)"></a>[分布式ID](### 分布式ID <a href="https://javaguide.cn/distributed-system/distributed-id-design.html">https://javaguide.cn/distributed-system/distributed-id-design.html</a>)</h3><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><ol>
<li>全局唯一</li>
<li>高可用</li>
<li>高性能</li>
<li>安全</li>
<li>方便易用</li>
</ol>
<h4 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h4><p>推荐使用雪花算法</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h4><h5 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h5><h6 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h6><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>一个线程中可以多次获取同一把锁，例如，方法又调用了另一个需要相同锁的方法。<br>可以使用红锁</p>
<h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a><a href="https://javaguide.cn/distributed-system/distributed-lock-implementations.html#%E5%9F%BA%E4%BA%8E-zookeeper-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">ZooKeeper</a></h4><p><a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html">https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html</a><br>Redis的性能更好，但是Zookeeper的可靠性更高。<br>推荐使用 Curator 来实现 ZooKeeper 分布式锁。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title>深入浅出Kafka</title>
    <url>/2024/09/03/19/</url>
    <content><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="常见问题-Java-API-一个独立的Kafka服务器被称作broker-broker是集群的组成部分，每个集群都有一个broker同时充当了集群控制器的角色-kafka的主题被分为多个分区，分区存储在磁盘中-kafka的消息特点：消息会保留一段时间，即使应用程序下线，消息仍然会保存在kafka里，是基于磁盘的数据存储。-API使用：-producer-record的参数，topic-key-value-key可以省略，当省略时就是一个没有key的value，key一般用于把相同key的数据写入同一个分区里-send默认是发送并忘记，send会返回一个Future对象使用-get方法得到RecordMetadata对象，可以获取消息的偏移量-异步发送-send-record-回调函数类-，回调函数需要实现Callback类，并且重写其中的方法-配置设置：-1-acks-x3D-0-生产者无需等待服务器的响应，但消息丢失时不会知晓，-x3D-1，只要集群的首领节点收到即可，-x3D-all需要所有参与复制的节点都受到消息才会受到服务器的响应，不建议-2-buffer-memory设置producer内存缓冲区大小，-3-compression-type设置消息的压缩格式，默认不会压缩-4-retries重试次数-5-batch-size-当多个消息被发送到同一个分区时，producer会把他们放在一起，当作一个批次，这个参数指定一个批次可以使用的最大内存-6-max-in-flight-requests-per-connection-生产者在接收到服务器响应之前可以发送多少个消息，设置为-1-时可以保证消息是按照顺序写入的，适合在银行等严格要求顺序的时候使用-自定义分区：-consumer-API-1-consumer类的创建方式和producer一致，但是推荐指定-group-id来指定属于哪个群组，-2-consumer-subscirbe-订阅相关的topic，同时支持正则表达式-consumer-subscribe-Arrays-asList-quot-topic1-quot-quot-topic2-quot-3-consumer-poll-xxx-参数是轮询的阻塞时间，会等待broker返回数据-4-记得-close-5-建议一个线程中只有一个消费者-配置：-大部分和producer类似-fetch-min-bytes消费者从服务器获取记录的最小字节数，当数据量大于等于这个值才会被返回给消费者-提交和偏移量：消费者往-consumer-offset特殊主题发送消息，消息包含每个分区的偏移量，当触发再均衡时，消费者会读取每个分区组后一次提交的偏移量，然后从偏移量指定的地方开始处理-提交方式：-1-自动提交-每隔一段时间自动提交一次-2-提交当前偏移量-设置auto-commit-offset为false-然后使用commitSync-提交偏移量，会提交最新的一次由poll获得的偏移量-3-异步提交：commitAsync-，也可使用回调函数来处理-4-可以提交特定偏移量，而不是最后一次poll得到的偏移量-通过实现-ConsumerRebalanceListener接口来定义在consumer失去对分区的所有权时需要处理的事件，可在这里使用-seek-方法加上自定义的函数来实现从数据库中获得偏移量-Kafka本体-优势高吞吐，高性能，持久化-将消息持久化到磁盘，通过将数据持久化硬盘，以及follower节点来防止数据丢失-缺点是异步的不适合电商场景-架构设计-Producer-Consumer-Topic-主题，由用户定义并配置在Kafka服务器，建立Producer和Consumer之间的订阅关系，身缠这发送消息到特定的Topic下，消费者从这个Topic下消费消息。逻辑概念，相当于数据库中的表-Partition-消息分区，一个Topic可以分为多个partition，partition是一个有序的队列，partition的每条消息都会被分配一个有序的id-offset-物理实际概念，每一个partition对应一个log，producer生产的数据会不断地追加到该log文件末端，且每条数据都有自己的offset。系哦啊飞着组中的每个消费者都会实时记录自己消费到哪个offset-Broker-一台Kafka就是一个broker，一个集群由多个broker组成，一个broker可以容纳多个topic-ConsumerGroup-消费者组，用于归组同类消费者。每个consumer属于一个特定的consumer-group，多个消费者可以共同消费一个Topic下的消息，每个消费者获取部分消息。-一个Partition对应一个唯一的文件夹，文件夹下使用的是Segment-File的存储方式进行存储。将大文件拆成小文件，分为索引未见和数据文件-基本流程-producer先从zookeeper的broker-x2F-x2F-state节点找到该partiton的leader-producer将消息发送给该leader-leader将消息写出本地log-follower从leader-pull-消息-写入本地log，后向leader发送ACK-leader收到所有ISR中的replication的ACK，增加HT-high-watermark-，最后commit-的offset-并向producer发送ACK-生产过程1-Producer创建时，先创建一个Sender线程并且设置守护线程2-生产的消息经过拦截器-gt-序列化器-gt-分区器，将消息存在缓冲区3-批量发送的条件：缓冲区数据大小达到batch-size或者linger-ms达到上限4-发往指定分区，最后到达broker-acks-x3D-0，消息放到缓冲区就认为发送完成-acks-x3D-1消息写到主分区即可完成，如果主分区收到消息之后宕机，副本分区来不及同步消息，消息就会丢失-acks-x3D-all-等待所有的ISR副本的缺人记录5-如果设置了重试次数并且大于0，就会进行重试6-成功，返回元数据给生产者ISR（In-Sync-Replicas）是指与领导者副本保持同步的副本集合-生产者Offset消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。-消费者Offset不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响。-LogSegment日志文件的组成部分-Leader选举-Kafka会在Zookeeper上针对每个Topic维护一个成为ISR的集合-当集合中副本都跟Leader同的副本同步之后，kafka才会认为消息已提交-只有这些跟Leader保持同步的Follower才应该被选作新的Leader"><a href="#常见问题-Java-API-一个独立的Kafka服务器被称作broker-broker是集群的组成部分，每个集群都有一个broker同时充当了集群控制器的角色-kafka的主题被分为多个分区，分区存储在磁盘中-kafka的消息特点：消息会保留一段时间，即使应用程序下线，消息仍然会保存在kafka里，是基于磁盘的数据存储。-API使用：-producer-record的参数，topic-key-value-key可以省略，当省略时就是一个没有key的value，key一般用于把相同key的数据写入同一个分区里-send默认是发送并忘记，send会返回一个Future对象使用-get方法得到RecordMetadata对象，可以获取消息的偏移量-异步发送-send-record-回调函数类-，回调函数需要实现Callback类，并且重写其中的方法-配置设置：-1-acks-x3D-0-生产者无需等待服务器的响应，但消息丢失时不会知晓，-x3D-1，只要集群的首领节点收到即可，-x3D-all需要所有参与复制的节点都受到消息才会受到服务器的响应，不建议-2-buffer-memory设置producer内存缓冲区大小，-3-compression-type设置消息的压缩格式，默认不会压缩-4-retries重试次数-5-batch-size-当多个消息被发送到同一个分区时，producer会把他们放在一起，当作一个批次，这个参数指定一个批次可以使用的最大内存-6-max-in-flight-requests-per-connection-生产者在接收到服务器响应之前可以发送多少个消息，设置为-1-时可以保证消息是按照顺序写入的，适合在银行等严格要求顺序的时候使用-自定义分区：-consumer-API-1-consumer类的创建方式和producer一致，但是推荐指定-group-id来指定属于哪个群组，-2-consumer-subscirbe-订阅相关的topic，同时支持正则表达式-consumer-subscribe-Arrays-asList-quot-topic1-quot-quot-topic2-quot-3-consumer-poll-xxx-参数是轮询的阻塞时间，会等待broker返回数据-4-记得-close-5-建议一个线程中只有一个消费者-配置：-大部分和producer类似-fetch-min-bytes消费者从服务器获取记录的最小字节数，当数据量大于等于这个值才会被返回给消费者-提交和偏移量：消费者往-consumer-offset特殊主题发送消息，消息包含每个分区的偏移量，当触发再均衡时，消费者会读取每个分区组后一次提交的偏移量，然后从偏移量指定的地方开始处理-提交方式：-1-自动提交-每隔一段时间自动提交一次-2-提交当前偏移量-设置auto-commit-offset为false-然后使用commitSync-提交偏移量，会提交最新的一次由poll获得的偏移量-3-异步提交：commitAsync-，也可使用回调函数来处理-4-可以提交特定偏移量，而不是最后一次poll得到的偏移量-通过实现-ConsumerRebalanceListener接口来定义在consumer失去对分区的所有权时需要处理的事件，可在这里使用-seek-方法加上自定义的函数来实现从数据库中获得偏移量-Kafka本体-优势高吞吐，高性能，持久化-将消息持久化到磁盘，通过将数据持久化硬盘，以及follower节点来防止数据丢失-缺点是异步的不适合电商场景-架构设计-Producer-Consumer-Topic-主题，由用户定义并配置在Kafka服务器，建立Producer和Consumer之间的订阅关系，身缠这发送消息到特定的Topic下，消费者从这个Topic下消费消息。逻辑概念，相当于数据库中的表-Partition-消息分区，一个Topic可以分为多个partition，partition是一个有序的队列，partition的每条消息都会被分配一个有序的id-offset-物理实际概念，每一个partition对应一个log，producer生产的数据会不断地追加到该log文件末端，且每条数据都有自己的offset。系哦啊飞着组中的每个消费者都会实时记录自己消费到哪个offset-Broker-一台Kafka就是一个broker，一个集群由多个broker组成，一个broker可以容纳多个topic-ConsumerGroup-消费者组，用于归组同类消费者。每个consumer属于一个特定的consumer-group，多个消费者可以共同消费一个Topic下的消息，每个消费者获取部分消息。-一个Partition对应一个唯一的文件夹，文件夹下使用的是Segment-File的存储方式进行存储。将大文件拆成小文件，分为索引未见和数据文件-基本流程-producer先从zookeeper的broker-x2F-x2F-state节点找到该partiton的leader-producer将消息发送给该leader-leader将消息写出本地log-follower从leader-pull-消息-写入本地log，后向leader发送ACK-leader收到所有ISR中的replication的ACK，增加HT-high-watermark-，最后commit-的offset-并向producer发送ACK-生产过程1-Producer创建时，先创建一个Sender线程并且设置守护线程2-生产的消息经过拦截器-gt-序列化器-gt-分区器，将消息存在缓冲区3-批量发送的条件：缓冲区数据大小达到batch-size或者linger-ms达到上限4-发往指定分区，最后到达broker-acks-x3D-0，消息放到缓冲区就认为发送完成-acks-x3D-1消息写到主分区即可完成，如果主分区收到消息之后宕机，副本分区来不及同步消息，消息就会丢失-acks-x3D-all-等待所有的ISR副本的缺人记录5-如果设置了重试次数并且大于0，就会进行重试6-成功，返回元数据给生产者ISR（In-Sync-Replicas）是指与领导者副本保持同步的副本集合-生产者Offset消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。-消费者Offset不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响。-LogSegment日志文件的组成部分-Leader选举-Kafka会在Zookeeper上针对每个Topic维护一个成为ISR的集合-当集合中副本都跟Leader同的副本同步之后，kafka才会认为消息已提交-只有这些跟Leader保持同步的Follower才应该被选作新的Leader" class="headerlink" title="常见问题## Java API- 一个独立的Kafka服务器被称作broker,broker是集群的组成部分，每个集群都有一个broker同时充当了集群控制器的角色- kafka的主题被分为多个分区，分区存储在磁盘中- kafka的消息特点：消息会保留一段时间，即使应用程序下线，消息仍然会保存在kafka里，是基于磁盘的数据存储。- API使用：    - producer        - record的参数，topic , key ,value key可以省略，当省略时就是一个没有key的value，key一般用于把相同key的数据写入同一个分区里        - send默认是发送并忘记，send会返回一个Future对象使用.get方法得到RecordMetadata对象，可以获取消息的偏移量        - 异步发送.send(record,回调函数类)，回调函数需要实现Callback类，并且重写其中的方法        - 配置设置：            1. acks = 0 生产者无需等待服务器的响应，但消息丢失时不会知晓， = 1，只要集群的首领节点收到即可，= all需要所有参与复制的节点都受到消息才会受到服务器的响应，不建议            2. buffer.memory设置producer内存缓冲区大小，            3. compression.type设置消息的压缩格式，默认不会压缩            4. retries重试次数            5. batch.size 当多个消息被发送到同一个分区时，producer会把他们放在一起，当作一个批次，这个参数指定一个批次可以使用的最大内存            6. max.in.flight.requests.per.connection 生产者在接收到服务器响应之前可以发送多少个消息，设置为 1 时可以保证消息是按照顺序写入的，适合在银行等严格要求顺序的时候使用        - 自定义分区：        -  consumer:        - API:            1. consumer类的创建方式和producer一致，但是推荐指定 group.id来指定属于哪个群组，            2. consumer.subscirbe()订阅相关的topic，同时支持正则表达式 consumer.subscribe(Arrays.asList(&quot;topic1&quot;, &quot;topic2&quot;));            3. consumer.poll(xxx) 参数是轮询的阻塞时间，会等待broker返回数据            4. 记得.close()            5. 建议一个线程中只有一个消费者        - 配置：            - 大部分和producer类似            - fetch.min.bytes消费者从服务器获取记录的最小字节数，当数据量大于等于这个值才会被返回给消费者        - 提交和偏移量：消费者往_consumer_offset特殊主题发送消息，消息包含每个分区的偏移量，当触发再均衡时，消费者会读取每个分区组后一次提交的偏移量，然后从偏移量指定的地方开始处理            - 提交方式：                1. 自动提交:每隔一段时间自动提交一次                2. 提交当前偏移量:设置auto.commit.offset为false.然后使用commitSync()提交偏移量，会提交最新的一次由poll获得的偏移量                3. 异步提交：commitAsync()，也可使用回调函数来处理                4. 可以提交特定偏移量，而不是最后一次poll得到的偏移量        - 通过实现 ConsumerRebalanceListener接口来定义在consumer失去对分区的所有权时需要处理的事件，可在这里使用.seek()方法加上自定义的函数来实现从数据库中获得偏移量## Kafka本体### 优势高吞吐，高性能，持久化(将消息持久化到磁盘，通过将数据持久化硬盘，以及follower节点来防止数据丢失)缺点是异步的不适合电商场景### 架构设计- Producer- Consumer- Topic 主题，由用户定义并配置在Kafka服务器，建立Producer和Consumer之间的订阅关系，身缠这发送消息到特定的Topic下，消费者从这个Topic下消费消息。逻辑概念，相当于数据库中的表- Partition 消息分区，一个Topic可以分为多个partition，partition是一个有序的队列，partition的每条消息都会被分配一个有序的id(offset) 物理实际概念，每一个partition对应一个log，producer生产的数据会不断地追加到该log文件末端，且每条数据都有自己的offset。系哦啊飞着组中的每个消费者都会实时记录自己消费到哪个offset- Broker 一台Kafka就是一个broker，一个集群由多个broker组成，一个broker可以容纳多个topic- ConsumerGroup 消费者组，用于归组同类消费者。每个consumer属于一个特定的consumer group，多个消费者可以共同消费一个Topic下的消息，每个消费者获取部分消息。- 一个Partition对应一个唯一的文件夹，文件夹下使用的是Segment File的存储方式进行存储。将大文件拆成小文件，分为索引未见和数据文件### 基本流程- producer先从zookeeper的broker/**/state节点找到该partiton的leader- producer将消息发送给该leader- leader将消息写出本地log- follower从leader pull 消息- 写入本地log，后向leader发送ACK- leader收到所有ISR中的replication的ACK，增加HT(high watermark ，最后commit 的offset)并向producer发送ACK#### 生产过程1. Producer创建时，先创建一个Sender线程并且设置守护线程2. 生产的消息经过拦截器->序列化器->分区器，将消息存在缓冲区3. 批量发送的条件：缓冲区数据大小达到batch.size或者linger.ms达到上限4. 发往指定分区，最后到达broker    - acks = 0，消息放到缓冲区就认为发送完成    - acks = 1消息写到主分区即可完成，如果主分区收到消息之后宕机，副本分区来不及同步消息，消息就会丢失    - acks = all 等待所有的ISR副本的缺人记录5. 如果设置了重试次数并且大于0，就会进行重试6. 成功，返回元数据给生产者ISR（In-Sync Replicas）是指与领导者副本保持同步的副本集合#### 生产者Offset消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。#### 消费者Offset不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响。#### LogSegment日志文件的组成部分#### Leader选举- Kafka会在Zookeeper上针对每个Topic维护一个成为ISR的集合- 当集合中副本都跟Leader同的副本同步之后，kafka才会认为消息已提交- 只有这些跟Leader保持同步的Follower才应该被选作新的Leader"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka-questions-01.html">常见问题</a><br>## Java API<br>- 一个独立的Kafka服务器被称作broker,broker是集群的组成部分，每个集群都有一个broker同时充当了集群控制器的角色<br>- kafka的主题被分为多个分区，分区存储在磁盘中<br>- kafka的消息特点：消息会保留一段时间，即使应用程序下线，消息仍然会保存在kafka里，是基于磁盘的数据存储。<br>- API使用：<br>    - producer<br>        - record的参数，topic , key ,value key可以省略，当省略时就是一个没有key的value，key一般用于把相同key的数据写入同一个分区里<br>        - send默认是发送并忘记，send会返回一个Future对象使用.get方法得到RecordMetadata对象，可以获取消息的偏移量<br>        - 异步发送.send(record,回调函数类)，回调函数需要实现Callback类，并且重写其中的方法<br>        - 配置设置：<br>            1. acks = 0 生产者无需等待服务器的响应，但消息丢失时不会知晓， = 1，只要集群的首领节点收到即可，= all需要所有参与复制的节点都受到消息才会受到服务器的响应，不建议<br>            2. buffer.memory设置producer内存缓冲区大小，<br>            3. compression.type设置消息的压缩格式，默认不会压缩<br>            4. retries重试次数<br>            5. batch.size 当多个消息被发送到同一个分区时，producer会把他们放在一起，当作一个批次，这个参数指定一个批次可以使用的最大内存<br>            6. max.in.flight.requests.per.connection 生产者在接收到服务器响应之前可以发送多少个消息，设置为 1 时可以保证消息是按照顺序写入的，适合在银行等严格要求顺序的时候使用<br>        - 自定义分区：<br>    <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoPartitionser</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> myKey<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取分区列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">&gt;</span></span> partitionInfos <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取分区数</span>
        <span class="token keyword">int</span> partitionNum <span class="token operator">=</span> partitionInfos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keyBytes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"key is null or not a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果key为key，则分配到最后一个分区</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> partitionNum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//其余的消息都分配到最后一个分区</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>partitionNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment">/*
     * @description:
     * @author bronya
     * @date: 2024/4/20 14:50
     * @param map
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    -  consumer:<br>        - API:<br>            1. consumer类的创建方式和producer一致，但是推荐指定 group.id来指定属于哪个群组，<br>            2. consumer.subscirbe()订阅相关的topic，同时支持正则表达式 <code>consumer.subscribe(Arrays.asList("topic1", "topic2"));</code><br>            3. consumer.poll(xxx) 参数是轮询的阻塞时间，会等待broker返回数据<br>            4. 记得.close()<br>            5. 建议一个线程中只有一个消费者<br>        - 配置：<br>            - 大部分和producer类似<br>            - fetch.min.bytes消费者从服务器获取记录的最小字节数，当数据量大于等于这个值才会被返回给消费者<br>        - 提交和偏移量：消费者往_consumer_offset特殊主题发送消息，消息包含每个分区的偏移量，当触发再均衡时，消费者会读取每个分区组后一次提交的偏移量，然后从偏移量指定的地方开始处理<br>            - 提交方式：<br>                1. 自动提交:每隔一段时间自动提交一次<br>                2. 提交当前偏移量:设置auto.commit.offset为false.然后使用commitSync()提交偏移量，会提交最新的一次由poll获得的偏移量<br>                3. 异步提交：commitAsync()，也可使用回调函数来处理<br>                4. 可以提交特定偏移量，而不是最后一次poll得到的偏移量<br>        - 通过实现 ConsumerRebalanceListener接口来定义在consumer失去对分区的所有权时需要处理的事件，可在这里使用.seek()方法加上自定义的函数来实现从数据库中获得偏移量<br>## Kafka本体<br>### 优势<br>高吞吐，高性能，持久化(将消息持久化到磁盘，通过将数据持久化硬盘，以及follower节点来防止数据丢失)<br>缺点是异步的不适合电商场景<br>### 架构设计<br>- Producer<br>- Consumer<br>- Topic 主题，由用户定义并配置在Kafka服务器，建立Producer和Consumer之间的订阅关系，身缠这发送消息到特定的Topic下，消费者从这个Topic下消费消息。逻辑概念，相当于数据库中的表<br>- Partition 消息分区，一个Topic可以分为多个partition，partition是一个有序的队列，partition的每条消息都会被分配一个有序的id(offset) 物理实际概念，每一个partition对应一个log，producer生产的数据会不断地追加到该log文件末端，且每条数据都有自己的offset。系哦啊飞着组中的每个消费者都会实时记录自己消费到哪个offset<br>- Broker 一台Kafka就是一个broker，一个集群由多个broker组成，一个broker可以容纳多个topic<br>- ConsumerGroup 消费者组，用于归组同类消费者。每个consumer属于一个特定的consumer group，多个消费者可以共同消费一个Topic下的消息，每个消费者获取部分消息。<br>- 一个Partition对应一个唯一的文件夹，文件夹下使用的是Segment File的存储方式进行存储。将大文件拆成小文件，分为索引未见和数据文件<br>### 基本流程<br>- producer先从zookeeper的broker/**/state节点找到该partiton的leader<br>- producer将消息发送给该leader<br>- leader将消息写出本地log<br>- follower从leader pull 消息<br>- 写入本地log，后向leader发送ACK<br>- leader收到所有ISR中的replication的ACK，增加HT(high watermark ，最后commit 的offset)并向producer发送ACK<br>#### 生产过程<br>1. Producer创建时，先创建一个Sender线程并且设置守护线程<br>2. 生产的消息经过拦截器-&gt;序列化器-&gt;分区器，将消息存在缓冲区<br>3. 批量发送的条件：缓冲区数据大小达到batch.size或者linger.ms达到上限<br>4. 发往指定分区，最后到达broker<br>    - acks = 0，消息放到缓冲区就认为发送完成<br>    - acks = 1消息写到主分区即可完成，如果主分区收到消息之后宕机，副本分区来不及同步消息，消息就会丢失<br>    - acks = all 等待所有的ISR副本的缺人记录<br>5. 如果设置了重试次数并且大于0，就会进行重试<br>6. 成功，返回元数据给生产者<br>ISR（In-Sync Replicas）是指与领导者副本保持同步的副本集合<br>#### 生产者Offset<br>消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。<br>#### 消费者Offset<br>不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响。<br>#### LogSegment<br>日志文件的组成部分<br>#### Leader选举<br>- Kafka会在Zookeeper上针对每个Topic维护一个成为ISR的集合<br>- 当集合中副本都跟Leader同的副本同步之后，kafka才会认为消息已提交<br>- 只有这些跟Leader保持同步的Follower才应该被选作新的Leader</h2>]]></content>
  </entry>
  <entry>
    <title>学算法</title>
    <url>/2023/09/09/34/</url>
    <content><![CDATA[<h2 id="JAVA-快写"><a href="#JAVA-快写" class="headerlink" title="JAVA 快写"></a>JAVA 快写</h2><h2 id="最短路与具体的路径记录问题"><a href="#最短路与具体的路径记录问题" class="headerlink" title="最短路与具体的路径记录问题"></a><a href="https://leetcode.cn/problems/find-edges-in-shortest-paths/description/">最短路与具体的路径记录问题</a></h2><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> 获得这个数，如果为空<span class="token punctuation">,</span>返回默认值，可以自己设定
k <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">higherKey</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> 获得下一个顺序的键<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="把toCharArray向右移动一位"><a href="#把toCharArray向右移动一位" class="headerlink" title="把toCharArray向右移动一位"></a>把toCharArray向右移动一位</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token char">' '</span><span class="token operator">+</span> re<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="a-z-之间偏移量确认"><a href="#a-z-之间偏移量确认" class="headerlink" title="a ~ z 之间偏移量确认"></a>a ~ z 之间偏移量确认</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token char">'a'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> offset <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="看到唯一解，且是难以做的图形题，可以考虑转化为方程"><a href="#看到唯一解，且是难以做的图形题，可以考虑转化为方程" class="headerlink" title="看到唯一解，且是难以做的图形题，可以考虑转化为方程"></a>看到唯一解，且是难以做的图形题，可以考虑转化为方程</h2><p><a href="https://www.lanqiao.cn/problems/17160/learning/?contest_id=179">https://www.lanqiao.cn/problems/17160/learning/?contest_id=179</a></p>
<h3 id="卡特兰数问题-：h-n-x3D-C-2n-n-−C-2n-n−1-n-x3D-0-1-2-…-组合数C不解释了；-C是组合数"><a href="#卡特兰数问题-：h-n-x3D-C-2n-n-−C-2n-n−1-n-x3D-0-1-2-…-组合数C不解释了；-C是组合数" class="headerlink" title="卡特兰数问题 ：h[n]=C[2n,n]−C [2n,n−1] (n=0,1,2,…)&nbsp;组合数C不解释了； C是组合数"></a>卡特兰数问题 ：h[n]=C[2n,n]−C [2n,n−1] (n=0,1,2,…)&nbsp;组合数C不解释了； C是组合数</h3><ol>
<li>出栈顺序问题 假设有N个数字依次入栈：1,2,3,…,n，试问有多少种出栈顺序？这里为表述简便，下文用+1表示一个元素入栈，用-1表示一个元素出栈</li>
<li>问题描述：有n对()括号，试问可以组成多少种合法正确的括号序列？</li>
</ol>
<h2 id="树是无向边"><a href="#树是无向边" class="headerlink" title="树是无向边"></a>树是无向边</h2><h2 id="Java日期"><a href="#Java日期" class="headerlink" title="Java日期"></a>Java日期</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> d1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">BASIC_ISO_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">LocalDate</span> d2 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">BASIC_ISO_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 才会写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="JAVA更快更强的读入和写-https-www-luogu-com-cn-problem-P2367"><a href="#JAVA更快更强的读入和写-https-www-luogu-com-cn-problem-P2367" class="headerlink" title="JAVA更快更强的读入和写 https://www.luogu.com.cn/problem/P2367"></a>JAVA更快更强的读入和写 <a href="https://www.luogu.com.cn/problem/P2367">https://www.luogu.com.cn/problem/P2367</a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">StreamTokenizer</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamTokenizer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

reader<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> reader<span class="token punctuation">.</span>nval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="取余数的小技巧"><a href="#取余数的小技巧" class="headerlink" title="取余数的小技巧"></a>取余数的小技巧</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">(</span>x + n<span class="token punctuation">)</span> % n 可以保证不会出现负数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>先思考再做题，前几个题大概率时模拟题，所以别急着用算法</p>
<h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">next_permutation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 对数组的前n个数进行全排列，并存储在这个数组中
<span class="token keyword">char</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>
<span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 可以直接输出一行，如果不是最后一行还会输出换行符
求 q<span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> q<span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> q<span class="token operator">^</span>n
<span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//秦九zhao算法</span>
    t <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>整数划分</strong><a href="https://ac.nowcoder.com/acm/problem/252724">https://ac.nowcoder.com/acm/problem/252724</a></p>
<p>accumulate 求和</p>
<p>快乐的模板：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;  
#define ll long long   
#define pii pair&lt;int,int&gt;  
using namespace std;  
void solve(){  
 &nbsp; &nbsp;return ;  
}  
int main(){  
 &nbsp; &nbsp;ios::sync_with_stdio(false);  
 &nbsp; &nbsp;cin.tie(nullptr);  
 &nbsp; &nbsp;int T;  
 &nbsp; &nbsp;cin &gt;&gt; T;  
 &nbsp; &nbsp;while (T--) solve();  
 &nbsp; &nbsp;return 0;  
}  
​```


## 小TIPS：

做题思路：

1. 从小数据，小范围推大范围
    
2. 划分，以及反证，如果要求全部满足一个性质，那么只要有部分不满足我们已经推出来的条件即可不满足所有性质
    

&gt; 1. 数组和字符串比较字典序是可以直接用大于号小于号比较的
&gt;     
&gt; 2. 字典序是指在ASCII码中出现的顺序所以 也就是 a b c 0 1 2 3 ABC 等z
&gt;     
&gt; 3. vector &lt;&gt; 可以直接赋值
&gt;     

## 牛顿迭代法：

求平方根

例子： f(x)=m,可转化为 g(x)=f(x)-m=0;

迭代公式：_x_n+1 = _x_n − _g_ (_x_n)/ _g_ ′ (_x_n)

例题：[力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台](https://leetcode.cn/problems/sqrtx/submissions/431189596/)
```c++
//f (x) = x2 − a = 0  
int mySqrt(int a) {  
long x = a;  
while (x * x &gt; a) {  
x = (x + a / x) / 2;  
}  
return x;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="stl和一些内置函数"><a href="#stl和一些内置函数" class="headerlink" title="stl和一些内置函数"></a>stl和一些内置函数</h3><p>accumulate(num.begin(),num.end(),0); //第三个参数是初始化要返回的东西 </p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序模板-根据数来分治"><a href="#快速排序模板-根据数来分治" class="headerlink" title="快速排序模板 根据数来分治"></a>快速排序模板 根据数来分治</h3><p>先找数字中的中位数，然后递归<br><strong>注意：</strong> while中先递归的左边，那么最后递归的时候就要以j来为界限，递归的顺序无所谓</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quick_sort(int q[], int l, int r)
{
    if (l &gt;= r) return;
    int x = q[rand()% (r-l+1)+l]; // 随机取
    int i = l - 1, j = r + 1; 
    while (i &lt; j) {
        do i++; while (
        q[i] &lt; x);
        do j--; while (q[j] &gt; x);
        if (i &lt; j) swap(q[i], q[j]);    //如果i与j没有相遇，就交换一下
    }

    quick_sort(q, l, j);    //递归处理左右两边
    quick_sort(q, j + 1, r);
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="归并排序模板-分治-根据中间两个数为分界线"><a href="#归并排序模板-分治-根据中间两个数为分界线" class="headerlink" title="归并排序模板 分治 根据中间两个数为分界线"></a>归并排序模板 分治 根据中间两个数为分界线</h3><ol>
<li><p>确定分界点， mid=(l+r)/2</p>
</li>
<li><p>递归排序 left，right</p>
</li>
<li><p>归并 合二为一</p>
</li>
</ol>
<p>模板</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
void msort(int a[], int l, int r) {  
    if (l &gt;= r) return;  
    //确定分界  
    int mid = l + r &gt;&gt; 1;  
    //递归  
    msort(a, l, mid); msort(a, mid + 1, r);  
    //归并  
    int k = 0, i = l, j = mid + 1;  
      
    while (i &lt;=mid &amp;&amp; j &lt;= r) {//左右比较，小的放在辅助数组里，直到有一个指针到达边界  
        if (a[i] &lt;= a[j]) tmp[k++] = a[i++];  
        else tmp[k++] = a[j++];  
    }  
    //这里继续把另一个没到边界的指针赋值给辅助数组  
    while (i &lt;= mid) tmp[k++] = a[i++];  
    while (j &lt;= r)tmp[k++] = a[j++];  
    //最后把辅助数组的元素还回去  
    for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j];  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二分法-二分要保证有解"><a href="#二分法-二分要保证有解" class="headerlink" title="二分法 二分要保证有解"></a>二分法 二分要保证有解</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><p>一分为二，一边满足性质，一半不满足，可以来用来寻找性质的边界</p>
<p>两种模板：一种去检查满足的一半，另一种去检查不满足性质的的一半</p>
<p>考虑边界是否会包括进去</p>
<ol>
<li><p>先写出 mid=r+l&gt;&gt;1</p>
</li>
<li><p>二分要检查的性质</p>
</li>
<li><p>画图考虑，直线图</p>
</li>
<li><p>思考mid是否会包含</p>
</li>
<li><p>考虑不存在条件时</p>
</li>
</ol>
<h2 id="l-x3D-mid-1-时-输出的是-L-r-x3D-mid-1-时-输出的是r"><a href="#l-x3D-mid-1-时-输出的是-L-r-x3D-mid-1-时-输出的是r" class="headerlink" title="l = mid + 1 时,输出的是 L , r = mid -1 时 输出的是r"></a>l = mid + 1 时,输出的是 L , r = mid -1 时 输出的是r</h2><p>注意死循环，男左女右，查找从右侧往左的时候mid 要 + 1，否则不+1</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">l + (r - l + 1 &gt;&gt; 1); 
​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">更好的二分模板
<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>
	mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>  mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="浮点数二分-不要处理边界"><a href="#浮点数二分-不要处理边界" class="headerlink" title="浮点数二分 不要处理边界"></a>浮点数二分 不要处理边界</h3><p>思路：通过mid来判断，答案落在缩小的区间内，只要近似值</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool check(double x) {/* ... */} // 检查x是否满足某种性质  
  
double bsearch_3(double l, double r)  
{  
    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求  
    while (r - l &gt; eps)  
    {  
        double mid = (l + r) / 2;  
        if (check(mid)) r = mid;  
        else l = mid;  
    }  
    //或者直接不管精度，直接循环几百次  
    return l;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="加法：-注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数"><a href="#加法：-注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数" class="headerlink" title="加法： 注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数"></a>加法： 注意要把A设为位数更大的那一个，因为最后的位数取决于位数大的那一个，使用vector容器可以更方便的进行计算和进位和确定位数</h3><ol>
<li><p>逆序存数的每一位</p>
</li>
<li><p>从低位开始计算，之后计算进位</p>
</li>
<li><p>加完之后检查最后一位是否还有进位</p>
</li>
<li><p>返回数字</p>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)  
{  
    if (A.size() &lt; B.size()) return add(B, A);  
  
    vector&lt;int&gt; C;  
    int t = 0;  
    for (int i = 0; i &lt; A.size(); i ++ )  
    {  
        t += A[i];  
        if (i &lt; B.size()) t += B[i];  
        C.push_back(t % 10);  
        t /= 10;  
    }  
  
    if (t) C.push_back(1);  
    return C;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>和加法基本一致，只要变进位为借位即可</p>
<p>// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)  
{  
    vector&lt;int&gt; C;  
    for (int i = 0, t = 0; i &lt; A.size(); i ++ )  
    {  
        t = A[i] - t;  
        if (i &lt; B.size()) t -= B[i];  
        C.push_back((t + 10) % 10);  
        if (t &lt; 0) t = 1;  
        else t = 0;  
    }  
  
    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();  
    return C;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; mul(vector&lt;int&gt;&amp;A,int b){  
 &nbsp; vector&lt;int&gt;C;  
 &nbsp; int t=0;  
 &nbsp; for(int i=0;i&lt;A.size()||t;i++){//出现进位  
 &nbsp; &nbsp; &nbsp;if(i&lt;A.size()) t+=A[i]*b;  
 &nbsp; &nbsp; &nbsp;C.push_back(t%10);  
 &nbsp; &nbsp; &nbsp;t/=10;  
 &nbsp; }  
 &nbsp; while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back();  
 &nbsp; //去除前导零  
 &nbsp; return C;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">### 除法

vector&lt;int&gt; div(vector&lt;int&gt;&amp;A,int b){  
 &nbsp; vector&lt;int&gt;C;  
 &nbsp; int t=0;  
 &nbsp; for(int i=0;i&lt;A.size();i++){  
 &nbsp; &nbsp; &nbsp;t=t*10+A[i];  
 &nbsp; &nbsp; &nbsp;C.push_back(t/b);  
 &nbsp; &nbsp; &nbsp;t %= b;  
 &nbsp; }  
 &nbsp; //这里是清除前置零，不是后置零
 &nbsp; reverse(C.begin(),C.end());  
 &nbsp; while(C.size()&gt;1&amp;&amp;C.back()==0) C.pop_back();  
 &nbsp; return C;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="前缀和和差分"><a href="#前缀和和差分" class="headerlink" title="前缀和和差分"></a>前缀和和差分</h2><p><strong>构造差分可以用一个空数组，一直执行插入操作即可</strong></p>
<p>前缀和一般初始化为0到n但是只用1到n</p>
<p>二维</p>
<p>S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</p>
<p>二维差分： 差分的前缀和就是原数组</p>
<p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c//注意是x2+1,y2+1不是x2,y2</p>
<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int x;  
int * p1 = &amp;x; // 指针可以被修改，值也可以被修改  
const int * p2 = &amp;x; // 指针可以被修改，值不可以被修改（const int）  
int * const p3 = &amp;x; // 指针不可以被修改（* const），值可以被修改  
const int * const p4 = &amp;x; // 指针不可以被修改，值也不可以被修改

for (int i = 0, j = 0; i &lt; n; i ++ )  
{  
    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;  
  
    // 具体问题的逻辑  
}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p>
<h3 id="Floyd判圈法-龟兔赛跑法-用于判断链表有无环和求出环的长度"><a href="#Floyd判圈法-龟兔赛跑法-用于判断链表有无环和求出环的长度" class="headerlink" title="Floyd判圈法 龟兔赛跑法 用于判断链表有无环和求出环的长度"></a>Floyd判圈法 龟兔赛跑法 用于判断链表有无环和求出环的长度</h3><p>两个指针fast slow 都从起始位置出发，fast 一次走2步，slow一次走1步，如果能相遇，则存在环</p>
<p>计算环的长度</p>
<p>让其中一个指针停在环的起点不动，另一个一步一步向前走并记录步数，再次相遇时步数即为环的长度。</p>
<p>寻找环的起点</p>
<p>其中一个指针在环的起点不动，另一个放到起点，两个指针同时一步一步移动，则两指针将会在循环节的起点相遇。</p>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142. 环形链表 II - 力扣（Leetcode）</a></p>
<p>/**  </p>
<ul>
<li>Definition for singly-linked list.  </li>
<li>struct ListNode {  </li>
<li><pre><code>int val;  
</code></pre>
</li>
<li><pre><code>ListNode *next;  
</code></pre>
</li>
<li><pre><code>ListNode(int x) : val(x), next(NULL) {}  
</code></pre>
</li>
<li>};<br> */<br>class Solution {<br>public:<br> ListNode *detectCycle(ListNode *head) {<br>ListNode *fast=head,*slow=head;<br>   do{<br>   if(!fast||!fast-&gt;next) return NULL;//如果能到达末尾，则不存在环<br>   fast=fast-&gt;next-&gt;next;<br>   slow=slow-&gt;next;<br>   }while(fast!=slow);<br>   fast=head;<br>   while(fast!=slow){<br>   fast=fast-&gt;next;<br>   slow=slow-&gt;next;<br>   }<br>   return slow;<br> }<br>};</li>
</ul>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>思路：</p>
<p>n的第k位是什么？ n&gt;&gt;k&amp;1 右移k位与1与得到是0就是0，反之就是1</p>
<ol>
<li><p>先把要判断的位置移到最左边</p>
</li>
<li><p>判断</p>
</li>
</ol>
<h3 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h3><p>解释：cpp的负数使用的补码表示的所以，-x就等于 ~x+1 反码+1</p>
<p>用法：<a href="https://zhuanlan.zhihu.com/p/93795692">树状数组</a>和求1的个数</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token comment">// 1:无需package</span>
<span class="token comment">// 2: 类名必须Main, 不可修改</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> i <span class="token punctuation">;</span> pos <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> pos <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    		tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">long</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> x<span class="token punctuation">;</span> pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    		sum <span class="token operator">+=</span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    	<span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">int</span> x <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">int</span> k <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">int</span> a <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">int</span> b <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">ask</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        		<span class="token function">update</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="树状数组：对差分和前缀和的利用："><a href="#树状数组：对差分和前缀和的利用：" class="headerlink" title="树状数组：对差分和前缀和的利用："></a>树状数组：对差分和前缀和的利用：</h1><h3 id="使用情况："><a href="#使用情况：" class="headerlink" title="使用情况："></a>使用情况：</h3><ol>
<li><p>数组不变求区间和</p>
</li>
<li><p>多次修改某个区间，求区间和</p>
</li>
<li><p>将某个区间变为同一个数求区间和</p>
</li>
<li><p>多次修改区间，寻找定点值</p>
</li>
</ol>
<h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><p>说明：lowbit()奇妙用法…..</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define low
```bit(x) (-x)&amp;x  
///或者 int lowbit(int x) {return -x&amp;x;}  
int tree[length];//树状数组，长度和原数组相等  
//区间修改  
void update(int x,int val)  
{  
    while(x){  
        tree[x]+=val;  
        x+=lowbit(x);  
    }  
}  
//区间求和  
int sum(int l,int r){  
    int ans=0;  
    while(r){  
        ans+=tree[r];  
        r-=lowbit(r);  
    }  
    l--;//  
    while(l){  
        ans-=tree[l];  
        l-=lowbit(l);  
    }  
    return ans;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><ol>
<li><p>正常的顶点修改，区间求和直接用</p>
</li>
<li><p><strong>区间修改，求单独一个数</strong> <a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<ul>
<li><p>树状数组是保存的每一个下标为位置的前缀和</p>
</li>
<li><p>想要求指定位置的数值需要用到差分,差分的前缀和就是每一个位置的数据大小</p>
</li>
<li><p>修改时只需要修改 update(l,val),update(r+1,-val)</p>
</li>
<li><p>初始化时，要插入的是差分</p>
  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;  
#include &lt;algorithm&gt;  
#define ll long long  
#define lowbit(x) (x&amp;(-x))  
using namespace std;  
const int mx = 10e5 + 5;  
int t[mx], m, n;  
int add(int x, int k) {  
	while (x &lt;= n) {  
		t[x] += k;  
		x += lowbit(x);  
	}  
}  
int query(int x){  
	ll ans=0;  
	while(x){  
		ans+=t[x];  
		x-=lowbit(x);  
	}  
	return ans;  
}  
//用差分来的前缀和来表示每一位置上的数字，  
//第一个数字之后，每次把差分加入，再求前缀和就能得到每一个位置上的数字是多少了  
//修改时只需要修改x和y+1两个位置的差分，但是我们用的tree是前缀和，所以依然要用把和lowbit有关的都修改 了   
int main() {  
	cin &gt;&gt; n &gt;&gt; m;  
	int cf=0;   
	for (int i = 1; i &lt;= n; i++) {  
		int num;  
		scanf("%d", &amp;num);  
		add(i,num-cf);  
		cf=num;  
	}  
	  
	for (int i = 1; i &lt;= m; i++) {  
		int ch, x, y,k;  
		scanf("%d", &amp;ch);  
		if (ch == 1){  
			scanf("%d %d %d", &amp;x, &amp;y, &amp;k);  
			add(x,k);  
			add(y+1,-k);  
		}  
		else {  
			int s;  
			scanf("%d", &amp;s);  
			printf("%d\n", query(s));  
		}  
	}  
	return 0;  
}  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>用指定数据替换某个数据，然后求和 <a href="https://leetcode.cn/problems/range-sum-query-mutable/submissions/429237767/">307. 区域和检索 - 数组可修改 - 力扣（Leetcode）</a></p>
<ul>
<li><p>更换数据也是用到了差分，新的数据-原数据==要更新的val</p>
</li>
<li><p>然后更新之后，原数组指定位置也要更新，方便下次修改同一位置</p>
</li>
<li><p>其他正常食用即可</p>
  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class NumArray {  
    int []t;  
    int n;  
    int []nums;  
    int lowbit(int x){return x&amp;(-x);}  
    public NumArray(int[] nums) {  
        this.nums=nums;  
        n=nums.length;  
        t=new int[n+1];  
        int i=1;  
        for (int num:nums  
             ) {  
            add(i++,num);  
        }  
    }  
    void add(int index,int val){  
        while(index&lt;=n){  
            t[index]+=val;  
            index+=lowbit(index);  
        }  
    }  
    public void update(int index, int val) {  
        add(index+1,val-nums[index]);  
        nums[index]=val;  
    }  
      
    public int sumRange(int left, int right) {  
        int ans=0;  
        right++;  
        while(right&gt;0){  
            ans+=t[right];  
            right-=lowbit(right);  
        }  
  
        while(left&gt;0){  
            ans-=t[left];  
            left-=lowbit(left);  
        }  
        return ans;  
    }  
}  
  
/**  
 * Your NumArray object will be instantiated and called as such:  
 * NumArray obj = new NumArray(nums);  
 * obj.update(index,val);  
 * int param_2 = obj.sumRange(left,right);  
 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<p>求1的个数</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;  
#include &lt;vector&gt;  
#include &lt;iostream&gt;  
#define lowbit(x) (-x)&amp;x  
using namespace std;  
int main(){  
 &nbsp; &nbsp;int n,ans=0;  
 &nbsp; &nbsp;cin&gt;&gt;n;  
 &nbsp; &nbsp;while(n){  
 &nbsp; &nbsp; &nbsp; &nbsp;ans++;  
 &nbsp; &nbsp; &nbsp; &nbsp;n-=lowbit(n);  
 &nbsp;  }  
 &nbsp; &nbsp;cout&lt;&lt;ans&lt;&lt;endl;  
 &nbsp; &nbsp;return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unique 返回的是下下标
vector&lt;int&gt; alls; // 存储所有待离散化的值  
sort(alls.begin(), alls.end()); // 将所有值排序  
alls.erase(unique(alls.begin(), alls.end()), alls.end()); &nbsp; // 去掉重复元素  
//配合erase 即可把放在后面的重复元素删除  
/*  
该函数的作用是“去除”容器或者数组中相邻元素的重复出现的元素  
(1) 这里的去除并非真正意义的erase，而是将重复的元素放到容器的末尾，返回值是去重之后的尾地址。   
(2) unique针对的是相邻元素，所以对于顺序顺序错乱的数组成员，或者容器成员，需要先进行排序，可以调用std::sort()函数  
// 二分求出x对应的离散化的值*/  
int find(int x) // 找到第一个大于等于x的位置  
{  
 &nbsp; &nbsp;int l = 0, r = alls.size() - 1;  
 &nbsp; &nbsp;while (l &lt; r)  
 &nbsp;  {  
 &nbsp; &nbsp; &nbsp; &nbsp;int mid = l + r &gt;&gt; 1;  
 &nbsp; &nbsp; &nbsp; &nbsp;if (alls[mid] &gt;= x) r = mid;  
 &nbsp; &nbsp; &nbsp; &nbsp;else l = mid + 1;  
 &nbsp;  }  
 &nbsp; &nbsp;return r + 1; // 映射到1, 2, ...n  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="区间和并"><a href="#区间和并" class="headerlink" title="区间和并"></a>区间和并</h2><p>每次维护一个右端点</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 将所有存在交集的区间合并  
void merge(vector&lt;PII&gt; &amp;segs)  
{  
    vector&lt;PII&gt; res;  
  
    sort(segs.begin(), segs.end());//根据first进行排序，默认的就是这样的不需要进行自定义  
  
    int st = -2e9, ed = -2e9;  
    for (auto seg : segs)  
        if (ed &lt; seg.first)  
        {  
            //当起点的值大于右端点的时候，一段区间结束，可以继续下一段区间了  
            if (st != -2e9) res.push_back({st, ed});  
            st = seg.first, ed = seg.second;  
        }  g
        else ed = max(ed, seg.second);//如果左没大于右端点，那么右端点每次更新完为最大值  
  
    if (st != -2e9) res.push_back({st, ed});  
    segs = res;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数组模拟链表"><a href="#数组模拟链表" class="headerlink" title="数组模拟链表"></a>数组模拟链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
int head,e[N],ne[N],idx;  
void init(){  
    head=-1;  
    idx=0;  
}  
//头插  
//head 也是指针,e[idx] 新节点  
void add_head(int x){  
    e[idx]=x;//插入数据  
    ne[idx]=head;//idx 当前的位置的指针指向head指向的位置 -1  
    head=idx;//head 指针指向idx   
    idx++;  
}  
//插入任意位置  
void insert_linkedlist(int k,int x){  
    e[idx]=x;//建立新节点  
    ne[idx]=ne[k];//新节点指向k的下一个节点  
    ne[k]=ne[idx]; //k指向idx这个结点  
    idx++;  
}  
void delete_linkedlist(int k){  
    ne[k]=ne[ne[k]];  
}  
int main(){  
    int k,x,m;  
    char op;  
    cin&gt;&gt;m;  
    init();  
    while(m--){  
        cin&gt;&gt;op;  
        if(op=='h'){  
            cin&gt;&gt;x;  
            add_head(x);  
        }  
        else if(op=='d'){  
            cin&gt;&gt;k;  
            delete_linkedlist(k-1);  
        }  
        else {  
            cin&gt;&gt;k&gt;&gt;x;  
            insert_linkedlist(k-1,x);  
        }  
    }  
    for(int i=head;i!=-1;i=ne[i]){cout&lt;&lt;e[i]&lt;&lt;' ';}  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点  
int e[N], l[N], r[N], idx;  
  
// 初始化  
void init()  
{  
    //0是左端点，1是右端点  
    r[0] = 1, l[1] = 0;  
    idx = 2;  
}  
  
// 在节点a的右边插入一个数x  
void insert(int a, int x)  
{  
    e[idx] = x;  
    l[idx] = a, r[idx] = r[a];  
    l[r[a]] = idx, r[a] = idx ++ ;  
}  
  
// 删除节点a  
void remove(int a)  
{  
    l[r[a]] = l[a];  
    r[l[a]] = r[a];  
}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// tt表示栈顶  
int stk[N], tt = 0;  
  
// 向栈顶插入一个数  
stk[ ++ tt] = x;  
  
// 从栈顶弹出一个数  
tt -- ;  
  
// 栈顶的值  
stk[tt];  
  
// 判断栈是否为空，如果 tt &gt; 0，则表示不为空  
if (tt &gt; 0)  
{  
  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>注意这个题目要的是结果的下标不是具体的数据</p>
<p>用栈暴力模拟一遍，然后再考虑哪些元素没有用处，就可以排除</p>
<p><a href="https://www.luogu.com.cn/problem/P5788">P5788 【模板】单调栈 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;  
#include &lt;cstdio&gt;  
#define ll long long   
using namespace std;  
const ll N=3*1000000+1;  
ll stk[N],a[N],ans[N];  
int tt=0;  
int main(){  
    int n;  
    cin&gt;&gt;n;  
    for(int i=1;i&lt;=n;i++){  
        scanf("%lld",&amp;a[i]);  
    }  
    for(int i=n;i&gt;0;i--){  
        while(tt!=0&amp;&amp;a[i]&gt;=a[stk[tt]]) tt--;  
        ans[i]= tt==0?0:stk[tt];  
        stk[++tt]=i;  
    }  
    for(int i=1;i&lt;=n;i++)printf("%lld ",ans[i]);  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// hh 表示队头，tt表示队尾  
int q[N], hh = 0, tt = -1;  
  
// 向队尾插入一个数  
q[ ++ tt] = x;  
  
// 从队头弹出一个数  
hh ++ ;  
  
// 队头的值  
q[hh];  
  
// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空  
if (hh &lt;= tt)  
{  
  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="单调队列-（好东西）"><a href="#单调队列-（好东西）" class="headerlink" title="单调队列 （好东西）"></a>单调队列 （好东西）</h1><p><strong>几个点：</strong></p>
<ul>
<li><p>初始化时，hh=0,tt=-1 使得队列为空</p>
</li>
<li><p>比较的是队尾元素与当前元素</p>
</li>
<li><p>注意队列长度为0时不要输出</p>
</li>
</ul>
<p>常见模型：找出滑动窗口中的最大值/最小值  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int hh = 0, tt = -1;  
for (int i = 0; i &lt; n; i ++ )  
{  
    while (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  // 判断队头是否滑出窗口  
    while (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;  
    q[ ++ tt] = i;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例题</p>
<p><a href="https://www.luogu.com.cn/problem/P1886">P1886 滑动窗口 /【模板】单调队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;  
#include &lt;cstdio&gt;  
#define ll long long   
using namespace std;  
const int N=1000000+2;  
int n,k,a[N],q[N],ans,hh,tt;  
  
int main(){  
    cin&gt;&gt;n&gt;&gt;k;  
    for(int i=0;i&lt;n;i++){  
        scanf("%d",&amp;a[i]);  
    }  
    //队列存的是下标  
    //最小值  
    hh=0;tt=-1;//目的是让队列初始化为空  
    for(int i=0;i&lt;n;i++){  
        //判断队列是否为空  
        if(hh&lt;=tt&amp;&amp;i-k+1&gt;q[hh]) hh++;  
        //目的是把最小的元素放在队头  
        while(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;=a[i]) tt--;//从队尾删除，因为经过我们的处理，已经是严格单调递增的了，所以如果第一个都大于这个元素的话，那么后面几个都大于，所以要删除  
        q[++tt]=i;  
        if(i&gt;=k-1)  
        printf("%d ",a[q[hh]]);  
    }  
    cout&lt;&lt;endl;  
    //最大值  
      hh=0;tt=-1;  
    for(int i=0;i&lt;n;i++){  
        //判断队列是否为空  
        if(hh&lt;=tt&amp;&amp;i-k+1&gt;q[hh]) hh++;  
        //目的是把最大的元素放在队头  
        while(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;=a[i]) tt--;  
        q[++tt]=i;  
        if(i&gt;=k-1)  
        printf("%d ",a[q[hh]]);  
    }  
      
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>对称的 ,以j这个点为中点的前后缀是相同的，所以可以直接变成next[ j ]<br><img src="file://D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230511171657614.png?lastModify=1694256669" alt="image-20230511171657614"></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s从1开始，p从0开始

// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度  
求模式串的Next数组：ne[1]=0  ,一开始就错了肯定从零开始
for (int i = 2, j = 0; i &lt;= m; i ++ )  
{  
    while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];  
    if (p[i] == p[j + 1]) j ++ ;  
    ne[i] = j;  
}  
  
// 匹配  
for (int i = 1, j = 0; i &lt;= n; i ++ )  
{  
    while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];  
    if (s[i] == p[j + 1]) j ++ ;  
    if (j == m)  
    {  
        j = ne[j];  
        // 匹配成功后的逻辑  
    }  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>例题</strong></p>
<p><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
#include &lt;iostream&gt;  
#include &lt;cstring&gt;  
#define N 1000010  
using namespace std;  
char s[N],p[N];  
int ls,lp,ne[N];  
int main(){  
    cin&gt;&gt;s+1&gt;&gt;p+1;  
    ls=strlen(s+1);  
    lp=strlen(p+1);  
    for(int i=2,j=0;i&lt;=lp;i++){  
        while(j&amp;&amp;p[i]!=p[j+1]) j=ne[j];  
        if(p[j+1]==p[i]) j++;  
        ne[i]=j;  
    }  
     for(int i=1,j=0;i&lt;=ls;i++){  
        while(j&amp;&amp;s[i]!=p[j+1]) j=ne[j];  
        if(s[i]==p[j+1]) j++;  
        if(j==lp){  
            cout&lt;&lt;i-lp+1&lt;&lt;endl;  
            j=ne[j];  
        }  
    }  
    for(int i=1;i&lt;=lp;i++){  
        cout&lt;&lt;ne[i]&lt;&lt;" ";  
    }  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Trie树-高效存储和查找字符串"><a href="#Trie树-高效存储和查找字符串" class="headerlink" title="Trie树 高效存储和查找字符串"></a>Trie树 高效存储和查找字符串</h2><p>集合的数据结构</p>
<p>将字符串分解为一个一个单独的字符然后存储，然后查询这个字符串是否出现过，</p>
<p>出现过几次</p>
<h4 id="更全面-的映射"><a href="#更全面-的映射" class="headerlink" title="更全面 的映射"></a>更全面 的映射</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int getnum(char x){  
    if(x&gt;='A'&amp;&amp;x&lt;='Z')  
        return x-'A';  
    else if(x&gt;='a'&amp;&amp;x&lt;='z')  
        return x -'a'+26;  
    else  
        return x-'0'+52;  
} 

#include&lt;iostream&gt;  
#include &lt;algorithm&gt;  
#include &lt;cstdio&gt;  
using namespace std;  
const int N=100010;  
int son[N][26],cnt[N],idx;//子子节点的个数，只包含26个 小写字母 cnt是以这个字母为结尾的单词出现了福哦少个  
//idx 当前用到哪了  
//插入操作  
char str[N];  
void insert(char str[]){  
 &nbsp; &nbsp;int p=0;//当前的结点  
 &nbsp; &nbsp;for(int i=0;str[i];i++){  
 &nbsp; &nbsp; &nbsp; &nbsp;int u=str[i]-'a';//将26个小写字母映射为数字  
 &nbsp; &nbsp; &nbsp; &nbsp;if(!son[p][u]) son[p][u]=++idx;  
 &nbsp; &nbsp; &nbsp; &nbsp;p=son[p][u];  
 &nbsp;  }  
 &nbsp; &nbsp;cnt[p]++;  
}  
int query(char str[]){  
 &nbsp; &nbsp;int p=0;  
 &nbsp; &nbsp;for(int i=0;str[i];i++){  
 &nbsp; &nbsp; &nbsp; &nbsp;int u=str[i]-'a';  
 &nbsp; &nbsp; &nbsp; &nbsp;if(!son[p][u]) return 0;  
 &nbsp; &nbsp; &nbsp; &nbsp;p=son[p][u];  
 &nbsp;  }  
 &nbsp; &nbsp;return cnt[p];  
}  
int main(){  
 &nbsp; &nbsp;int n;  
 &nbsp; &nbsp;cin&gt;&gt;n;  
 &nbsp; &nbsp;while(n--){  
 &nbsp; &nbsp; &nbsp; char op[2];  
 &nbsp; &nbsp; &nbsp; cin&gt;&gt;op&gt;&gt;str;  
 &nbsp; &nbsp; &nbsp; if(op[0]=='i') insert(str);  
 &nbsp; &nbsp; &nbsp; else cout&lt;&lt;query(str)&lt;&lt;endl;  
 &nbsp;  }  
 &nbsp; &nbsp;return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://www.luogu.com.cn/problem/P8306">P8306 【模板】字典树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;  
#include &lt;algorithm&gt;  
#include &lt;cstdio&gt;  
#include &lt;cstring&gt;  
using namespace std;  
const int N=3000005;  
int son[N][65],cnt[N],idx;//子子节点的个数，只包含26个 小写字母 cnt是以这个字母位借位的单词出现了福哦少个  
//idx 当前用到哪了  
//插入操作  
 int n,m,t;  
char str[N];  
int hashs(char x){  
    if(x&gt;='A'&amp;&amp;x&lt;='Z')  
        return x-'A';  
    else if(x&gt;='a'&amp;&amp;x&lt;='z')  
        return x-'a'+26;  
    else  
        return x-'0'+52;  
}  
void insert(char str[]){  
    int p=0;//当前的结点  
    int l=strlen(str);  
    for(int i=0;i&lt;l;i++){  
        int u=hashs(str[i]);//将26个小写字母映射为数字  
        if(!son[p][u]) son[p][u]=++idx;  
        p=son[p][u];  
        cnt[p]++;  
    }  
      
}  
int query(char str[]){  
    int p=0;//当前的结点  
    int l=strlen(str);  
    for(int i=0;i&lt;l;i++){  
        int u =hashs(str[i]);  
        if(!son[p][u]) return 0;  
        p=son[p][u];  
    }  
    return cnt[p];  
}  
int main(){  
     
    cin&gt;&gt;t;  
    while(t--){  
          for(int i=0;i&lt;=idx;i++){  
            for(int j=0;j&lt;=122;j++){  
                son[i][j]=0;  
            }  
          }  
          for(int i=0;i&lt;=idx;i++)  
            cnt[i]=0;  
        idx=0;  
       scanf("%d%d",&amp;n,&amp;m);  
        while(n--){  
            scanf("%s",str);  
            insert(str);  
        }  
        while(m--){  
             scanf("%s",str);  
            printf("%d\n",query(str));  
        }  
    }  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>用法：</p>
<h3 id="某些点或者数据是否处于一个连通块中"><a href="#某些点或者数据是否处于一个连通块中" class="headerlink" title="某些点或者数据是否处于一个连通块中"></a>某些点或者数据是否处于一个连通块中</h3><ol>
<li><p>将两个集合合并</p>
</li>
<li><p>询问两个元素是否在一个集合中</p>
</li>
</ol>
<p>基本原理：每个集合用一个树来表示，树根的编号就是整个集合的编号，</p>
<p>每一个结点表示他的父节点p[x] 表示x的父节点</p>
<ul>
<li><p>判断树根: if（p[x]==x）</p>
</li>
<li><p>如何集合的编号： while(p[x]!=x) x=p[x];</p>
</li>
<li><p>如何合并两个集合直接让其中一个的根节点的父节点为另一个集合的根节点就行</p>
</li>
<li><p>如何优化，查询一次后，将将所经过的路径的父节点全都修改为根节点</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;  
#include &lt;algorithm&gt;  
#include &lt;cstdio&gt;  
#include &lt;cstring&gt;  
using namespace std;  
const int N=10010;  
int p[N];  
//初始每个点都是一个单独的集合  
void init(int n){  
    for(int i=1;i&lt;=n;i++){  
        p[i]=i;  
    }  
}  
int find(int x){  
    if(p[x]!=x) p[x]=find(p[x]);  
    return p[x];  
}  
  
int main(){  
    int n,m;  
    cin&gt;&gt;n&gt;&gt;m;  
    init(n);  
    char op[2];  
    while(m--){  
        int a,b;  
        cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;  
        //合并两个集合,路径压缩  
        if(op[0]=='i') p[find(a)]=find(b);//让a的父节点等于b的父节点，即可合并  
        else {  
            //查询  
            if(find(a)==find(b)) cout&lt;&lt;"yes"&lt;&lt;endl;  
            else cout&lt;&lt;"no"&lt;&lt;endl;  
        }  
    }  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://www.luogu.com.cn/problem/P3367">P3367 【模板】并查集 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p>维护点的数量：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;  
#include &lt;algorithm&gt;  
#include &lt;cstdio&gt;  
#include &lt;cstring&gt;  
using namespace std;  
const int N=10010;  
int p[N],sizes[N];//每个集合中点的数量  
//初始每个点都是一个单独的集合  
void init(int n){  
    for(int i=1;i&lt;=n;i++){  
        p[i]=i;  
        sizes[i]=1;  
    }  
}  
int find(int x){  
    if(p[x]!=x) p[x]=find(p[x]);  
    return p[x];  
}  
  
int main(){  
    int n,m;  
    cin&gt;&gt;n&gt;&gt;m;  
    init(n);  
    int op;  
    while(m--){  
        int a,b;  
        cin&gt;&gt;op;  
        //合并两个集合,路径压缩  
        if(op==1){  
            cin&gt;&gt;a&gt;&gt;b;  
            if(find(a)==find(b)) continue;  
            sizes[find(b)]+=sizes[find(a)];  
            p[find(a)]=find(b);//让a的父节点等于b的父节点，即可合并  
      
        }  
        else if(op==2){  
            //查询  
            cin&gt;&gt;a&gt;&gt;b;  
            if(find(a)==find(b)) cout&lt;&lt;"Y"&lt;&lt;endl;  
            else cout&lt;&lt;"N"&lt;&lt;endl;  
        }  
        else {  
            //询问某个集合中点的数量  
            cin&gt;&gt;n;  
            cout&lt;&lt;sizes[find(a)]&lt;&lt;endl;  
        }  
    }  
    return 0;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="堆-只能保证堆顶是最值，保证不了左右两边的大小关系"><a href="#堆-只能保证堆顶是最值，保证不了左右两边的大小关系" class="headerlink" title="堆 只能保证堆顶是最值，保证不了左右两边的大小关系"></a>堆 只能保证堆顶是最值，保证不了左右两边的大小关系</h2><p>操作：down 和up 把元素向下或向上走，使用的是一维数组，x的左儿子2x,右儿子2x+1</p>
<p>size 表示数组的最后一个位置</p>
<ol>
<li><p>插入一个元素： heap[++size]=x up(size)</p>
</li>
<li><p>求最小值 heap[1]</p>
</li>
<li><p>删除最小值 数组尾部好删除，所以用最后一个元素覆盖数组的头，然后执行down，</p>
<p> 再删除尾部，head[k]=heap[size];size–; down(k)||up(k)</p>
</li>
<li><p>修改 heap[k]=k; down(k)||up(k);</p>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1  
// ph[k]存储第k个插入的点在堆中的位置  
// hp[k]存储堆中下标是k的点是第几个插入的  
int h[N], ph[N], hp[N], size;  
  
// 交换两个点，及其映射关系  
void heap_swap(int a, int b)  
{  
    swap(ph[hp[a]],ph[hp[b]]);  
    swap(hp[a], hp[b]);  
    swap(h[a], h[b]);  
}  
  
void down(int u)  
{  
    int t = u;  
    //查找到三个结点中的最小值  
    if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;  
    if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;  
    if (u != t)  
    {  
        heap_swap(u, t);  
        down(t);  
    }  
}  
  
void up(int u)  
{  
    while (u / 2 &amp;&amp; h[u] &lt; h[u / 2])//父节点存在且当前结点小于父节点   
    {  
        heap_swap(u, u / 2);  
        u &gt;&gt;= 1;//下一个父节点  
    }  
}  
  
// O(n)建堆  
for (int i = n / 2; i; i -- ) down(i);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://www.luogu.com.cn/problem/P3378">P3378 【模板】堆 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;  
using namespace std;  
const int N=1000001;  
int h[N],s;  
void down(int u){  
    int t=u;  
    if(u*2&lt;=s&amp;&amp;h[u*2]&lt;h[t]) t=u*2;  
    if(u*2+1&lt;=s&amp;&amp;h[u*2+1]&lt;h[t]) t=u*2+1;  
    if(u!=t){  
        swap(h[u],h[t]);  
        down(t);  
    }  
}  
void up(int u){  
    while(u/2&amp;&amp;h[u]&lt;h[u/2]){  
        swap(h[u],h[u/2]);  
        u&gt;&gt;=1;  
    }  
}  
int main(){  
    int n,op;  
    cin&gt;&gt;n;  
    for(int i=n/2;i;i--){  
        down(i);  
    }  
    while(n--){  
        scanf("%d",&amp;op);  
        if(op==1) {  
            int x;  
            scanf("%d",&amp;x);  
            h[++s]=x;  
            up(s);  
        }  
        else if(op==2){  
            printf("%d\n",h[1]);  
        }  
        else {  
            //最后一个换到第一个  
            swap(h[1],h[s]);  
            s--;//删除最后一个  
            down(1);  
        }  
    }  
  
}
			<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>删除的话打个标记<br>(1) 拉链法 </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int h[N], e[N], ne[N], idx;  
  
// 向哈希表中插入一个数  
void insert(int x)  
{  
    int k = (x % N + N) % N;  
    e[idx] = x;  
    ne[idx] = h[k];  
    h[k] = idx ++ ;  
}  
  
// 在哈希表中查询某个数是否存在  
bool find(int x)  
{  
    int k = (x % N + N) % N;  
    for (int i = h[k]; i != -1; i = ne[i])  
        if (e[i] == x)  
            return true;  
  
    return false;  
}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开放寻址法，遇到冲突的话直接往后找没用的节点</p>
<p>数组要开比原来数据范围大2~3倍</p>
<p>//只要开一个h数组就可以了，不需要e和ne了，找一个不在数据范围内的数据来表示当前位置为空<br>(2) 开放寻址法  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">   int h[N];  
const int null =xxx;  
   // 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置  
   int find(int x)  
   {  
       int t = (x % N + N) % N;  
       while (h[t] != null &amp;&amp; h[t] != x)  
       {  
           t ++ ;  
           if (t == N) t = 0;  
       }  
       return t;  
   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>快速判断两个字符串是否相等</p>
<p>核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef unsigned long long ULL;  
ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64  
  
// 初始化  
p[0] = 1;  
for (int i = 1; i &lt;= n; i ++ )  
{  
    h[i] = h[i - 1] * P + str[i];  
    p[i] = p[i - 1] * P;//P存储的是每一位的基数值  
}  
  
// 计算子串 str[l ~ r] 的哈希值  
ULL get(int l, int r)  
{  
    return h[r] - h[l - 1] * p[r - l + 1];  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="STL常用"><a href="#STL常用" class="headerlink" title="STL常用"></a>STL常用</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector, 变长数组，倍增的思想 &nbsp;优化思路：减少申请空间的次数  
 &nbsp; &nbsp;size() &nbsp;返回元素个数  
 &nbsp; &nbsp;empty() &nbsp;返回是否为空  
 &nbsp; &nbsp;clear() &nbsp;清空  
 &nbsp; &nbsp;front()/back()  
 &nbsp; &nbsp;push_back()/pop_back()  
 &nbsp; &nbsp;begin()/end()  
 &nbsp;  []  
 &nbsp; &nbsp;支持比较运算，按字典序  
 &nbsp; &nbsp;vector&lt;int&gt; a(1,2),b(3,4);  
printf(a&lt;b) == 0  
​  
pair&lt;int, int&gt;  
 &nbsp; &nbsp;first, 第一个元素  
 &nbsp; &nbsp;second, 第二个元素  
 &nbsp; &nbsp;支持比较运算，以first为第一关键字，以second为第二关键字（字典序）  
​  
string，字符串  
 &nbsp; &nbsp;size()/length() &nbsp;返回字符串长度  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;clear()  
 &nbsp; &nbsp;substr(起始下标，(子串长度)) &nbsp;返回子串  
 &nbsp; &nbsp;c_str() &nbsp;返回字符串所在字符数组的起始地址  
​  
queue, 队列  
 &nbsp; &nbsp;size()  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;push() &nbsp;向队尾插入一个元素  
 &nbsp; &nbsp;front() &nbsp;返回队头元素  
 &nbsp; &nbsp;back() &nbsp;返回队尾元素  
 &nbsp; &nbsp;pop() &nbsp;弹出队头元素  
​  
priority_queue, 优先队列，默认是大根堆  
 &nbsp; &nbsp;size()  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;push() &nbsp;插入一个元素  
 &nbsp; &nbsp;top() &nbsp;返回堆顶元素  
 &nbsp; &nbsp;pop() &nbsp;弹出堆顶元素  
 &nbsp; &nbsp;定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;  
​  
stack, 栈  
 &nbsp; &nbsp;size()  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;push() &nbsp;向栈顶插入一个元素  
 &nbsp; &nbsp;top() &nbsp;返回栈顶元素  
 &nbsp; &nbsp;pop() &nbsp;弹出栈顶元素  
​  
deque, 双端队列  
 &nbsp; &nbsp;size()  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;clear()  
 &nbsp; &nbsp;front()/back()  
 &nbsp; &nbsp;push_back()/pop_back()  
 &nbsp; &nbsp;push_front()/pop_front()  
 &nbsp; &nbsp;begin()/end()  
 &nbsp;  []  
​  
set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列  
 &nbsp; &nbsp;size()  
 &nbsp; &nbsp;empty()  
 &nbsp; &nbsp;clear()  
 &nbsp; &nbsp;begin()/end()  
 &nbsp; &nbsp;++, -- 返回前驱和后继，时间复杂度 O(logn)  
​  
 &nbsp; &nbsp;set/multiset  
 &nbsp; &nbsp; &nbsp; &nbsp;insert() &nbsp;插入一个数  
 &nbsp; &nbsp; &nbsp; &nbsp;find() &nbsp;查找一个数  
 &nbsp; &nbsp; &nbsp; &nbsp;count() &nbsp;返回某一个数的个数  
 &nbsp; &nbsp; &nbsp; &nbsp;erase()  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (1) 输入是一个数x，删除所有x &nbsp; O(k + logn)  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (2) 输入一个迭代器，删除这个迭代器  
 &nbsp; &nbsp; &nbsp; &nbsp;lower_bound()/upper_bound()  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lower_bound(x) &nbsp;返回大于等于x的最小的数的迭代器  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;upper_bound(x) &nbsp;返回大于x的最小的数的迭代器  
 &nbsp; &nbsp;map/multimap  
 &nbsp; &nbsp; &nbsp; &nbsp;insert() &nbsp;插入的数是一个pair  
 &nbsp; &nbsp; &nbsp; &nbsp;erase() &nbsp;输入的参数是pair或者迭代器  
 &nbsp; &nbsp; &nbsp; &nbsp;find()  
 &nbsp; &nbsp; &nbsp;  [] &nbsp;注意multimap不支持此操作。 时间复杂度是 O(logn)  
 &nbsp; &nbsp; &nbsp; &nbsp;lower_bound()/upper_bound()  
​  
unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表  
 &nbsp; &nbsp;和上面类似，增删改查的时间复杂度是 O(1)  
 &nbsp; &nbsp;不支持 lower_bound()/upper_bound()， 迭代器的++，--  
​  
bitset, 圧位 省空间 &nbsp; &nbsp;  
 &nbsp; &nbsp;bitset&lt;10000&gt; s; &nbsp;//&lt; &gt;里面是个数, 可以用来替代bool 数组  
    //以下操作都支持  
    ~, &amp;, |, ^  
 &nbsp; &nbsp;&gt;&gt;, &lt;&lt;  
 &nbsp; &nbsp;==, !=  
 &nbsp;  []  
​  
 &nbsp; &nbsp;count() &nbsp;返回有多少个1  
​  
 &nbsp; &nbsp;any() &nbsp;判断是否至少有一个1  
 &nbsp; &nbsp;none() &nbsp;判断是否全为0  
​  
 &nbsp; &nbsp;set() &nbsp;把所有位置成1  
 &nbsp; &nbsp;set(k, v) &nbsp;将第k位变成v  
 &nbsp; &nbsp;reset() &nbsp;把所有位变成0  
 &nbsp; &nbsp;flip() &nbsp;等价于~  
 &nbsp; &nbsp;flip(k) 把第k位取反  
​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="图论背思路"><a href="#图论背思路" class="headerlink" title="图论背思路"></a>图论背思路</h2><h2 id="BFS和DFS"><a href="#BFS和DFS" class="headerlink" title="BFS和DFS"></a>BFS和DFS</h2><h3 id="非常完美的一道dfs-并查集-https-www-luogu-com-cn-problem-P1127"><a href="#非常完美的一道dfs-并查集-https-www-luogu-com-cn-problem-P1127" class="headerlink" title="非常完美的一道dfs + 并查集 https://www.luogu.com.cn/problem/P1127"></a>非常完美的一道dfs + 并查集 <a href="https://www.luogu.com.cn/problem/P1127">https://www.luogu.com.cn/problem/P1127</a></h3><p><u>还原现场很重要</u> </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token comment">//开始搜索</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//找start这个开头的string</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">==</span> start <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">//标记</span>
				st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				<span class="token comment">//还原现场</span>
				st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="DFS-回溯的时候记得回复现场"><a href="#DFS-回溯的时候记得回复现场" class="headerlink" title="DFS 回溯的时候记得回复现场"></a>DFS 回溯的时候记得回复现场</h3><h3 id="邻接矩阵：-p-a-b-a-gt-b-适合稠密图"><a href="#邻接矩阵：-p-a-b-a-gt-b-适合稠密图" class="headerlink" title="邻接矩阵： p[ a] [ b ] a -> b 适合稠密图"></a>邻接矩阵： p[ a] [ b ] a -&gt; b 适合稠密图</h3><h3 id="邻接表：-稀疏图"><a href="#邻接表：-稀疏图" class="headerlink" title="邻接表： 稀疏图"></a>邻接表： 稀疏图</h3><p>和哈希表思路一样</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点  
int h[N], e[N], ne[N], idx; //e是终点end  
  
// 添加一条边a-&gt;b  
void add(int a, int b)  
{  
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;  
}   
// 初始化  
idx = 0;  
memset(h, -1, sizeof h);  
//遍历图  
for(int i = h[t] ; i != -1 ; i = ne[i] )

## 另一种使用结构体的邻接表存法

int idx=0,n;  
int h[N] , dis[N] , vis[N];  
struct Edge{  
    int ne,to,dis;  
}ed[N];  
//添加， 从 1 开始  
void add(int a,int b ,int c){  
    ed[++idx].ne = h[a];  
    ed[idx].to = b;  
    ed[idx].dis = c;  
    h[a] = idx;  
}
//遍历图  
for(int i = h[t] ; i ; i = ed[i].ne)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="BFS-可用于解决权值相等的最短路径问题"><a href="#BFS-可用于解决权值相等的最短路径问题" class="headerlink" title="BFS 可用于解决权值相等的最短路径问题"></a>BFS 可用于解决权值相等的最短路径问题</h3><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>必须是又向无环</p>
<p>排完后，所有的起点都在终点之前</p>
<ol>
<li><p>统计每一个节点的入度和出度</p>
</li>
<li><p>每一次将入读相同的点放入queue</p>
</li>
<li><p>枚举队头的出边，删掉 出边,这条边的终点的入度-1</p>
</li>
<li><p>如果某个点的入度为0 放入队列</p>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool topsort()  
{  
    int hh = 0, tt = -1;  
  
    // d[i] 存储点i的入度  
    for (int i = 1; i &lt;= n; i ++ )  
        if (!d[i])  
            q[ ++ tt] = i;//把每个入度为0的点加入队列  
  
    while (hh &lt;= tt)  
    {  
        int t = q[hh ++ ];//取出队头  
		//从队头开始找路径  
        for (int i = h[t]; i != -1; i = ne[i])  
        {  
            int j = e[i];  
            if (-- d[j] == 0)  
                q[ ++ tt] = j;  
        }  
    }  
  
    // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。  
    return tt == n - 1;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="最短路问题："><a href="#最短路问题：" class="headerlink" title="最短路问题："></a>最短路问题：</h2><h2 id="分层最短路-，适用于乘车路线和免费次数。"><a href="#分层最短路-，适用于乘车路线和免费次数。" class="headerlink" title="_分层最短路_，适用于乘车路线和免费次数。"></a>_分层最短路_，适用于乘车路线和免费次数。</h2><p><a href="https://www.luogu.com.cn/problem/P4568#submit">飞机路线</a></p>
<h3 id="单源最短路-一个点-x2F-到其他所有点的最短路"><a href="#单源最短路-一个点-x2F-到其他所有点的最短路" class="headerlink" title="单源最短路 一个点./.到其他所有点的最短路"></a>单源最短路 一个点./.到其他所有点的最短路</h3><ul>
<li><p>所有边的权都是正数</p>
<ol>
<li>朴素Dijkstra O(n^2) n为点的数量 稠密图 边很多 外部迭代n-1 次 <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int g[N][N];  // 存储每条边  权值  
int dist[N];  // 存储1号点到每个点的最短距离  
bool st[N];   // 存储每个点的最短路是否已经确定  
  
// 求1号点到n号点的最短路，如果不存在则返回-1  
int dijkstra()  
{  
    memset(dist, 0x3f, sizeof dist);  
    dist[1] = 0;  
  
    for (int i = 0; i &lt; n - 1; i ++ )//迭代n-1 次，因为上来选中了一个点  
    {  
        int t = -1;     // 在还未确定最短路的点中，寻找距离最小的点  
        for (int j = 1; j &lt;= n; j ++ )  
            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))  
                t = j;  
  
        // 用t更新其他点的距离  
        for (int j = 1; j &lt;= n; j ++ )  
            dist[j] = min(dist[j], dist[t] + g[t][j]);  
  
        st[t] = true;  
    }  
  
    if (dist[n] == 0x3f3f3f3f) return -1;  
    return dist[n];  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>堆优化版的 O(mlogn) 稀疏图  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef pair&lt;int, int&gt; PII;  
  
int n;      // 点的数量  
int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边  
int dist[N];        // 存储所有点到1号点的距离  
bool st[N];     // 存储每个点的最短距离是否已确定  
  
// 求1号点到n号点的最短距离，如果不存在，则返回-1  
int dijkstra()  
{  
    memset(dist, 0x3f, sizeof dist);  
    dist[1] = 0;  
    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;  
    heap.push({0, 1});      // first存储距离，second存储节点编号  
  
    while (heap.size())  
    {  
        auto t = heap.top();  
        heap.pop();  
  
        int ver = t.second, distance = t.first;  
  
        if (st[ver]) continue;  
        st[ver] = true;  
  
        for (int i = h[ver]; i != -1; i = ne[i])  
        {  
            int j = e[i];  
            if (dist[j] &gt; distance + w[i])  
            {  
                dist[j] = distance + w[i];  
                heap.push({dist[j], j});  
            }  
        }  
    }  
  
    if (dist[n] == 0x3f3f3f3f) return -1;  
    return dist[n];  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>存在负权边</p>
<ol>
<li><p>Bellman -Ford O(nm) <strong>奇妙的存图方式</strong> 无负权回路 经过路径有次数限制的话只能用这个了，外面限制的是经过i的点的个数，然后每次遍历边即可。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m;       // n表示点数，m表示边数  
int dist[N];        // dist[x]存储1到x的最短路距离  
  
struct Edge     // 边，a表示出点，b表示入点，w表示边的权重  
{  
    int a, b, w;  
}edges[M];  
  
// 求1到n的最短路距离，如果无法从1走到n，则返回-1。  
int bellman_ford()  
{  
    memset(dist, 0x3f, sizeof dist);  
    dist[1] = 0;  
	//不需要进行收录顶点  
    // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。  
    for (int i = 0; i &lt; n; i ++ )//这个n是指的是最多不经过 多少次经过同一条边  
    {  
        for (int j = 0; j &lt; m; j ++ )  
        {  
            int a = edges[j].a, b = edges[j].b, w = edges[j].w;  
            if (dist[b] &gt; dist[a] + w)  
                dist[b] = dist[a] + w;  
        }  
    }  
  
    if (dist[n] &gt; 0x3f3f3f3f / 2) return -1;  
    return dist[n];  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>SPFA 一般： O（m) 最坏O（nm） 不存在负权环才能使用 99%都没有负环比较好用</p>
<p> 优化思路：只有更新过点才对后面的点更新有影响</p>
<p> 要从 1 开始存比较好 ，e 是end 也就是一条边的终点</p>
 <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n;      // 总点数  
int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边  
int dist[N];        // 存储每个点到1号点的最短距离  
bool st[N];     // 存储每个点是否在队列中  
  
  
// 求x号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1  
int spfa(int x)  
{  
    memset(dist, 0x3f, sizeof dist);//初始化要根据题目来  
      
    dist[x] = 0;  
/*或者  
for(int i = 1 ; i &lt;= n ; i ++){  
        dis[i] = INT_MAX;  
    }*/	  
    queue&lt;int&gt; q;  
    q.push(x);  
  
    while (q.size())//不为空，即为还有更新的点  
    {  
        auto t = q.front();  
        q.pop();  
  
        st[t] = false;//这里不要忘记  
       //遍历所以能到达的顶点，进行更新  
        for (int i = h[t]; i != -1; i = ne[i])  
        {  
            int j = e[i];  
            if (dist[j] &gt; dist[t] + w[i])  
            {  
                dist[j] = dist[t] + w[i];  
                if (!st[j])     // 如果队列中已存在j，则不需要将j重复插入  
                {  
                    q.push(j);//这里是j  
                    st[j] = true;//这里是j  
                }  
            }  
        }  
    }  
  
    if (dist[n] == 0x3f3f3f3f) return -1;  
    return dist[n];  
}  
//初始化和存图  
void add(int a, int b , int c){  
    w[idx] = c;  
    ne[idx] = h[a];   
    en[idx] =  b;    
    h[a] = idx++;  
}  
void init(){  
    idx = 1;  
    memset(h , -1 ,sizeof h);  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="模板题："><a href="#模板题：" class="headerlink" title="模板题："></a>模板题：</h4><p> <a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</li>
</ol>
</li>
</ul>
<h2 id="x3D-x3D-判断有无负环-用cnt-来记录当前最短路的边数"><a href="#x3D-x3D-判断有无负环-用cnt-来记录当前最短路的边数" class="headerlink" title="==判断有无负环 用cnt 来记录当前最短路的边数"></a>==<strong>判断有无负环 用cnt 来记录当前最短路的边数</strong></h2><p>例题： <a href="https://www.luogu.com.cn/problem/P3385">负环路</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n;      // 总点数  
int h[N], w[N], e[N], ne[N], idx;       // 邻接表存储所有边  
int dist[N], cnt[N];        // dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数  
bool st[N];     // 存储每个点是否在队列中  
  
// 如果存在负环，则返回true，否则返回false。  
bool spfa()  
{  
    // 不需要初始化dist数组  
    // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。  
  
    queue&lt;int&gt; q;  
    for (int i = 1; i &lt;= n; i ++ )  
    {  
        q.push(i);  
        st[i] = true;  
    }  
  
    while (q.size())  
    {  
        auto t = q.front();  
        q.pop();  
  
        st[t] = false;  
  
        for (int i = h[t]; i != -1; i = ne[i])  
        {  
            int j = e[i];  
            if (dist[j] &gt; dist[t] + w[i])  
            {  
                dist[j] = dist[t] + w[i];  
                cnt[j] = cnt[t] + 1;  
                if (cnt[j] &gt;= n) return true;       // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环  
                if (!st[j])  
                {  
                    q.push(j);  
                    st[j] = true;  
                }  
            }  
        }  
    }  
  
    return false;  
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多源汇最短路-起点终点都不确定"><a href="#多源汇最短路-起点终点都不确定" class="headerlink" title="多源汇最短路 起点终点都不确定"></a>多源汇最短路 起点终点都不确定</h3><p>Floyd O(n^3)</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">初始化：  
 &nbsp; &nbsp;for (int i = 1; i &lt;= n; i ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (i == j) d[i][j] = 0;  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else d[i][j] = INF;  
​  
// 算法结束后，d[a][b]表示a到b的最短距离  
void floyd()  
{  
 &nbsp; &nbsp;for (int k = 1; k &lt;= n; k ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 1; i &lt;= n; i ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;d[i][j] = min(d[i][j], d[i][k] + d[k][j]);// i经过k 点到达j   
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="普利姆算法-Prim-思路和Dijsktra算法相似-外部迭代-n-次，因为没有提前选中一个点"><a href="#普利姆算法-Prim-思路和Dijsktra算法相似-外部迭代-n-次，因为没有提前选中一个点" class="headerlink" title="普利姆算法 Prim 思路和Dijsktra算法相似 外部迭代 n 次，因为没有提前选中一个点"></a>普利姆算法 Prim 思路和Dijsktra算法相似 外部迭代 n 次，因为没有提前选中一个点</h3><h3 id="迭代n次因为没有提前选中一个点-枚举所有点"><a href="#迭代n次因为没有提前选中一个点-枚举所有点" class="headerlink" title="迭代n次因为没有提前选中一个点 枚举所有点"></a>迭代n次因为没有提前选中一个点 枚举所有点</h3><ol>
<li><p>朴素Prim算法 稠密图 每次找到未收录的距离最近的点，收录并进行更新其他点到<strong>集合</strong>的距离</p>
</li>
<li><p>找这个点是否与集合内部相连</p>
</li>
<li><p>某个点到这个集合的距离为某个点到这个集合当中的点的距离最短的边</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n; &nbsp; &nbsp; &nbsp;// n表示点数  
int g[N][N]; &nbsp; &nbsp; &nbsp; &nbsp;// 邻接矩阵，存储所有边  
int dist[N]; &nbsp; &nbsp; &nbsp; &nbsp;// 存储其他点到当前最小生成树的距离  
bool st[N]; &nbsp; &nbsp; // 存储每个点是否已经在生成树中  
​  
​  
// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和  
int prim()  
{  
 &nbsp; &nbsp;memset(dist, 0x3f, sizeof dist);  
​  
 &nbsp; &nbsp;int res = 0;  
 &nbsp; &nbsp;for (int i = 0; i &lt; n; i ++ )  
 &nbsp;  {  
 &nbsp; &nbsp; &nbsp; &nbsp;int t = -1;  
 &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ )  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t = j;  
​  
 &nbsp; &nbsp; &nbsp; &nbsp;if (i &amp;&amp; dist[t] == INF) return INF;  
​  
 &nbsp; &nbsp; &nbsp; &nbsp;if (i) res += dist[t];  
 &nbsp; &nbsp; &nbsp; &nbsp;st[t] = true;  
​  
 &nbsp; &nbsp; &nbsp; &nbsp;for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]);  
 &nbsp; &nbsp; &nbsp; &nbsp;//不是相加  
 &nbsp;  }  
​  
 &nbsp; &nbsp;return res;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>堆优化版的Prim 稀疏图 不常用</p>
</li>
</ol>
<h3 id="克鲁斯卡尔算法-Kruskal-先对边进行排序-稀疏图-可以用并查集-枚举所有边"><a href="#克鲁斯卡尔算法-Kruskal-先对边进行排序-稀疏图-可以用并查集-枚举所有边" class="headerlink" title="克鲁斯卡尔算法 Kruskal 先对边进行排序 稀疏图 可以用并查集 枚举所有边"></a>克鲁斯卡尔算法 Kruskal 先对边进行排序 稀疏图 可以用并查集 枚举所有边</h3><p>java版本:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">bronya</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> w<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>

	<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token punctuation">,</span> m <span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span>  i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>e1<span class="token punctuation">.</span>w <span class="token operator">-</span> e2<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">int</span> a <span class="token operator">=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
			<span class="token keyword">int</span> b <span class="token operator">=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
			<span class="token keyword">int</span> w <span class="token operator">=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
			a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
			b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
				ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>
				cnt <span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token class-name">BufferedReader</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>  i <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">boolean</span> f <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"orz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<ol>
<li><p>所有边按权重从小到大排序</p>
</li>
<li><p>枚举每条边a,b权重c if a,b不连通， 将这条边加入集合中</p>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m;       // n是点数，m是边数  
int p[N];       // 并查集的父节点数组  
  
struct Edge     // 存储边  
{  
    int a, b, w;  
  
    bool operator&lt; (const Edge &amp;W)const // 重载了 &lt;   
    {  
        return w &lt; W.w;  
    }  
}edges[M];  
  
int find(int x)     // 并查集核心操作  
{  
    if (p[x] != x) p[x] = find(p[x]);  
    return p[x];  
}  
  
int kruskal()  
{  
    sort(edges, edges + m);  
  
    for (int i = 1; i &lt;= n; i ++ ) p[i] = i;    // 初始化并查集  
  
    int res = 0, cnt = 0;  
    for (int i = 0; i &lt; m; i ++ )  
    {  
        int a = edges[i].a, b = edges[i].b, w = edges[i].w;  
  
        a = find(a), b = find(b);  
        if (a != b)     // 如果两个连通块不连通，则将这两个连通块合并  
        {  
            p[a] = b;  
            res += w;  
            cnt ++ ;  
        }  
    }  
  
    if (cnt &lt; n - 1) return INF;  
    return res;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二分图-当且仅当图中没有奇数环"><a href="#二分图-当且仅当图中没有奇数环" class="headerlink" title="二分图 当且仅当图中没有奇数环"></a>二分图 当且仅当图中没有奇数环</h2><h3 id="染色法-O-n-m-判断是否是二分图"><a href="#染色法-O-n-m-判断是否是二分图" class="headerlink" title="染色法 O(n+m) 判断是否是二分图"></a>染色法 O(n+m) 判断是否是二分图</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n;      // n表示点数  
int h[N], e[M], ne[M], idx;     // 邻接表存储图  
int color[N];       // 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色  
  
// 参数：u表示当前节点，c表示当前点的颜色  
bool dfs(int u, int c)  
{  
    color[u] = c;  
    for (int i = h[u]; i != -1; i = ne[i])  
    {  
        int j = e[i];  
        if (color[j] == -1)//未染色  
        {  
            if (!dfs(j, !c)) return false;//比如两种颜色， 0，1表示，那么这里就可以用 3- c,也就是用另一种颜色去染色  
        }  
        else if (color[j] == c) return false;  
    }  
  
    return true;  
}  
  
bool check()  
{  
    memset(color, -1, sizeof color);  
    bool flag = true;  
    //枚举所有点，去染色  
    for (int i = 1; i &lt;= n; i ++ )  
        if (color[i] == -1)  
            if (!dfs(i, 0))  
            {  
                flag = false;  
                break;  
            }  
    return flag;  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="匈牙利算法-O-mn-实际运行时间一般小于这个值-稠密图不适合用邻接表，推荐使用临界矩阵"><a href="#匈牙利算法-O-mn-实际运行时间一般小于这个值-稠密图不适合用邻接表，推荐使用临界矩阵" class="headerlink" title="匈牙利算法 O(mn) 实际运行时间一般小于这个值 稠密图不适合用邻接表，推荐使用临界矩阵"></a>匈牙利算法 O(mn) 实际运行时间一般小于这个值 稠密图不适合用邻接表，推荐使用临界矩阵</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n1, n2; &nbsp; &nbsp; // n1表示第一个集合中的点数，n2表示第二个集合中的点数  
int h[N], e[M], ne[M], idx; &nbsp; &nbsp; // 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边  
int match[N]; &nbsp; &nbsp; &nbsp; // 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个  
bool st[N]; &nbsp; &nbsp; // 表示第二个集合中的每个点是否已经被遍历过  
​  
bool find(int x)  
{  
 &nbsp; &nbsp;for (int i = h[x]; i != -1; i = ne[i])  
 &nbsp;  {  
 &nbsp; &nbsp; &nbsp; &nbsp;int j = e[i];  
 &nbsp; &nbsp; &nbsp; &nbsp;if (!st[j])  
 &nbsp; &nbsp; &nbsp;  {  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;st[j] = true;  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (match[j] == 0 || find(match[j]))//第二个集合的点未匹配，或者是可以为已经 匹配的第一个集合中的点找到别的集合二中的点  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;match[j] = x;  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return true;  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }  
 &nbsp; &nbsp; &nbsp;  }  
 &nbsp;  }  
​  
 &nbsp; &nbsp;return false;  
}  
​  
// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点  
int res = 0;  
for (int i = 1; i &lt;= n1; i ++ )  
{  
 &nbsp; &nbsp;memset(st, false, sizeof st);  
 &nbsp; &nbsp;if (find(i)) res ++ ;  
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>例题：<a href="https://www.luogu.com.cn/problem/P3386">P3386 【模板】二分图最大匹配 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></strong></p>
<h2 id="邻接表的写法-稠密图会超时"><a href="#邻接表的写法-稠密图会超时" class="headerlink" title="邻接表的写法(稠密图会超时)"></a>邻接表的写法(稠密图会超时)</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;  
using namespace std;  
const int N  = 505;  
int n1,n2,ed;//需要两个集合  
int h[N] , ne[N] , e[N] , idx;  
int match[N] ;  
bool vis[N];  
void init(){  
    memset(h,-1,sizeof h);  
    idx = 0;  
}  
void add(int a, int b){  
    e[idx] = b ;  
    ne[idx] = h[a];  
    h[a] = idx++;  
}  
bool find(int x){  
    for (int i = h[x] ; i != -1 ; i =ne[i]){  
        int j = e[i];  
        if(!vis[j]){  
            vis[j] = true;  
            if(match[j] == 0 || find(match[j])){  
                //如果终边的点未匹配，或者是可以为以匹配的起点找到另一个终点  
                match[j] = x;  
                return true;  
            }  
        }  
    }  
    return false;  
}  
int main(){  
    ios::sync_with_stdio(false);  
    cin.tie(nullptr);  
    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt;ed;  
    init();  
    int u ,v;  
    for (int i = 1 ; i &lt;= ed ; i++){  
        cin &gt;&gt; u &gt;&gt; v;  
        if(v &lt;= n2){  
            add(u , v);  
        }  
         
    }  
    int ans = 0;  
    for (int i = 1 ; i &lt;= n1 ; i++){  
        memset(vis, false ,sizeof vis);  
        if(find(i)) ans++;  
    }  
    cout &lt;&lt; ans &lt;&lt;endl ;  
    return 0;  
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="邻接矩阵的写法："><a href="#邻接矩阵的写法：" class="headerlink" title="邻接矩阵的写法："></a>邻接矩阵的写法：</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;  
using namespace std;  
const int N  = 505;  
int n1,n2,ed;//需要两个集合  
bool a[N][N];  
int match[N];  
bool vis[N];  
bool find(int x){  
    //枚举终边  
    for (int i = 1 ; i &lt;= n2 ; i ++){  
        if(!vis[i] &amp;&amp; a[x][i]){  
            vis[i] = true;  
            if(match[i] == 0 || find(match[i])){  
                //如果终边的点未匹配，或者是可以为以匹配的起点找到另一个终点  
                match[i] = x;  
                return true;  
            }  
        }  
    }  
    return false;  
}  
int main(){  
    ios::sync_with_stdio(false);  
    cin.tie(nullptr);  
    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt;ed;  
    int u ,v;  
    for (int i = 1 ; i &lt;= ed ; i++){  
        cin &gt;&gt; u &gt;&gt; v;  
        if(v &lt;= n2){  
            a[u][v] = 1;  
        }  
         
    }  
    int ans = 0;  
    for (int i = 1 ; i &lt;= n1 ; i++){  
        ans+=find(i); // 这里不一样哦  
        memset(vis, false ,sizeof vis);  
    }  
    cout &lt;&lt; ans &lt;&lt;endl ;  
    return 0;  
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><blockquote>
<p>[!NOTE]</p>
<h2 id="当看见-0-的个数时考虑将结果分成-2-，-5-的个数-并且，末尾的0的个数一定是由5的个数决定的"><a href="#当看见-0-的个数时考虑将结果分成-2-，-5-的个数-并且，末尾的0的个数一定是由5的个数决定的" class="headerlink" title="当看见 0 的个数时考虑将结果分成 2 ， 5 的个数,并且，末尾的0的个数一定是由5的个数决定的"></a>当看见 0 的个数时考虑将结果分成 2 ， 5 的个数,并且，末尾的0的个数一定是由5的个数决定的</h2></blockquote>
<p><a href="https://ac.nowcoder.com/acm/contest/57683/E">E-Kevin喜欢零(困难版本)_牛客小白月赛73 (nowcoder.com)</a></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;  
​  
void solve() {#include &lt;bits/stdc++.h&gt;  
​  
void solve() {  
 &nbsp; &nbsp;int n, k;  
 &nbsp; &nbsp;std::cin &gt;&gt; n &gt;&gt; k;  
​  
 &nbsp; &nbsp;int64_t ans = 0;  
 &nbsp; &nbsp;std::unordered_map&lt;int, std::vector&lt;int&gt;&gt; tp, fp;  
 &nbsp; &nbsp;//tp 记录5的个数，fp记录2的个数  
 &nbsp; &nbsp;//两个是互补的  
 &nbsp; &nbsp;tp[0].push_back(0);  
 &nbsp; &nbsp;fp[0].push_back(0);  
​  
 &nbsp; &nbsp;for (int i = 0, t = 0, f = 0; i &lt; n; i++) {  
 &nbsp; &nbsp; &nbsp; &nbsp;int x;  
 &nbsp; &nbsp; &nbsp; &nbsp;std::cin &gt;&gt; x;  
 &nbsp; &nbsp; &nbsp; &nbsp;for (; x &amp;&amp; x % 2 == 0; x /= 2, t++) {  
 &nbsp; &nbsp; &nbsp;  }  
 &nbsp; &nbsp; &nbsp; &nbsp;for (; x &amp;&amp; x % 5 == 0; x /= 5, f++) {  
 &nbsp; &nbsp; &nbsp;  }  
 &nbsp; &nbsp; &nbsp; &nbsp;ans += std::max(  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//需要 2^k &nbsp; * 5^k 即可满足 10^k 所以是动态规划  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//每次计算出当前数据含有的2 和  5 的数量 和仍然需要 k  - 当前数量 &nbsp; 这一行的去更新  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//因为同一个状态有可能对应多个数据， 所以只要找到第一个满足能凑出另一个2或者5的即可   
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//map不能使用upper_bound 但是 内部的vector 是可以使用的  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::upper_bound(tp[t - k].begin(), tp[t - k].end(), f - k) - tp[t - k].begin(),  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::upper_bound(fp[f - k].begin(), fp[f - k].end(), t - k) - fp[f - k].begin()  
 &nbsp; &nbsp; &nbsp;  );  
 &nbsp; &nbsp; &nbsp; &nbsp;tp[t].push_back(f);  
 &nbsp; &nbsp; &nbsp; &nbsp;fp[f].push_back(t);  
 &nbsp;  }  
​  
 &nbsp; &nbsp;std::cout &lt;&lt; ans &lt;&lt; "\n";  
}  
​  
int main() {  
 &nbsp; &nbsp;std::ios::sync_with_stdio(false);  
 &nbsp; &nbsp;std::cin.tie(nullptr);  
​  
 &nbsp; &nbsp;int t;  
 &nbsp; &nbsp;std::cin &gt;&gt; t;  
​  
 &nbsp; &nbsp;while (t--) {  
 &nbsp; &nbsp; &nbsp; &nbsp;solve();  
 &nbsp;  }  
​  
 &nbsp; &nbsp;return 0;  
}  
​  
 &nbsp; &nbsp;int n, k;  
 &nbsp; &nbsp;std::cin &gt;&gt; n &gt;&gt; k;  
​  
 &nbsp; &nbsp;int64_t ans = 0;  
 &nbsp; &nbsp;std::unordered_map&lt;int, std::vector&lt;int&gt;&gt; tp, fp;  
 &nbsp; &nbsp;//tp 记录5的个数，fp记录2的个数  
 &nbsp; &nbsp;//两个是互补的  
 &nbsp; &nbsp;tp[0].push_back(0);  
 &nbsp; &nbsp;fp[0].push_back(0);  
​  
 &nbsp; &nbsp;for (int i = 0, t = 0, f = 0; i &lt; n; i++) {  
 &nbsp; &nbsp; &nbsp; &nbsp;int x;  
 &nbsp; &nbsp; &nbsp; &nbsp;std::cin &gt;&gt; x;  
 &nbsp; &nbsp; &nbsp; &nbsp;for (; x &amp;&amp; x % 2 == 0; x /= 2, t++) {  
 &nbsp; &nbsp; &nbsp;  }  
 &nbsp; &nbsp; &nbsp; &nbsp;for (; x &amp;&amp; x % 5 == 0; x /= 5, f++) {  
 &nbsp; &nbsp; &nbsp;  }  
 &nbsp; &nbsp; &nbsp; &nbsp;ans += std::max(  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//需要 2^k &nbsp; * 5^k 即可满足 10^k 所以是动态规划  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//每次计算出当前数据含有的2 和  5 的数量 和仍然需要 k  - 当前数量 &nbsp; 这一行的去更新  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//因为同一个状态有可能对应多个数据， 所以只要找到第一个满足能凑出另一个2或者5的即可   
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::upper_bound(tp[t - k].begin(), tp[t - k].end(), f - k) - tp[t - k].begin(),  
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::upper_bound(fp[f - k].begin(), fp[f - k].end(), t - k) - fp[f - k].begin()  
 &nbsp; &nbsp; &nbsp;  );  
 &nbsp; &nbsp; &nbsp; &nbsp;tp[t].push_back(f);  
 &nbsp; &nbsp; &nbsp; &nbsp;fp[f].push_back(t);  
 &nbsp;  }  
​  
 &nbsp; &nbsp;std::cout &lt;&lt; ans &lt;&lt; "\n";  
}  
​  
int main() {  
 &nbsp; &nbsp;std::ios::sync_with_stdio(false);  
 &nbsp; &nbsp;std::cin.tie(nullptr);  
​  
 &nbsp; &nbsp;int t;  
 &nbsp; &nbsp;std::cin &gt;&gt; t;  
​  
 &nbsp; &nbsp;while (t--) {  
 &nbsp; &nbsp; &nbsp; &nbsp;solve();  
 &nbsp;  }  
​  
 &nbsp; &nbsp;return 0;  
}  
​
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><ol>
<li><p>质数</p>
<ul>
<li><p>试除法判定质数，只枚举 d*d&lt;=n 即可`</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
<span class="token comment">//不要担心	数据超过int  </span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>试除法分解质因子，质因数 ,求约数</p>
<ul>
<li>从小到大枚举所有的约数,n中最多只存在一个大于风雨根号n的质因子</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">            <span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>  
            <span class="token punctuation">{</span>  
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">{</span>  
                        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
                        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">,</span> s <span class="token operator">++</span> <span class="token punctuation">;</span>  
                        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  
                    <span class="token punctuation">}</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  
                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>
            
```            

# 埃氏筛法： 枚举所有数据，然后把每个数的倍数筛去，留下的就是质数 <span class="token operator">*</span><span class="token operator">*</span>思想比较好<span class="token operator">*</span><span class="token operator">*</span> 思想太好了
``` cpp
	   <span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        		<span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  
                <span class="token comment">//删除所有质数的倍数  </span>
        		primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  
        		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        			st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  
        		<span class="token punctuation">}</span>  
        	<span class="token punctuation">}</span>	  
        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="线性筛法：-如果质数，把这个数加入集合中-最常用"><a href="#线性筛法：-如果质数，把这个数加入集合中-最常用" class="headerlink" title="线性筛法： 如果质数，把这个数加入集合中 最常用"></a><strong>线性筛法： 如果质数，把这个数加入集合中</strong> 最常用</h3> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>     <span class="token comment">// primes[]存储所有素数  </span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// st[x]存储x是否被筛掉  </span>
  
<span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  
        <span class="token comment">//枚举已有的质数，删除它的倍数  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>约数</p>
<ul>
<li><p>试除法求所有约数</p>
<ul>
<li>只枚举较小的约数，较大的约数可以直接算出</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>  
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
		<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
			<span class="token comment">//从小到大枚举所有约数，并把n/i 得到的约数加入即可  </span>
			ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>n<span class="token operator">/</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
		<span class="token punctuation">}</span>  
	<span class="token punctuation">}</span>  
	<span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>约数个数,约数之和<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        如果 N <span class="token operator">=</span> p1<span class="token operator">^</span>c1 <span class="token operator">*</span> p2<span class="token operator">^</span>c2 <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span>pk<span class="token operator">^</span>ck  
        约数个数： <span class="token punctuation">(</span>c1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ck <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  
        约数之和： <span class="token punctuation">(</span>p1<span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> p1<span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> p1<span class="token operator">^</span>c1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pk<span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> pk<span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> pk<span class="token operator">^</span>ck
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod  <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        <span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
                x <span class="token operator">/=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  primes<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ULL cnts <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>prime<span class="token punctuation">,</span>cnt<span class="token punctuation">]</span><span class="token operator">:</span>primes<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        cnts <span class="token operator">=</span> <span class="token punctuation">(</span>cnts <span class="token operator">*</span> <span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token comment">//求和</span>
        ULL t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//秦九zhao算法</span>
            t <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>prime <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span>mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        res <span class="token operator">=</span> res <span class="token operator">*</span> t <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> cnts <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ol start="3">
<li><p>欧几里得算法，辗转相除法，求最大公约数</p>
<ul>
<li>GCD(a,b) = =GCD(a.amodb)<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        
```     
    <span class="token operator">-</span> LCM 最小公倍数 将两个数相乘再除以最大公因数即可得到最小公倍数
    ```cpp
        <span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        	<span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>求ax+by=gcd(a,b)<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        <span class="token keyword">int</span> <span class="token function">xGCD</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//b = 0 时  </span>
                x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
                <span class="token keyword">return</span> a<span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y10<span class="token punctuation">,</span> gcd <span class="token operator">=</span> <span class="token function">xGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            x <span class="token operator">=</span> y1<span class="token punctuation">,</span> y <span class="token operator">=</span> x1 <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y1<span class="token punctuation">;</span>  
            <span class="token keyword">return</span> gcd<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        
```     
### 欧拉函数：小于x的整数中与x互质的数的个数<span class="token punctuation">]</span>
        
求出单个数的欧拉函数  
<span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> `n <span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">/</span> p1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">/</span> p2a<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`
```cpp
        <span class="token keyword">int</span> <span class="token function">phi</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        	<span class="token keyword">int</span> res<span class="token operator">=</span>x<span class="token punctuation">;</span>  
        	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        		<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        			res<span class="token operator">=</span>res<span class="token operator">/</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        			<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">/=</span>i<span class="token punctuation">;</span>  
        		<span class="token punctuation">}</span>  
        	<span class="token punctuation">}</span>  
        	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">/</span>x<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        	<span class="token keyword">return</span> res<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<p>筛法：求出1-n每个数的欧拉函数，在线性筛法的模板中加上三行</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>     <span class="token comment">// primes[]存储所有素数  </span>
<span class="token keyword">int</span> euler<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">// 存储每个数的欧拉函数  </span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// st[x]存储x是否被筛掉  </span>
  
  
<span class="token keyword">void</span> <span class="token function">get_eulers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    euler<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  
            euler<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">int</span> t <span class="token operator">=</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>  
            st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  
            <span class="token punctuation">{</span>  
                euler<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> euler<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            euler<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> euler<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>a ^f(n) % n = 1<br>a和n互质</p>
<h3 id="快速幂："><a href="#快速幂：" class="headerlink" title="快速幂："></a>快速幂：</h3>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        把指数转为<span class="token number">2</span>进制就可以看出来有哪些含有了
        
        预处理时每一个结果都是前一个的平方再mod
        
        求 m<span class="token operator">^</span>k mod p，时间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>logk<span class="token punctuation">)</span>。  
        ​  
        <span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">,</span> t <span class="token operator">=</span> m<span class="token punctuation">;</span>  
            <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>  
            <span class="token punctuation">{</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> t <span class="token operator">%</span> p<span class="token punctuation">;</span>  
                t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">%</span> p<span class="token punctuation">;</span>  
                k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
        
    
```      
### 快速幂求逆元
```cpp
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">quick_mi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span> res<span class="token operator">*</span>a <span class="token operator">%</span>p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span>p<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">quick_mi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="扩展欧几里得算法-不会"><a href="#扩展欧几里得算法-不会" class="headerlink" title="扩展欧几里得算法(不会)"></a>扩展欧几里得算法(不会)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token comment">// 求x, y，使得ax + by = gcd(a, b)  </span>
    <span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        y <span class="token operator">-=</span> <span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> d<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
```  
#### 高斯消元求解方程组的解
 ```cpp
	 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span>  </span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
    <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  
    <span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span>  
    <span class="token keyword">double</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token comment">// a[N][N]是增广矩阵  </span>
    <span class="token comment">// a[N][N]是增广矩阵  </span>
    <span class="token keyword">int</span> <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> c<span class="token punctuation">,</span> r<span class="token punctuation">;</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> c <span class="token operator">++</span> <span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">int</span> t <span class="token operator">=</span> r<span class="token punctuation">;</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token comment">// 找到绝对值最大的行  </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                    t <span class="token operator">=</span> i<span class="token punctuation">;</span>  
    ​  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  
    ​  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将绝对值最大的行换到最顶端  </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> c<span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 将当前行的首位变成1  </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>       <span class="token comment">// 用当前行将下面所有的列消成0  </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span>  
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> c<span class="token punctuation">;</span> j <span class="token operator">--</span> <span class="token punctuation">)</span>  
                        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    ​  
            r <span class="token operator">++</span> <span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    ​  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span>  
                    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 无解  </span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 有无穷多组解  </span>
        <span class="token punctuation">}</span>  
    ​  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    ​  
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 有唯一解  </span>
    <span class="token punctuation">}</span>  
    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>  
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
                cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
    ​  
    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"无解"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  
        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"有无数组解"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="递推求组合数，dp法-适合询问次数-gt-10w"><a href="#递推求组合数，dp法-适合询问次数-gt-10w" class="headerlink" title="递推求组合数，dp法 适合询问次数>10w"></a>递推求组合数，dp法 适合询问次数&gt;10w</h3> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// c[a][b] 表示从a个苹果中选b个的方案数  </span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token keyword">else</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="通过预处理逆元的方式求组合数-询问1w"><a href="#通过预处理逆元的方式求组合数-询问1w" class="headerlink" title="通过预处理逆元的方式求组合数 询问1w"></a>通过预处理逆元的方式求组合数 询问1w</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    首先预处理出所有阶乘取模的余数fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>，以及所有阶乘取模的逆元infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>  
    如果取模的数是质数，可以用费马小定理求逆元  
    <span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>    <span class="token comment">// 快速幂模板  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>  
            a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>  
            k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    ​  
    <span class="token comment">// 预处理阶乘的余数和阶乘逆元的余数  </span>
    fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>  
        infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    ​
```    
### Lucas定理求组合数 <span class="token number">20</span>次询问以下
    
<span class="token operator">!</span><span class="token punctuation">[</span>image<span class="token operator">-</span><span class="token number">20230519193526425</span><span class="token punctuation">]</span><span class="token punctuation">(</span>file<span class="token operator">:</span><span class="token comment">//D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230519193526425.png?lastModify=1694256669)    </span>
```cpp
      <span class="token comment">//若p是质数，则对于任意整数 1 &lt;= m &lt;= n，有：  </span>
      <span class="token comment">//  C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p)  </span>
    ​  
    <span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>  <span class="token comment">// 快速幂模板  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>  
            a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>  
            k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    ​  
    <span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>  <span class="token comment">// 通过定理求组合数C(a, b)  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    ​  
        LL x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// x是分子，y是分母  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">,</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            x <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>x <span class="token operator">*</span> i <span class="token operator">%</span> p<span class="token punctuation">;</span>  
            y <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span> y <span class="token operator">*</span> j <span class="token operator">%</span> p<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    ​  
        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">qmi</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    ​  
    <span class="token keyword">int</span> <span class="token function">lucas</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">C</span><span class="token punctuation">(</span>a <span class="token operator">%</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a <span class="token operator">/</span> p<span class="token punctuation">,</span> b <span class="token operator">/</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="file://D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230519193254443.png?lastModify=1694256669" alt="image-20230519193254443"></p>
<h3 id="逆元："><a href="#逆元：" class="headerlink" title="逆元："></a>逆元：</h3><p>可以在快速幂中求出</p>
<p>也就是a的p-2次方的</p>
<blockquote>
<p>在模为素数p的情况下，有费马小定理 a^(p-1)=1（mod p） 那么a^(p-2)=a^-1(mod p) 也就是说a的逆元为a^(p-2)</p>
</blockquote>
<h4 id="分解质因数法求组合数"><a href="#分解质因数法求组合数" class="headerlink" title="分解质因数法求组合数"></a>分解质因数法求组合数</h4><p> &nbsp; </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：  
        <span class="token number">1.</span> 筛法求出范围内的所有质数  
        <span class="token number">2.</span> 通过 <span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token operator">!</span> <span class="token operator">/</span> b<span class="token operator">!</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token operator">!</span> 这个公式求出每个质因子的次数。 n<span class="token operator">!</span> 中p的次数是 n <span class="token operator">/</span> p <span class="token operator">+</span> n <span class="token operator">/</span> p<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> n <span class="token operator">/</span> p<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
        <span class="token number">3.</span> 用高精度乘法将所有质因子相乘  
      
    <span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>     <span class="token comment">// 存储所有质数  </span>
    <span class="token keyword">int</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 存储每个质数的次数  </span>
    <span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 存储每个数是否已被筛掉</span>

    <span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>      <span class="token comment">// 线性筛法求素数  </span>
•        <span class="token punctuation">{</span>  
•            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
•            <span class="token punctuation">{</span>  
•                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  
•                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
•                <span class="token punctuation">{</span>  
•                    st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
•                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  
•                <span class="token punctuation">}</span>  
•            <span class="token punctuation">}</span>  
•        <span class="token punctuation">}</span>  
​  
​  
•          
•        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span>       <span class="token comment">// 求n！中的次数  </span>
•        <span class="token punctuation">{</span>  
•            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
•            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>  
•            <span class="token punctuation">{</span>  
•                res <span class="token operator">+=</span> n <span class="token operator">/</span> p<span class="token punctuation">;</span>  
•                n <span class="token operator">/=</span> p<span class="token punctuation">;</span>  
•            <span class="token punctuation">}</span>  
•            <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
•        <span class="token punctuation">}</span>  
​  
​  
•          
•        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>       <span class="token comment">// 高精度乘低精度模板  </span>
•        <span class="token punctuation">{</span>  
•            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>  
•            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
•            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>  
•            <span class="token punctuation">{</span>  
•                t <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>  
•                c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
•                t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>  
•            <span class="token punctuation">}</span>  
•          
•            <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span>  
•            <span class="token punctuation">{</span>  
•                c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
•                t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>  
•            <span class="token punctuation">}</span>  
•          
•            <span class="token keyword">return</span> c<span class="token punctuation">;</span>  
•        <span class="token punctuation">}</span>  
•        

    <span class="token function">get_primes</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 预处理范围内的所有质数  </span>
      
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>     <span class="token comment">// 求每个质因数的次数  </span>
    <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> p <span class="token operator">=</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
      
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>  
    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>     <span class="token comment">// 用高精度乘法将所有质因子相乘  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>  
            res <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>
<h2 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h2><p>思路：</p>
<ol>
<li><p>状态表示：需要几维的动态规划</p>
<ul>
<li><p>集合 所有选法</p>
<ol>
<li><p>所有选法</p>
</li>
<li><p>条件</p>
<ul>
<li><p>只从前i个物品中选择</p>
</li>
<li><p>总体积&lt;=j</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>属性 最大值？最小值?……</p>
</li>
</ul>
</li>
<li><p>状态计算：怎么得到结果</p>
</li>
</ol>
<h3 id="01背包-每个物品只能用一次"><a href="#01背包-每个物品只能用一次" class="headerlink" title="01背包 每个物品只能用一次"></a>01背包 每个物品只能用一次</h3><p>一维优化;</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">///f[N][N] 表示前i个物品，j的容量下的最大值  </span>
进行压缩，因为每次更新i是时只用到了i<span class="token operator">-</span><span class="token number">1</span> 这个位置的数据，所以可以使用滚动数组，实现每次i<span class="token operator">-</span><span class="token number">1</span>到i的更新<span class="token punctuation">;</span>  
所以编成  f<span class="token punctuation">[</span>N<span class="token punctuation">]</span> 表示j的背包容量下的最大值<span class="token punctuation">;</span>  
j<span class="token operator">=</span><span class="token number">0</span>的结果都为<span class="token number">0</span> 所以可以跳过<span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">0</span>的结果也都为<span class="token number">0</span><span class="token punctuation">,</span>同时，如果当前的背包容量不足以把当前物品装入也不需要进行更新了，所以小于当前背包容量的就不要考虑了<span class="token punctuation">;</span>  
不能更新也就是f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> 所以可以直接去掉，变为  f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍览物品  </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//m为最大背包容量  </span>
        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多状态dp"><a href="#多状态dp" class="headerlink" title="多状态dp"></a>多状态dp</h2><p>示例：<br><a href="https://www.lanqiao.cn/problems/2223/learning/?subject_code=2&amp;group_code=4&amp;match_num=13&amp;match_flow=2&amp;origin=cup">魔法背包</a><br><a href="https://www.lanqiao.cn/problems/2224/learning/?subject_code=2&amp;group_code=4&amp;match_num=13&amp;match_flow=2&amp;origin=cup">修路</a><br><a href="https://www.lanqiao.cn/problems/3542/learning/?subject_code=2&amp;group_code=4&amp;match_num=14&amp;match_flow=1&amp;origin=cup">魔法阵</a><br>存在多个状态，其中每一个状态内的转移是正常转移的，而状态之间是需要满足条件进行转移的。</p>
<h3 id="完全背包-每件物品有无限个"><a href="#完全背包-每件物品有无限个" class="headerlink" title="完全背包 每件物品有无限个"></a>完全背包 每件物品有无限个</h3><p>01背包：从f[i-1]转过来 f[i,h]=max(f[i-1,j],f[i-1,j-v]+w[i]) //优化后:f[j]=max(f[j],f[v-v[i]]+w[i])</p>
<p>完全背包：从f[i]转移 f[i,j]=max(f[i-1,j],f[i,j-v[i]]+w[i])</p>
<p>每次更新：k是每个物品可以有多少个，i是前i个物品，j是当前背包容量</p>
<p>f[i][j]=max(f[i][j],f[i-j][j-v[i]*k]+w[i]*k</p>
<p>优化思路：</p>
<p><img src="file://D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230521084412853.png?lastModify=1694256669" alt="image-20230521084412853"></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">​  
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// for (int k = 0 ; k * v[i] &lt;= j ; k ++) {</span>
            <span class="token comment">//     f[i][j] = max(f[i][j],f[i - 1][j - k *v[i]] + k * w[i]);</span>
            <span class="token comment">// }</span>
            <span class="token comment">//f[i][j] = max(f[i-1][j],f[i-1][j-v]+w,f[i-1][j-2v] + 2w , ......)</span>
            <span class="token comment">//f[i][j-v] = max(        ,f[i-1][j-v],f[i-1][j-2v]+2w,....)</span>
            <span class="token comment">//错位相减</span>
            <span class="token comment">// f[i][j] - f[i][j-v] = w</span>
            <span class="token comment">// f[i][j] = f[i][j-v] + w</span>
            <span class="token comment">//所以 </span>
            <span class="token comment">//f[i][j] = max(f[i-1][j],f[i][j-v] + w)</span>
            <span class="token comment">//根据递推，每一个max后面那个数都等于上一个的f[i][j-v] + w</span>
            <span class="token comment">//前提是要大于v[i]等式才成立</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前一个转移</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

一维优化：删去一维

<span class="token comment">//f[i][j]=f[i-1][j];  f[i]==f[i-1] 直接删去  </span>
​  
<span class="token comment">//if(j&gt;=v[i]){ 只有当前背包容量大于当前的物品时才能装入，采用从v[i]遍历背包容量  </span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token comment">//f[i,j]=max(f[i-1,j],f[i,j-v[i]]+w[i])  </span>
        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">//}  </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>01和完全背包区别：</p>
<p>背包容量的遍历不同</p>
<p>01:</p>
<p> for(int j=m;j&gt;=v[i];j–)//m为最大背包容量<br>        f[j]=max(f[j],f[j-v[i]+w[i]]);</p>
<p>完全：</p>
<p>for(int j=v[i],j&lt;=m;j++)<br>        f[j]=max(f[j],f[j-v[i]]+w[i]);</p>
<h3 id="多重背包问题-优化"><a href="#多重背包问题-优化" class="headerlink" title="多重背包问题 优化"></a>多重背包问题 优化</h3><p>每个物品有个数限制，但不是无限</p>
<ol>
<li><p>状态表示：f[ i ] [ j ]</p>
<ul>
<li><p>集合</p>
</li>
<li><p>属性</p>
</li>
</ul>
</li>
<li><p>状态计算：</p>
<p> f[i][j]=max(f[i-1][j-v[i]*k]+w[i]*k)  k有范围</p>
<p> 优化：将数量打包，比如打包成1个物品一起，2个物品一起……</p>
<p> 之后用01背包做即可</p>
</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span>  </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  
    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token comment">//容量，价值  </span>
        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>  
        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//用来打包  </span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>  
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>  
            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token operator">*</span>k<span class="token punctuation">;</span>  
            w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token operator">*</span>k<span class="token punctuation">;</span>  
            s<span class="token operator">-=</span>k<span class="token punctuation">;</span>  
            k<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>  
            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token operator">*</span>s<span class="token punctuation">;</span>  
            w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token operator">*</span>s<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  
        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><p>递归方程有线性关系，具有求的先后顺序</p>
<p>具体有各种子序列</p>
<p>建议看leetcode101 里面的比较好</p>
<h1 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h1><p>给出两个数字 a, b</p>
<p>统计a到b 中每一位 的0~9的出现次数</p>
<p>思路：分情况讨论 + 前缀和思想</p>
<p><img src="file://D:/typora%E7%94%A8%E5%9B%BE/Screenshots/image-20230524164849922.png?lastModify=1694256669" alt="image-20230524164849922"></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span>  
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span>  </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
  
<span class="token keyword">int</span> <span class="token function">dgt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">// 计算整数n有多少位  </span>
<span class="token punctuation">{</span>  
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">++</span> res<span class="token punctuation">,</span> n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">int</span> <span class="token function">cnt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment">// 计算从1到n的整数中数字i出现多少次   </span>
<span class="token punctuation">{</span>  
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token function">dgt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 从右到左第j位上数字i出现多少次，所有位上的次数加起来就是i出现的总次数  </span>
    <span class="token punctuation">{</span>  
        <span class="token comment">// l和r是第j位左边和右边的整数 (视频中的abc和efg); dj是第j位的数字  </span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> n <span class="token operator">/</span> p <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">%</span> p<span class="token punctuation">,</span> dj <span class="token operator">=</span> n <span class="token operator">/</span> p <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  
        <span class="token comment">// 计算第j位左边的整数小于l (视频中xxx = 000 ~ abc - 1)的情况  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> res <span class="token operator">+=</span> l <span class="token operator">*</span> p<span class="token punctuation">;</span>   
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">;</span> <span class="token comment">// 如果i = 0, 左边高位不能全为0(视频中xxx = 001 ~ abc - 1)，并且&amp;&amp;l表示这时i也不能在最高位出现。  </span>
        <span class="token comment">// 计算第j位左边的整数等于l (视频中xxx = abc)的情况  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>dj <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">||</span> l<span class="token punctuation">)</span> <span class="token punctuation">)</span> res <span class="token operator">+=</span> p<span class="token punctuation">;</span>  <span class="token comment">//(i || l)表示i=0时，i不能出现在最高位（即l不能为0），因为这种数是不存在的  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>dj <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">||</span> l<span class="token punctuation">)</span> <span class="token punctuation">)</span> res <span class="token operator">+=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//(i || l)表示i=0时，i不能出现在最高位（即l不能为0），因为这种数是不存在的  </span>
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token punctuation">,</span> a<span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">cnt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cnt</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>  
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="数位DP-重要"><a href="#数位DP-重要" class="headerlink" title="数位DP(重要)"></a>数位DP(重要)</h1><p>DP时间复杂度：状态个数*转移个数</p>
<p>相当于往空里填数字</p>
<p><strong>知识点1：</strong>mask集合</p>
<blockquote>
<p>集合和数字的替换，使用二进制转化集合来实现某些数字不选择</p>
<p>例： 10011 从高到低依次代表者 4 3 2 1 0 这几个数字选不选，1表示选择，那么，</p>
<p>集合mask &gt;&gt; d &amp; 1 d为这个数字，进行这样的运算就可以判断mask 对应的d数字这个位置上是1还是0</p>
<p>同理 mask|(1&lt;&lt;d) 将1移位到mask上 代表d这个数字的位置，进行或运算，即可将d加入集合中</p>
</blockquote>
<h2 id="模板：-1"><a href="#模板：-1" class="headerlink" title="模板："></a>模板：</h2><p>将问题转化为填数字受限问题：</p>
<blockquote>
<p>递归中的变量：</p>
<p>i 当前下标 当 i == 最大长度时，根据是否满足条件返回 0 或 1</p>
<p>mask 集合 代表着一种状态的记录，比如某位填了哪些数字，或者截止到上一位已经积累的某个要求满足条件的数据是多少，这个一般是变化的</p>
<p>is_limit 前一个位置是否收到原来的数字的限制：123 第一个填1 了后面一定受限，同时如果前面受限了，那么后面所有的都受限</p>
<p>is_num 前一个位置是否填数字，如果前一个没填数字，那么这一位无法填0了，如果填了可以填任意数字，当0对题目没影响时，可以不用这个东西</p>
</blockquote>
<p><strong>模板公式：</strong></p>
<ol>
<li><p>求出最大长度和memo，记忆数组，并初始化为-1 memo数组的一维是长度，二维是能包含所有枚举的最大长度，具体问题具体分析</p>
</li>
<li><p>递归函数</p>
<ul>
<li><p>结束递归条件<code>i == m 返回是否满足 满足为1 满足为0</code></p>
</li>
<li><p>记忆化剪枝：当is_limit 和 is_num 只有一个为真时，后面的数字也是可以任意填的，所以可以剪枝</p>
</li>
<li><p><code>!is_limit &amp;&amp; is_num &amp;&amp; memo[i][mask] != -1 return memo[i][mask]</code></p>
</li>
<li><p>设出res = 0 即为我们要求的答案</p>
</li>
<li><p>(可能不存在这种情况)这一位不填数字：<code>res = (i+1 , mask不改变, false , false)</code></p>
</li>
<li><p>求出这一位数字可以填写的上下界：根据is_limit来求 <code>up = is_limit ? s[i] - '0' : 9</code></p>
</li>
<li><p>枚举这一位数字，进行递归 (条件判断不一定需要)</p>
</li>
<li><p><code>for (int d = 初始 ; d &lt;= up ; d++) if(当前这个数字没使用) 把这个数字加入mask</code></p>
</li>
<li><p>循环内：<code>res = (i+1 , mask 的改变 , is_limit &amp;&amp; d == up , is_num的变化)</code></p>
</li>
<li><p>当is_limit 和 is_num 只有一个为真时将答案加入memo中 <code>if(!is_limit &amp;&amp; is_num) memo[i][mask] = res</code></p>
</li>
<li><p>返回res</p>
</li>
</ul>
</li>
</ol>
<p><strong>例题：</strong></p>
<ol>
<li><a href="https://leetcode.cn/problems/numbers-with-repeated-digits/description/">1012. 至少有 1 位重复的数字 - 力扣（Leetcode）</a></li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  
<span class="token keyword">public</span><span class="token operator">:</span>  
    <span class="token keyword">int</span> <span class="token function">numDupDigitsAtMostN</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">//将n转化为字符串，方便枚举每一位置上的数字  </span>
        <span class="token keyword">auto</span> s <span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用auto 防止爆int  </span>
        <span class="token comment">//记忆化数组，当dp到相同的情况时直接可以使用以前的的出来的  </span>
        <span class="token comment">//第一维为长度  </span>
        <span class="token comment">//第二位代表可以选择的数字有哪些  </span>
        <span class="token comment">//这题从高到低每一位代表着 9876543210 所以需要移动到第11位，才能出现10个数字都选择的情况  </span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token function">memset</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token keyword">sizeof</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1表示没有计算过这种情况  </span>
        <span class="token comment">//递归函数  </span>
        function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token punctuation">,</span><span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_limit <span class="token punctuation">,</span> <span class="token keyword">bool</span> is_num<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>  
            <span class="token comment">//i 下标  </span>
            <span class="token comment">//mask 是记录当前已经选择数字的集合  </span>
            <span class="token comment">//is_limit 代表当前位置是否受到n这个数字的制约，比如不能超过某个数字  </span>
            <span class="token comment">//is_num 代表前一位是否填数字了，这个是用来判断0是否可填的，如果0可不可填都无所谓就可以不使用这个了  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token comment">//如果dp到了最后一个位置了，要返回是否得到合法数字了  </span>
                 <span class="token keyword">return</span> is_num<span class="token punctuation">;</span><span class="token comment">//合法数字一定为true，因为长度到了前一个一定要填数字的  </span>
            <span class="token comment">//如果没收到限制或者没收到前一个的填数字的限制，后面可以任意填了，所以必定会有很小重复性的，所以可以直接返回  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_limit <span class="token operator">&amp;&amp;</span> is_num <span class="token operator">&amp;&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mask<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//前一个数字没填，这个数字当然也可以不填  </span>
                res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> mask <span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token comment">//继续递归  </span>
            <span class="token punctuation">}</span>  
            <span class="token comment">//如果当前数字没收到限制，那么当然可以继续任意填  </span>
            <span class="token comment">//如果收到限制了，那么最多只能填当前这一位置上的数字  </span>
            <span class="token keyword">int</span> up <span class="token operator">=</span> is_limit <span class="token operator">?</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">;</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> is_num <span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> up <span class="token punctuation">;</span> <span class="token operator">++</span>d<span class="token punctuation">)</span>  
                <span class="token comment">//枚举可以填入的数据，前一位没填数字 ，那么这一位只能从1开始，否则可以从0开始，那么可以填0，如果没被限制，那么要小心是否是第一位了，所以从1开始  </span>
                <span class="token comment">//当d == up 时，  </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&gt;&gt;</span> d <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// d 不在 mask 中  </span>
                <span class="token comment">//d != up 时，所有的后面的位置都不会受限  </span>
                <span class="token comment">//d == up 时，如果前一位已经受限了，那么后面还会接着受限  </span>
                    res <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mask <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> is_limit <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> up<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
              
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_limit <span class="token operator">&amp;&amp;</span> is_num<span class="token punctuation">)</span>  
            <span class="token comment">//如果没收到限制或者没收到前一个的填数字的限制，后面可以任意填了  </span>
                memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>  
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个数字肯定受限了  </span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2.</span> <span class="token punctuation">[</span><span class="token number">6396.</span> 统计整数数目 <span class="token operator">-</span> 力扣（Leetcode）<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token comment">//leetcode.cn/problems/count-of-integers/description/) 一种变形，好好理解</span>
    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span><span class="token operator">:</span>  
        <span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>  
        <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string s <span class="token punctuation">,</span> <span class="token keyword">int</span> min_sum <span class="token punctuation">,</span> <span class="token keyword">int</span> max_sum<span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token comment">//memo数组最大有 n个9 或者是被迫的这个最大数字 记得 + 1  </span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">*</span>n<span class="token punctuation">,</span>max_sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token function">memset</span><span class="token punctuation">(</span>memo <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment">//因为0无影响，所以is_num可以不要了  </span>
            <span class="token comment">//sum 就是mask  </span>
            function <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token punctuation">,</span> <span class="token keyword">int</span> sum <span class="token punctuation">,</span> <span class="token keyword">bool</span> is_limit<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>  
            <span class="token comment">//1.非法情况  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> max_sum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结束递归，sum是一直增加的，后面无法减小的  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> sum <span class="token operator">&gt;=</span> min_sum<span class="token punctuation">;</span><span class="token comment">//结束递归的时候如果数字合法且满足  </span>
            <span class="token comment">//少了一个is_num,只要后面不受限制，那么，后面一定重复  </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_limit <span class="token operator">&amp;&amp;</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment">//计算所要的答案，也就是计数  </span>
            <span class="token keyword">int</span> up <span class="token operator">=</span> is_limit <span class="token operator">?</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//上界  </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> up <span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举位置上的数字  </span>
                <span class="token comment">//d == up的时候，如果前面受限了，后面继续受限，如果前面没受限，那么后面也不受限  </span>
                res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> sum <span class="token operator">+</span> d  <span class="token punctuation">,</span> is_limit <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> up<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_limit<span class="token punctuation">)</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token punctuation">;</span>  <span class="token comment">//与上面保持一致  </span>
            <span class="token keyword">return</span> res <span class="token punctuation">;</span><span class="token comment">//返回答案  </span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>  
            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始状态下，一定受限  </span>
        <span class="token punctuation">}</span>  
        <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>string num1<span class="token punctuation">,</span> string num2<span class="token punctuation">,</span> <span class="token keyword">int</span> min_sum<span class="token punctuation">,</span> <span class="token keyword">int</span> max_sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">//转化：  </span>
            <span class="token comment">/*  
                计算 &lt;= num2 的合法数字a和 &lt;= num2 的合法数字b 答案就等于 a - b  
                可以直接计算 &lt;= num1 的合法数字，最后单独判定 num1是否合法  
                套模板： mask 在这里指的是各位数字之和  
                递归结束条件：  
                sum &gt; max_sum 直接返回0 ，不成立，因为sum不能减小，所以继续递归下去也没有用  
                递归到就结束的时候，如果 sum &gt;= min_sum 那么就是满足的，可以直接返回1了  
                前导零对和没有影响，所以isnum可以不用  
                最后：取模运算  
                (a+b)mod m = ((a mod m) + (b mod m )) mod m  
                (a*b)mode m = ((a mod m) * (b mod m )) mod m  
            */</span>  
            <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>num2 <span class="token punctuation">,</span> min_sum <span class="token punctuation">,</span>max_sum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cmp</span><span class="token punctuation">(</span>num1 <span class="token punctuation">,</span> min_sum <span class="token punctuation">,</span>max_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
            <span class="token comment">//最后一个num1单独判断，因为上面计算的是 num1 &lt; x &lt;= num2的，和前缀和一样  </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> num1<span class="token punctuation">)</span> sum <span class="token operator">+=</span> c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>  
            ans <span class="token operator">+=</span> min_sum <span class="token operator">&lt;=</span> sum <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&lt;=</span> max_sum <span class="token punctuation">;</span>  
            <span class="token keyword">return</span> ans <span class="token operator">%</span> mod<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="状压DP-状态压缩-动态规划-利用二进制把状态记录成二进制数"><a href="#状压DP-状态压缩-动态规划-利用二进制把状态记录成二进制数" class="headerlink" title="状压DP 状态压缩+动态规划 利用二进制把状态记录成二进制数"></a>状压DP 状态压缩+动态规划 利用二进制把状态记录成二进制数</h2><p>291 91</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="树形DP-各层选择取最大值"><a href="#树形DP-各层选择取最大值" class="headerlink" title="树形DP 各层选择取最大值"></a>树形DP 各层选择取最大值</h2><p>将状态分为当前节点选择和不选择</p>
<p><a href="https://www.acwing.com/problem/content/287/">285. 没有上司的舞会 - AcWing题库</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span>  </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">6010</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> happy<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> n<span class="token punctuation">;</span>  
<span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token comment">/*e存的是编号1*/</span> <span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">,</span> idx <span class="token punctuation">,</span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">bool</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token comment">/*  
    状态定义：dp[i][1] dp[i][0] 当前节点选不选  
    状态转移 ： dp[i][0] = sum(子树)   子树有可以分为选与不选  取最大值  
                dp[i][1] = sum(下一层子树不选)    
    属性： 最大值  
   
*/</span>  
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>  
    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token comment">//如果当前的节点要选择的话，要初始化数据  </span>
        dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> happy<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token comment">//遍历u的子树  </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token comment">//递归到最低层，实现一层层的求和  </span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment">//当前不选，则是子树的最大值  </span>
            dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment">//当前选择，那么就是下一层子树不选  </span>
            dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>happy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">int</span> a <span class="token punctuation">,</span> b <span class="token punctuation">;</span>  
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  
        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">while</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token operator">++</span><span class="token punctuation">;</span>  
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h2><blockquote>
<p>通过表示出状态的转换方式即可自动得到答案</p>
</blockquote>
<h2 id="DP行-x2F-列问题"><a href="#DP行-x2F-列问题" class="headerlink" title="DP行/列问题"></a>DP行/列问题</h2><p><a href="https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/">6456. 矩阵中严格递增的单元格数 - 力扣（Leetcode）</a></p>
<h3 id="例题：股票买卖问题"><a href="#例题：股票买卖问题" class="headerlink" title="例题：股票买卖问题"></a>例题：股票买卖问题</h3><p><strong>含有冷却时间需要用四个状态，正常两个即可，具体问题具体分析</strong></p>
<ol>
<li><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/">714. 买卖股票的最佳时机含手续费 - 力扣（Leetcode）</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/solutions/2283535/zhuang-tai-ji-dp-by-hardcore-dubinsky348-1qew/">309. 最佳买卖股票时机含冷冻期 - 力扣（Leetcode）</a></p>
</li>
</ol>
<h2 id="通过stoi-和隔板法实现枚举每一个数字的任意子子串"><a href="#通过stoi-和隔板法实现枚举每一个数字的任意子子串" class="headerlink" title="通过stoi 和隔板法实现枚举每一个数字的任意子子串"></a>通过stoi 和隔板法实现枚举每一个数字的任意子子串</h2><p>stoi substr to_string 的妙用</p>
<p><a href="https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/">6441. 求一个整数的惩罚数 - 力扣（LeetCode）</a></p>
<h2 id="子列和-x2F-字串问题："><a href="#子列和-x2F-字串问题：" class="headerlink" title="子列和/字串问题："></a>子列和/字串问题：</h2><ol>
<li><p>求任意子列的乘积最大 <a href="https://leetcode.cn/problems/maximum-strength-of-a-group/">6393. 一个小组的最大实力值 - 力扣（Leetcode）</a></p>
</li>
<li><p>一个字符串匹配另一个字典求最大匹配长度问题：<a href="https://leetcode.cn/problems/extra-characters-in-a-string/">6394. 字符串中的额外字符 - 力扣（Leetcode）</a></p>
</li>
<li><p>反转01得到相等字符串问题：<a href="https://leetcode.cn/problems/minimum-cost-to-make-all-characters-equal/">6455. 使所有字符相等的最小成本 - 力扣（Leetcode）</a></p>
</li>
</ol>
<h1 id="暴力枚举法"><a href="#暴力枚举法" class="headerlink" title="暴力枚举法"></a>暴力枚举法</h1><p>使用于组合的数量少，但是需要找到最合适的组合的题目<br>例题<br><a href="https://leetcode.cn/problems/minimum-moves-to-spread-stones-over-grid/submissions/">3*3</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法，数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出Spring</title>
    <url>/2024/06/07/04/</url>
    <content><![CDATA[<h1 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h1><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul>
<li>@Nullable 注解的主要作用是为开发者和静态分析工具提供信息，指示某个字段、方法返回值或参数可以为 null。具体来说，它会：  帮助静态分析工具：静态分析工具可以利用 @Nullable 注解来检查代码中是否正确处理了可能为 null 的情况，并在发现潜在问题时发出警告。增强代码可读性：开发者可以通过查看注解来了解哪些变量或返回值可能为 null，从而在使用这些变量时进行适当的空值检查。文档生成：在生成文档时，@Nullable 注解可以帮助其他开发者理解哪些字段、方法返回值或参数可以为 null。它不会直接阻止 NullPointerException 的发生，但能帮助开发者在编写和维护代码时进行适当的空值检查，从而减少空指针异常的发生</li>
<li>Bean相关<ul>
<li>@Autowired和@Resource<br>  @Autowired默认注入方式是byType，也就是优先根据接口类型去匹配并注入Bean<br>  @Resource默认是byName注入的，如果不能通过name匹配会变为byType，可以使用只当以下两个属性其中之一来确定，不建议同时指定两个属性</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>@RestController</code>注解是<code>@Controller</code>和<code>@ResponseBody</code>,会将函数的返回值直接填入HTTP响应体中，是REST风格的控制器</li>
<li>@Scope(““)生命作用域：<ul>
<li>singleton单例作用域，默认全是单例</li>
<li>prototype 每次请求都创建一个新的实例</li>
<li>request 每次HTTP请求都会创建一个bean，在当前HTTP request有效</li>
<li>session 在当前的HTTP session中有效</li>
</ul>
</li>
<li><code>@SpringBootApplication</code> 是<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>&nbsp;注解的集合。<ul>
<li><code>@EnableAutoConfiguration</code> 启动自动装配</li>
<li><code>@ComponentScan</code>：扫描注解标记的组件，默认送奥妙该类所在的包下的所有的类</li>
<li><code>@Configuration</code> 允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</li>
</ul>
</li>
<li>读取配置信息并且与bean绑定<ul>
<li><code>@Value("${property}")</code>&nbsp;读取比较简单的配置信息</li>
<li><code>@ConfigurationProperties</code>读取配置信息并与 bean 绑定。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"library"</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">LibraryProperties</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotEmpty</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Setter</span>
    <span class="token annotation punctuation">@Getter</span>
    <span class="token annotation punctuation">@ToString</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  省略getter<span class="token operator">/</span>setter
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><ul>
<li>Bean的作用域<ol>
<li>singleton单例：Spring中的bean默认都是单例的</li>
<li>prototype：每次获取都会创建一个新的Bean，也就是连续两次获取Bean都会是不同的Bean实例</li>
<li>request：每一次HTTP请求都会产生一个新的bean，bean在当前HTTP request内生效</li>
<li>sesson：在HTTP的session中有效，session是多个HTTP之间使用的连续会话</li>
<li><strong>application/global-session</strong>&nbsp;（仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。</li>
<li>websocket：每一次WebSocket都会产生一个新的bean<br>配置方式：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li>Bean的生命周期<ol>
<li>创建Bean的实例：Bean容器会先找到Bean的定义，然后通过Java反射API来创建Bean的实例</li>
<li>Bean属性赋值/填充：为Bean设置相关属性和依赖，例如填入@Autowired等注解注入的对象，setter方法和构造函数</li>
<li>Bean初始化:<img src="/2024/06/07/04/Bean%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="Bean的初始化"></li>
<li>销毁Bean：把Bean的销毁方法记录下来，将爱需要销毁Bean或者销毁容器时，调用这些方法去释放Bean所持有的资源<ul>
<li>如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li>
<li>如果 Bean 在配置文件中的定义包含 <code>destroy-method</code> 属性，执行指定的 Bean 销毁方法。或者，也可以直接通过<code>@PreDestroy</code> 注解标记 Bean 销毁之前执行的方法。</li>
</ul>
</li>
</ol>
</li>
</ul>
<p><img src="/2024/06/07/04/Bean%E7%9A%84%E5%91%A8%E6%9C%9F.png" alt="|475"></p>
<hr>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h4><p>Spring AOP实现方式有动态代理、字节码等操作方式</p>
<h4 id="常见术语："><a href="#常见术语：" class="headerlink" title="常见术语："></a>常见术语：<img src="/2024/06/07/04/AOP%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD.png"></h4><h4 id="AspectJ定义的通知类型"><a href="#AspectJ定义的通知类型" class="headerlink" title="AspectJ定义的通知类型"></a>AspectJ定义的通知类型</h4><ul>
<li>Before 前置通知：在目标方法调用之前，所以获得不到目标方法的具体东西</li>
<li>After 后置通知：目标方法调用之后，类似于finally，无论方法是否成功都会调用</li>
<li>AfterReturing：目标方法调用之后，返回结果之后触发，只有方法完成成功会调用</li>
<li>AfterThrowing：异常通知，出现异常时触发，类似catch</li>
<li>Around环绕通知：可以拿到目标对象<br>对于多个切面的执行顺序可以通过@Order(数字) 来指定</li>
</ul>
<h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。<img src="/2024/06/07/04/MVC.png"><br>核心组件：</p>
<ul>
<li>**<code>DispatcherServlet</code>**“：核心中央处理器，用汉语接受请求、分发请求，给予客户端响应</li>
<li>HandlerMapping：处理器映射器，根据URL去匹配查找能处理的Handler，并将涉及的拦截器和Handler一起封装</li>
<li>HandlerAdapter：处理器适配器，根据HandlerMapping找到的Handler，设配置型对应的Handler</li>
<li>Handler：请求处理器</li>
<li>ViewResolver：视图解析器，根据Handler返回的逻辑视图/试图，解析并渲染真正的试图，传递给DispatcherServlet响应客户端。<br><img src="/2024/06/07/04/MVC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png"><br><strong>流程说明（重要）：</strong></li>
</ul>
<ol>
<li>客户端（浏览器）发送请求， <code>DispatcherServlet</code>拦截请求。</li>
<li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code> 。<code>HandlerMapping</code> 根据 URL 去匹配查找能处理的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器） ，并会将请求涉及到的拦截器和 <code>Handler</code> 一起封装。</li>
<li><code>DispatcherServlet</code> 调用 <code>HandlerAdapter</code>适配器执行 <code>Handler</code> 。</li>
<li><code>Handler</code> 完成对用户请求的处理后，会返回一个 <code>ModelAndView</code> 对象给<code>DispatcherServlet</code>，<code>ModelAndView</code> 顾名思义，包含了数据模型以及相应的视图的信息。<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li>
<li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li>
<li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li>
<li>把 <code>View</code> 返回给请求者（浏览器）</li>
</ol>
<hr>
<p><a href="https://javaguide.cn/system-design/framework/spring/spring-design-patterns-summary.html">Spring使用的设计模式：</a><br><img src="/2024/06/07/04/Spring%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png"></p>
<h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><p>ACID AID是手段，最终目的是保证C</p>
<h5 id="相关接口"><a href="#相关接口" class="headerlink" title="相关接口"></a>相关接口</h5><ul>
<li><p>**<code>PlatformTransactionManager</code>**：（平台）事务管理器，Spring 事务策略的核心。</p>
</li>
<li><p>**<code>TransactionDefinition</code>**：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。</p>
</li>
<li><p>**<code>TransactionStatus</code>**：事务运行状态。</p>
<ul>
<li>编程式事务 (推荐在分布式系统中使用)通过手动使用TransactionTemplate或者TranctionManager手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的颗粒度更小</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionTemplate <span class="token operator">=</span> transactionTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 这里是你的业务代码</span>
                    <span class="token comment">// 如果在这里抛出了异常，TransactionTemplate会捕获这个异常并回滚事务</span>
                    <span class="token comment">// 如果这里没有抛出异常，TransactionTemplate会提交事务</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>声明式事务：通过使用@Tranctional全注解<br>事务<br>Spring事务中有哪几种传播行为</li>
</ul>
<ol>
<li>**<code>TransactionDefinition.PROPAGATION_REQUIRED</code>**，默认，如果当前存在事务，就加入该事务，否则创建一个新的 事务</li>
<li><strong><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code></strong> 创建一个新事务，当前存在事务就把</li>
<li><strong><code>TransactionDefinition.PROPAGATION_NESTED</code></strong> 没有事务就创建一个事务左伟当前事务的嵌套事务，存在事务就和 1 相同</li>
<li><strong><code>TransactionDefinition.PROPAGATION_MANDATORY</code></strong> 如果存在事务就加入该事务，不存在事务就报错</li>
</ol>
<ul>
<li><strong><code>TransactionDefinition.PROPAGATION_SUPPORTS</code></strong>: 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><strong><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code></strong>: 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><strong><code>TransactionDefinition.PROPAGATION_NEVER</code></strong>: 以非事务方式运行，如果当前存在事务，则抛出异常。</li>
</ul>
<hr>
<p>Spring事务隔离级别</p>
<ol>
<li>**<code>TransactionDefinition.ISOLATION_DEFAULT</code>**：使用后端数据库的默认隔离等级，MySQL采用可重复读，Oracle默认采用读已提交</li>
<li>**<code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>**：最低的隔离等级，允许读已提交，可能会导致脏读，幻读和不可重复读</li>
<li>**<code>TransactionDefinition.ISOLATION_READ_COMMITTED</code>**：允许读并发事务已提交的事务，可以阻止脏读，但是幻读和不可重复仍有可能发生。</li>
<li>**<code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code>**：对同意字段多次读都是相同的，可以组织脏读和不可重复读，但是幻读仍然会发生</li>
<li>**<code>TransactionDefinition.ISOLATION_SERIALIZABLE</code>**： 序列化，最高的隔离级别，影响程序性能</li>
</ol>
<hr>
<h2 id="Transactional-rollbackFor-x3D-Exception-class-默认回滚是只有遇到RuntimeException运行时异常或者Error才进行回滚，而不会回滚，Checked-Exception-Checked-Exception是那些在编译时期就需要被处理的异常-，"><a href="#Transactional-rollbackFor-x3D-Exception-class-默认回滚是只有遇到RuntimeException运行时异常或者Error才进行回滚，而不会回滚，Checked-Exception-Checked-Exception是那些在编译时期就需要被处理的异常-，" class="headerlink" title="Transactional(rollbackFor = Exception.class)    默认回滚是只有遇到RuntimeException运行时异常或者Error才进行回滚，而不会回滚，Checked Exception(Checked Exception是那些在编译时期就需要被处理的异常)，"></a>Transactional(rollbackFor = Exception.class)<br>    默认回滚是只有遇到RuntimeException运行时异常或者Error才进行回滚，而不会回滚，Checked Exception(Checked Exception是那些在编译时期就需要被处理的异常)，<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// some business logic</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="Spirng-Data-JPA-Java-Persistence-API"><a href="#Spirng-Data-JPA-Java-Persistence-API" class="headerlink" title="Spirng Data JPA (Java Persistence API)"></a>Spirng Data JPA (Java Persistence API)</h3><p>是Java平台上的一个规范，用于将对象映射到关系数据库</p>
<h4 id="如何使用JPA在数据库中非持久化一个字段"><a href="#如何使用JPA在数据库中非持久化一个字段" class="headerlink" title="如何使用JPA在数据库中非持久化一个字段"></a>如何使用JPA在数据库中非持久化一个字段</h4><p>非持久化：也就是不被数据库存储<br>可以使用注解的方式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span> <span class="token comment">// 自增</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Transient</span> <span class="token comment">// 不映射到数据库</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> secrect<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="JPA审计功能"><a href="#JPA审计功能" class="headerlink" title="JPA审计功能"></a>JPA审计功能</h4><p>  审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。<br>  示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@MappedSuperclass</span>
<span class="token annotation punctuation">@EntityListeners</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">AuditingEntityListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAuditBase</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@CreatedDate</span> <span class="token comment">//该字段为创建时间字段，在insert时会插入</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JsonIgnore</span> <span class="token comment">//不进行序列化</span>
    <span class="token keyword">private</span> <span class="token class-name">Instant</span> createdAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@LastModifiedDate</span> <span class="token comment">//最后一次更新时间</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token keyword">private</span> <span class="token class-name">Instant</span> updatedAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@CreatedBy</span> <span class="token comment">//标记创建人</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//不允许更新</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> createdBy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@LastModifiedBy</span> <span class="token comment">//最后一次更新人</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> updatedBy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><h4 id="控制访问权限的方法："><a href="#控制访问权限的方法：" class="headerlink" title="控制访问权限的方法："></a>控制访问权限的方法：</h4><ul>
<li><code>permitAll()</code>：无条件允许任何形式访问，不管你登录还是没有登录。</li>
<li><code>anonymous()</code>：允许匿名访问，也就是没有登录才可以访问。</li>
<li><code>denyAll()</code>：无条件决绝任何形式的访问。</li>
<li><code>authenticated()</code>：只允许已认证的用户访问。</li>
<li><code>fullyAuthenticated()</code>：只允许已经登录或者通过 remember-me 登录的用户访问。</li>
<li><code>hasRole(String)</code> : 只允许指定的角色访问。</li>
<li><code>hasAnyRole(String)</code> : 指定一个或者多个角色，满足其一的用户即可访问。</li>
<li><code>hasAuthority(String)</code>：只允许具有指定权限的用户访问</li>
<li><code>hasAnyAuthority(String)</code>：指定一个或者多个权限，满足其一的用户即可访问。</li>
<li><code>hasIpAddress(String)</code> : 只允许指定 ip 的用户访问。</li>
</ul>
<hr>
<h1 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h1><h4 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate Validator"></a>Hibernate Validator</h4><p>使用时建议使用**<code>javax.validation.constraints</code>**中的注解<br>常见的注解：</p>
<ul>
<li><code>@NotEmpty</code> 被注释的字符串的不能为 null 也不能为空</li>
<li><code>@NotBlank</code> 被注释的字符串非 null，并且必须包含一个非空白字符</li>
<li><code>@Null</code> 被注释的元素必须为 null</li>
<li><code>@NotNull</code> 被注释的元素必须不为 null</li>
<li><code>@AssertTrue</code> 被注释的元素必须为 true</li>
<li><code>@AssertFalse</code> 被注释的元素必须为 false</li>
<li><code>@Pattern(regex=,flag=)</code>被注释的元素必须符合指定的正则表达式</li>
<li><code>@Email</code> 被注释的元素必须是 Email 格式。</li>
<li><code>@Min(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@Max(value)</code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@DecimalMin(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@DecimalMax(value)</code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@Size(max=, min=)</code>被注释的元素的大小必须在指定的范围内</li>
<li><code>@Digits(integer, fraction)</code>被注释的元素必须是一个数字，其值必须在可接受的范围内</li>
<li><code>@Past</code>被注释的元素必须是一个过去的日期</li>
<li><code>@Future</code> 被注释的元素必须是一个将来的日期</li>
<li><code>@Positive</code>和<code>@PositiveOrZero</code>验证数字必须为正数/包括0，同理 <code>@Negative</code>为负数</li>
</ul>
<hr>
<p>示例1：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"classId 不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> classId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"name 不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"((^Man$|^Woman$|^UGM$))"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"sex 值不在可选范围"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"sex 不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"email 格式不正确"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"email 不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token comment">//在需要校验的参数上使用@Valid，如果验证失败，会抛出我们在需要验证的参数上加上了`@Valid`注解，如果验证失败，它将抛出MethodArgumentNotValidException</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例2：验证请求参数，要求在类上加@Validated注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/person/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPersonByID</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"超过 id 的范围了"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用-Validated来指定不同的组别条件下使用不同的校验方法"><a href="#使用-Validated来指定不同的组别条件下使用不同的校验方法" class="headerlink" title="使用@Validated来指定不同的组别条件下使用不同的校验方法"></a>使用@Validated来指定不同的组别条件下使用不同的校验方法</h4><ol>
<li>定义组别接口，为空即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">CreateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 创建时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 更新时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>定义类的校验规则，根据组别来写<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">CreateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 创建时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 更新时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>不同的方法上的传参使用不同的组别来进行校验<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">CreateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 创建时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 更新时需要校验</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="全局处理Controller层异常"><a href="#全局处理Controller层异常" class="headerlink" title="全局处理Controller层异常"></a>全局处理Controller层异常</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 请求参数异常处理
     */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><ul>
<li><code>@Entity</code>声明一个类对应一个数据库实体。</li>
<li><code>@Table</code>&nbsp;设置表名</li>
<li><code>@Id</code>声明主键</li>
<li><code>GeneratedValue</code> 主键填充策略<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">GenerationType</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 使用一个特定的数据库表格来保存主键
     * 持久化引擎通过关系数据库的一张特定的表格来生成主键,
     */</span>
    <span class="token constant">TABLE</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     *在某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做"序列(sequence)"的机制生成主键
     */</span>
    <span class="token constant">SEQUENCE</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * 主键自增长
     */</span>
    <span class="token constant">IDENTITY</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     *把主键生成策略交给持久化引擎(persistence engine),
     *持久化引擎会根据数据库在以上三种主键生成 策略中选择其中一种
     */</span>
    <span class="token constant">AUTO</span> <span class="token comment">//默认</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>@Column</code> 设置字段<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置字段类型，并且增加一个默认值</span>
<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">"tinyint(1) default 1"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>@Transient</code> 声明不需要持久化的字段，也就是不需要保存进数据库</li>
<li>声明大字段:<ul>
<li>TEXT：用于存储大量的非二进制字符串（字符数据）。它可以存储最多 2^16 - 1 字符。  </li>
<li>BLOB：用于存储大量的二进制数据。它可以存储最多 2^16 - 1 字节的数据。  </li>
<li>MEDIUMTEXT 和 MEDIUMBLOB：这两种类型可以存储更多的数据，最多 2^24 - 1 字符或字节。  </li>
<li>LONGTEXT 和 LONGBLOB：这两种类型可以存储最多 2^32 - 1 字符或字节的数据，适用于非常大的数据。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Lob</span>
<span class="token comment">//指定 Lob 类型数据的获取策略， FetchType.EAGER 表示非延迟加载，而 FetchType.LAZY 表示延迟加载 ；</span>
<span class="token annotation punctuation">@Basic</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
<span class="token comment">//columnDefinition 属性指定数据表对应的 Lob 字段类型</span>
<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"content"</span><span class="token punctuation">,</span> columnDefinition <span class="token operator">=</span> <span class="token string">"LONGTEXT NOT NULL"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>创建枚举字段：自己创建枚举类，然后在枚举字段上加上@Enumerated注解即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Gender</span> <span class="token punctuation">{</span>
    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token string">"男性"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token string">"女性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Gender</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        value<span class="token operator">=</span>str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"role"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Enumerated</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Gender</span> gender<span class="token punctuation">;</span>
    省略getter<span class="token operator">/</span>setter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>审计: <del>待补</del></li>
<li>删除/修改数据:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Modifying</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">deleteByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>关联关系：<ul>
<li><code>@OneToOne</code>&nbsp;声明一对一关系</li>
<li><code>@OneToMany</code>&nbsp;声明一对多关系</li>
<li><code>@ManyToOne</code>&nbsp;声明多对一关系</li>
<li><code>@ManyToMany</code>&nbsp;声明多对多关系</li>
</ul>
</li>
</ul>
<h3 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a>JSON处理</h3><ul>
<li><code>@JsonIgnoreProperties</code> 用于类上</li>
<li><code>JsonIgnore</code> 用于属性上<br>进行序列化时，会忽略标记的值，示例：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>
    <span class="token string">"from"</span><span class="token operator">:</span> <span class="token string">"user1"</span><span class="token punctuation">,</span>
    <span class="token string">"to"</span><span class="token operator">:</span> <span class="token string">"user2"</span><span class="token punctuation">,</span>
    <span class="token string">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"text"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">"image"</span><span class="token operator">:</span> <span class="token string">"image_url"</span><span class="token punctuation">,</span>
    <span class="token string">"readed"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"date"</span><span class="token operator">:</span> <span class="token string">"2023-01-01 12:00:00"</span>
<span class="token punctuation">}</span>
<span class="token comment">//在类上的image字段上标记 @Ignore</span>
那么序列化之后的结果是
<span class="token punctuation">{</span>
    <span class="token string">"from"</span><span class="token operator">:</span> <span class="token string">"user1"</span><span class="token punctuation">,</span>
    <span class="token string">"to"</span><span class="token operator">:</span> <span class="token string">"user2"</span><span class="token punctuation">,</span>
    <span class="token string">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"text"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">"readed"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"date"</span><span class="token operator">:</span> <span class="token string">"2023-01-01 12:00:00"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>JSON扁平化：<code>@JsonUnwrapped</code>.</li>
</ul>
<h3 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><ul>
<li>@ActiveProfiles(“prod”) 作用于类上，用于生命生效的Spring配置文件<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TestBase</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>@Test</code> 声明为一个测试方法，<code>@Transactional</code>用于回滚测试数据， <strong>注意：</strong> @Transactional无法回滚MongoDB等NoSQL数据库，MongoDB支持副本集回滚事务</li>
</ul>
<h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转，将new 交由Spring框架管理，Bean的生命周期都由Spring调用<br>优点：</p>
<ol>
<li>资源变得容易管理：</li>
<li>降低对象之间的耦合和依赖</li>
</ol>
<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h3 id="SpringBootConfiguration注解"><a href="#SpringBootConfiguration注解" class="headerlink" title="@SpringBootConfiguration注解"></a>@SpringBootConfiguration注解</h3><p>里面包含三个注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token comment">// 标识这是一个配置类</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token comment">// 开启自动装配</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span> <span class="token comment">// 配置扫描路径，用来加载使用注解格式自定的Bean</span>
    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中@EnableAutoConfiguration注解又包括以下两种注解：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span> <span class="token comment">// 指定默认的包规则，也就是主程序类所在的包及其所有子包下的组件扫描到Spring容器中</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 引入AutoConfigurationImportSelector类，通过该类的selectImports方法去读取META-INF/spring.factories文件中配置的组件的全类名，并且按照一定的规则过滤掉不符合要求的组件的全类名，将剩余读取到的哥哥组件中的全类名集合返回给IOC容器，并将这些组件注册为bean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这是@AutoConfigurationPackage注解的内容</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件<br>2、调用List configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类<br>3、利用工厂加载 Map&lt;String, List&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件<br>4、从META-INF/spring.factories位置来加载一个文件。默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件，按照条件装配（ @ C o n d i t i o n a l ) 最终会按需配置 {按照条件装配（@Conditional)最终会按需配置}按照条件装配（@Conditional)最终会按需配置</p>
<h3 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h3><h5 id="EnableAutoConfiguration：实现自动装配的核心"><a href="#EnableAutoConfiguration：实现自动装配的核心" class="headerlink" title="@EnableAutoConfiguration：实现自动装配的核心"></a>@EnableAutoConfiguration：实现自动装配的核心</h5><p>先说结论：实际上就是从META-INF/spring.factories文件中获取需要进行自动装配的类，生成响应的Bean对象，然后交给Spring容器管理。这个和手写starter包很类似</p>
<h1 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h1><p>推荐文章：<a href="https://github.com/xuchengsheng/spring-reading/tree/master">xuchengsheng/spring-reading(github.com)</a></p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><code>Resource</code> 是Spring框架中用于简化和统一对底层资源（如文件、classpath 资源、URL 等）的访问的一个核心接口。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>classpath 是 Java 虚拟机（JVM）和 Java 编译器用来查找类文件和资源文件的路径。它指定了 Java 应用程序在运行时或编译时需要的类和资源的位置。classpath 可以包含目录、JAR 文件或 ZIP 文件。</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>统一的资源抽象，无论资源来自文件系统、classpath、URL还是其他，Resource提供统一的抽象</li>
<li>资源描述通过getDescription来获得底层资源提供的描述性信息</li>
<li>读取能力：Resource提供了getInputStream方法，允许直接读取资源内容而无需关心资源的实际来源。</li>
<li>存在与可读性：Resource提供了两个方法来确定资源是否存在以及是否可读。</li>
<li>开放性检查：isOpen()用来检查资源是否标识一个已经打开的流，有助于避免重复读取流资源。</li>
<li>文件访问：当资源代表一个文件夹中的文件时，可以通过getFile()直接访问该文件</li>
<li>Spring提供了多种Resource的实现</li>
</ol>
<h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 表示可以提供输入流的资源或对象的接口。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InputStreamSource</span> <span class="token punctuation">{</span>

	<span class="token comment">/**
	 * 返回基础资源内容的 InputStream。
	 * 期望每次调用都会创建一个新的流。
	 * 当我们考虑到像 JavaMail 这样的API时，这个要求尤为重要，因为在创建邮件附件时，JavaMail需要能够多次读取流。对于这样的用例，要求每个 getInputStream() 调用都返回一个新的流。
	 * @return 基础资源的输入流（不能为 null）
	 * @throws java.io.FileNotFoundException 如果基础资源不存在
	 * @throws IOException 如果无法打开内容流
	 */</span>
	<span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h2><p>Spring 框架中的一个关键接口，它定义了如何获取资源（例如类路径资源、文件系统资源或网页资源）的策略。这个接口是 Spring 资源加载抽象的核心，使得应用程序可以从不同的资源位置以统一的方式加载资源。<br>用于获取Resource对象的工厂。</p>
<h3 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>统一的资源加载，提供了一个标准化的方法来加载资源，不论资源是存放在类路径、文件系统、网络URL还是其他位置</li>
<li>资源位置解析：根据提供的资源字符串位置，可以确定资源的类型，并且为其创建响应的Resource实例</li>
<li>返回Resource实例：getResource(String location)方法，返回一个Resource对象，代表了指定位置的资源。</li>
<li>与ClassLoader交互：通过getClassLoader()方法返回其关联的ClassLoader</li>
<li>扩展性：<code>ResourceLoader</code>&nbsp;是一个接口，这意味着我们可以实现自己的资源加载策略，或者扩展默认的策略以满足特定需求。</li>
<li>内置实现与整合：Spring 提供了默认的&nbsp;<code>ResourceLoader</code>&nbsp;实现，如&nbsp;<code>DefaultResourceLoader</code>。但更重要的是，<code>org.springframework.context.ApplicationContext</code>&nbsp;也实现了&nbsp;<code>ResourceLoader</code>，这意味着 Spring 上下文本身就是一个资源加载器。</li>
</ol>
<h3 id="源码：-1"><a href="#源码：-1" class="headerlink" title="源码："></a>源码：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>
	<span class="token comment">//默认的classpath路径</span>
    <span class="token class-name">String</span> <span class="token constant">CLASSPATH_URL_PREFIX</span> <span class="token operator">=</span> <span class="token string">"classpath:"</span><span class="token punctuation">;</span>

    <span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultResourceLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">;</span>
    <span class="token comment">//自定义的协议</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProtocolResolver</span><span class="token punctuation">&gt;</span></span> protocolResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resourceCaches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
<span class="token comment">/* 
省略构造方法和一些不重要的方法
*/</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResourceCache</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> valueType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceCaches<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>valueType<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token comment">// 根据不同的路径参数来返回对应的Resource</span>
    <span class="token keyword">public</span> <span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token string">"Location must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProtocolResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Resource</span> resource<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"classpath:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"classpath:"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">isFileURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FileUrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">ProtocolResolver</span> protocolResolver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolResolver</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resource <span class="token operator">=</span> protocolResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> resource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Resource</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathContextResource</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathContextResource</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathResource</span> <span class="token keyword">implements</span> <span class="token class-name">ContextResource</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">ClassPathContextResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPathWithinContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Resource</span> <span class="token function">createRelative</span><span class="token punctuation">(</span><span class="token class-name">String</span> relativePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> pathToUse <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">applyRelativePath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathContextResource</span><span class="token punctuation">(</span>pathToUse<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>computeIfAbsent 是 Java 8 引入的 Map 接口中的一个默认方法。它用于在 Map 中查找指定键的值，如果该键不存在，则使用提供的映射函数计算该键的值，并将其插入到 Map 中，第二个参数可以传入lambda</p>
<h2 id="ResourcePatternResolver"><a href="#ResourcePatternResolver" class="headerlink" title="ResourcePatternResolver"></a>ResourcePatternResolver</h2><p>用于解析资源模式，支持通过模式匹配检索多个资源，支持通过模式匹配检索多个资源。</p>
<h3 id="主要功能-2"><a href="#主要功能-2" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li><p><strong>资源模式解析</strong></p>
<ul>
<li>通过<code>getResources(String locationPattern)</code>方法，支持使用通配符的资源模式，如<code>classpath*:com/example/**/*.xml</code>，用于检索匹配特定模式的多个资源。</li>
</ul>
</li>
<li><p><strong>资源获取</strong></p>
<ul>
<li>通过<code>getResources(Resource location)</code>方法，根据给定的资源对象，返回匹配的资源数组。这使得可以获取与特定资源相关联的其他资源，例如获取与给定类路径下的一个文件相关的所有资源。</li>
</ul>
</li>
<li><p><strong>多种资源位置支持</strong></p>
<ul>
<li>可以处理不同的资源位置，包括类路径（classpath）、文件系统、URL等。这使得应用程序能够以不同的方式组织和存储资源，而不影响资源的检索和加载。</li>
</ul>
</li>
<li><p><strong>灵活的资源加载</strong></p>
<ul>
<li>结合<code>ResourceLoader</code>的能力，<code>ResourcePatternResolver</code>允许在应用程序中以统一的方式加载各种资源，而无需关心底层资源的存储位置或形式。</li>
</ul>
</li>
<li><p><strong>通用资源操作</strong></p>
<ul>
<li>通过<code>Resource</code>接口，提供了对资源的通用操作，例如获取资源的URL、输入流、文件句柄等。</li>
</ul>
</li>
</ol>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 类路径匹配所有资源的伪 URL 前缀："classpath*:"
     * 这与 ResourceLoader 的类路径 URL 前缀不同，它检索给定名称（例如 "/beans.xml"）的
     * 所有匹配资源，例如在所有部署的 JAR 文件的根目录中。
     * 详见 org.springframework.core.io.ResourceLoader#CLASSPATH_URL_PREFIX
     */</span>
    <span class="token class-name">String</span> <span class="token constant">CLASSPATH_ALL_URL_PREFIX</span> <span class="token operator">=</span> <span class="token string">"classpath*:"</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 将给定的位置模式解析为 Resource 对象。
     * 应尽可能避免指向相同物理资源的重叠资源条目。结果应具有集合语义。
     * @param locationPattern 要解析的位置模式
     * @return 相应的 Resource 对象数组
     * @throws IOException 如果发生 I/O 错误
     */</span>
    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> locationPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="DocumentLoader"><a href="#DocumentLoader" class="headerlink" title="DocumentLoader"></a>DocumentLoader</h2><p>用于加载和解析 XML 文档</p>
<h3 id="主要功能-3"><a href="#主要功能-3" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>加载XML文档</li>
<li>解析XML文档</li>
<li>支持验证：通过指定验证模式（如 DTD 或 XML Schema 验证），可以确保文档的结构和内容符合规定的标准。</li>
<li>处理实体引用</li>
<li>错误处理</li>
</ol>
<h2 id="MetadataReader"><a href="#MetadataReader" class="headerlink" title="MetadataReader"></a>MetadataReader</h2><h3 id="一些重要概念"><a href="#一些重要概念" class="headerlink" title="一些重要概念"></a>一些重要概念</h3><p>内部类在编译后，其文件名格式为 OuterClass$InnerClass.class。</p>
<h3 id="主要功能-4"><a href="#主要功能-4" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>获取类的基本信息</li>
<li>获取类上的注解信息</li>
<li>获取方法上的注解信息</li>
<li>获取类的成员类信息</li>
<li>获取类的资源信息</li>
<li>获取类的超类信息</li>
</ol>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MetadataReaderFactory</span> <span class="token punctuation">{</span>
    <span class="token class-name">MetadataReader</span> <span class="token function">getMetadataReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">MetadataReader</span> <span class="token function">getMetadataReader</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h2><p><img src="/2024/06/07/04/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p>
<ol>
<li>过滤器来自Servlet，而拦截器属于Spring框架中的</li>
<li>请求进入容器-&gt;过滤器-&gt;Servlet-&gt;进入拦截器-&gt;执行Controller</li>
<li>过滤器是基于方法回调，doFilter来执行的，而拦截器则是基于动态代理实现的</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出Zookeeper</title>
    <url>/2024/06/17/08/</url>
    <content><![CDATA[<p><a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html">https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html</a></p>
<h2 id="ZooKeeper是什么"><a href="#ZooKeeper是什么" class="headerlink" title="ZooKeeper是什么"></a>ZooKeeper是什么</h2><p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，设计目标是将哪些复杂且容易出错的分布式一致性服务封装起来，构成一个高效的原语(原语的执行必须连续且不可分割)集，并以一系列简单易用的接口提供给用户时使用</p>
<h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><ol>
<li>命名服务：通过ZooKeepe的顺序节点生成全局唯一ID</li>
<li>数据发布/订阅：通过Watcher机制可以很方便的实现数据发布/订阅。其他机器可以通过监听ZooKeeper上的节点变化来实现配置的动态更新</li>
<li>分布式锁：通过创建唯一节点获得分布式锁，当获得锁的乙方执行完相关的代码或者挂掉后就释放，也需要使用Watcher机制</li>
</ol>
<h2 id="一些可以使用的场景"><a href="#一些可以使用的场景" class="headerlink" title="一些可以使用的场景"></a>一些可以使用的场景</h2><h3 id="手写rpc-注册中心-使用ZooKeeper作为注册中心手写RPC"><a href="#手写rpc-注册中心-使用ZooKeeper作为注册中心手写RPC" class="headerlink" title="[[手写rpc#注册中心|使用ZooKeeper作为注册中心手写RPC]]"></a>[[手写rpc#注册中心|使用ZooKeeper作为注册中心手写RPC]]</h3><h3 id="使用ZooKeeper作为分布式锁"><a href="#使用ZooKeeper作为分布式锁" class="headerlink" title="使用ZooKeeper作为分布式锁"></a>使用ZooKeeper作为分布式锁</h3><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="Data-model"><a href="#Data-model" class="headerlink" title="Data model"></a>Data model</h3><p>ZooKeeper数据模型使用层次化的多叉树形结构，每个节点上都可以存储数据，而且数据可以是数字、字符串、二进制序列。每个节点可以有N个子节点。每个数据节点叫做znode，是数据的最小单元，每个znode都有唯一的路径标识<br><strong>znode存储的数据大小上线为1M</strong>，避免将大数据保存在ZooKeeper中</p>
<h3 id="znode"><a href="#znode" class="headerlink" title="znode"></a>znode</h3><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><ul>
<li>持久(PERSISTENT)节点：一旦创建就存在即使ZooKeeper集群宕机，知道将其删除</li>
<li>临时(<strong>EPHEMERAL</strong>)节点：临时节点的声明周期与客户端会话绑定。会话节点小时则节点消失，临时节点只能作为叶子节点，不可创建属于自己的子节点。</li>
<li>持久顺序节点：除了具有持久节点外，子节点的名称还有顺序性。</li>
</ul>
<h3 id="znode的组成："><a href="#znode的组成：" class="headerlink" title="znode的组成："></a>znode的组成：</h3><ul>
<li>stat：状态信息<img src="/2024/06/17/08/znode%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF.png"></li>
<li>data：节点存放数据的具体内容</li>
</ul>
<h3 id="版本："><a href="#版本：" class="headerlink" title="版本："></a>版本：</h3><p>ZooKeeper会为每一个znode维护一个叫做Stat的数据结构<br>Stat中记录了三个znode相关的版本：</p>
<ul>
<li>dataVersion：当前znode节点的版本号</li>
<li>cversion：当前znode子节点的版本</li>
<li>aclVersion：当前znode的ACL的版本</li>
</ul>
<h3 id="ACL：权限控制"><a href="#ACL：权限控制" class="headerlink" title="ACL：权限控制"></a>ACL：权限控制</h3><ul>
<li>CREATE：创建子节点</li>
<li>READ：获取节点数据和列出其子节点</li>
<li>WRITE：设置/更新节点数据</li>
<li>DELETE：删除子节点</li>
<li>ADMIN：设置节点ACL的权限<br>身份认证有四种方式：</li>
<li>world：默认，任何用户都可以无条件访问</li>
<li>auth ： 不适用任何id，代表任何已经认证的用户</li>
<li>digest：用户名:密码的方式</li>
<li>ip：对指定ip进行限制</li>
</ul>
<h2 id="Watcher-事件监听器"><a href="#Watcher-事件监听器" class="headerlink" title="Watcher(事件监听器)"></a>Watcher(事件监听器)</h2><p>ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发时，ZooKeeper服务器会将事件通知到感兴趣的客户端上。<img src="/2024/06/17/08/watcher%E7%9A%84%E4%BD%9C%E7%94%A8.png"></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>ZooKeeper服务端与客户端之间的一个TCP长连接。客户端可以通过它进行心跳检测与服务器保持有效的会话，也能够向ZooKeeper服务器发送请求并接受响应。同时也能接收来在服务器的Watcher事件通知</p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="ZooKeeper将集群中节点的角色分为三类："><a href="#ZooKeeper将集群中节点的角色分为三类：" class="headerlink" title="ZooKeeper将集群中节点的角色分为三类："></a>ZooKeeper将集群中节点的角色分为三类：</h3><ul>
<li>Leader 为客户端提供读写服务，负责投票的发起和决议，更新系统状态</li>
<li>Follower：<strong>只读</strong>，将写服务转发给Leader，参与选举过程的头票</li>
<li>Observer：<strong>只读</strong>，写服务转发给Leader，不参与选举中的投票，也不参与”过半写成功”策略。 在不影响写性能的情况下提升集群的读性能。</li>
</ul>
<h3 id="Leader的选举过程"><a href="#Leader的选举过程" class="headerlink" title="Leader的选举过程"></a>Leader的选举过程</h3><p>条件：<br>当Leader服务器出现网络中断、崩溃退出与重启等异常情况是，会进去Leader选举过程。<br>流程：</p>
<ol>
<li>Leader election 选举阶段：开始投票，只要有一个节点获得过半节点的票数即可作为准Leader</li>
<li>Discovery发现阶段：followers跟准节点leader进行通信，同步followers最近接收的事务提议</li>
<li>Synchronization 同步阶段：利用leader前一阶段获得的最新提议历史，同步集群中所有的副本，同步之后，准leader成为正式节点</li>
<li>Broadcast 广播阶段：Zookeeper集群正式对外提供事务服务，leader及逆行消息广播，如果有新的节点加入，还需要进行同步<br>节点的状态：</li>
</ol>
<ul>
<li>LOOKING：寻找Leader</li>
<li>LEADING：Leader状态，对应的节点成为Leader</li>
<li>FOLLOWING：对应的节点成为Follower</li>
<li>OBSERVING：对应的节点成为OBSERVING<br>脑裂问题通过过半机制解决</li>
</ul>
<h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p>ZooKeeper Atomic Broadcast，原子广播<br>###3 模式</p>
<ul>
<li>崩溃恢复：启动或者出现异常状况时，进行崩溃恢复状态，当选举出新的Leader节点，并且已经进行状态同步之后，退出恢复状态。</li>
<li>消息广播：当集群中已经完成状态通过，整个服务架构进入消息广播模式。新加入的节点会自觉进入数据恢复状态。</li>
</ul>
<h2 id="常见的Java-API"><a href="#常见的Java-API" class="headerlink" title="常见的Java API"></a>常见的Java API</h2><blockquote>
<p>curator-x-discovery是 Apache Curator 库中的一个模块，用于简化与 Apache ZooKeeper 交互时的服务发现和注册功能</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServiceDiscovery</span> 用于管理服务的注册和发现
<span class="token class-name">ServiceInstance</span> 描述一个服务的信息
<span class="token class-name">CuratorFramework</span> zk连接客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Github学生包/学生认证申请那些事</title>
    <url>/2023/06/18/28/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<p>Github对学生有很多优惠，<del>至于哪些可太多了，所以有必要申请一个</del>，</p>
<p>这个大佬写的很详细了，我在这里加一些我踩得坑，如果跟大佬的步骤走没通过的话，可以回来看看有没有我踩过的坑</p>
<p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p>
</blockquote>
<h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><blockquote>
<ol>
<li>一个好的浏览器(支持定位的浏览器)</li>
<li>一份学信网学籍认证 和 一个教育邮箱(更容易通过 ，可以去企业微信里看看有没有开通)</li>
<li>修改pdf文件中的信息</li>
<li>github profile 中修改个人信息</li>
<li>认证并且全程不要挂梯子</li>
</ol>
</blockquote>
<h2 id="1-好的浏览器"><a href="#1-好的浏览器" class="headerlink" title="1.好的浏览器"></a>1.好的浏览器</h2><p><strong>这是重中之重，我在申请的时候不知道Chrome怎么了，一直定位不成功，换成 edge之后就成功了</strong></p>
<h2 id="2-学信网认证"><a href="#2-学信网认证" class="headerlink" title="2.学信网认证"></a>2.学信网认证</h2><p>进入学信网，下载电子报告即可，网上都有教程，这里不做赘述了</p>
<p><a href="https://www.chsi.com.cn/">中国高等教育学生信息网（学信网） (chsi.com.cn)</a></p>
<h2 id="3-修改pdf文件信息"><a href="#3-修改pdf文件信息" class="headerlink" title="3.修改pdf文件信息"></a>3.修改pdf文件信息</h2><p>因为github不是国内的，所以中文档案是不能通过的，而且pdf编辑好像很难搞，这里给一个下载链接，使用这个进行编辑会方便些</p>
<p>密码：tko9</p>
<p><a href="https://cloud.189.cn/web/share?code=ZNbamiEziq6z">Adobe CC 2022 免费高速下载 | 天翼云盘 珍藏美好生活 家庭云|网盘|文件备份|资源分享 (189.cn)</a></p>
<p><img src="/2023/06/18/28/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618200641.png" alt="下载安装即可"></p>
<p>修改内容：</p>
<p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p>
<p>可以看这篇文章</p>
<h2 id="4-修改github-profile-中的信息"><a href="#4-修改github-profile-中的信息" class="headerlink" title="4.修改github profile 中的信息"></a>4.修改github profile 中的信息</h2><ul>
<li>名字改为英文名</li>
<li>Bio 修改为   student of 学校英文名 + @ 学校英文名</li>
<li>company 修改为学校英文名</li>
</ul>
<h2 id="5-申请："><a href="#5-申请：" class="headerlink" title="5.申请："></a>5.申请：</h2><p>网站：<a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p>
<p><strong><u>全程不要挂梯子</u></strong></p>
<ol>
<li><p>添加教育邮箱 </p>
<p><img src="/2023/06/18/28/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618201441.png" alt="添加邮箱"></p>
</li>
<li><p>填写申请理由，理由随便写，可以参考我的</p>
<pre class="line-numbers language-none"><code class="language-none">I would like to use the Github Student Pack to further explore more features of Github, such as Github Copilot and Educative's learning courses.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>点击continue </p>
<blockquote>
<p>点击之后会询问你是否允许访问位置，同意即可</p>
<p><strong><u>如果点击之后，一直卡在这个页面，那么是浏览器的问题，可以换个浏览器试试或者过几天再试试</u></strong> </p>
<p><del>我就是换了好几个不成功，最后莫名其妙就能访问了</del></p>
<p>之后进入上传图片的页面，右下角有上传图片 <strong>(如果你没有的话，说明你上梯子了或者离学校太远了，直接重新认证一遍吧)</strong></p>
<p>上传修改之后的学信网认证截图</p>
<p><strong>注意：上传图片格式是jpg 不支持png！！！</strong></p>
</blockquote>
</li>
<li><p>点击提交，如果按以上流程走的话应该是秒通过的，看看邮箱是否收到邮件，或者返回认证申请的第一页，看看右侧是否通过</p>
<p><a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p>
</li>
</ol>
<h2 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h2><p>一定要有耐心，不挂梯子的话，github的访问基本上是时有时无的，所以要有耐心，多试试，过几天再试试，推荐在学校里申请，或者使用学校的vpn访问网站</p>
<p>祝通过！！！</p>
<p><img src="/2023/06/18/28/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618202519.png" alt="Elysia会祝福你的"></p>
]]></content>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>计组</title>
    <url>/2023/10/16/48/</url>
    <content><![CDATA[<p>海明码:<a href="https://www.cnblogs.com/godoforange/p/12003676.html">https://www.cnblogs.com/godoforange/p/12003676.html</a><br><a href="https://www.bilibili.com/video/BV1t4411e7LH?p=38&amp;spm_id_from=pageDriver&amp;vd_source=603b67fa519e58ee792d9e969a3ad8a1">https://www.bilibili.com/video/BV1t4411e7LH?p=38&amp;spm_id_from=pageDriver&amp;vd_source=603b67fa519e58ee792d9e969a3ad8a1</a></p>
<h2 id="基本名词解释"><a href="#基本名词解释" class="headerlink" title="基本名词解释"></a>基本名词解释</h2><p>PC 程序计数器<br>IR 指令寄存器，存放当前正在执行的指令，<br>MAR<br>CU 控制单元，为控制器的核心部件，其功能是产生微操作命令序列。<br>ALU：Arithmetic Logic Unit，算术逻辑运算单元，为运算器的核心部件，其功能是进行算术、逻辑运算。<br>ACC：Accumulator，累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器。<br>MQ：Multiplier-Quotient Register，乘商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。<br>MAR：Memory Address Register，存储器地址寄存器，在主存中用来存放欲访问的存储单元的地址。<br>MDR：Memory Data Register，存储器数据缓冲寄存器，在主存中用来存放从某单元读出、或要写入某存储单元的数据。<br>I/O：Input/Output equipment，输入/输出设备，为输入设备和输出设备的总称，用于计算机内部和外界信息的转换与传送。</p>
<p>MIPS：Million Instruction Per Second，每秒执行百万条指令数，为计算机运算速度指标的一种计量单位。</p>
<p>CPI：执行一条指令所需的时钟周期（机器主频的倒数)。</p>
<p>FLOPS：浮点运算次数每秒。</p>
<h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><ul>
<li>汉明码</li>
</ul>
<ol>
<li>汉明码要添加 检测位要满足 2 ^k &gt;= n + k +1 k位检测位 ， n为总位数</li>
<li>检测位放在 2 ^i  次方处 i = 0 , 1 , ……</li>
</ol>
<h2 id="进制字母表示"><a href="#进制字母表示" class="headerlink" title="进制字母表示"></a>进制字母表示</h2><p>十进制数用D表示，二进制用B表示，十六进制数用H表示，八进制用O表示。</p>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>命中率： 访问成功次数 / 总访问次数<br>命中率与Cache 的容量和块长有关<br>访问效率 = 访问Cache 的时间 / 平均访问时间   * 100 %<br>e 访问效率 ， h 命中率， 访问Cache 时间为tc 访问主存时间为tm<br>则 e = tc / h * tc   + ( 1 - h) * t    * 100%<br>访问时间 / 命中的时间 + 未命中的时间</p>
<ul>
<li>读写操作 <ul>
<li>写 ： 1. 写直达法 ： 写时同时写入Cache和主存</li>
<li><ol start="2">
<li>写回法： 只写入Cache 不写入内存，当Cache数据被替换出去的时候才写会主存，会导致Cache和主存的不一致</li>
</ol>
</li>
</ul>
</li>
<li>地址映射<ol>
<li>直接映射 Cache任意一块可以放在</li>
<li>全相联映射  主存任何一块可以放在Cache任意一块中</li>
<li></li>
</ol>
</li>
</ul>
<h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><ol start="3">
<li>DMA和 CPU交替访问<br> CPU工作周期  C1 专供DMA访存，C2专攻CPU访存</li>
</ol>
<ul>
<li>功能：<ol>
<li>向CPU申请DMA传送</li>
<li>处理总线控制权的转交</li>
<li>管理系统总线，控制数据传输</li>
<li>确定数据传送的首地址和长度，修正传送过程中的数据和长度</li>
<li>DMA传送结束时，给出操作完成的信号</li>
</ol>
</li>
</ul>
<h2 id="数"><a href="#数" class="headerlink" title="数"></a>数</h2><p>浮点数： 阶码组成为 阶符 + 数值部分   尾数由数符和数值组成<br>阶码是用二进制来表示的比如<br>2 ^15<br>就是 2 ^1111<br>即可，所以要用四位二进制来表示</p>
<ul>
<li>规格化<br>基数为<br>2  要求尾数最高位为 1  2 ^1<br>4                 最高2位为1  2 ^2</li>
</ul>
<p>8                 最高3位为 1  2 ^3</p>
<p>左规，数据左移，尾数变大<br>小数转二进制，直接把分子写成二进制，然后根据分母是2的多少次方，移动小数点就行了</p>
<ul>
<li><p>IEEE 754标准<br>数符 + 阶码(含阶符) 尾数<br>尾数使用规格化表示，非 0 的有效位最高位为1</p>
</li>
<li><p>运算<br>补码 左移时，后面加0 ， 右移时前面加 1<br>定点数运算：</p>
</li>
</ul>
<ol>
<li>补码加减运算，直接 A + B  mod 2 ^n+1</li>
<li>小数 就mod 2</li>
</ol>
<h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><ul>
<li>指令格式 ： 操作码 + 地址码+寻址方式<br>指令字长分为可变和固定字长<br>RISC 精简指令系统<br>长度可变的指令：操作码分散在指令字的不同字段中</li>
<li>地址码</li>
</ul>
<ol>
<li>四地址    op + A1 + A2 + A3 + A4  分别是第一操作数地址，第二操作数地址，结果地址，下一条指令地址  (A1) OP(A2) –&gt; A3</li>
<li>三地址  OP A1 A2 A3   </li>
<li>二地址   OP A1 A2    (A1) OP (A2) –&gt; A1 或者 (A1) OP(A2) -&gt; A2</li>
<li>一地址 OP A1     (ACC) OP (A1) -&gt; A1  ACC暂存</li>
<li>零地址，对ACC中的数据进行操作<br>可以使用寄存器地址来替代指令地址字段，因为寄存器很少，占用的位数少</li>
</ol>
<ul>
<li>指令寻址<br>顺序 PC + 1 -&gt; PC<br>跳跃 由转移指令给出<br>数据寻址： 操作码 + 寻址特征+ 形式地址A<br>形式地址 是指令字中的地址，有效地址是操作数的真实地址</li>
</ul>
<ol>
<li>立即寻址： 形式地址A就是操作数，OP # A   # 为立寻址标志 A 使用补码</li>
<li>直接寻址，EA = A 有效地址由形式地址给出，无偏移量</li>
<li>隐含寻址 间接寻址 有效地址由形式地址简介提供，A提供的是EA 的地址，需要去寻址，EA 的地址才是指向真实的数据</li>
<li>寄存器寻址，EA = Ri 有效地址为寄存器的编号</li>
<li>寄存器间接寻址： EA = (Ri) 有效地址在寄存器中</li>
</ol>
<ul>
<li>基址寻址<ol>
<li>使用专用寄存器作为基址寄存器<br> EA = (BR) + A BR 为基址寄存器，也就是 物理地址 = 逻辑地址 + 基址地址</li>
</ol>
</li>
</ul>
<h2 id="CPU-组成"><a href="#CPU-组成" class="headerlink" title="CPU 组成"></a>CPU 组成</h2><ul>
<li>寄存器<ol>
<li>通用寄存器 ： 存放操作数，可作为某中寻址方式的专用寄存器</li>
<li>数据寄存器：存放操作数，两个寄存器拼接放双倍字长的数据</li>
<li>地址寄存器： 存放地址</li>
<li>条件码寄存器： 存放条件码，可作为程序分支的依据，正负,0，溢出等</li>
<li>控制和状态寄存器： <ul>
<li>控制寄存器 PC -&gt; MAR -&gt; M -&gt; MDR -&gt; IR</li>
<li>PC用户可见</li>
<li>状态寄存器 存放条件码</li>
<li>PSW 存放程序状态字</li>
</ul>
</li>
</ol>
</li>
<li>指令周期 ： 取出并执行一条指令所需的全部时间</li>
<li>包括 取指，分析 =&gt; 取指周期  执行=&gt;执行周期</li>
</ul>
<p>流水线</p>
<ul>
<li>吞吐率： 单位时间内流水线所完成执行或输出结果的数量</li>
<li>最大吞吐率: Tpmax = 1 / Δt Δt为m段流水线各段时间</li>
<li>加速比 ： <ul>
<li>使用流水线的方式完成n条指令在m段流水线上共需 T = m * t + (n-1) * t   </li>
<li>使用等效的非流水线共需： T =  nmt</li>
<li>加速比等于  不使用 / 使用</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>机组</tag>
      </tags>
  </entry>
  <entry>
    <title>Go</title>
    <url>/2023/06/28/59/</url>
    <content><![CDATA[<h1 id="Go学习"><a href="#Go学习" class="headerlink" title="Go学习"></a>Go学习</h1><h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>bool,string,int,byte(int8),int16,rune(int32),float32,float64,complex64/128</p>
<p>Go比起Java和C++ ，他与C的关系更密切</p>
<h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明多个变量</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
	v1
    v2
<span class="token punctuation">)</span>
<span class="token comment">//变量初始化，无需声明变量类型</span>
v1 <span class="token operator">:=</span> <span class="token number">1</span>
<span class="token comment">//多重赋值</span>
v1 <span class="token punctuation">,</span> v2 <span class="token operator">=</span> v2 <span class="token punctuation">,</span> v1 <span class="token comment">//实现交换两个变量，但是只能交换两个同一类型的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>^75e37b</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型:"></a>类型:</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">float32</span> <span class="token comment">//等于c中的float</span>
<span class="token builtin">float64</span> <span class="token comment">// double</span>
<span class="token comment">//复数类型，和数学上的表达一样</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
		v1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5i</span>
		v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6i</span>
	<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span>
<span class="token comment">//输出为</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1i</span><span class="token punctuation">)</span>
<span class="token comment">//中文字符在UTF-8中占三个字节</span>
s <span class="token operator">:=</span> <span class="token string">"你好"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">//数组通过range来遍历，range有两个返回值所以，第一个返回的是数组的下标，第二个是返回的数组的数值，所以要用两个变量来存储</span>
s <span class="token operator">:=</span> <span class="token string">"0123456"</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token comment">// 单个字符</span>
<span class="token keyword">var</span> b <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'a'</span>
注意：禁止字符串转<span class="token builtin">int</span>
<span class="token builtin">rune</span> 是单个Unicode 字符
<span class="token comment">//同时注意数组的初始化的方式是这这样的</span>
s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span> 
<span class="token comment">//当不需要某个返回类型时使用_来跳过这个返回类型即可</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类似 type of的方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> 别名 <span class="token operator">=</span> 原来的类型名
<span class="token keyword">const</span> 常量声明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>itoa 用于记录常量</p>
<h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><pre class="line-numbers language-none"><code class="language-none">strconv.xxxx即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组定于的一种方式，会根据给定的初始化的元素决定数组的长度</p>
<p><code>a := [...]int{1}</code></p>
<p>数组切片，类似于vector</p>
<p>切片创建方式有：</p>
<ol>
<li><p>基于原有的数组来创建</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token comment">//需要使用Var 来声明切片数组的类型，等号的右侧可以时 array[first , end] ,想要截取的首位位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><u><strong>直接创建</strong></u></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//使用make进行直接创建</span>
s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//建立一个初始原为5个但是预留十个元素的空间的切片</span>
<span class="token comment">//直接在建立的过程中赋予初值</span>
s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>切片的部分常用函数</p>
<ul>
<li>len() 返回已经存储的元素的个数</li>
<li>cap() 返回切片分配的空间大小</li>
<li>append() 追加元素</li>
<li>copy() 复制</li>
</ul>
<p>数组也可以定为接口数组，结构体数组，管道数组等等</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//接口数组</span>
<span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">}</span>
<span class="token comment">//管道数组</span>
<span class="token keyword">var</span> chanList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>定义空数组:</p>
<p><code>var a [0] int</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="map类型"><a href="#map类型" class="headerlink" title="map类型"></a><u>map类型</u></h3><p>Go中将其变为基本类型，可以直接使用，不需要引入库</p>
<p>声明:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myMap <span class="token keyword">map</span><span class="token punctuation">[</span>键的类型<span class="token punctuation">]</span>值的类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建:初始化创建时要注意在初始化的最后一个数据的后面加上逗号才代表初始化完成，否则会报错</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//指定容量</span>
myMap <span class="token operator">=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>键<span class="token punctuation">]</span>值 <span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
<span class="token comment">//直接初始化</span>
myMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token comment">//一定要加上逗号</span>
<span class="token punctuation">}</span>
<span class="token comment">//直接声明＋初始化一起</span>
myMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">delete</span> <span class="token punctuation">(</span>myMap <span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查找</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> myMap<span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li><p>if else 结构</p>
<ul>
<li><p>if else 的括号必须在一行，否则编译失败，当出现else时，else 必须和 ‘’} ‘’在一行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//正确</span>
<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token comment">//错误</span>
<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token comment">//所以也推荐使用省略else的语句</span>
<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>条件不需要使用括号</p>
</li>
<li><p>花括号必须存在</p>
</li>
</ul>
</li>
<li><p>switch : 不需要显性的使用break来退出判断，默认的已经带有break了</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">{</span><span class="token comment">//用来替代if 语句，比起嵌套if更好判断代码</span>
<span class="token keyword">case</span> t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">:</span>
    xxxx<span class="token punctuation">;</span>
<span class="token keyword">default</span> <span class="token punctuation">:</span>
    xxxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>循环 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>
                      
<span class="token punctuation">}</span>
<span class="token comment">// while循环</span>
<span class="token keyword">for</span> a <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>

        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>

        a<span class="token operator">--</span>

   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更强大的break break后面可以加上标签，使用方法与goto一致</p>
</li>
<li><p>函数 </p>
<p>Go的函数拥有多重返回值，可以更方便的把函数的执行结果返回</p>
<p>注意：小写字母开头的函数只有本包可见，而大写字母开头的函数才可以被其他包使用</p>
<p>一般语法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">(</span>返回列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>不定参数 在写形参列表的时候使用…来省略参数即可达到不定参数的作用</p>
<p>例:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>概念: 这种使用方式是语法糖，语法糖对语言的功能没有用影响但是可以方便使用，也能够增加程序的可读性，减少出错的机会</p>
<p>这里的 … 相当于一个数组切片，等价于下面的语句</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//调用的时候必须使用这种方式进行调用了</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>匿名函数：Go支持随时随地定义匿名函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//在定义的时候进行调用</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//匿名函数赋给变量</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 注意此处的a相当于 args [] 所以a不是int型不可以直接返回</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>闭包</strong></p>
<p>闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境)。</p>
<p>匿名函数是一类闭包</p>
<ul>
<li>包含自由变量的代码块，这些变量不在这个代码块内或者任何全局上下文中定义，而是在定义代码块中的环境中进行定义的。要执行的代码块为自由变量提供绑定的计算环境(作用域)</li>
<li>闭包每次调用都是新的实例</li>
<li>闭包中的变量会保存，即使调用结束也会保存，，可以保证闭包中的变量的安全性，不会被外部函数修改</li>
</ul>
<p>闭包可以获得所在函数内的作用域，但是外部不可修改闭包的数据</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token comment">//闭包</span>
	f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		b<span class="token operator">++</span>
		<span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//每一次调用都是新的实例</span>
	<span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>返回函数的函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f <span class="token operator">:=</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">//fmt.Println(Add1()(1, 2)) 另一种方式</span>
<span class="token punctuation">}</span>
<span class="token comment">//返回了一个 匿名函数</span>
<span class="token keyword">func</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a <span class="token operator">+</span> b
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>错误处理</p>
<p>error接口是内置的，里面只有一个方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>  
    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>defer</p>
<p>类似于析构函数，遵循先进后出，用于函数执行之后进行一些资源释放的收尾工作</p>
<p>使用语法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">defer</span> <span class="token operator">+</span> 执行语句
要执行语句很多时可以写一个匿名函数来进行处理
<span class="token keyword">defer</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    回收工作
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>panic() 和 recover()</p>
<p>panic ( ) 用于立刻终止程序，但是defer不影响，会正常执行，panic可以接受任意类型的数据</p>
<p>recover ( ) 用于终止错误处理流程，一般放在defer中来截取错误信息</p>
</li>
</ol>
<h2 id="面型对象编程-OOP-Object-Oriented-Programming"><a href="#面型对象编程-OOP-Object-Oriented-Programming" class="headerlink" title="面型对象编程(OOP , Object Oriented Programming)"></a>面型对象编程(OOP , Object Oriented Programming)</h2><ol>
<li><p>类型系统</p>
<p>Go可以给任意类型(包括内置类型，但不包括指针类型)添加相应的方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Integer <span class="token builtin">int</span>
<span class="token comment">//Integer 与int 并无区别，只是我们认为给他加上了一个自带的方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">less</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">&lt;</span> b
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">5</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"回收了"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> a<span class="token punctuation">.</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"错误回收"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>面向对象只是换了一种方式来表达语法，所以实质上也是语法糖</p>
<p>Go没有隐藏的指针</p>
<ul>
<li>方法的对象显式传递</li>
<li>方法的对象不需要是指针，也不需要是this</li>
</ul>
</li>
<li><p>对于public 类， 需要采用类名首字母大写</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Base <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Base
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	foo<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	base <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span>
	base<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	foo <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>
	foo<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>接口</strong></p>
<p>其他语言在使用接口时必须要先从接口进行继承，才能进行实现接口</p>
<p>简言之，必须知道接口要实现什么才能定义接口，但实际情况是，不知道接口要实现什么</p>
<p>例如</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	Java 语法</span>
<span class="token keyword">interface</span> <span class="token class-name">IFoo</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span>
    <span class="token comment">//....</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>问题：</p>
<ol>
<li>提供哪些接口好呢？</li>
<li>如果两个类实现了相同的接口，应该把接口放进哪个包内？</li>
</ol>
<p>Go的接口是非侵入式的，只要类实现了接口要求的所有函数，就算是实现了这个接口，可以直接进行赋值</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token comment">//实现接口的类</span>
<span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现类方法，也就是接口的方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//两个以后出现的接口</span>
<span class="token keyword">type</span> IFile <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> IPrint <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> file1 IFile <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>
	<span class="token keyword">var</span> file2 IPrint <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>
	file3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>
	file1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IFile接口实现"</span><span class="token punctuation">)</span>
	file2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IPrint接口实现"</span><span class="token punctuation">)</span>
	file3<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"实现接口的类，并不需要提前知道有哪些接口，只要能够实现了以后会出现的接口的函数即可直接使用"</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是 Go 语言里有非常灵活的 <strong>接口</strong> 概念，通过它可以实现很多面向对象的特性。接口提供了一种方式来 <strong>说明</strong> 对象的行为：如果谁能搞定这件事，它就可以用在这儿。</p>
<p>接口定义了一组方法（方法集），但是这些方法不包含（实现）代码：它们没有被实现（它们是抽象的）。接口里也不能包含变量。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Method1</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type
    <span class="token function">Method2</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用接口时，如果某个类实现了接口的方法，那么接口类型的变量可以赋值为这个类的变量</p>
<p>如果接口接口A和接口B的方法是一致的，那么在Go中属于完全等价</p>
<p>如果A接口的方法是B接口方法的子集，那么B接口可以赋值给A接口，而A接口不能赋值给B接口</p>
<p>接口查询：用于查询某个接口是否属于某个类型</p>
<blockquote>
<p>实例 <code>num2</code> 是否属于接口 <code>Number1</code>，可以这么做：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num1 Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 Number2 <span class="token operator">=</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">;</span>
<span class="token keyword">if</span> num3<span class="token punctuation">,</span> ok <span class="token operator">:=</span> num2<span class="token punctuation">.</span><span class="token punctuation">(</span>Number1<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num3<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果num2 实例所指的对象是属于Number1的，那么ok值为1 ，num3 转化为 Number1的一个实例，之后执行条件内的代码</p>
</blockquote>
<p>类型查询：用于查询接口指向的对象实例的类型</p>
<p>语法:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> v <span class="token operator">:=</span> v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 	
	<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>两者一般搭配使用</p>
<p>Any类型</p>
<p>任何对象实例都满足空接口 interface { } 所以interface { } 可以作为一个可以指向任何对象的Any类型，当函数可以接受任何实例时，可以将其声明为interface { } </p>
<p>例如： fmt库中的Print函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Print <span class="token punctuation">(</span>fmt <span class="token builtin">string</span> <span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>主流实现模型:</p>
<ol>
<li><p>多进程</p>
<p>操作系统层面进行的</p>
</li>
<li><p>多线程</p>
<p>操作系统之上的调度</p>
</li>
<li><p>基于回调的非阻塞/异步IO</p>
<p>通过事件驱动的方式使用异步IO，使服务器持续运转并且尽可能的少用线程，降低开销，代表有Node.js，会对流程进行分割</p>
</li>
<li><p>协程</p>
<p>本质是用户态线程，不需要抢占式调度，寄存于线程，缺点是需要语言支持</p>
</li>
</ol>
<p> <strong><u>gorountine</u></strong></p>
<p>通过在代码中加上go关键字启用协程，主程序结束时，写成会被结束</p>
<p>通信方式：消息机制和共享内存</p>
<p>消息机制：每个并发单位都是自包含、独立的个体，都有自己的变量，并且单元间的变量不共享，每个单元的输入输出只有一种那就是消息。不同进程依靠消息来进行通信，他们不会共享内存</p>
<p><strong><u>channel</u></strong></p>
<p>Go提供的goroutine间的通信方式，是进程内的通信方式，不适合进程之间进行通信</p>
<p>一个channel 只能传递一种类型的值</p>
<p>基本语法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明</span>
<span class="token keyword">var</span> chanName <span class="token keyword">chan</span> ElemenType 
<span class="token comment">//例如 声明一个传递类型为int的channel</span>
<span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span> 
<span class="token comment">//定义</span>
ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//缓冲大小为2</span>
<span class="token comment">//写入channel</span>
ch <span class="token operator">&lt;-</span> value <span class="token comment">//写入数据会导致陈孤虚阻塞，直到有其他goroutine 从channel中读取数据</span>
<span class="token comment">//读取</span>
value <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch <span class="token comment">// 如果channel中没有数据也会进行堵塞</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">Count</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Counting"</span><span class="token punctuation">)</span>
	ch <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">//写入数据,导致这个goroutine阻塞，直到有其他goroutine从中读取数据</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	chs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 储存十个goroutine的channel数组</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
		<span class="token comment">//启动十个协程</span>
		<span class="token keyword">go</span> <span class="token function">Count</span><span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> chs <span class="token punctuation">{</span>
		<span class="token operator">&lt;-</span>ch <span class="token comment">//读取channel</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>select</p>
<p>文件发生IO动作，select会被调用并返回</p>
<p>语法： 条件必须是IO操作</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> chan1 <span class="token punctuation">:</span> <span class="token comment">//从chan1成功读取到数据</span>
    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token comment">//成功向chan2写入数据</span>
    <span class="token keyword">default</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">//随机向ch 中写入一个1或者是0</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">:</span>
		<span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>
		<span class="token punctuation">}</span>
		i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value Received :"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缓冲机制</p>
<p>建立channel数组即可实现缓冲</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>超时机制</p>
<p>Go中没有提供查实处理机制，但是可以使用select来处理，因为select只要有一个case已经完成即可继续进行下去</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//未写入任何数据，所以会把程序堵塞</span>
	timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//等待一秒钟</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>
		timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"读取中"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"超时了"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><u>channel 传递，可以用来实现pipe 待补充</u></p>
<p>单向channel  用于防止写入某些不需要的数据或者被不需要的函数读取</p>
<p>只能读或者只能写</p>
<p>定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ch1 <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//正常的channel</span>
<span class="token keyword">var</span> ch2 <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">float64</span> <span class="token comment">// 只能写</span>
<span class="token keyword">var</span> ch3 <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//只能读</span>
<span class="token comment">//初始化</span>
ch4 <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 正常</span>
ch5 <span class="token operator">:=</span>  <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 从正常的channel进行类型转化为单项读取的channel</span>
ch6 <span class="token operator">:=</span>  <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 转化为单项写入的channel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关闭channel</p>
<p>使用close()即可</p>
<p>如何判断已经关闭?</p>
<p>多重返回值的方式进行帕努的那</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch
<span class="token comment">//只需要看ok即可，如果ch已经关闭，那么读取失败，ok的返回值为false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h4><p>同步锁</p>
<p>sync包中提供</p>
<p>Mutex锁</p>
<p>当一个goroutine 获得了Mutex 后，其他的goroutine 只能等待这个释放锁</p>
<p>RWMutex 锁 </p>
<p>单写多读 ， 在读锁占用时，会阻止写，但是不会阻止读</p>
<p>全局唯一性操作</p>
<p>使用Once类型，当别的goroutine </p>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="Socket编程-IP-层"><a href="#Socket编程-IP-层" class="headerlink" title="Socket编程  IP 层"></a>Socket编程  IP 层</h3><p>socket是什么？</p>
<blockquote>
<p>Socket是对TCP/IP协议的封装，自身并非协议而是一套调用的接口规范（API）。通过套接字Socket，才能使用TCP/IP协议。</p>
</blockquote>
<p>传统的Socket编程主要步骤：</p>
<ol>
<li>建立Socket： 使用socket() 函数</li>
<li>绑定Socket :使用bind() 函数</li>
<li>监听： 使用listen() 函数，或者connec() 函数</li>
<li>接受连接： accept() 函数</li>
<li>接收： receive() 函数 ，发送send() 函数</li>
</ol>
<p>Go的：</p>
<p>Go语言标准库对此过程进行了抽象和封装，无论我们期望使用什么形式的连接，只需要调用net.Dial()即可</p>
<p>Dial原型</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Dial <span class="token punctuation">(</span> net <span class="token punctuation">,</span> addr <span class="token builtin">string</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> Conn <span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token comment">/*
net : 网路协议名称
addr IP地址或域名，端口以":" 的形式跟在后面，端口号可选
Conn 是否成功连接
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="工程管理"><a href="#工程管理" class="headerlink" title="工程管理"></a>工程管理</h2><p>代码格式化</p>
<p>格式化之前的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> Foo <span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span> <span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> a<span class="token operator">&gt;</span>b <span class="token punctuation">{</span>
<span class="token keyword">return</span> a <span class="token punctuation">,</span> <span class="token boolean">nil</span>	
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> b <span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	i <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span> <span class="token punctuation">,</span>i<span class="token punctuation">)</span>	
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用命令行: go fmt xxx.go得到的代码,也可以直接go fmt 会格式化所有*.go的文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>gotool</p>
<p>生成exe</p>
<p>gobuild 后面可以加上-o + name 指定执行文件的名字</p>
<p><strong>格式化输出</strong>: Printf</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">%</span>v	按值的本来值输出
<span class="token operator">%</span><span class="token operator">+</span>v	在 <span class="token operator">%</span>v 基础上，对结构体字段名和值进行展开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>生成随机数需要设置随机数种子</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> <span class="token number">100</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	a <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h1 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h1>]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2023/08/02/58/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库同步问题：</p>
<h2 id="Mysql面试指南"><a href="#Mysql面试指南" class="headerlink" title="Mysql面试指南"></a>Mysql面试指南</h2><p><a href="https://javabetter.cn/interview/mysql-60.html">60 道 MySQL 精选面试题👍 | 二哥的Java进阶之路 (javabetter.cn)</a></p>
<h3 id="InnoDB为什么是默认的引擎"><a href="#InnoDB为什么是默认的引擎" class="headerlink" title="InnoDB为什么是默认的引擎"></a>InnoDB为什么是默认的引擎</h3><ol>
<li>是mysql中唯一支持事务的引擎</li>
<li>锁机制：使用行级锁，而不是表级锁</li>
<li>支持外键约束</li>
<li>具有崩溃恢复</li>
</ol>
<h3 id="索引为什么使用B-树"><a href="#索引为什么使用B-树" class="headerlink" title="索引为什么使用B+树"></a>索引为什么使用B+树</h3><ol>
<li>支出快速查找：B+树高度相对较低，查找效率高</li>
<li>有序性：节点的键值是有序排列的</li>
<li>支持高效插入和删除操作：叶子节点之间使用双向链表链接，可以快读定位到要插入和删除的位置</li>
<li>适应硬盘存储：B+树节点被控制在硬盘大小的范围内</li>
<li>支持数据点有序存储和范围查找</li>
</ol>
<h3 id="如何进行回滚的"><a href="#如何进行回滚的" class="headerlink" title="如何进行回滚的"></a>如何进行回滚的</h3><ol>
<li>使用Undo Log进行回滚，</li>
<li>混滚时，按照事务的执行的逆序进行回滚。</li>
<li>Undo Log记录了事务对数据库的修改操作</li>
</ol>
<h3 id="慢查询如何考虑优化"><a href="#慢查询如何考虑优化" class="headerlink" title="慢查询如何考虑优化"></a>慢查询如何考虑优化</h3><p><img src="/2023/08/02/58/%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96.png"></p>
<h3 id="数据库中的CAP"><a href="#数据库中的CAP" class="headerlink" title="数据库中的CAP"></a>数据库中的CAP</h3><p>C：Consistency强一致性，系统在执行某项操作之后，仍然能够保持一致。更新操作执行成功，所有的用户都应该读到最新的值<br>A：Availabliy可用性，每个操作总是能够在一定时间内返回结果。结果可以是成功或者失败<br>P：分区容错性，出现网络分区时，系统能够正常运行。</p>
<h3 id="怎么对plan进行优化"><a href="#怎么对plan进行优化" class="headerlink" title="怎么对plan进行优化"></a>怎么对plan进行优化</h3><ol>
<li>谓词下推：查询时，竟遭过滤掉不需要的数据<code>SELECT * FROM orders WHERE order_date &gt; '2023-01-01';</code></li>
<li>索引下推：使用索引来加速查询，尤其是在索引覆盖查询中</li>
<li>表达式优化：简化和重写表达式来提高效率</li>
<li>最左匹配优化选择索引：使用索引的最左前缀原则来优化查询</li>
<li>避免SELECT * </li>
<li>使用适当的JOIN类型</li>
<li>使用索引覆盖：创建包含所有查询列的索引避免回表</li>
<li></li>
</ol>
<h3 id="介绍一下MySQL的索引"><a href="#介绍一下MySQL的索引" class="headerlink" title="介绍一下MySQL的索引"></a>介绍一下MySQL的索引</h3><p>MySQL的索引是一种数据结构，可以帮助MySQL快速搞笑的查询，更新数据库中的数据。</p>
<h3 id="B-树的特征，为什么-MySQL-要使用-B-树"><a href="#B-树的特征，为什么-MySQL-要使用-B-树" class="headerlink" title="B+树的特征，为什么 MySQL 要使用 B+树"></a>B+树的特征，为什么 MySQL 要使用 B+树</h3><p>特点： </p>
<ol>
<li>只有叶子节点会存放实际的数据，包括索引+记录，非叶子节只存放索引</li>
<li>所有索引都在叶子节点中出现，叶子节点之间构成一个有序链表</li>
<li>非叶子节点的索引也会同时存在叶子节点中，并且是叶子节点中索引中的最大值或者最小值</li>
<li>非叶子节点有多少个子节点，就有多少个索引</li>
</ol>
<p>看看几个隔离级别和解决办法<br>GBKh和UTF-8不是一种编码方式<br>mysql中使用的utf-8是utf8mb3 使用1<del>3个字节来表示一个字符<br>而utf-8使用1</del>4<br>MVCC （Multi-Version Concurrency Control ，多版本并发控制）MVCC （Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。</p>
<ul>
<li>sql语句的执行过程：mysql8.0 client发送sql语句-&gt;sql解析-&gt;执行优化和执行计划生成-&gt;执行-&gt;返回结果</li>
<li>隔离等级：<img src="/2023/08/02/58/%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7.png" alt="|575"><ul>
<li>MySQL默认是可重复读，可以解决幻读。然后串行化是基于锁实现的，可重复读和读已提交都是基于MVCC实现的，可重复读在当前读的情况下需要加锁才能保证不会出现幻读，所以仅仅使用MVCC不能解决幻读</li>
</ul>
</li>
<li>日志：<ul>
<li>种类：错误日志，查询日志，慢查询日志，Binary Log, 中继日志，事务日志</li>
</ul>
<ol>
<li>undo log 有两种<ul>
<li>insert undo log 执行insert 操作产生的undo log isnert只对事务本身可见，其他事务不可见，所以事务提交之后可以直接删除</li>
<li>update undo log 提供MVCC机制，提交时放入undo log 链表，等待purge线程进行最后的删除<ul>
<li>purge：会定期检查 undo log 和数据行，找出那些已经不再需要的，然后将它们从磁盘上删除，从而回收磁盘空间。</li>
</ul>
</li>
</ul>
</li>
<li>慢查询日志：记录执行时间查过指定阈值的所有SQL查询，</li>
<li>Binlog: 主要记录了数据库的修改操作，事务信息和一些特殊事件：服务器的启动和停止，主从复制状态变更事件等</li>
<li>redo log 如何保证事务的持久性？ <ul>
<li>事务执行时，首先记录在redo log而不是直接修改数据文件，redo log 保存在内存中的log buffer，然后被异步刷新到磁盘中的redo log file中</li>
<li>事务提交时，相关的数据还没有没刷新到磁盘中，只要保证redo log 被刷新到磁盘中，即使系统在事务提交后崩溃了，也可以在系统重启之后通过redo log 里恢复数据，</li>
<li>为什么要先写入redo log ，因为redo log 时顺序写入的，而写数据需要涉及随机I/O，能够提高数据库的性能</li>
</ul>
</li>
<li>页表修改之后为什么不直接刷盘？因为刷新到磁盘中非常耗时，所以使用预写式日志的技术，先写入redolog，之后异步刷新内存中的redolog到磁盘中，之后写入数据到内存中的数据页中，之后写入binlog，内存中的数据页会在适当实际刷新到磁盘中。</li>
<li>binlog和redolog的区别：<ul>
<li>用途上：binlog用于主从复制和数据恢复，复制时会把主服务器上的binlog发给从服务器，然后从服务器根据binlog中的记录来更新;而redo log 用于保证事务的持久性</li>
<li>格式：binlog:可以是语句格式或者行格式，语句记录SQL执行的语句，行格式记录每一行的数据变化。redo log以物理格式记录数据页的修改，记录的是某个数据页的某个位置，将某个数据修改为了什么</li>
<li>写入时机：binlog 事务提交时，redo log 事务执行过程中就开始写入，事务提交时确保已经将redo log 写入磁盘中</li>
<li>清理方式：binlog 需手动清理或者设置过期时间清理； redo log 当数据页的修改刷新到磁盘中之后，redo log 即可被覆盖重新使用</li>
</ul>
</li>
<li>undo log 如何保证事务的原子性：事务开始执行时，udno log 中会记录修改前的数据，如果事务体骄傲成功，undo log 即可以被清理，如果失败就会使用undo log 回滚事务。</li>
<li>MVCC(乐观锁)如何实现：每个数据行中都有两个隐藏列：一个用于记录改行创建时的事务ID，一个记录删除该行的事务ID，当事务开始时，他会根据当前所有活跃的事务产生Read View ，其中记录了：<ul>
<li>创建这个Read View时下个即将被分配的事务ID m_low_limit_id</li>
<li>活跃列表中最小的事务ID m_up_limit_id</li>
<li>Read View创建时，其他未提交的活跃事务ID列表 m_ids</li>
<li>创建该Read View 的事务ID m_creator_trx_id<br> 之后对数据行进行读取时，检查该行的创建事务ID和删除事务ID <img src="/2023/08/02/58/ReadView%E5%8F%AF%E8%A7%81%E6%80%A7.png" alt="ReadView可见性|525"></li>
<li>如果创建ID大于m_low_limit_id，说明是在当前事务之后创建的，不可见</li>
<li>如果删除ID小于m_up_limit_id，说明在当前事务开始前就已经被删除了，不可见</li>
<li>如果创建事务ID小于m_low_limit_id但删除ID大于m_up_limit_id，需要与m_ids列表中比对，如果存在于m_ids列表中，则不可见</li>
</ul>
</li>
<li></li>
</ol>
</li>
<li>外键：<ul>
<li>不建议使用外键，外键应该在应用层中保证，而不是在数据库上使用外键，因为外键对分库分表无法生效，同时需要维护外键，当我们做一些涉及外键的CUD操作时，需要触发相关的操作去检查，保证数据的一致性和正确性，从而消耗额外资源，</li>
</ul>
</li>
<li>集群：<ul>
<li>redo log 和 undo log都是由InnoDB引擎实现的</li>
<li>bin log 是由mysql级别的日志<ul>
<li>redo和bin 的区别：Redo log是记录了数据的修改，大小到一定程度，新的日志会覆盖，先写redo再写bin，目的是为了保证事务的持久性</li>
<li>Binlog是记录了执行了什么sql语句，不会覆盖旧日志，用于实现mysql的主从复制</li>
</ul>
</li>
<li>redolog的优势：顺序写，预写入，磁盘同步过程中可以一次同步多个事务的Redo log：先把修改写入redolog，再修改内存中的数据，事务提交时再入bin log，之后再将数据写入磁盘中 </li>
<li>主从复制：<ul>
<li>master节点会不断将sql命令写入Binary Log，子节点使用I/O线程读入master节点中的Bin Log</li>
<li>字节点使用SQL线程执行Bin Log的语句</li>
</ul>
</li>
</ul>
</li>
<li>存储引擎的区别：MyISAM 和 InnoDB 的区别<ul>
<li>MySQL的存储引擎采用的是插件式架构，支持多种存储引擎，我们甚至可以为不同的数据库表设计不同的存储引擎，存储引擎是基于表而不是数据库的。</li>
<li>InnodDB支持事务</li>
<li>InnoDB支持行级锁定，MyISAM操作时直接锁定整个表</li>
<li>InnoDB支持外键和级联删除/更新</li>
<li>InnoBD存储数据更大</li>
<li>崩溃恢复更好</li>
<li>InnoDB以聚簇的方式存储数据，MyISAM是将数据和索引分开存储</li>
<li>InnoDB支持MVCC</li>
</ul>
</li>
<li>事务：<ul>
<li>并发事务带来了哪些问题：<ol>
<li>脏读：一个事务读到了另一个事务修改后回滚的数据</li>
<li>丢失修改:两个事务同时修改一个数据，先提交的会丢失修改</li>
<li>不可重复读：执行相同的两个语句，结果不一样</li>
<li>幻读：多了记录或者是少了记录<ul>
<li>3和4的区别：3是记录被修改，4是记录条数变化</li>
</ul>
</li>
</ol>
</li>
<li>mysql中的隔离等级： 默认是可重复读，能够防止幻读 实现是通过 <strong>锁和MVCC(多版本控制并发控制)</strong> 实现的<ol>
<li>读未提交：允许事务读取未提交的事务的修改，会出现脏读，幻读，不可重复读</li>
<li>读已提交：只能读到提交的事务的修改，避免脏读，但是还有幻读 （读数据时加上共享锁，读取后立刻释放）</li>
<li>可重复读：同一事务中，多次读取统一数据返回结果要一致 (事务结束才释放锁，同时使用MVCC来保证每个事务都看到一个一致的快照)</li>
<li>可串行化：强制事务串行执行，影响效率</li>
</ol>
</li>
<li>MVCC的原理：</li>
<li>这两个隐藏的列就是undo log日志<img src="/2023/08/02/58/undolog.png" alt="|700"><ul>
<li>这俩就是隐藏列，trx_id当前修改之后的事务id，roll_pointer指向修改之前的信息</li>
<li><img src="/2023/08/02/58/undolog%E8%A1%A8.png" alt="|725"></li>
<li>MVCC实现原理：ReadView<ul>
<li>主要内容：<ul>
<li>m_ids:生成ReadView时当前系统活跃的读写事务id列表</li>
<li>min_trx_id:在生成ReadView时当前系统活跃的读写事务中最小的事务id，也就是min (m_ids)</li>
<li>max_trx_id:表示生成ReadVeiw时系统应该分配给下下一个事务的id值</li>
<li>creator_trx_id：表示生成该ReadView的事务id</li>
</ul>
</li>
<li>原理：在访问某条记录时根据以下方式来判断：<ol>
<li>trx_id == creator_trx_id，表示是自己修改过的记录，可见</li>
<li>trx_id &lt; min_trx_id 可以被访问</li>
<li>trx_id &gt; max_trx_id，不可被访问</li>
<li>trx_id &gt; min  &amp;&amp; trx_id &lt; max 需要判断：如果trx_id在m_ids中，表示仍然活跃，不可访问，不在表示已经被提交，可以访问了</li>
<li>如果某个版本对当前事务不可见，则顺着版本连找下一个版本的数据，直到最后，如果最后一个版本也不可见的话，意味着这条记录对这个事务完全不可见，查询结果不返回这个记录</li>
</ol>
</li>
<li>读已提交每次读都会生成一个ReadView，而可重复读智慧在第一次执行查询语句时生成一个ReadView</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>索引常问：<ul>
<li>覆盖索引：查询使用了索引，并且查询过程中已经找到了所有需要的列，不需要继续回表了</li>
<li>索引失效问题：<ol>
<li>使用了!= &lt; &gt; LIKE ，函数操作或者表达式操作</li>
<li>联合索引中没有遵循最左前缀，跳过了中间的索引字段</li>
<li></li>
</ol>
</li>
</ul>
</li>
<li>SQL语句：<ul>
<li>常见函数：<ol>
<li>Concat()把多列拼接在一起</li>
<li>RTrim() 去除多有空格</li>
<li>AS给列起别名</li>
</ol>
</li>
<li>存储过程：存储过程是一种在数据库中存储的预编译的SQL语句集合，可以通过调用它的名字来执行。存储过程可以接收参数，并且可以返回值，长哟个与进行批处理<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">USE test;
CREATE PROCEDURE productpricing()
BEGIN
	SELECT * FROM hello;
END;

调用
CALL productpricing()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="InooDB详解"><a href="#InooDB详解" class="headerlink" title="InooDB详解"></a>InooDB详解</h3><ol>
<li>InooDB大小一般为16kb</li>
<li>InooDB页表:<img src="/2023/08/02/58/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5.png"></li>
<li>File Header：<img src="/2023/08/02/58/FileHeader.png"></li>
<li>Page Header：<img src="/2023/08/02/58/PageHeader.png"></li>
<li>infimumu+supremum 最小记录和最大记录。不存放真是数据<img src="/2023/08/02/58/%E6%95%B0%E6%8D%AE%E9%A1%B5%E8%AF%A6%E8%A7%A3.png"><ul>
<li>heap_no分别为0和1， record_type分为4种，0普通记录，1表示B+树非叶节点记录，2最小记录，3最大记录。</li>
<li>next_record 由当前真实数据指向吓一跳记录的真实数据。吓一跳记录不是按照插入顺序的下一条，而是根据主键排序之后的下一条。infimum的下一条记录是用户记录中主键最小的，用户记录中主键最大的下一条指向supremum</li>
<li>为什么指向的是真是数据的开头？<ul>
<li>因为向左读取为记录头信息，向右读取真实数据。 记录头信息刚好是<strong>逆序的！</strong></li>
</ul>
</li>
<li><img src="/2023/08/02/58/next_record%E7%A4%BA%E4%BE%8B.png"></li>
</ul>
</li>
<li>User Record ： <ul>
<li>由额外记录信息和实际信息组成</li>
<li>额外记录：<ul>
<li>变长字段的真实数据的字节长度都放在记录的开头，逆序存放。不存放NULL的字节长度</li>
<li>NULLL值列表，NULL值存储在这里，并且是逆序存储，如果存在NULL值就不会存在这个列表</li>
<li>记录头信息：<img src="/2023/08/02/58/%E8%AE%B0%E5%BD%95%E5%A4%B4%E4%BF%A1%E6%81%AF.png"><ul>
<li>delete_mask标记的记录不会理科删除，而是会放在垃圾列表中，等待覆盖。</li>
<li>heap_no是根据主键的大小来确定的</li>
</ul>
</li>
</ul>
</li>
<li>真实信息：<ul>
<li><img src="/2023/08/02/58/%E9%9A%90%E8%97%8F%E5%88%97.png"></li>
<li>如果未指定主键，会生成row_id隐藏列</li>
</ul>
</li>
</ul>
</li>
<li>Page  Directory ：<ul>
<li>将正常的所有记录划分为几个组，包括最大和最小记录，不包括已删除的记录,最小记录所在的分组只包括自己。</li>
<li>每组最后一个记录的头信息中的n_ownd来表示该组中记录数。</li>
<li>将每组的最后一条记录的地址偏移量拿出来放入PageDirectory中，偏移量被称为槽(slot)</li>
<li><img src="/2023/08/02/58/PageDirectory%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png"></li>
</ul>
</li>
<li>File Trailer: 用于检验一个页是否完整：</li>
</ol>
<h3 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h3><h4 id="回表问题"><a href="#回表问题" class="headerlink" title="回表问题"></a>回表问题</h4><p>当查询的数据在索引树中找不到时，就需要回到主键索引树种去获取。<br>覆盖索引：<br>查询时从索引列就能够获取了，就不需要回到主键树中查找了</p>
<ul>
<li>前提<ol>
<li>数据页链表中的前后保证前一个数据页中的主键的最大值大于后一个页表中主键的最小值，也就主键递增，每一个页表内，主键也递增</li>
<li>建立一个目录项：包括 key:页中主键最小值 page_no:页号。</li>
<li><img src="/2023/08/02/58/%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86.png"></li>
</ol>
</li>
<li>mysql中的实现：<ol>
<li>使用用户记录的数据页来存储目录项，并且使用record_type = 1来标明，只包含key和page_no即可</li>
<li>使用双向列表来维护多个目录项</li>
<li>使用树的结构来重复建立索引，加快访问<img src="/2023/08/02/58/%E7%B4%A2%E5%BC%95.png"><img src="/2023/08/02/58/B+%E6%A0%91.png"></li>
<li>真正的数据页都放在最底层的叶子节点</li>
</ol>
<ul>
<li>聚簇索引：1. 使用主键值大小进行记录和排序 2. 叶子节点是完整的用户记录。索引即数据，数据即索引</li>
<li>二级索引：1.使用非主键值来进行记录和排序 2. 叶子节点存储的是索引键和主键的值 3. 查询到叶子节点之后需要再查找一变主键的索引来找到真正的用户记录。 优点是节省空间。<img src="/2023/08/02/58/%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.png"></li>
<li>联合索引：1.使用多个列的大小来进行排序。先按照一个列排序，列大小相同时，使用下一个列大小来排序。2. 对于这多个列只需要建立一个B+树即可，节省了空间3.实质上也是二级索引</li>
<li>对比：MyISAM<ul>
<li>存储在一个文件中，按照插入顺序，有行号</li>
<li>索引放在另一个文件中，使用主键值+行号作为索引，所以全是二级索引，而且不能二分查找。</li>
</ul>
</li>
<li>SQL建立索引：每一个表会自动为主键或者unique建立一个聚簇索引，可使用语句指定建立其他列的索引<img src="/2023/08/02/58/sql%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.png"></li>
<li>删除索引：ALTER TABLE index_demo DROP INDEX idx_c2_c3;</li>
</ul>
</li>
<li>独立表空间：<ol>
<li>区：表空间分为多个区，区包含多个页</li>
</ol>
</li>
</ul>
<h3 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h3><ul>
<li>select <ol>
<li>使用连接器连接mysql server,期间通过三次握手 show processlist来查看多少个客户端连接了</li>
<li>查询缓存(8.0) 已抛弃</li>
<li>解析SQL ：<ol>
<li>词法分析，根据字符串识别关键词，分类字符串</li>
<li>语法分析，语法解析器会根据语法规则来判断是否符合MySQL语法秒如果没问题就会构出SQL语法树</li>
</ol>
</li>
<li>执行SQL语句，<code>SELECT</code>&nbsp;查询语句流程主要可以分为下面这三个阶段：<ul>
<li>prepare 阶段，也就是预处理阶段；检查表和字段是否存在，将* 扩展为表上的列</li>
<li>optimize 阶段，也就是优化阶段；<strong>优化器主要负责将 SQL 查询语句的执行方案确定下来</strong>，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</li>
<li>execute 阶段，也就是执行阶段；根据执行计划执行 SQL 查询语句，从存储引擎读取记录，返回给客户端；</li>
</ul>
</li>
</ol>
</li>
<li>MySQL一行记录如何<ul>
<li>每建立一个数据库都会咋/var.lib/mysql/下建立一个同名的文件夹</li>
<li>文件夹中有三个文件</li>
<li>db.opt 用来存储数据库的默认字符集和字符检验规则</li>
<li>tableNaem.frm 对应的表结构会保存在这个文件，主要包含表结构的定义</li>
<li>tableName.ibd 表中的数据会保存在这个文件中</li>
</ul>
</li>
<li>表空间文件的结构 ：<ul>
<li><img src="/2023/08/02/58/%E8%A1%A8%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png"></li>
<li>段 <ul>
<li>索引段：存放 B + 树的非叶子节点的区的集合；</li>
<li>数据段：存放 B + 树的叶子节点的区的集合；</li>
<li>回滚段：存放的是回滚数据的区的集合，之前讲<a href="https://xiaolincoding.com/mysql/transaction/mvcc.html">事务隔离&nbsp;(opens new window)</a>的时候就介绍到了 MVCC 利用了回滚段实现了多版本查询数据。</li>
</ul>
</li>
<li>区 InnoDB 使用的是B+树 以页为单位来来分配空间时，链表中相邻的两个页的物理位置是不连续的，为了防止随机I/O，可以按照区来分配，一个区可以包含多个页，这样页在位置上就是相邻的了可以使用顺序I/O</li>
<li>页 读取数据以页为单位，当读取一行时，会将一页一同读取出来，放入内存中 默认页 16kb ,页是 InnoDB 存储引擎磁盘管理的最小单元，</li>
<li>行 记录按照行<ul>
<li>行格式：COMPACT <img src="/2023/08/02/58/compact.png"><ul>
<li>变长字段长度列表，用于保存数据占用的大小， 在列表中采用逆序存放数据占用的实际字节，当一行中没有变长字段时，例如全int时，就不会存在变长字段列表了。</li>
<li>NULL列表，数据中为NULL 的数据会放在NULL值列表中的。NULL值也是按照逆序存储的，使用二进制 0 1 来表示是否为NULL值，1 为是  <strong>当数据表的字段都定义成 NOT NULL 的时候，这时候表里的行格式就不会有 NULL 值列表了</strong>。</li>
<li>记录头信息</li>
<li>delete_mask ：标识此条数据是否被删除。从这里可以知道，我们执行 detele 删除记录的时候，并不会真正的删除记录，只是将这个记录的 delete_mask 标记为 1。</li>
<li>next_record：下一条记录的位置。从这里可以知道，记录与记录之间是通过链表组织的。在前面我也提到了，指向的是下一条记录的「记录头信息」和「真实数据」之间的位置，这样的好处是向左读就是记录头信息，向右读就是真实数据，比较方便。</li>
<li>record_type：表示当前记录的类型，0表示普通记录，1表示B+树非叶子节点记录，2表示最小记录，3表示最大记录</li>
</ul>
</li>
<li>真实数据部分<ul>
<li>row_id 未指定主键或者唯一约束列时，会有，占用6个字节</li>
<li>trx_id事务id表示数据由哪个事务生成的，必需</li>
<li>roll_pointer 记录上一个版本的指针，必需</li>
</ul>
</li>
</ul>
</li>
<li><strong>一行数据的最大字节数 65535(不包含 TEXT、BLOBs 这种大对象类型)，其实是包含「变长字段长度列表」和 「NULL 值列表」所占用的字节数的</strong></li>
<li>如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。</li>
</ul>
</li>
</ul>
<p>Compact 行格式针对行溢出的处理是这样的：当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后真实数据处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。</p>
<p>Compressed 和 Dynamic 这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储 20 个字节的指针来指向溢出页。而实际的数据都存储在溢出页中。<br>索引分类：</p>
<ul>
<li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li>
<li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li>
<li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li>
<li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li>
</ul>
<h3 id="MySql查询优化"><a href="#MySql查询优化" class="headerlink" title="MySql查询优化"></a>MySql查询优化</h3><ul>
<li>单表 <ol>
<li>根据搜索条件，找出所有可能使用的索引</li>
<li>计算全表扫描的代价</li>
<li>计算使用不同索引执行查询的代价</li>
<li>对比各种执行方案的代价，找出成本最低的那一个</li>
</ol>
</li>
<li>多表连接：<ol>
<li>单次查询驱动表的成本</li>
<li>多次查询被驱动表的成本（具体查询多少次取决于对驱动表查询的结果集中有多少条记录）</li>
</ol>
</li>
<li>连接查询成本占大头的其实是 驱动表扇出数 x 单次访问被驱动表的成本 ，所以我们的优化<ol>
<li>重点其实是下边这两个部分：</li>
<li>尽量减少驱动表的扇出</li>
<li>对被驱动表的访问成本尽量低</li>
</ol>
</li>
</ul>
<h3 id="Buffer-Pool-缓冲池"><a href="#Buffer-Pool-缓冲池" class="headerlink" title="Buffer Pool 缓冲池"></a>Buffer Pool 缓冲池</h3><p>脏页：缓冲池中的数据已经修改但是没有同步到磁盘中</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul>
<li>模式: 逻辑模式，是开发者可见的模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</li>
<li>外模式:子模式，用户模式，用户可见</li>
<li>内模式: 存储模式，是物理存储模式</li>
</ul>
<h2 id="schema-和-database-区别"><a href="#schema-和-database-区别" class="headerlink" title="schema 和 database 区别"></a>schema 和 database 区别</h2><p>database 是一栋楼，schema(模式) 是一个个房间，但是在mysql中两种没有区别。</p>
<ul>
<li>视图和表的区别：视图是表的子集，常用于将查询结果保存在视图中，方便再次调用</li>
<li>语法：’CREATE VIEW viewName AS 查询出来的表’</li>
</ul>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul>
<li>1NF 保证原子性即可，不可再分割了</li>
<li>2NF 要有主键，且不存在部份依赖，也就是其他非主键的部分要治理来于主键即可</li>
<li>3NF 非主键之间不存在传递依赖，例如 学号, 姓名, 年龄, 学院名称, 学院电话，满足第二范式，因为后面几个属性都要和主键相关联，不能独立存在，但是通过 学号 -&gt; 学生 -&gt; 所在院 -&gt; 院电话 ，所以存在传递依赖应修改为：学生：(学号, 姓名, 年龄, 所在学院)；学院：(学院，学院名称， 电话)。</li>
<li>BCNF 消除几个主键之间的传递依赖</li>
</ul>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a><a href="https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%BA%8B%E5%8A%A1%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7">ACID</a></h2><ul>
<li><p>Atomicity（原子性）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
</li>
<li><p>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<h2 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h2><p>E-R模型是Entity-Relationship模型的缩写，是一种用于数据库设计的概念性数据模型。它用来描述现实世界中的数据之间的关系，以及这些数据的属性。E-R模型提供了一种图形化的方式来表示数据模型，使数据库设计师能够更容易地理解和规划数据库结构。</p>
<p>E-R模型包括以下几个核心概念：</p>
<ol>
<li><p>实体（Entity）：实体是现实世界中可以被识别的独立对象，例如人、物品、地点或概念。每个实体都有一些属性，用来描述这个实体的特征。</p>
</li>
<li><p>属性（Attribute）：属性是描述实体的特征或属性，它们用来存储有关实体的信息。例如，对于一个”人”实体，属性可以包括姓名、年龄、性别等。</p>
</li>
<li><p>关系（Relationship）：关系表示不同实体之间的联系或连接。关系可以是一对一、一对多或多对多的。例如，一个”雇员”实体可以与一个”部门”实体之间有一个”属于”关系，表示雇员属于某个部门。</p>
</li>
<li><p>主键（Primary Key）：主键是一个属性或属性组合，用来唯一标识实体集中的每个实体。它确保了每个实体都具有唯一的标识。</p>
</li>
<li><p>外键（Foreign Key）：外键是一个实体中的属性，它引用了另一个实体的主键，用于建立实体之间的关联。</p>
</li>
</ol>
<p>通过使用E-R模型，数据库设计师可以更好地理解数据之间的关系，从而规划数据库的结构，包括表的设计、关系的建立和数据的存储。一旦E-R模型完成，它可以用作设计数据库架构的基础，进而创建物理数据库模式（如关系模型），以实际存储和管理数据。这有助于确保数据库能够有效地存储和检索信息，并满足应用程序的需求。</p>
<h2 id="自联结，变量不会，补一补去"><a href="#自联结，变量不会，补一补去" class="headerlink" title="自联结，变量不会，补一补去"></a>自联结，变量不会，补一补去</h2><p>打开</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>数据类型</strong></p>
<p>关系型数据库：建立在关系模型基础上，由多张相互链接的二维表组成的数据库</p>
<h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><ol>
<li><p><strong>数值类型</strong></p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TINYINT 1byte -128 - 127  0 - 255 /*后面加上unsigned 即可指定为无符号*/
SMALLINT 2
MEDIUMINT 3
INT 4
BIGINT 8
FLOAT 4
DOUBLE 8
DECIMAL 看精度和标度  125.25 精度为5 标度为2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
<li><p><strong>字符串类型</strong></p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHAR() 定长字符串
VARCHAR 根据内容计算字符串长度
TINYTEXT 短文本字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>日期类</strong></p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DATE YYYY-MM-DD
TIME HH:MM:SS
YEAR YYYY
DATETIME YYYY-MM-DD HH:MM:SS
TIMESTAMP YYYY-MM-DD HH:MM:SS 时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常用函数</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DATE_FORMAT()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p><strong>时间戳记</strong>或称为<strong>时间标记</strong>（英语：timestamp）是指字符串或编码信息用于辨识记录下来的时间日期。国际标准为<a href="https://zh.wikipedia.org/wiki/ISO_8601" title="ISO 8601">ISO 8601</a>。</p>
<p>时间戳记的范例如下：</p>
<ul>
<li>2016-12-25T00:15:22Z</li>
<li>2005-10-30 10:45&nbsp;<a href="https://zh.wikipedia.org/wiki/UTC" title="UTC">UTC</a></li>
<li>Sat Jul 23 02:16:57 2005</li>
<li>2016年12月25日 (日) 00:14 (UTC)</li>
</ul>
</blockquote>
</li>
</ol>
<p>注释 # 或者 /**/</p>
<ol>
<li>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头 ^c501f6</li>
<li>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</li>
<li>DQL (Data Query Language 数据查询语言 )用于查询数据</li>
<li>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</li>
</ol>
<h3 id="DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头"><a href="#DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头" class="headerlink" title="DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头"></a>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES 查询所有的数据库
SELECT DATABASE(); 查询当前所处数据库
CREATE DATABASE  创建
DROP DATABASE XXX 删除
USE xxx  使用数据库
SHOW TABLES 查询当前数据库的所有表
DESC 表名   查询表结构
SHOW CREATE TABLE 表明 查询指定表的建表语句
	字段1 字段1类型 COMMENT 'XXX',/*注释*/
     ........
    
) COMMENTT 'XXX'/*注释可以省略*/
/*字符串类型是varchar(指定的字符长度)*/
/*修改表*/
ALTER TABLE tablename 
1.ADD字段名 类型 comment xxx 添加表头
2.CHANGE 旧 新 类型 comment xxx 修改
3.DROP name
4.RENAME TO name 修改表名

DROP TABLE name 删除
TRUNCATE TABLE name 删除并重新创建同名表，数据依旧会删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据"><a href="#DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据" class="headerlink" title="DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据"></a>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*添加数据*/
INSERT INTO 表名(字段名) VALUES (数值) 给指定字段添加数据
INSERT INTO 表名  VALUES (数值) 给所有字段加上数据
INSERT INTO 表明(字段名) VALUES (数据) ,(数据)
INSERT INTO 表明 VALUE (数据),(数据)...
/*修改*/
UPDATE 表名 SET 字段名=值, .... WHERE 条件
DELETE 表名 (WHERE 条件) /*删除*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>语句：INSERT</p>
<p>前提:<em><strong><u>获得权限</u></strong></em></p>
<p>用法：</p>
<blockquote>
<p> 插入完整的行；</p>
<p> 插入行的一部分；</p>
<p> 插入某些查询的结果。</p>
</blockquote>
<p>语法：</p>
   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers 
VALUES('1000000006', 
 'Toy Land', 
 '123 Any Street', 
 'New York', 
 'NY', 
 '11111', 
 'USA', 
 NULL, 
 NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   更加安全的操作,将要插入的列也列出</p>
   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers(cust_id, 
 cust_name, 
 cust_address, 
 cust_city, 
 cust_state, 
 cust_zip, 
 cust_country, 
 cust_contact, 
 cust_email) 
VALUES('1000000006', 
 'Toy Land', 
 '123 Any Street', 
 'New York', 
 'NY', 
 '11111', 
 'USA', 
 NULL, 
 NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>插入列的一部分，语法和上面一样，只是不需要插入的列可以省略不写，列名不写，对应的数据也不写</p>
</li>
<li><p>插入检索出的数据</p>
<p>语法：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id, 
 cust_contact, 
 cust_email, 
 cust_name, 
 cust_address, 
 cust_city, 
 cust_state, 
 cust_zip, 
 cust_country 
FROM CustNew;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><u>它使用的是列的位置，因此 SELECT 中的第一列（不管</u></p>
<p><u>其列名）将用来填充表列中指定的第一列，第二列将用来填充表列中</u></p>
<p><u>指定的第二列，如此等等</u></p>
<p>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</p>
<p>INSERT 通常只插入一行。要插入多行，必须执行多个 INSERT 语句。</p>
<p>INSERT SELECT是个例外，它可以用一条INSERT插入多行，不管SELECT</p>
<p>语句返回多少行，都</p>
</li>
<li><p>从一个表复制到另一个表</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE CustCopy AS 
SELECT * FROM Customers;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><u>SELECT INTO 是试验新 SQL 语句前进行表复制的很好工具。先进行复</u></p>
<p><u>制，可在复制的数据上测试 SQL 代码，而不会影响实际的数据。</u></p>
<h2 id="更新与删除"><a href="#更新与删除" class="headerlink" title="更新与删除"></a>更新与删除</h2><h3 id="更新：UPDATE-注意要用WHERE-否则会出事"><a href="#更新：UPDATE-注意要用WHERE-否则会出事" class="headerlink" title="更新：UPDATE 注意要用WHERE 否则会出事"></a>更新：UPDATE 注意要用WHERE 否则会出事</h3><ol>
<li><p>更新特定行</p>
<p>语法：</p>
<p> 要更新的表；</p>
<p> 列名和它们的新值；</p>
<p> 确定要更新哪些行的过滤条件。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers 
SET cust_email = 'kim@thetoystore.com' 
WHERE cust_id = '1000000005';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>UPDATE 语句以 WHERE 子句结束，它告诉 DBMS 更新哪一行。没有 WHERE</p>
<p>子句，DBMS 将会用这个电子邮件地址更新 Customers 表中的所有行，</p>
<p>这不是我们希望的。</p>
</blockquote>
</li>
<li><p>更新特定列</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers 
SET cust_contact = 'Sam Roberts', 
 cust_email = 'sam@toyland.com' 
WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在更新多个列时，只需要使用一条 SET 命令，每个“列=值”对之间用</p>
<p>UPDATE 语句中可以使用子查询，使得能用 SELECT 语句检索出的数据</p>
<p>更新列数据</p>
<p>要删除某个列的值，可设置它为 NULL（假如表定义允许 NULL 值）</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>DELETE  注意WHERE 缺少是会出事的</p>
<p> 从表中删除特定的行</p>
<p> 从表中删除所有行。</p>
<ol>
<li><p>删除特定行</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM Customers 
WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE</p>
<p>不删除表本身</p>
<p>果想从表中删除所有行，不要使用 DELETE。可使用 TRUNCATE +TABLE +表名</p>
<p>语句，它完成相同的工作，而速度更快（因为不记录数据的变动）。</p>
</blockquote>
</li>
<li><p>删除全部行</p>
<blockquote>
<p>如果执行 DELETE 语句而不带 WHERE</p>
<p>子句，表的所有数据都将被删除</p>
</blockquote>
</li>
</ol>
<h3 id="DQL-Data-Query-Language-数据查询语言-用于查询数据"><a href="#DQL-Data-Query-Language-数据查询语言-用于查询数据" class="headerlink" title="DQL (Data Query Language 数据查询语言 )用于查询数据"></a>DQL (Data Query Language 数据查询语言 )用于查询数据</h3><blockquote>
<p>SELECT + 字段列表<br>FROM  表名列表<br>WHERE 条件列表<br>[[数据库#^aa4a30|GROUP BY 分组字段列表]]<br>HAVING 分组后条件列表<br>ORDER BY 排序<br>LIMIT  分页参数<br>[[数据库#^1cd456|AS 设置别名]]<br>WHRER 和 HAVING 的区别，WHERE 在分组之前起作用，HAVING在分组之后起作用</p>
</blockquote>
<h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1，... FROM 表 或者 SELECT * FROM
SELECT DISTINCT 去重
SELECT 字段 AS 别名  ... FROM 设置字段的别名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>条件</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT XXX FROM XXX WHERE +
&gt; &gt;= &lt; &lt;= = &lt;&gt;(不等于，相当于!=) BETWEEN ... AND ... 
IN (...) 满足列表中的其一
LIKE 包含这个字符 模糊匹配
'%a'     //以a结尾的数据
'a%'     //以a开头的数据
'%a%'    //含有a的数据
'_a_'    //三位且中间字母是a的
'_a'     //两位且结尾字母是a的
'a_'     //两位且开头字母是a的
'___'    //含有三个字符的
'[]'     //类似正则表达式
'[^]'    //不包含括号之内的单个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>聚合函数:将一列数据作为一个整体，进行纵向计算</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT +
count 
max
min
avg 平均值
sum
+ 字段列表
+  FROM 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分组查询 ^aa4a30</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表 WHERE GROUP BY 分组字段名 HAVING 分组之后的过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>排序查询</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM 表名 ORDER BY 字段1 排序方式(ASC升序，DESC 降序)
，字段2 XXX <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><u>分页查询</u></p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM XXX LIMIT (起始索引，查询记录数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等于OFFSET n ROWS<br>FETCH NEXY M ROWS ONLY 跳过n行，并返回接下来的m行</p>
<h3 id="DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限"><a href="#DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限" class="headerlink" title="DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限"></a>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FORM user
CREATE USER '用户名'@'主机名' IDENTIFIED BY '/'/*使用%来指定任意主机都可以访问*/
ALTER USER '用户名' @ '主机名' IDENTIFIED WITH  mysql_native_password BY '新密码'  修改密码
DROP USER '用户名' @ '主机名' 删除用户
/*权限控制*/
SHOW GRANT FOR '用户名'@'主机名'
GRANT 权限列表 ON 数据库名 表名 TO '用户名'@'主机名'
取消权限
REVOKE 权限列表 ON 数据库名 表名 FROM '用户名'@'主机名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="函数-配合SELECT-使用"><a href="#函数-配合SELECT-使用" class="headerlink" title="函数 配合SELECT 使用"></a>函数 配合SELECT 使用</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CONCAT (s1,s2...) 拼接
LOWER(str)
UPPER(str)
LPAD(str,n,pad) 左填充，用pad来填充原字符串，填充n次
RPAD 右填充
TRIM(str) 去掉首位的空格
SUBSTRING(str,start,len) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CEIL() 向上取整
FLOOR() 向下取整
MOD(x,y) x % y
RAND() 0-1内的随机数
ROUND(x,y) 四舍五入保留y位小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a><em>日期函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CURDATE() 返回当前日期
CURTIME()
NOW() 当前日期和时间
YEAR(date) 获取指定日期的年份
MONTH(date)
DAY(date)
DATE_ADD(date,interval expr type) 返回一个日期/时间加上时间间隔expr后的时间
DATEDIFF(date1,date2) 返回两个日期相差的天数
timestampdiff(间隔类型，前一个时间，后一个时间) 计算日期查
例如: timestampdiff(YEAR,hiredate,now()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a><em>流程函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">if (value,t,f) 如果value true 返回t 否则返回f
IFNULL(v1,v2) 如果v1不为空返回v1,否则返回v2
CASE WHEN (v1) THEN (res1)
WHEN (v2) THEN (res2)
....
ELSE default END
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="约束-作用域表中字段上的规则，用于限制存储在表中的数据"><a href="#约束-作用域表中字段上的规则，用于限制存储在表中的数据" class="headerlink" title="约束 作用域表中字段上的规则，用于限制存储在表中的数据"></a>约束 作用域表中字段上的规则，用于限制存储在表中的数据</h2><p>目的是未来保证数据库中数据的正确性和完整性有效性<br>分类</p>
<blockquote>
<p>非空约束，字段不能为null     关键字: NOT NULL<br>唯一约束 字段不能重复           UNIQUE<br>主键约束 主键是一行数据的唯一表示，要求非空且唯一 PRIMARY KEY<br>默认约束 使用默认值 DEFAULT<br>检查约束 保证字段值满足某一个条件 CHECK<br>外键约束 来让两整表之间建立练习，保证数据的一致性 FOREIGN KEY</p>
</blockquote>
<p>示例：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user  
(  
    name   varchar(10) not null unique comment '姓名不为空且不能重复',  
    age    int check ( age &gt; 0 &amp;&amp; age &lt;= 120) comment '年龄检查为0-120',  
    status char(1) default '1' comment '状态默认为1',  
    gender char(1) comment '性别'  
) comment '用户表';
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>外键</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.建表时
CREATE TABLE (
 ....
 ....
 CONSTRAINT 外键名称 FOREGIN KEY (外键字段名) REFERENCES 主表列名
)
2. ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>删除/更新</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名) ON UPDATE 更新时的操作  ON DELETE 删除时要执行的操作
操作有
NO ACTION 在父表中删除/更新时，首先检查，该记录是否有外键，如果有则不允许更新或者删除
RESTRICT  同 NO ACTION 
CASCADE 可以删除/更新外键在子表中的记录
SET NULL 设置子表中的外键记录为NULL
SET DEFAULT 设置为一个默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote>
<p>多表关系：<br>一对多 多的一方建立外键指向一<br>多对多 建立第三张中间表，中间表至少包含两个外键，分别关联两方<br>一对一 任意一方加上外键并设置为UNIQUE</p>
</blockquote>
<h3 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h3><p>查询嵌套，括号内的查询结果作为括号外的条件 例子：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id 
FROM Orders 
WHERE order_num IN (SELECT order_num 
 FROM OrderItems 
 WHERE prod_id = 'RGAN01');			<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, 
 cust_state, 
 (SELECT COUNT(*) 
 FROM Orders 
 WHERE Orders.cust_id = Customers.cust_id) AS orders 
FROM Customers 
ORDER BY cust_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>标量子查询<br>子查询返回单个值<br>列子查询，返回结果是一列或者多行<br>常用操作符号</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">IN
NOT IN
ANY
SOME  和ANY相同
ALL <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>行子查询，返回一行或者是多列</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">= &lt; &gt; IN NOT IN <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>表子查询<br>返回多行多列<br>常用IN 来进行查询</p>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><ol>
<li>内联结</li>
</ol>
<p>比如</p>
<p>进行数据存储的时候，会指定一种联系方式</p>
<p>可以类比为散列表或者map</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price 
FROM Vendors, Products 
WHERE Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>正式用法</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price 
FROM Vendors INNER JOIN Products 
 ON Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>on之后的式匹配规则，同时为了防止冲突，尽量用点来获取每个不同的库的数据</p>
<p>联结多个表</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_name, vend_name, prod_price, quantity 
FROM OrderItems, Products, Vendors 
WHERE Products.vend_id = Vendors.vend_id 
 AND OrderItems.prod_id = Products.prod_id 
 AND order_num = 20007;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.自联结</p>
<p><u>联结中仍然可以使用内聚函数</u></p>
<p>例如</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, 
 COUNT(Orders.order_num) AS num_ord 
FROM Customers INNER JOIN Orders 
 ON Customers.cust_id = Orders.cust_id 
GROUP BY Customers.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>统一表内联结自己</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT c1.cust_id, c1.cust_name, c1.cust_contact 
FROM Customers AS c1, Customers AS c2 
WHERE c1.cust_name = c2.cust_name 
 AND c2.cust_contact = 'Jim Jones';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>3.自然联结</p>
<blockquote>
<p>自然联结排除多次出现，使每一列只返回一次。</p>
</blockquote>
<blockquote>
<p>自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符</p>
<p>（SELECT *），而对其他表的列使用明确的子集来完成。</p>
</blockquote>
<p>要自己完成，系统不提供</p>
<p>事实上，我们迄今为止建立的每个内联结都是自然联结，很可能永远都</p>
<p>不会用到不是自然联结的内联结。</p>
<p>4.外联结</p>
<blockquote>
<p>联结包含了那些在相关表中没有关联行的行。这种联结</p>
<p>称为外联结。</p>
</blockquote>
<p>语法：</p>
<p>內联结：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num 
FROM Customers INNER JOIN Orders 
 ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>外联结：<br>使用场景</p>
<ul>
<li><p><input disabled type="checkbox"> 
对每个顾客下的订单进行计数，包括那些至今尚未下订单的顾客；</p>
</li>
<li><p><input disabled type="checkbox"> 
列出所有产品以及订购数量，包括没有人订购的产品；</p>
</li>
<li><p><input disabled type="checkbox"> 
计算平均销售规模，包括那些至今尚未下订单的顾客。</p>
</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num 
FROM Customers LEFT OUTER JOIN Orders 
 ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在使用 OUTER </p>
<p>JOIN 语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表</p>
<p>（RIGHT 指出的是 OUTER JOIN 右边的表，而 LEFT 指出的是 OUTER JOIN</p>
<p>左边的表）。</p>
<p>也就是left 将要联结左侧的那个表全部选出</p>
<p>right 将右侧的那个表全选出</p>
</blockquote>
<p><strong>全外联结</strong></p>
<p><u><em>Access、MariaDB、MySQL、Open Office Base 和 SQLite 不支持 FULL</em></u></p>
<blockquote>
<p>还存在另一种外联结，就是全外联结（full outer join），它检索两个表中</p>
<p>的所有行并关联那些可以关联的行。与左外联结或右外联结包含一个表</p>
<p>的不关联的行不同，全外联结包含两个表的不关联的行。</p>
</blockquote>
<h2 id="联结使用条件"><a href="#联结使用条件" class="headerlink" title="联结使用条件"></a>联结使用条件</h2><blockquote>
<p><strong><u> 注意所使用的联结类型。一般我们使用内联结，但使用外联结也有效。</u></strong></p>
<p><u><strong> 关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何</strong></u><u><strong>种语法（大多数 DBMS 使用这两课中描述的某种语法）。</strong></u></p>
<p><u><strong> 保证使用正确的联结条件（不管采用哪种语法），否则会返回不正确</strong></u></p>
<p><u><strong>的数据。</strong></u></p>
<p><u><strong> 应该总是提供联结条件，否则会得出笛卡儿积。</strong></u></p>
<p><u><strong> 在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结</strong></u></p>
<p><u><strong>类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们</strong></u></p>
<p><strong><u><strong>前分别测试每个联结。这会使故障排除更为简单。</strong></u></strong> </p>
</blockquote>
<h3 id="join区别"><a href="#join区别" class="headerlink" title="join区别"></a>join区别</h3><p><strong>普通的join是笛卡尔积，即为两张表的排列组合</strong></p>
<p><img src="/2023/08/02/58/join.jpg"></p>
<h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p>在使用时直接用AS +别名就可以用了 ^1cd456</p>
<p><strong>只能每次用的时候起一次别名并且当时使用</strong></p>
<p>下一个语句别名就不能用了，要重新起名字</p>
<h2 id="UNION"><a href="#UNION" class="headerlink" title=" UNION "></a><u> UNION </u></h2><p>语法：</p>
<p>适用于从多个不同的表中挑选不同的列</p>
<blockquote>
<p>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过，</p>
<p>各个列不需要以相同的次序列出）</p>
</blockquote>
<blockquote>
<p>UNION 从查询结果集中自动去除了重复的行；换句话说，它的行为与一</p>
<p>条 SELECT 语句中使用多个 WHERE 子句条件一样。</p>
<p>这是 UNION 的默认行为，如果愿意也可以改变它。事实上，如果想返回</p>
<p>所有的匹配行，可使用 UNION ALL 而不是 UNION</p>
</blockquote>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact, cust_email 
FROM Customers 
WHERE cust_state IN ('IL','IN','MI') 
UNION 
SELECT cust_name, cust_contact, cust_email 
FROM Customers 
WHERE cust_name = 'Fun4All';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote>
<p>SELECT 语句的输出用 ORDER BY 子句排序。在用 UNION 组合查询时，只</p>
<p>能使用一条 ORDER BY 子句，它必须位于最后一条 SELECT 语句之后。对</p>
<p>于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条 ORDER BY 子句</p>
<p>用它来排序所有 SELECT 语句返回的所有结果。</p>
</blockquote>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE A
( 
 prod_id CHAR(10) NOT NULL, 
 vend_id CHAR(10) NOT NULL, 
 prod_name CHAR(254) NOT NULL, 
 prod_price DECIMAL(8,2) NOT NULL, 
 prod_desc VARCHAR(1000) NULL 
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要指定行列,并且后跟列的数据</p>
<p>类型</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders 
( 
 order_num INTEGER NOT NULL, 
 order_date DATETIME NOT NULL, 
 cust_id CHAR(10) NOT NULL 
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>不要把 NULL 值与空字符串相混淆。NULL 值是没有值，不是空字符串。</p>
<p>如果指定’’（两个单引号，其间没有字符），这在 NOT NULL 列中是允</p>
<p>许的。空字符串是一个有效的值，它不是无值。NULL 值用关键字 NULL</p>
<p>而不是空字符串</p>
<p>默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定</p>
</blockquote>
<p>更新表定义，可以使用 ALTER TABLE 语句。</p>
<blockquote>
<p>使用 ALTER TABLE 更改表结构，必须给出下面的信息：</p>
<p> 在 ALTER TABLE 之后给出要更改的表名（该表必须存在，否则将</p>
<p>出错）；</p>
<p> 列出要做哪些更改</p>
</blockquote>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors 
ADD vend_phone CHAR(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>更改或删除列、增加约束或增加键，这些操作也使用类似的语法（注意，</p>
<p>下面的例子并非对所有 DBMS 都有效）：</p>
<p>输入▼</p>
<p>ALTER TABLE Vendors </p>
<p>DROP COLUMN vend_phone; </p>
</blockquote>
<blockquote>
<p><u><em><strong>使用 ALTER TABLE 要极为小心，应该在进行改动前做完整的备份（表</strong></em></u></p>
<p><u><em><strong>结构和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的</strong></em></u></p>
<p><u><em><strong>列，也许无法删除它们。类似地，如果删除了不应该删除的列，可能</strong></em></u></p>
<p><u><em><strong>会丢失该列中的所有数据。</strong></em></u></p>
</blockquote>
<p>删除表（删除整个表而不是其内容）非常简单，使用 DROP TABLE 语句即可：</p>
<p>DELETE  只删除表的内容不删除表本身</p>
<h2 id="重新命名"><a href="#重新命名" class="headerlink" title="重新命名"></a>重新命名</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE oldname RENAME TO newname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote>
<p><u><em><strong>视图为虚拟的表。它们包含的不是数据而是根据需要检索数据的查询。</strong></em></u></p>
<p><u><em><strong>视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新</strong></em></u></p>
<p><u><em><strong>格式化或保护基础数据。</strong></em></u></p>
</blockquote>
<p>用视图将联结集合起来，也就是一个子查询，相当于一个API</p>
<p>创建 视图用 CREATE VIEW 语句来创建。与 CREATE TABLE 一样，CREATE VIEW</p>
<p>删除 删除视图，可以使用 DROP 语句，其语法为 DROP VIEW viewname;。</p>
<p>覆盖（或更新）视图，必须先删除它，然后再重新创建。</p>
<p>用法：</p>
<p>建立视图</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW ProductCustomers AS 
SELECT cust_name, cust_contact, prod_id 
FROM Customers, Orders, OrderItems 
WHERE Customers.cust_id = Orders.cust_id 
 AND OrderItems.order_num = Orders.order_num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这条语句创建一个名为 ProductCustomers 的视图，它联结三个表，返</p>
<p>回已订购了任意产品的所有顾客的列表。</p>
<p>使用视图</p>
<p>使用时，</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact 
FROM ProductCustomers 
WHERE prod_id = 'RGAN01';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>也可以用于统一格式</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW VendorLocations AS 
SELECT RTRIM(vend_name) || ' (' || RTRIM(vend_country) || ')' 
 AS vend_title 
FROM Vendors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>之后可用</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * 
FROM VendorLocations;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>用于过滤也一样</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW CustomerEMailList AS 
SELECT cust_id, cust_name, cust_email 
FROM Customers 
WHERE cust_email IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>之后</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * 
FROM CustomerEMailList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>计算字段</p>
<pre class="line-numbers language-none"><code class="language-none">CREATE VIEW OrderItemsExpanded AS 
SELECT order_num, 
 prod_id, 
 quantity,
 item_price, 
 quantity*item_price AS expanded_price 
FROM OrderItems;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之后</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * 
FROM OrderItemsExpanded 
WHERE order_num = 20008;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="存储（不会）"><a href="#存储（不会）" class="headerlink" title="存储（不会）"></a>存储（<u><em><strong>不会</strong></em></u>）</h2><blockquote>
<p>可以创建存储过程。简单来说，存储过程就是为以后使用而保存的一条</p>
<p>或多条 SQL 语句。可将其视为批文件，虽然它们的作用不仅限于批处理</p>
<p> 通过把处理封装在一个易用的单元中，可以简化复杂的操作（如前面</p>
<p>例子所述）。</p>
<p> 由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如</p>
<p>果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都</p>
<p>是相同的。</p>
</blockquote>
<blockquote>
<p>EXECUTE AddNewProduct( ‘JTS01’, </p>
<p>‘Stuffed Eiffel Tower’, </p>
<p>6.49, </p>
<p>‘Plush stuffed toy with the text La </p>
<p>➥Tour Eiffel in red white and blue’ ); </p>
</blockquote>
<h2 id="管理事务处理（不会深入学习的时候再看）"><a href="#管理事务处理（不会深入学习的时候再看）" class="headerlink" title="管理事务处理（不会深入学习的时候再看）"></a>管理事务处理（不会深入学习的时候再看）</h2><blockquote>
<p>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么</p>
<p>完全执行，要么完全不执行，来维护数据库的完整性</p>
</blockquote>
<blockquote>
<p> 事务（transaction）指一组 SQL 语句；</p>
<p> 回退（rollback）指撤销指定 SQL 语句的过程；</p>
<p> 提交（commit）指将未存储的 SQL 语句结果写入数据库表；</p>
<p> 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），</p>
<p>可以对它发布回退（与回退整个事务处理不同）。</p>
</blockquote>
<p><strong>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT</strong></p>
<p><strong>语句（回退 SELECT 语句也没有必要），也不能回退 CREATE 或 DROP 操</strong></p>
<p><strong>作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</strong></p>
<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><blockquote>
<p>有时，需要在检索出来的行中前进或后退一行或多行，这就是游标的用</p>
<p>途所在。游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，</p>
<p>它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储了</p>
<p>游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p>
</blockquote>
<p>游标的选项和特性</p>
<blockquote>
<p> 能够标记游标为只读，使数据能读取，但不能更新和删除。</p>
<p> 能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、</p>
<p>相对位置等）。</p>
<p> 能标记某些列为可编辑的，某些列为不可编辑的。</p>
<p> 规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求</p>
<p>可访问。</p>
<p> 指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，</p>
<p>使数据在游标打开和访问期间不变化。</p>
</blockquote>
<p>游标使用</p>
<blockquote>
<p> 在使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，</p>
<p>它只是定义要使用的 SELECT 语句和游标选项。</p>
<p> 一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT</p>
<p>语句把数据实际检索出来。</p>
<p> 对于填有数据的游标，根据需要取出（检索）各行。</p>
<p> 在结束游标使用时，必须关闭游标，可能的话，释放游标（有赖于具</p>
<p>体的 DBMS）。</p>
<p>声明游标后，可根据需要频繁地打开和关闭游标。在游标打开时，可根</p>
<p>据需要频繁地执行取操作。</p>
</blockquote>
<p>创建游标</p>
<blockquote>
<p>使用 DECLARE 语句创建游标，这条语句在不同的 DBMS 中有所不同。</p>
<p>DECLARE 命名游标，并定义相应的 SELECT 语句，根据需要带 WHERE 和</p>
<p>其他子句。为了说明，我们创建一个游标来检索没有电子邮件地址的所</p>
<p>有顾客，作为应用程序的组成部分，帮助操作人员找出空缺的电子邮件</p>
<p>地址</p>
</blockquote>
<p>语法</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE CustCursor CURSOR 
FOR 
SELECT * FROM Customers 
WHERE cust_email IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用游标</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPEN CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>关闭游标</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CLOSE CustCursor 
DEALLOCATE CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="约束（不会捏）"><a href="#约束（不会捏）" class="headerlink" title="约束（不会捏）"></a>约束（不会捏）</h2><blockquote>
<p>DBMS 通过在数据库表上施加约束来实施引用完整性。大多数约束是在</p>
<p>表定义中定义的，如第 17 课所述，用 CREATE TABLE 或 ALTER TABLE</p>
<p>语句。</p>
</blockquote>
<p>主键</p>
<blockquote>
<p>我们在第 1 课简单提过主键。主键是一种特殊的约束，用来保证一列（或</p>
<p>一组列）中的值是唯一的，而且永不改动。换句话说，表中的一列（或</p>
<p>多个列）的值唯一标识表中的每一行。这方便了直接或交互地处理表中</p>
<p>的行。没有主键，要安全地 UPDATE 或 DELETE 特定行而不影响其他行会</p>
<p>非常困难。</p>
<p>表中任意列只要满足以下条件，都可以用于主键。</p>
<p> 任意两行的主键值都不相同。</p>
<p> 每行都具有一个主键值（即列中不允许 NULL 值）。</p>
<p> 包含主键值的列从不修改或更新。（大多数 DBMS 不允许这么做，但</p>
<p>如果你使用的 DBMS 允许这样做，好吧，千万别！）</p>
<p> 主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</p>
<p>一种定义主键的方法是创建它，如下所示</p>
</blockquote>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Vendors 
( 
 vend_id CHAR(10) NOT NULL PRIMARY KEY, 
 vend_name CHAR(50) NOT NULL, 
 vend_address CHAR(50) NULL, 
 vend_city CHAR(50) NULL, 
 vend_state CHAR(5) NULL, 
 vend_zip CHAR(10) NULL, 
 vend_country CHAR(50) NULL 
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在此例子中，给表的 vend_id 列定义添加关键字 PRIMARY KEY，使其成</p>
<p>为主键。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors 
ADD CONSTRAINT PRIMARY KEY (vend_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>这里定义相同的列为主键，但使用的是 CONSTRAINT 语法。此语法也可</p>
<p>以用于 CREATE TABLE 和 ALTER TABLE 语句</p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键是表中的一列，其值必须列在另一表的主键中。外键是保证引用完</p>
<p>整性的极其重要部分。我们举个例子来理解外键</p>
<blockquote>
<p>如第 6 课所述，除帮助保证引用完整性外，外键还有另一个重要作用。</p>
<p>在定义外键后，DBMS 不允许删除在另一个表中具有关联行的行。例</p>
<p>如，不能删除关联订单的顾客。删除该顾客的唯一方法是首先删除相</p>
<p>关的订单（这表示还要删除相关的订单项）。由于需要一系列的删除，</p>
<p>因而利用外键可以防止意外删除数据。</p>
<p>有的 DBMS 支持称为级联删除（cascading delete）的特性。如果启用，</p>
<p>该特性在从一个表中删除行时删除所有相关的数据。例如，如果启用</p>
<p>级联删除并且从 Customers 表中删除某个顾客，则任何关联的订单行</p>
<p>也会被自动删除。</p>
</blockquote>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders 
( 
 order_num INTEGER NOT NULL PRIMARY KEY, 
 order_date DATETIME NOT NULL, 
cust_id CHAR(10) NOT NULL REFERENCES 
➥Customers(cust_id) 
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (inex_col_name,... ) ; UNIQUE 代表的是一个唯一的索引，不可重复
SHOW INDEX FROM table_name ;
iDROP INDEX index_name ON table_name ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">
触发器

&gt; 触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发
&gt;
&gt; 器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。
&gt;
&gt; 与存储过程不一样（存储过程只是简单的存储 SQL 语句），触发器与单
&gt;
&gt; 个的表相关联。与 Orders 表上的 INSERT 操作相关联的触发器只在
&gt;
&gt; Orders 表中插入行时执行。类似地，Customers 表上的 INSERT 和
&gt;
&gt; UPDATE 操作的触发器只在表上出现这些操作时执行。

&gt; 触发器内的代码具有以下数据的访问权：
&gt;
&gt;  INSERT 操作中的所有新数据；
&gt;
&gt;  UPDATE 操作中的所有新数据和旧数据；
&gt;
&gt;  DELETE 操作中删除的数据。
&gt;
&gt; 根据所使用的 DBMS的不同，触发器可在特定操作执行之前或之后执行。
&gt;
&gt; 下面是触发器的一些常见用途。
&gt;
&gt;  保证数据一致。例如，在 INSERT 或 UPDATE 操作中将所有州名转换
&gt;
&gt; 为大写。
&gt;
&gt;  基于某个表的变动在其他表上执行活动。例如，每当更新或删除一行
&gt;
&gt; 时将审计跟踪记录写入某个日志表。

```mysql
CREATE TRIGGER customer_state 
ON Customers 
FOR INSERT, UPDATE 
AS 
UPDATE Customers 
SET cust_state = Upper(cust_state) 
WHERE Customers.cust_id = inserted.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="case-来进行多条件判断-不要忘记END"><a href="#case-来进行多条件判断-不要忘记END" class="headerlink" title="case 来进行多条件判断 不要忘记END"></a>case 来进行多条件判断 不要忘记END</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件 THEN 满足的结果 ELSE 不满足结果 END<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>多行耦合</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件1 THEN Y1
	 WHEN XXX 条件2 THEN  Y2
	 WHEN XXX 条件3 THEN Y3 ELSE Y4 END 
	 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>一组操作的集合，不可分割，这些操作要么同时成功，要么同时失败，mysql默认提交方式是自动提交的，所以要改为手动提交才行</p>
</blockquote>
<p>方式1</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@autocommit; 查看提交方式，返回为1则为自动提交，否则为手动提交
set @@autocommit = 0 ; 设置为手动提交

commit 提交

rollback 回滚
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方式二<br>事务操作</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction 或者 begin 开启事务
commit 提交
rollback 回滚 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>事务特点</p>
<ul>
<li><p><strong>原子性</strong> 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p><strong>一致性</strong> 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p><strong>隔离性</strong> 数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
</li>
<li><p><strong>持久性</strong> 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul>
<li>脏读 一个事务读到另一个事务还没有提交的数据</li>
<li>不可重复读，一个事务先后读取一条重复记录，但两次读取的数据不同，成为不可重复读</li>
<li>幻读 一个事务按照条件查询时，没有对应的数据行但是在插入数据时，这行数据已经存在了，出现了幻影<br>事务隔离级别<br><img src="/2023/08/02/58/1.png"><br>可以手动设置系统的隔离级别</li>
</ul>
<h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(

字段1 字段1类型 [ COMMENT 字段1注释 ] ,

......

字段n 字段n类型 [COMMENT 字段n注释 ]

) ENGINE = INNODB [ COMMENT 表注释 ] ;
show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>InnoDB特点<br>支持事务，行级锁，外键约束</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><blockquote>
<p>全局锁：锁定数据库中的所有表。<br>表级锁：每次操作锁住整张表。<br>行级锁：每次操作锁住对应的行数据。</p>
</blockquote>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><blockquote>
<p>　1）、length()：mysql里面的length()函数是一个用来获取字符串长度的内置函数。<br>　　2）、char_length()：在mysql内置函数里面查看字符串长度的还有一个函数是char_length()。<br>　　3）、这两个函数的区别是：<br>　　　　a）、length()： 单位是字节，utf8编码下,一个汉字三个字节，一个数字或字母一个字节。gbk编码下,一个汉字两个字节，一个数字或字母一个字节。<br>　　　　b）、char_length()：单位为字符，不管汉字还是数字或者是字母都算是一个字符。</p>
</blockquote>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">^：表示一个字符串或行的开头

[a-z]：表示一个字符范围，匹配从 a 到 z 的任何字符。

[0-9]：表示一个字符范围，匹配从 0 到 9 的任何字符。

[a-zA-Z]：这个变量匹配从 a 到 z 或 A 到 Z 的任何字符。请注意，你可以在方括号内指定的字符范围的数量没有限制，您可以添加想要匹配的其他字符或范围。

[^a-z]：这个变量匹配不在 a 到 z 范围内的任何字符。请注意，字符 ^ 用来否定字符范围，它在方括号内的含义与它的方括号外表示开始的含义不同。

[a-z]*：表示一个字符范围，匹配从 a 到 z 的任何字符 0 次或多次。

[a-z]+：表示一个字符范围，匹配从 a 到 z 的任何字符 1 次或多次。

.：匹配任意一个字符。

\.：表示句点字符。请注意，反斜杠用于转义句点字符，因为句点字符在正则表达式中具有特殊含义。还要注意，在许多语言中，你需要转义反斜杠本身，因此需要使用\\.。

$：表示一个字符串或行的结尾。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">//导包
import com.mysql.jdbc.Driver;  
  
import javax.swing.plaf.nimbus.State;  
import java.sql.*;  
public class Name {  
public static void main(String[] args) throws Exception {  
//注册驱动程序  
Class.forName("com.mysql.jdbc.Driver");  
//获取连接  
String url = "jdbc:mysql://localhost:3306/t";  
String username = "root";  
String password = "hutao1224";  
Connection conn = DriverManager.getConnection(url,username,password);  
//获取执行sql语句的对象  
String sql = "insert into employees (name)value ('Amy');";  
Statement stmt = conn.createStatement();  
//执行sql语句  
int count = stmt.executeUpdate(sql);  
//处理结果  
System.out.println(count);  
//释放资源  
stmt.close();  
conn.close();
}  
  
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>防止sql注入使用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
 <span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPreparedStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 接收用户输入 用户名和密码</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token string">"' or '1' = '1"</span><span class="token punctuation">;</span>

    <span class="token comment">// 定义sql</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tb_user where username = ? and password = ?"</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取pstmt对象</span>
    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置？的值</span>
    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//?的位置和参数</span>
    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行sql</span>
    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不需要传递sql语句了</span>
    <span class="token comment">// 判断登录是否成功</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//7. 释放资源</span>
    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">占位符？只能用来取代sql语句中的常变量，而不能取代列名或者表名
select <span class="token operator">?</span> from <span class="token operator">?</span> where  <span class="token operator">?</span>   前两个<span class="token operator">?</span>不成立，只能用 <span class="token string">"+variable+"</span> 的方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h3><ul>
<li>一致性哈希：整个哈希值的空间被视为一个环形，每个节点或数据都被映射到整个环上，当需要查找某个键时，会沿着环查找第一个匹配的节点。</li>
<li>数据结构：<ul>
<li>SkipList跳表，ZSet中如果保存到键值对数量&lt;128 &amp;&amp; 每个元素的长度小于64B就使用ziplist，否则则使用skiplist<ul>
<li>数据按照升序排序存储</li>
<li>节点可能包含多个指针，指针跨度不同</li>
</ul>
</li>
<li>SortedSet是有序集合，底层存储的每个数据都包含element和score两个值，score是得分，element是字符串值，会根据element和score值排序，形成有序集合，基于SkipList实现的</li>
<li>Redis如何判断KEY是否过期呢？<ul>
<li><strong>答</strong>：在Redis中会有两个Dict，也就是HashTable，其中一个记录KEY-VALUE键值对，另一个记录KEY和过期时间。要判断一个KEY是否过期，只需要到记录过期时间的Dict中根据KEY查询即可。</li>
</ul>
</li>
</ul>
</li>
<li>集群问题：<ol>
<li>Sentinel是哨兵：监控节点状态并自动实现故障转移 <img src="/2023/08/02/58/%E5%93%A8%E5%85%B5%E5%8E%9F%E7%90%86.png" alt="|400"><ul>
<li>哨兵的作用：状态监控，故障转移，状态通知</li>
<li>主观下线是某一个sentinel节点发现某个节点没在规定时间内响应，客观下线是指的是有一半以上的sentinel都认为下线了才行</li>
<li>选举新的master: </li>
<li>选举规则：判断优先级，判断offset值，越高越优先，判断id，越小越优先<ol>
<li>故障检测：sentinel检测主节点和从节点的在线情况，如果有半数以上的sentinel认为主节点故障，就会开始选举</li>
<li>sentinel选举出一个leader节点，每个sentinel都有资格，sentinel确定master下线之后就会请求其他sentinel同意自己成为leader，票数大于一半的sentinel即可成为leader,如果没有选出，就重复直到选出</li>
<li>选举根据 数据复制的偏移量更大(数据最新)，运行id更小(运行时间更长 )，节点的优先级进行选举</li>
<li>通知所有的从节点设置新的主节点，并且进行复制</li>
<li>通知客户端重新连接主节点</li>
</ol>
</li>
<li>主从复制：<ul>
<li>全量同步，当slave第一次连接到master或者slave断开太久了，repl_baklog(复制积压缓冲区)的offset已经被覆盖了，同步过程中收到的读写命令都会先执行然后记录在repl_baklog中，逐个发送给slave <img src="/2023/08/02/58/%E5%85%A8%E9%87%8F%E5%90%8C%E6%AD%A5.png" alt="|550"><ol>
<li>从节点保存主节点信息，与主节点建立连接，主节点判断是否是第一次请求，是就与从节点同步版本信息</li>
<li>主节点fork一个子进程保存当前所有的数据，2.发送数据快照3.之后主节点每次执行其他的操作都会同步给从节点<ul>
<li><p>**<code>Replication Id</code>**：简称<code>replid</code>，是数据集的标记，replid一致则是同一数据集。每个<code>master</code>都有唯一的<code>replid</code>，<code>slave</code>则会继承<code>master</code>节点的<code>replid</code></p>
</li>
<li><p>**<code>offset</code>**：偏移量，随着记录在<code>repl_baklog</code>中的数据增多而逐渐增大。<code>slave</code>完成同步时也会记录当前同步的<code>offset</code>。如果<code>slave</code>的<code>offset</code>小于<code>master</code>的<code>offset</code>，说明<code>slave</code>数据落后于<code>master</code>，需要更新。</p>
</li>
</ul>
</li>
</ol>
</li>
<li>增量同步：<img src="/2023/08/02/58/%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5.png" alt="|750"><ul>
<li>根据offset来进行同步</li>
<li>具体的比较是通过<code>repl_baklog</code>，记录Redis处理过的命令及<code>offset</code>，包括master当前的<code>offset</code>，和slave已经拷贝到的<code>offset</code>发送的是命令： <img src="/2023/08/02/58/%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84.png"></li>
</ul>
</li>
</ul>
</li>
<li>防止脑裂问题：设置主节点最少需要的从节点数，小于这个数量主节点就会禁止写数据，设置主从复制和同步的最大延迟，如果时间超过这个延迟就会禁止写数据。同时可以用主观下线和客观下线，当出现网络分区时，有部分的节点仍然能够连接上主节点，于是就不会出现重新选举主节点。</li>
<li>offset复制偏移量：主从各自维护自己的offset，子节点把自己的offset上报，master保存offset ，部分复制使用二者的偏移量来同步缺失的数据</li>
</ul>
</li>
<li>分片集群：<img src="/2023/08/02/58/%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4.png"><ul>
<li>每个master保存不同的数据，然后每个master都可以有多个slave节点，之后master之间通过ping来检测彼此之间的健康状态，客户端请求可以访问集群任意节点，最终都会被转发到数据所在的节点</li>
<li>故障转移：每个master转移到自己的slave即可</li>
<li>为什么插槽的数量是16384,16384是2的14次方，是一个平衡性、行呢个和兼容性之间取得折衷的结果</li>
<li>如何将同一类数据固定的保存在同一个Redis实例？<ul>
<li>Redis计算key的插槽值时会判断key中是否包含<code>{}</code>，如果有则基于<code>{}</code>内的字符计算插槽</li>
<li>所以只要用{key} 作为前缀即可把相同的类型的数据计算的插槽一定相同</li>
</ul>
</li>
</ul>
</li>
<li>常见的缓存有几种：<ul>
<li>旁路缓存：使用应用程序来保证缓存和数据库的一致性<ol>
<li>先写DB然后直接删除cache<ul>
<li>为何删除？ 1.如果db频繁更改，导致cache中的数据很少被访问，删除可以节省服务端的资源 2. 更新cache更容易造成缓存不一致的现象</li>
<li>为何不能先删除cache? 因为 如果有两个请求同时访问，请求1先把cache中的数据删除了，请求二就会从db中读取数据，然后请求一再更改db，会导致请求2读到的是旧值</li>
<li>写cache的速度要比写db快很多，所以很少会造成不一致</li>
</ul>
</li>
<li>从cache中读取数据，读不到再从db中读入并返回，然后放到cache中</li>
<li>缺点：<ul>
<li>首次请求不在cache中：可以将热点数据提前放入</li>
</ul>
</li>
</ol>
</li>
<li>读写穿透：以cache为主，让cache服务操作，不需要<ul>
<li>写:先写cache,cache没有时直接写db,有的话先更新cache,之后更新db 同步更新</li>
<li>读：直接读cache,cache没有直接读db，然后放入cache.</li>
</ul>
</li>
<li>异步缓存写入：也是由cache服务来处理,但是更新时，只更新cache,由异步处理来更新db<ul>
<li>缺点：容易造成数据不一致</li>
<li>适合对数据一致性要求没那么 高的</li>
</ul>
</li>
</ul>
</li>
<li>Redis单线程模型：Redis对于每一个客户端的连接都关联一个指令队列和响应队列<ul>
<li>为何单线程性能还这么高？ <ol>
<li>使用纯内存访问，</li>
<li>单线程避免不必要的上下文切换和竞争</li>
<li>IO多路复用，对于多个IO，Redis每次处理其中一个IO然后暂停对其他的IO事件。使用一个线程来监听多个socket某个socket可读时及逆行读写<ul>
<li>实现：select(文件描述符有上限)，poll这俩只会通知用户有有Socket就绪，不确定具体的是哪个，需要轮询来找</li>
<li>epoll会通知用户的时候把哪个socket也直接写入用户空间 </li>
<li>详细介绍一下为什么I/O复用</li>
</ul>
<ol start="2">
<li>Redis是纯内存的，所以性能取决于网络延迟，I/O多路复用实现了高效的网络请求<ol>
<li>常见的IO有 阻塞，非阻塞，多路复用</li>
<li>非阻塞式IO，读到多少就都多少，写多少，不会等待满足字节要求</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>优点：避免了线程切换的消耗。</li>
</ul>
</li>
</ol>
<ul>
<li>主从复制： 主服务器执行写操作时，会将写操作同步给从服务器，从服务器只读，并执行主服务器同步过来的指令 缺点：主服务器宕机时必须手动恢复</li>
<li>哨兵模式： 监控主从服务器，提供主从节点故障转移的功能</li>
<li>切片集群：将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能。</li>
<li>脑裂问题： 由于网络问题，集群节点之间失去联系。主从数据不同步；重新平衡选举，产生两个主服务。等网络恢复，旧主节点会降级为从节点，再与新主节点进行同步复制的时候，由于会从节点会清空自己的缓冲区，所以导致之前客户端写入的数据丢失了。 解决： 当主节点发现从节点下线或者通信超时的总数量大于阈值时，那么禁止主节点进行写数据，直接把错误返回给客户端。</li>
</ul>
</li>
<li>数据相关：<ul>
<li>数据淘汰策略：<ul>
<li>如何保证Redis中的数据是热点数据？ 答案是可以使用LRU删除策略，每次删除数据时删除最近最少使用的键，同时也可以主动去更新热点数据</li>
<li>其余的各种内存淘汰机制：1.内存到达限制时返回错误，不删除，2.删除最近最少使用键，3.lru但是只删除设置了过期时间的键，4.随机删除一些 5. 随机删除一些设置了过期时间的键6. 对访问频率来进行删除<img src="/2023/08/02/58/redis%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5.png"></li>
</ul>
</li>
<li>持久化：<ul>
<li>RDB：创建数据的快照，存的是实际的数据<ul>
<li>redis建立新的子进程，父进程继续处理请求，子进程负责将内存内容写到临时文件，os的实时复写copy-on-write会使得父进程和子进程共享一个物理页面，所以会为父进程要修改的页面创建副本，所以子进程内的数据就是fork时的快照。 子进程写完文件之后，使用临时文件代替原来的快照文件，之后子进程quit, <strong>进行的是全量快照，会把整个数据全部保存</strong></li>
</ul>
</li>
<li>AOF：<ul>
<li>重写：AOF重写会调用一个子进程，由子进程去进行重写，会读取数据库中的键值对为每一个键值对生成一个或多个写命令，这些写命令足以恢复这个键值对的状态。然后把他们写入一个新的AOF文件中，同时Redis会维护一个AOF缓冲区，把重写期间进行的数据库写操作记录到缓冲区中，重写完毕之后会把新的AOF文件发给主进程，然后退出，主进程把缓冲区中的写命令写入其中并使用新的AOF文件替换旧的AOF文件</li>
</ul>
</li>
</ul>
</li>
<li>注意：实现原理是操作系统会为进程<ul>
<li>AOF：记录操作命令而不是副本。<ol>
<li>fork,子进程向临时文件中写入重建数据库状态的命令</li>
<li>父进程接收到请求后，把写命令写入到原来的aof文件中，然后缓存起来这些命令</li>
<li>子进程搞完之后，通知父进程，父进程把缓存起来的命令写入临时文件</li>
<li>使用临时文件替代老文件,注意不会读取老文件</li>
</ol>
</li>
<li>混合持久化：两者结合，惰性删除：只有在访问这个键的时候才检查是否过期</li>
</ul>
<ol>
<li>读写分离问题：读占比较大时可以把一部分的流量摊到从节点，只对主节点进行写服务。</li>
</ol>
</li>
<li>过期策略：惰性删除和定时删除，Redis使用了两种结合的方式：当某个key被访问时，会定期检查是否过期，如果过期就删除，同时会定期对一部分key进行检查，如果过期就删除<ul>
<li>周期删除的模式：<ol>
<li>SLOW模式：通过定时任务定期抽样部分带有TTL的key，判断是否过期。如果过期key比例较高会多次抽象</li>
<li>FAST模式：Redis每次处理NIO事件之前，都会抽样部分带有TTL的key，判断是否过程，因此频率较高。如果时间充足并且过期key比例过高，也会多次抽样。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><ul>
<li><strong>缓存问题</strong>:<ul>
<li>缓存雪崩：<strong>大量缓存</strong> 在同一时间失效或者Redis宕机导致后面的请求都直接落到了db<ul>
<li>修改key的TTL，设置随机TTL<ol>
<li>将缓存失效时间打散，在失效时间基础上加一个随机值</li>
<li>设置缓存不过期</li>
</ol>
</li>
<li>搭建Redis的集群，哨兵模式，集群模式<ul>
<li>给业务限流，nginx和spring cloud gateway</li>
</ul>
</li>
<li>使用多级缓存，Guava和Caffeine + Redis， 前面这俩是缓存在服务中的JVM中的，分布式项目中不能跨服务，但是请求速度是最快的，因为是本地的缓存</li>
<li>给缓存业务添加降级限流策略</li>
</ul>
</li>
<li><strong>缓存击穿</strong>：热点key过期，大量的请求直接给数据库压力<ul>
<li>互斥锁方案，保证同一时间只能有一个业务线程请求业务缓存</li>
<li>不给热点数据设置过期时间，由异步更新缓存，或者在热点数据要过期的时候，提前通知前台线程更新缓存或者重新设置过期时间，保证高可用，数据不会是绝对一致的</li>
</ul>
</li>
<li>缓存穿透：访问的数据不在缓存中，每次都直接查询数据库，给数据库很大压力 ，解决方案是使用布隆过滤器<ul>
<li>非法请求的限制，当有大量恶意请求访问不存在的数据时，在API入口要判断请求参数是否合理</li>
<li>设置空值或者默认值</li>
<li>使用<strong>布隆过滤器快速判断数据是否存在，避免通过查询数据库来判断数据是否存在</strong>：</li>
<li><a href="https://zhuanlan.zhihu.com/p/94433082">布隆过滤器</a>对一个数据用多个哈希函数来映射，当查询时，如果多个哈希函数的映射后任何一个索引都为0，则一定不存在，如果所有的映射后的位置都是1时，则可能存在集合中。使用的是位图<img src="/2023/08/02/58/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png"></li>
</ul>
</li>
<li>数据一致性<ul>
<li><strong>双写一致问题：</strong><ul>
<li>保证一致性<br>  1. 写使用的<strong>延迟双删</strong>，删两次缓存，等数据库修改完之后再删除一次缓存，用于解决数据库主从一致性问题，与缓存同步为u管。<br>  2. Cache Aside 旁路缓存策略<br>      - 写策略：先更新数据库再删除缓存中的数据<br>      - 读策略：如果命中了缓存，直接返回，否则从数据库中读入数据并写入缓存，返回给用户<br>  3. Read/Write Through 读穿/写穿策略: 应用程序只与缓存交互，由缓存组件和数据库交互，<br>      - 读为名周直接查数据库然后写入缓存<br>      - 写未命中，缓存存在直接写缓存，然后由缓存组件去更新数据库。缓存不存在则直接更新数据库<br>  4. Write Back（写回）策略<ul>
<li>使用读锁(共享锁)和写锁(排他锁)</li>
</ul>
</li>
<li>允许短暂不一致：<ul>
<li>使用消息队列，先修改数据库，数据库修改完之后向MQ发送消息，由cahe服务接受消息来对缓存进行更新</li>
<li>取决于mq的可靠性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>延时队列： 把当前要做的事情推迟一段时间再做，如下单未付款取消<ul>
<li>可以使用 Zset来纯理，Score属性来存储延迟执行的时间</li>
<li>zadd score1 value1;</li>
<li>大key  value的值很大</li>
</ul>
</li>
<li>分布式问题：<ol>
<li>分布式锁：setnx 实际使用应该使用 set key value nx ex time 因为这个可以直接在原子性指定时间</li>
<li>Reddsion来续锁：使用lua脚本，来保证原子性<ol>
<li>一个线程获得锁，然后在事务中调用了另一个事务，另一个事务也同样对相同的锁加锁，会发生什么？<ul>
<li>如果是直接使用Redis，会阻塞，然后等锁过期后，被调用的函数可以执行，被调用的函数执行之后会释放锁，返回到第一个函数执行，第一个函数执行之后就会重复释放这个锁，无法保证原子性了。</li>
<li>如果使用Redssion，Redssion的RLock数据结构实现了可重入锁：<ul>
<li>key，status持有还是释放 ，UUID标识线程 ， 持有时间(最长的存活时间)</li>
<li>Redis中存的value字段为锁的次数</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"myLock"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"LOCKED"</span><span class="token punctuation">,</span>
    <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"some-unique-uuid"</span><span class="token punctuation">,</span>
    <span class="token property">"hold_count"</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>			<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>        - 这个问题中就会直接判断出是同一个线程的调用，所以只会给锁的持有技术+1，不会阻塞
</code></pre>
<ul>
<li><p>multi开始事务，discard取消事务redis的事务在出错时，只会回滚出错的命令</p>
</li>
<li><p>使用watch key 来对某一个key加上乐观锁</p>
</li>
<li><p>Redis 与 Memcached&nbsp;<strong>区别</strong>：</p>
<ol>
<li>Redis支持的数据类型更丰富：Sting Hash List Set Zset， M只支持key-value数据类型</li>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中。</li>
<li>Redis原生支持集群模式</li>
<li>Redis支持发布订阅模型，LUa吉奥本，事务等</li>
</ol>
</li>
<li><p>数据类型</p>
<ul>
<li>String 类型的应用场景：SDS，可以存任何类型，直接存在二进制buf数组里</li>
<li>List 实现是：</li>
<li>Hash 类型：缓存对象、购物车等。</li>
<li>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li>
<li>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</li>
<li>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li>
<li>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</li>
<li>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</li>
<li>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</li>
</ul>
</li>
<li><h3 id="Redis在执行命令的时候是单线程，但是也使用了多线程的来处理网络IO操作"><a href="#Redis在执行命令的时候是单线程，但是也使用了多线程的来处理网络IO操作" class="headerlink" title="Redis在执行命令的时候是单线程，但是也使用了多线程的来处理网络IO操作"></a>Redis在执行命令的时候是单线程，但是也使用了多线程的来处理网络IO操作</h3><ul>
<li>不是，Redis会启动后台： 三个线程各自有自己的任务队列,<ol>
<li>处理关闭文件</li>
<li>处理AOF刷盘</li>
<li>异步释放Redis内存，也就是lazyfree线程</li>
<li>主线程，负责执行命令</li>
<li>三个I/O线程来分担网络I/O压力</li>
</ol>
</li>
<li>这些任务的操作都是很耗时的，如果把这些任务都放在主线程来处理，那么 Redis 主线程就很容易发生阻塞，这样就无法处理后续的请求了。</li>
</ul>
</li>
<li><p>过期删除和内存淘汰： Redis使用懒惰性删除和定期删除。 惰性删除时指不主动删除过期键，每次反问key时检查是否过期，如果过期，则删除。 优点是：减少对系统资源的使用，缺点是：不能及时释放内存</p>
<ul>
<li>定期删除：每过一段时间，从数据库中取出一定数量的key来进行检查，删除其中的过期key，如果过期key超过一定比例，重复执行定期删除</li>
<li>当 Redis 运行在主从模式下时，<strong>从库不会进行过期扫描，从库对过期的处理是被动的</strong>。也就是即使从库中的 key 过期了，如果有客户端访问从库时，依然可以得到 key 对应的值，像未过期的键值对一样返回。</li>
<li>从库的过期键处理依靠主服务器控制，<strong>主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库</strong>，从库通过执行这条 del 指令来删除过期的 key。REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库，非关系型数据库，</li>
</ul>
</li>
<li><p>内存淘汰： 随机淘汰，LRU最近最少使用，根据最后一次访问的时间 , LFU最近最不常使用，根据访问次数来淘汰</p>
</li>
<li><p>Lua :Redis 在执行 Lua 脚本时，可以以原子性的方式执行</p>
</li>
<li><p>Lua脚本使用</p>
<ol>
<li>EVAL执行脚本<code> EVAL script numkeys key [key …] arg [arg …]</code></li>
<li>SCRIPT LOAD script.lua 把脚本加载到redis-serve中，返会一个&nbsp;SHA1校验和，之后无论是哪个客户端都可以使用这个校验和来运行脚本。</li>
<li>EVALSHA sha1校验和  numkeys key [key …] arg [arg …]</li>
<li>SCRIPT EXISTS sha1来检验这个脚本是否还在</li>
<li>SCRIPT FLUSH刷新所有已经保存的脚本</li>
<li>redis-cli -a 密码 –eval lua脚本内容</li>
</ol>
</li>
<li><p>对于基本数据类型的操作</p>
<ol>
<li>string <ul>
<li>redis中的string可以包含任何数据，包括jpg和序列化的对象，因为string是byte [] 数组</li>
<li>setrange key number string 从number开始的下标处替换string,从0开始</li>
<li>mset 设置多个</li>
<li>xxnx not exit 不存在的话在设置</li>
<li>getrange key begin end</li>
<li>incryby key 增量 修改数据</li>
<li>append key 加</li>
<li>strlen 获取长度</li>
</ul>
</li>
<li>hash: string类型的 field 和 value的映射表,占用内存更少，方便取整个对象<ul>
<li>hset/hsetnx key field1 value1</li>
<li>hmget 获取多个fields</li>
<li>hexists key field 测试field是否存在</li>
<li>hlen key 有多少field</li>
<li>hkeys key 获取所有的field</li>
<li>hvals 获取所有的value</li>
<li>hgetall == hvals + hkeys</li>
</ul>
</li>
<li>list 底层是链表，可当作queue使用，有序，可重复，key为链表的名字<ul>
<li>lpush 头部添加 rpush尾部添加,linsert key</li>
<li>lset 重新设定指定位置的数据 </li>
<li>lrem key count value 从头开始删除count个和value一样值的数据， count &gt; 0 从头开始,count &lt; 0从尾部开始，count == 0 删除所有的</li>
<li>ltrim 只保留给定范围的数据</li>
<li>lpop/rpop</li>
<li>rpoplpush key1 key2 将key1的尾部移除并加入key2的头部，原子操作</li>
<li>lindex下标访问</li>
<li>llen获取长度</li>
</ul>
</li>
<li>set<ul>
<li>便于求集合的交并差,无序集合，不可重复</li>
<li>sadd key value</li>
<li>srem key value</li>
<li>spop key 随机删除并返回一个元素</li>
<li>sdiff 求交集 一个key1 多个key2 , key3，也就是在其他key中与其他key不同元素</li>
<li>sdiffstore 将diff的结果保存到另一个key中</li>
<li>sinter(store) 交集(存储)</li>
<li>sunion(store) 并集</li>
<li>smove 将key1 中的删除添加给第二个</li>
<li>scard 统计元素个数</li>
<li>sismember测试是否为key的元素</li>
<li>srandmember随机返回不删除</li>
</ul>
</li>
<li>sorted sets<ul>
<li>有序，不可重复，会关联一个double类型score来进行排序,是skip list 和 hash table的混合，score越小的越在前面</li>
<li>zadd key score value</li>
<li>zrem</li>
<li>zincrby key score value 给这个元素的score添加</li>
<li>zrank 按照从小到大排序返回某个member的排名</li>
<li>zrerank反向排序</li>
<li>zcount 返回给定区间score内的数量</li>
<li>zcarf 返回元素数量</li>
<li>zscore 返回score</li>
</ul>
</li>
</ol>
<ul>
<li>常用指令：keys ， del , expire,move转移把当前数据库中的数据转移到其他数据中,persist移除给定key的过期时间，randomkey随机返回一个key,rename,type</li>
<li>ping,echo,select(0~15),dbsize返回当前数据库中所有的key数量,info获取服务器统计信息</li>
<li>monitor实时转存收到的请求</li>
<li>flushdb删除所选择的数据库的所有key</li>
<li>fushall 删除所有数据库的所有key</li>
</ul>
</li>
</ul>
<h3 id="Redis-脚本命令"><a href="#Redis-脚本命令" class="headerlink" title="Redis 脚本命令"></a>Redis 脚本命令</h3><h3 id="dockercompose快速搭建一主二从一哨兵的redis集群"><a href="#dockercompose快速搭建一主二从一哨兵的redis集群" class="headerlink" title="dockercompose快速搭建一主二从一哨兵的redis集群"></a>dockercompose快速搭建一主二从一哨兵的redis集群</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token property">services</span><span class="token punctuation">:</span>
  <span class="token property">redis-master</span><span class="token punctuation">:</span> # 主节点
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --appendonly yes --requirepass bronya # 设置密码
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./data/<span class="token property">master</span><span class="token punctuation">:</span>/data
    <span class="token property">ports</span><span class="token punctuation">:</span>
      - <span class="token string">"6379:6379"</span>
    <span class="token property">networks</span><span class="token punctuation">:</span>
      - redis-network

  <span class="token property">redis-slave1</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --slaveof redis-master 6379 --appendonly yes --masterauth bronya
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./data/<span class="token property">slave1</span><span class="token punctuation">:</span>/data
    <span class="token property">networks</span><span class="token punctuation">:</span>
      - redis-network

  <span class="token property">redis-slave2</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-server --slaveof redis-master 6379 --appendonly yes --masterauth bronya
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./data/<span class="token property">slave2</span><span class="token punctuation">:</span>/data
    <span class="token property">networks</span><span class="token punctuation">:</span>
      - redis-network

  <span class="token property">redis-sentinel</span><span class="token punctuation">:</span>
    <span class="token property">image</span><span class="token punctuation">:</span> <span class="token property">redis</span><span class="token punctuation">:</span>latest
    <span class="token property">command</span><span class="token punctuation">:</span> redis-sentinel /etc/redis/sentinel.conf
    <span class="token property">depends_on</span><span class="token punctuation">:</span>
      - redis-master
    <span class="token property">volumes</span><span class="token punctuation">:</span>
      - ./sentinel.<span class="token property">conf</span><span class="token punctuation">:</span>/etc/redis/sentinel.conf
    <span class="token property">networks</span><span class="token punctuation">:</span>
      - redis-network

<span class="token property">networks</span><span class="token punctuation">:</span>
  <span class="token property">redis-network</span><span class="token punctuation">:</span>
    <span class="token property">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下表列出了 redis 脚本常用命令：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="https://www.runoob.com/redis/scripting-eval.html">EVAL script numkeys key [key …] arg [arg …]</a>  <br>执行 Lua 脚本。</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://www.runoob.com/redis/scripting-evalsha.html">EVALSHA sha1 numkeys key [key …] arg [arg …]</a>  <br>执行 Lua 脚本。</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://www.runoob.com/redis/scripting-script-exists.html">SCRIPT EXISTS script [script …]</a>  <br>查看指定的脚本是否已经被保存在缓存当中。</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://www.runoob.com/redis/scripting-script-flush.html">SCRIPT FLUSH</a>  <br>从脚本缓存中移除所有脚本。</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://www.runoob.com/redis/scripting-script-kill.html">SCRIPT KILL</a>  <br>杀死当前正在运行的 Lua 脚本。</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://www.runoob.com/redis/scripting-script-load.html">SCRIPT LOAD script</a>  <br>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td>
</tr>
</tbody></table>
<ul>
<li>选择数据库和登录<br>如果你想在Redis服务器启动时指定要使用的数据库和密码，可以通过命令行参数进行设置，例如：</li>
</ul>
<p><code>redis-server --port 6379 --requirepass your_password --db 3</code><br>redis默认有0-15个数据库，直接选择即可</p>
<p>info 来获得服务器和数据库信息</p>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>是一种源代码可用的文档数据库，以序列化的 JSON 格式存储数据。MongoDB 将数据存储在外部存储器中，但在企业版中包含内存存储引擎。<br>常用于应对高并发、海量数据存储、数据库的高可扩展性<br>例如：社交场景保存用户信息，通过地理位置索引来实现附近的人<br>游戏场景存储用户信息，方便高效<br>日志</p>
<h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><ol>
<li>文档：数据存储的基本单位</li>
<li>索引：<ul>
<li>单字段索引：索引建立的顺序无所谓，MongoDB会可以从头/尾开始遍历</li>
<li>复合索引：建立在多个字段之上的索引,顺序很重要</li>
<li>多键索引：如果一个字段是数组，对数组建立的索引就是多键索引，相当于会对数组的每个值都建立单字段索引，举例：给Tags建立索引，搜索时只需要tags数组即可筛选出带有tags的所有文档</li>
<li>哈希索引：按照数据的哈希值进行索引，用在哈希分片集群上</li>
<li>文本索引：不建议使用，性能低下</li>
<li>地理位置索引：</li>
<li>唯一索引：确保索引字段不会存储重复值</li>
<li>TTL索引：提供一个过期机制，允许为每一个文档设置一个过期时间，当文档达到过期时间就会被删除，示例代码：`    @Indexed(expireAfterSeconds = 60 * 60 * 24 * 30)private Date createdAt;<ul>
<li>TTL索引只能用于单字段</li>
<li><code>_id</code> 不支持TTL索引</li>
<li>不能在上限集合(上限集合（Capped Collections）是一种特殊类型的集合，它有固定的大小。当集合达到其最大大小时，MongoDB会自动覆盖最旧的文档。)中删除文档</li>
</ul>
</li>
<li>覆盖索引查询：<ol>
<li>所有查询字段都要求是索引的一部分</li>
<li>结果中返回的所有字段都在同一个索引中</li>
<li>查询中没有字段为null</li>
</ol>
</li>
</ul>
</li>
<li>集合：集合是动态的，可以把不同类型的文档归为一个集合<ul>
<li>盖子集合: 有上限的集合，用于日志，不支持crud,当超过上限时，会从最老的文档开始删除<ul>
<li><code>db.createCollection("users.actions",{capped:true,size:16384,max:100})</code></li>
</ul>
</li>
<li>TTL集合: MongoDB也允许在特定的时间后废弃文档数据，有时候叫做生存时间time-to-live (TTL）集合这个功能实际上是通过一个特殊的索引实现的 创建TTL索引的方式如下：<ul>
<li><code>db.reviews.createIndex({time_field:1},{expireAfterSeconds:3600})</code></li>
<li>time_field字段会定期检查时间戳，与当前时间比较，如果时间差大于设置的时间，文档会被自动删除，单位是s</li>
</ul>
</li>
</ul>
</li>
<li>文档-&gt;集合-&gt;数据库-&gt;MongoDB</li>
<li>mongosh是一个js解释器，可以使用js标准库或者运行函数</li>
<li>使用js语法，db变量代表当前选用的数据库</li>
</ol>
<ul>
<li>CRUD:<ul>
<li>查询可以使用正则表达式</li>
<li>建立数据库直接use一个新的数据库即可</li>
<li>变量 = {…},之后db.集合.insertOne(变量)或者insertMany()</li>
<li>db.集合.find()或者findOne()</li>
<li>updateOne()</li>
<li>db.集合.deleteOne/Many()</li>
<li>db.dropDatabase()删除当前数据库</li>
<li>db.collection.drop() 删除指定集合</li>
<li>db.col.update({‘title’:’MongoDB 教程’},{$set:{‘title’:’MongoDB’}}) 对应的变量名({ “nMatched” : 1, “nUpserted” : 0, “nModified” : 1 },{multi:true}) 设置multi : true可以修改选定的所有文档</li>
<li>想显式创建集合：db.createCollection(xxx),通过size字段可以预分配空间的字节大小</li>
</ul>
</li>
<li>创建索引:db.products.createIndex({slug: 1}, {unique: true})<ul>
<li>1代表是升序，unique是指定索引的选项，指定了索引是唯一的，slug一般用于存储URL</li>
</ul>
</li>
<li>聚合管道： 类似stream流和channel管道，可以执行一系列的handler,最后返回结果 <img src="/2023/08/02/58/%E8%81%9A%E5%90%88%E7%AE%A1%E9%81%93.png"><ol>
<li><img src="/2023/08/02/58/SQL%E5%AF%B9%E6%AF%94%E8%81%9A%E5%90%88.png"></li>
</ol>
</li>
</ul>
<h2 id="Mybatis面试"><a href="#Mybatis面试" class="headerlink" title="Mybatis面试"></a>Mybatis面试</h2><ul>
<li>mybatis执行流程：<ul>
<li>读取配置文件</li>
<li>构建会话工厂：会话工厂全局一个，生产sqlSession</li>
<li>创建会话：项目与数据库的会话，包含了执行sql语句的所有方法，每次操作一个会话，有多个</li>
<li>Executor执行器</li>
<li>返回结果</li>
</ul>
</li>
<li>延迟加载：懒加载，旨在需要使用数据的时候才进行实际的SQL查询<ul>
<li>比如我们在关联查询中，我们会自动的把关联的用户数据也查询出来了，但是我们并不需要用户的信息，所以我们可以使用延迟加载，只有在我们使用用户信息的时候才会把结果查询出来</li>
</ul>
</li>
<li>缓存：本地缓存<ul>
<li>一级缓存：sqlsession ，实现方式是PerpertualCache,当Session进行flush或者close时会刷新缓存</li>
<li>二级缓存：mapper级别的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2023/08/27/25/</url>
    <content><![CDATA[<h1 id="面试常问："><a href="#面试常问：" class="headerlink" title="面试常问："></a>面试常问：</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>概念辨别：<ul>
<li>JDK Java Development Kit 是Java的开发工具包，是Java的一个SDK</li>
<li>JRE Java Runtime Environment Java运行环境</li>
<li>SDK Software Development Kit 软件开发工具包</li>
<li>Java9 之后部分jdk和jre了</li>
<li>JIT 运行时编译，当JIT编译器第一次编译之后，会把字节码对应的机器码保存下来，下次可以直接使用，如果是热点代码就使用JIT进行编译启动，如果不是热点数据，就使用解释器来执行。</li>
<li>AOT：在程序执行前将其编译成机器码，属于静态编译。适合云原生场景</li>
<li><img src="/2023/08/27/25/%E6%AD%BB%E8%80%85%E5%85%B3%E7%B3%BB.png"></li>
</ul>
</li>
<li>基础数据类型：<ul>
<li>== 和 equals : == 比较的是内存地址是否一致，equals比较的是对象的内容是否相等，Object类中没有区别，Striing，Integer等就有区别了</li>
<li>基本数据类型：byte 8bit ,short 16 ,int 32 ,long 64,float 32 ,double 64,boolean 1,char , 注意char的默认值是 <code>\u0000</code> 也就是表示null的字符</li>
<li>StringBuffer可以看作是线程安全的StringBuilder</li>
<li>Map和Set:<ul>
<li>为什么HashMap的长度(桶的数量是2的幂次方)，因为可以优化哈希值的分布，哈希值与长度-1进行位运算而不是取模，可以加快效率，也能分布更均匀，方便扩容</li>
<li>HashSet的底层是是用来一个HashMap，key为set的元素,value为一个固定的Object对象</li>
<li>HashMap的查询：底层实现数组+链表 1.8之后多了红黑树<ol>
<li>没有哈希冲突，O(1)</li>
<li>有冲突，就会把冲突的键放在同一个桶的链表中，需要查询链表O(n);</li>
<li>Java8之后，当桶中的数据达到一定规模就会转为红黑树，O(logn)</li>
</ol>
<ul>
<li>put方法：<ol>
<li>判断key对数组table，是否为null，否则执行resize进行扩容（初始化）</li>
<li>根据key计算hash，得到数组索引</li>
<li>table[i] == null 直接添加</li>
<li>不成立：<ul>
<li>判断table[i] 的首个元素是否和key一样，如果相同直接覆盖value</li>
<li>table[i] 是否为treeNode ，也就是是否是红黑树，如果是直接在树种插入键值对</li>
<li>遍历table[i] 在尾部插入数据，如果长度大于8转为红黑树</li>
</ul>
</li>
<li>判断实际数量是否超过了最大容量*0.75，如果超过进行扩容</li>
</ol>
</li>
<li>如何扩容：<ul>
<li>每次到达数组长度* 0.75时扩容，，每次扩容长度是原来最大容量的两倍</li>
<li>扩容之后要把老数组移到新数组钟</li>
</ul>
</li>
<li>寻址算法：<ul>
<li>计算出key的hashCode，然后在这个值右移16位后的二进制及逆行按位异或运算，得到的hash</li>
</ul>
</li>
</ul>
</li>
<li>HashSet如何比较是否重复：根据hashcode来比较，如果相等，那么再调用equals方法来比较</li>
</ul>
</li>
<li>字节码：JVM可以理解的代码就是字节码，也就是.class文件<ul>
<li>Java代码先经过编译生成字节码，之后由java解释器来解释执行</li>
<li>面向对象三大特点：封装、继承、多态</li>
<li>比较对象比较的是内存地址，而equals()没有重写时，也是比较的地址</li>
<li>序列化：将数据结构或者对象转换成二进制字节流的过程</li>
<li>包装类型的常量池：包装类型保存了一定范围内的所有的实例，可以减少内存的使用</li>
</ul>
</li>
<li>引用类型：<ol>
<li>强引用：使用new </li>
<li>软引用：只有这个方式时，内存不足时会被回收</li>
<li>弱引用：只有这个方式是，内存重组也会被回收</li>
<li>虚引用：无法通过他获取对象</li>
</ol>
</li>
</ul>
</li>
<li>IO<ul>
<li>BIO同步阻塞IO一直等待内核把数据拷贝到用户空间</li>
<li>NIO非阻塞IO，可以看作多路复用IO</li>
<li>AIO异步IO</li>
<li>NIO非阻塞IO Netty使用</li>
</ul>
</li>
</ul>
<h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><p>动态绑定，运行时才将方法调用和方法实现关联起来。</p>
<h3 id="静态方法为什么不能调用非静态成员"><a href="#静态方法为什么不能调用非静态成员" class="headerlink" title="静态方法为什么不能调用非静态成员"></a>静态方法为什么不能调用非静态成员</h3><blockquote>
<p>静态方法在类加载时就会分配内存，而非静态成员属于实例对象，所以调用不到，属于非法操作</p>
</blockquote>
<h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><blockquote>
<p>对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。<br><strong>字符串使用&nbsp;<code>final</code>&nbsp;关键字声明之后，可以让编译器当做常量来处理。</strong></p>
</blockquote>
<h3 id="String为什么不可变"><a href="#String为什么不可变" class="headerlink" title="String为什么不可变"></a>String为什么不可变</h3><ol>
<li>String中的byte数组被private和final修饰，并且没有具体的方法暴露</li>
<li>String对象使用final修饰，不可被继承，保证不会被子类破坏不可变性<img src="/2023/08/27/25/String%E4%B8%8D%E5%8F%AF%E5%8F%98.png"></li>
</ol>
<h3 id="x3D-x3D-和-equals区别"><a href="#x3D-x3D-和-equals区别" class="headerlink" title="== 和 equals区别"></a>== 和 equals区别</h3><p>== ：<br>基本数据类型是比较的值，对象比较的是地址<br>equals：<br>没重写的话比较的是地址，String是专门重写过的，比较的是具体的值是否相同</p>
<h3 id="三种拷贝方式的区别"><a href="#三种拷贝方式的区别" class="headerlink" title="三种拷贝方式的区别"></a>三种拷贝方式的区别</h3><ol>
<li>引用拷贝：不同的引用指向相同的对象</li>
<li>浅拷贝：外部对象是new 出来的新对象，内部对象仍然是指向一个</li>
<li>深拷贝：外部对象和内部对象都是新new 出来的<br><img src="/2023/08/27/25/%E4%B8%89%E7%A7%8D%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F.png"></li>
</ol>
<h3 id="concurrenthashmap和hashmap和hashtable的区别"><a href="#concurrenthashmap和hashmap和hashtable的区别" class="headerlink" title="concurrenthashmap和hashmap和hashtable的区别"></a>concurrenthashmap和hashmap和hashtable的区别</h3><p>HashMap线程不安全<br>HashTable和concurrentHashMap是线程安全的HashMap，HashTable上锁时，会锁住整个表，而ConcurrentHashMap只会锁对应的段，使用的是分段锁。</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="SerialVersionUID"><a href="#SerialVersionUID" class="headerlink" title="SerialVersionUID"></a>SerialVersionUID</h4><p>即使被static修饰，也会被序列化进二进制流中，用来判断序列化对象的版本一致性。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理模式是使用代理对象来替代真实对象，从而在不修改原目标的前提下提供额外的功能操作，拓展对象功能。</p>
<h4 id="动态代理和静态代理的区别"><a href="#动态代理和静态代理的区别" class="headerlink" title="动态代理和静态代理的区别"></a>动态代理和静态代理的区别</h4><ol>
<li>静态代理在编译阶段就将接口、实现类、代理类都变成一个个实际的class文件。对于每一个被代理的对象都需要单独写一个代理类，非常不方便</li>
<li>动态代理：是在运行时动态生成字节码，并加载到JVM中。核心是 <strong><code>InvocationHandler</code>&nbsp;接口和&nbsp;<code>Proxy</code>&nbsp;类</strong></li>
</ol>
<h3 id="JDK和CGLIB的区别"><a href="#JDK和CGLIB的区别" class="headerlink" title="JDK和CGLIB的区别"></a>JDK和CGLIB的区别</h3><p>JDK是面向接口的，而CGLib是通过直接吗底层继承要代理的类来实现的，底层是asm</p>
<blockquote>
<p>Spring AOP的底层实现主要基于动态代理模式。具体来说，有两种主要的实现方式：JDK 动态代理和 CGLIB 动态代理。Spring AOP 在运行时会根据目标对象的类型和配置来选择使用 JDK 动态代理还是 CGLIB 动态代理。如果目标对象实现了接口，并且没有强制要求使用 CGLIB 代理，Spring 会优先使用 JDK 动态代理。如果目标对象没有实现接口，或者通过配置强制使用 CGLIB 代理，那么 Spring 会使用 CGLIB 动态代理来实现 AOP。</p>
</blockquote>
<h3 id="BigDecimal工具类"><a href="#BigDecimal工具类" class="headerlink" title="BigDecimal工具类"></a>BigDecimal工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">RoundingMode</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 简化BigDecimal计算的小工具类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalUtil</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 默认除法运算精度
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEF_DIV_SCALE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">BigDecimalUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的加法运算。
     *
     * @param v1 被加数
     * @param v2 加数
     * @return 两个参数的和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的减法运算。
     *
     * @param v1 被减数
     * @param v2 减数
     * @return 两个参数的差
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的乘法运算。
     *
     * @param v1 被乘数
     * @param v2 乘数
     * @return 两个参数的积
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到
     * 小数点以后10位，以后的数字四舍五入。
     *
     * @param v1 被除数
     * @param v2 除数
     * @return 两个参数的商
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">divide</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token constant">DEF_DIV_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指
     * 定精度，以后的数字四舍五入。
     *
     * @param v1    被除数
     * @param v2    除数
     * @param scale 表示表示需要精确到小数点以后几位。
     * @return 两个参数的商
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">"The scale must be a positive integer or zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_EVEN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的小数位四舍五入处理。
     *
     * @param v     需要四舍五入的数字
     * @param scale 小数点后保留几位
     * @return 四舍五入后的结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">"The scale must be a positive integer or zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的类型转换(Float)
     *
     * @param v 需要被转换的数字
     * @return 返回转换结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">convertToFloat</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的类型转换(Int)不进行四舍五入
     *
     * @param v 需要被转换的数字
     * @return 返回转换结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertsToInt</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提供精确的类型转换(Long)
     *
     * @param v 需要被转换的数字
     * @return 返回转换结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">convertsToLong</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 返回两个数中大的一个值
     *
     * @param v1 需要被对比的第一个数
     * @param v2 需要被对比的第二个数
     * @return 返回两个数中大的一个值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">returnMax</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 返回两个数中小的一个值
     *
     * @param v1 需要被对比的第一个数
     * @param v2 需要被对比的第二个数
     * @return 返回两个数中小的一个值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">returnMin</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 精确对比两个数字
     *
     * @param v1 需要被对比的第一个数
     * @param v2 需要被对比的第二个数
     * @return 如果两个数一样则返回0，如果第一个数比第二个数大则返回1，反之返回-1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="UnSafe类"><a href="#UnSafe类" class="headerlink" title="UnSafe类"></a>UnSafe类</h2><p>提供一些很底层的操作，JUC中经常使用。<br>核心功能：</p>
<ol>
<li>内存操作</li>
<li>[[多线程#内存屏障|内存屏障]]</li>
<li>对象操作</li>
<li>数据操作</li>
<li>CAS操作</li>
<li>线程调度</li>
<li>Class操作</li>
<li>系统信息</li>
</ol>
<h2 id="并发相关"><a href="#并发相关" class="headerlink" title="并发相关"></a>并发相关</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程池的原理"><a href="#线程池的原理" class="headerlink" title="线程池的原理"></a>线程池的原理</h4><p>初始化一个线程池，指定线程池的大小，也就是线程池中的线程数量<br>然后每次向线程池中提交任务，线程池中的线程循环从任务队列中去除任务并且执行<br>如果一个线程执行完一个任务之后，就会回到线程池，而不是销毁</p>
<p>线程池通过循环利用线程，而不是销毁避免了频繁创建和销毁线程池的开销</p>
<h4 id="线程池中关于时间的参数起什么作用"><a href="#线程池中关于时间的参数起什么作用" class="headerlink" title="线程池中关于时间的参数起什么作用"></a>线程池中关于时间的参数起什么作用</h4><ol>
<li>空闲线程存活时间：当线程中的线程数量超过核心线程数量时，这些额外的线程在超过空闲线程存活时间就会被中止</li>
<li>任务超时时间：执行任务执行的最大时间，如果</li>
</ol>
<ul>
<li>多线程：<ul>
<li>线程不安全的集合：<ul>
<li>ArrayList,HashMap,HashSet,LinkedList等<ul>
<li>ArrayList的实现：<ul>
<li>add方法：确保数组在已使用长度(size) + 1之后能够存下洗一个数据</li>
<li>计算数组的容量，如果当前数组已使用的长度+1后的大于当前数组的长度，使用grow方法扩容，扩大约1.5倍</li>
<li>确保新增的数据有地方存储之后奖新元素加到位于size的位置上</li>
<li>返回bool值</li>
</ul>
</li>
<li>ArrayList list=new ArrayList(10)中的list 不会扩容</li>
<li>使用asList后，原数组修改会改变新生成的List，因为他们最终指向的都是一个内存地址</li>
<li>如何处理linkedlist和arraylist的线程不安全：<ol>
<li>优先在方法内使用，定义为局部变量</li>
<li>使用synchornizedList来替换ConcurrentLinkedQueue</li>
</ol>
</li>
</ul>
</li>
<li>使用toArray后，修改List的内容，数组的内容不会改变</li>
<li>Vector和ArrayList的区别：Vector是线程安全的，大部分方法是同步到，性能上ArrayList好一点，以为不需要同步，扩容的时候，A增加50%，V怎加100%</li>
<li>ConcurrentHashMap如何保证线程安全：<ol>
<li>使用CAS(Compare and Swap)，每次更新时，对比内存位置的值与预期的原值相同则更新，否则不更新，这是一种无锁的操作</li>
<li>使用synchorinized，ConcurrentHashMap的每个桶(也即是哈希表种的链表或者红黑树)，都可以当作一个锁，线程访问时，锁住这个桶，而不是锁住整个哈希表</li>
</ol>
</li>
</ul>
</li>
<li>6种状态：</li>
<li>synchronized:<ul>
<li>作用：把证同一时刻只能有一个线程来执行该段代码，保证线程的同步</li>
<li>原理：使用了JVM种的监视器锁monitor，每个对象都有一个内治所，当线程调用synchronized方法时，就获得了这个锁，</li>
<li>JDK1.6 之后的优化：引入了偏向锁、和轻量级锁，逐步升级到重量级锁</li>
<li><strong>synchronized和volatile的区别</strong>：volatile只能保证线程的可见性，当一个线程修改了这个变量的值，其他线程立刻可见这个修改</li>
<li>并发编程的三个重要特性：原子性(全做or全部做)，可见性(共享变量可见)，有序性(按照先后顺序)</li>
<li>ThreadLocal原理：维护一个ThreadLocalMap，key为ThreadLocal对，值为变量<ul>
<li>内存泄漏：key是弱引用，value是强引用，所以外部没有使用强引用时，ThreadLocal会被回收，但是value会继续使用内存，可以使用ThreadLocal.remove()来解决这个问题</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>JUC：<ul>
<li>Java Util Concurrent是并发编程的一个工具包，常用：<ul>
<li>Executor框架</li>
<li>ConcurrentHashMap并发集合</li>
<li>CountDownLatch同步工具</li>
<li>Locks 比synchronized更灵活的锁机制</li>
<li>原子变量：AtomicInteger</li>
<li>并发工具类：ForkJoinPool</li>
</ul>
</li>
<li>volatile关键字：保证变量的可见性，要求每次使用它时都需要从主存中重新读取，但不能保证原子性</li>
<li>单例模式示例代码：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//类对象加锁</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="集合相关"><a href="#集合相关" class="headerlink" title="集合相关"></a>集合相关</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li>HashSet底层使用的是HashMap</li>
<li>LinkedHashSet通过LinkedHashMap实现的</li>
<li>TreeSet：红黑树(自平衡的排序二叉树)实现</li>
</ul>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>ArrayList是动态数组，可以扩容、缩容，同时可以使用泛型来保证，线程不安全，适用于频繁的查找工作。可添加null值<br>Vector是老实现，底层使用Object [   ]存储，线程安全</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>JDK1.8之前由数组+链表组成。JDK1.8之后当链表长度大于阈值，会转化为红黑树(当前数组的长度小于64时，会先进行数组扩容，而不是转化为红黑树)<br>LinkedHashMap：继承HashMap，增加了 一条双向链表。<br>JDK1.7时，HashMap在多线程环境下，扩容操作使用的是头插法，导致链表中的节点指向错误的位置。JDK1.8使用的是为尾插法，但是有可能会出现数据覆盖的问题，并发环境下推荐使用ConcurrentHashMap</p>
<h3 id="Queue-1"><a href="#Queue-1" class="headerlink" title="Queue"></a>Queue</h3><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>使用二叉堆实现，底层使用可变长的数据来存储数据，非线程安全，不知处NULL值和不可排序的对象，默认是小顶堆</p>
<h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p>阻塞队列</p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java新特性</title>
    <url>/2024/05/16/42/</url>
    <content><![CDATA[<h1 id="Java新特性面试"><a href="#Java新特性面试" class="headerlink" title="Java新特性面试"></a>Java新特性面试</h1><h2 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h2><ul>
<li>接口：interface 中可以有默认方法，无需被子类实现，通过Interface实现调用</li>
<li><strong>“函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。</strong><ol>
<li>default实现,可以被子类继承重写，使用this调用</li>
<li>static实现使用方法和静态方法一样，但是不能被子类继承</li>
<li>interface和abstract class的区别：interface是为了快速扩展功能，而abstract class是为了被继承实现的。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceNew</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InterfaceNew</span><span class="token punctuation">.</span><span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用df方法</span>
        <span class="token class-name">Main</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        main<span class="token punctuation">.</span><span class="token function">df</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * InnerMain
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">InterfaceNew</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface中的sm实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">default</span> <span class="token keyword">void</span>  <span class="token function">df</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface提供的df实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li>Lambda</li>
<li>Stream：不存储数据，只是对数据进行一系列的处理<ul>
<li>串行流：<ul>
<li>.stream() 为集合创建串行流</li>
</ul>
</li>
<li>并行流：可以多线程执行<ul>
<li>parallelStream()获得并行流</li>
</ul>
</li>
<li>API：<ul>
<li>forEach() 迭代每个数据</li>
<li>map()传入函数作为变量，对每个数据进行映射(处理)</li>
<li>limit() 获取指定数量的流</li>
<li>sorted() 对流进行排序</li>
<li>Collectors 提供很多归约操作，可以讲将流转化为集合或者聚合元素，要配合collect()来实现</li>
<li>count()返回流的的数据</li>
<li>distinct() 返回一个去除重复元素的流</li>
<li>anyMathch() 检查是否有满足条件的元素，返回值为boolean</li>
<li>allMatch() 检查是否所有元素都满足匹配的条件</li>
<li>noneMathc()都不符合匹配条件</li>
<li>findFirst() 返回流中的第一个元素</li>
<li>findAny()返回流中的任意元素，这个任意元素只有在多线程中可以看出不同，他会任何线程中选择一个元素返回</li>
<li>reduce() 将流中元素合并成一个元素 <code>numbers.stream().reduce((n1, n2) -&gt; n1 + n2);</code></li>
<li>filter()过滤</li>
</ul>
</li>
</ul>
</li>
<li>Optional：用于避免空指针<ul>
<li>Optional .ofNullable()返回一个包含指定值Optional对象，如果值为null，则返回一个空的Optional对象</li>
<li>isPresent() Optional不为空，返回true</li>
<li>get()返回值</li>
<li>ifPresent() 如果不为空，可以以调用指定的方法</li>
<li>orElse(默认值) 如果为空返回这个默认值 </li>
<li>orElseGet() 如果为空调用指定的函数</li>
<li>filter() 过滤，如果不满足，返回一个空的Optional</li>
<li>map() 如果对象是Optional，那么就执行给定的函数</li>
<li>flatMap()将Optional展开，不再包装成嵌套的Optional</li>
</ul>
</li>
</ul>
<h2 id="Java9"><a href="#Java9" class="headerlink" title="Java9"></a>Java9</h2><ul>
<li>JShell 类似于python实时命令行交互工具</li>
<li>G1成为默认的垃圾回收器</li>
<li>String使用byte[ ]作为底层，节省空间</li>
</ul>
<h2 id="Java10"><a href="#Java10" class="headerlink" title="Java10"></a>Java10</h2><ul>
<li>var关键字局部变量 ，主要作用是，当类型特别长时，可以使用var替代</li>
<li>Optional增加了orElseThrow来在没有值时抛出指定的异常</li>
</ul>
<h2 id="Java17"><a href="#Java17" class="headerlink" title="Java17"></a>Java17</h2><p>- </p>
]]></content>
  </entry>
  <entry>
    <title>Tools</title>
    <url>/2023/07/04/56/</url>
    <content><![CDATA[<h2 id="虚拟机设置静态ip"><a href="#虚拟机设置静态ip" class="headerlink" title="虚拟机设置静态ip"></a>虚拟机设置静态ip</h2><p><a href="https://wangyi.one/vmware%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu%E9%9D%99%E6%80%81ip/">https://wangyi.one/vmware%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu%E9%9D%99%E6%80%81ip/</a><br><del>Emacs后续学习</del><br>常用键位</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">替换</span>  <span class="token punctuation">:</span> %s/原/修改之后的/g   g代表修改整个文件
<span class="token property">查找</span>  <span class="token punctuation">:</span> 使用 n 查找下一个<span class="token punctuation">,</span> N <span class="token property">下一个</span>
<span class="token punctuation">:</span> 首行<span class="token punctuation">,</span>尾行 s/原/新/<span class="token property">g</span>
<span class="token punctuation">:</span> .<span class="token punctuation">,</span>+ns/旧/新/g 当前行和接下来的n行
. 重复之前的操作   ###<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">
<span class="token selector">快捷键之类的，大部分都是可以组合使用的

键位练习：命令行输入 vimtutor #####
COMMAND模式
:set ic / noic  查找时不/区分大小写
使用v选中之后使用:
会看见'&lt;'&gt;之后可以通过 w + filename 将选中的字保存为新的文件
:! + shell 命令，在不退出vim的情况下使用shell指令 ######
:! + sh 再开一终端，暂时退出当前文件的页面，使用ctrl- d返回文件 #########
:r + filename 将filename文件中的文字写入当前光标所在位置
:set number 显示行号
:s/old/new/g  替换一行中的old为new,加上g会对整行都起作用，不加g只会修改第一个old
:sp 打开当前文件打开多个窗口
:qa 关闭所有窗口
normal模式
A        		append  移动到末尾进行insert ###
I                        移动到这一行的开头进行insert ###
J                        将下一行和这一行连接在一起
a                光标之后插入内容
ctrl + r redo
u   撤销
hjkl 左下上右
v     			进入选中块模式
V    			选中模式，每次选中一行
ctrl + w         切换window 
ctrl + v         选中一个矩形
~				选中之后，使得大小写互换 ### 
f + 要查找的字符   find 这一行中光标之后第一个关键字
F + xxx           find 反向查找
t + xxx           移动到这个字符的前面一个字符
T + xxx           反向查找，移动到字符之后一个字符
d + 移动的键位     删除  d + $ 删除到(一行)结尾， d + 0 删除到(一行)开头
c + 移动的键位     change 删除并进入insert进行修改
dd       		 删除一行
cc				删除一行并进入insert
x            	 删除当前字符
r + 字符          替换当前一个字符
R                 连续替换 ###
w  word 向后移动一个单词
b  向前移动一个单词
e  end 移动到下一个单词的最后一个字母
o  下方开一个新行
O  上方开一个新行
0  移动到行首
%  从</span><span class="token punctuation">{</span>/[/<span class="token punctuation">(</span> 移动到<span class="token punctuation">)</span>/]/<span class="token punctuation">}</span>
<span class="token selector">$  移动到行末
数字 + G         跳转到指定行
ctrl + g         显示当前的行数
G  最后一行
gg 第一行
y + 移动的键位   复制
yy     		    复制一行
p			   粘贴
L/M/H 当前页面的lowest/middle/highest
ctrl + u / d 向上滚动/向下滚动
数字 + 键位   执行几次这个键位操作
例如:
7dw          删除七个单词
修饰词
a 删除所在的整体
例如：</span>
<span class="token punctuation">{</span>djsafljaflsjlf<span class="token punctuation">}</span><span class="token selector">123
使用di</span><span class="token punctuation">{</span>
<span class="token selector">只剩下了
123F
i 内部，例如</span>
<span class="token punctuation">{</span>skdajsldjas<span class="token punctuation">}</span><span class="token selector">想要删除</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">内的东西只需要
ci</span><span class="token punctuation">{</span>

/ + 内容      全文查找
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>好用的操作</li>
</ul>
<ol>
<li>一键取消注释,ctrl + v进入块选择模式，然后使用方向键选择所有的注释，按d删除即可</li>
</ol>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>切换分支和版本号实际上就是指针的切换</p>
<p>工作区：磁盘目录</p>
<p>使用git add把工作区代码加入暂存区 临时储存</p>
<p>git commit</p>
<p>将暂存区代码提交到本地库，得到历史版本(代码删除不了了)</p>
<p>push </p>
<p>推送到远程库</p>
<p>github是远程库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init 初始化仓库
<span class="token function">git</span> status 查看仓库状态
<span class="token comment">##Untracked files: 是未追踪的文件，也就是文件只处于工作区，不处于暂存区和本地库，红色的文字</span>
<span class="token comment">##绿色的文件名是存在于暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> + filename 添加到暂存区
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>    全部提交
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-i</span>    添加到暂存区，但是会有提问
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> filename 删除暂存区的文件
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"日志信息"</span> filenaem 提交到本地库
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> + 日志 <span class="token comment">#覆盖最新的一次提交日志</span>
<span class="token comment">##提交之后git status 会显示为没有提交</span>
<span class="token function">git</span> reflog 查看提交记录
<span class="token function">git</span> log    查看日志，包括提交记录和提交用户
<span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span>xxx  只查看某人的提交记录
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline 每一个提交记录只占一行
<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--all</span> 通过 ASCII 艺术的树形结构来展示所有的分支
<span class="token function">git</span> log --name-status 看哪个文件改变了
<span class="token parameter variable">-n</span> n为数字 //最新n个提交
<span class="token comment">##版本穿越，修改HEAD指针 本地原文件一并会被修改</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> + 版本号
<span class="token function">git</span> tag xxx 提交ID前10个字符，创建一个标签   
<span class="token function">git</span> cherry-pick +xx xxx xx 把某几个分支复制到当前分支上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分支操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch 创建分支
<span class="token function">git</span> branch <span class="token parameter variable">-v</span> 查看有哪些分支
<span class="token parameter variable">-m</span> 改名
<span class="token parameter variable">-d</span> 删除
<span class="token function">git</span> checkout  + name 切换分支
<span class="token function">git</span> merge  + name    将当name合并在当前分支
<span class="token function">git</span> reset    撤销提交记录,但是撤销之前的还是存在的，只是处于未加入缓冲区的状态，仅限本地
<span class="token function">git</span> revert   撤销更改分享给别人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分支冲突：两个人同时对同一个内容 进行了两个不同的修改，git无法决定新的文件手</p>
<p>手动修改后，commit 不要再加上文件名了</p>
<p>HEAD指向的是当前分支</p>
<p>远程开发：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span> 查看所有远程地址别名
<span class="token function">git</span> remote <span class="token function">add</span> 别名 + 远程地址    给远程地址起一个别名，方便切换
<span class="token function">git</span> push +别名/库地址 + 分支名    把这个分支推送到远程库
<span class="token function">git</span> pull +别名/库地址 + 分支名    把远程的分支名拉取
<span class="token function">git</span> clone + 库地址               克隆到本地  会进行：1.拉取代码2.初始化本地库3.创建别名
<span class="token comment">###############</span>
<span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote-repo-url<span class="token operator">&gt;</span> 克隆指定分支
<span class="token comment">###############</span>
<span class="token function">git</span> fetch + xxx 
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master  获取服务器上最后一次改动，并将本地主分支指向它，实现放弃本地所有改动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他知识</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitk 内建的图形化
<span class="token comment">##显示历史记录时，每个提交的信息只显示一行：</span>
<span class="token function">git</span> config format.pretty oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>其他：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span> <span class="token comment">#查看仓库大小</span>
<span class="token function">git</span> log <span class="token parameter variable">--reverse</span>  <span class="token comment">#从旧到新查看提交记录</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="gitignore配置"><a href="#gitignore配置" class="headerlink" title=".gitignore配置"></a>.gitignore配置</h2><ul>
<li>所有以#开头的行会被忽略</li>
<li>可以使用glob模式匹配</li>
<li>匹配模式后跟反斜杠（/）表示要忽略的是目录</li>
<li>如果不要忽略某模式的文件在模式前加”!”</li>
</ul>
<p>　　比如：</p>
<blockquote>
<p># 此为注释 – 将被 Git 忽略<br><em>.a # 忽略所有 .a 结尾的文件<br>!lib.a # 但 lib.a 除外<br>/TODO # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO<br>build/ # 忽略 build/ 目录下的所有文件<br>doc/</em>.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</p>
</blockquote>
<h3 id="工作中常用"><a href="#工作中常用" class="headerlink" title="工作中常用"></a>工作中常用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash //将当前的工作暂存，但是不进行提交
<span class="token function">git</span> stash show //显示暂存的内容，哪些被修改了，可指定序号
<span class="token function">git</span> stash list //已经暂存的列表和序号
<span class="token function">git</span> stash apply + stash@<span class="token punctuation">{</span>数字<span class="token punctuation">}</span> //切换回来继续工作 
//可以加上--index 来回到原来文件的暂存状态
<span class="token function">git</span> stash drop //丢弃指定的stash
<span class="token function">git</span> stash pop //apply + drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><blockquote>
<p>Scoop是一个Windows系统管理包的开源软件，相比从百度上搜索，从几十条垃圾信息中筛选出一个能用的安装链接，Scoop可以只使用一行代码进行安装</p>
</blockquote>
<h2 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h2><p>本人使用的是Windows11系统，已经内置PowerShell了，如果是Windows7系统，需要手动安装新版本的PowerShell</p>
<p>Scoop 源文件在GitHub上，推荐使用<strong>魔法</strong></p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p>使用快捷键win+ x 打开 Windows终端，<strong>不要打开管理员的终端</strong></p>
<p><img src="/2023/07/04/56/Scoop.png" alt="Scoop"></p>
<p>之后输入</p>
<pre class="line-numbers language-shel" data-language="shel"><code class="language-shel"># 设置 PowerShell 执行策略
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
# 下载安装脚本
irm get.scoop.sh -outfile 'install.ps1'
# 执行安装, --ScoopDir 参数指定 Scoop 安装路径 ' ' 内的是自定义的安装目录
.\install.ps1 -ScoopDir 'D:\Scoop'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><a href="https://github.com/ScoopInstaller/Scoop">官方文档</a> 或 <a href="https://github.com/ScoopInstaller/Scoop/wiki/Quick-Start">快速入门</a> </p>
<p><a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">大佬的博客</a></p>
<p>scoop社区维护的安装路径大部分在国外，所以下载时建议使用魔法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop <span class="token builtin class-name">help</span>  命令参考说明
scoop + 动作 + 对象， 对象可以省略
scoop +
search 搜索软件名
<span class="token function">install</span> 安装软件
update  更新软件
status  查看软件装填
uninstall 卸载软件
info     查看软件详情
home     打开软件主页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>举例：</p>
<ul>
<li>查看本机有无安装typora</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop search typora<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>Scoop下载软件的安装路径是自定义下载路径中的apps文件夹</strong></p>
<h2 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h2><pre class="line-numbers language-none"><code class="language-none">$ 匹配末尾位置  
^ 匹配开头位置
* 匹配前一个字符的0次或n次  例如： zo* 会匹配z zo zoo zooo z......  等
+ 匹配前一个字符一次或多次u        zo+ 匹配 zo zoo zooo zo...... 等
? 匹配前一个字符0次或1次           zo?      z  zo
{n,m}  匹配 n 到 m 次
{n}      n 次
? + 其他限定符，表示匹配非贪心，默认的匹配会尽力匹配较长的满足条件的字符串，使用这个后尽力匹配较短的字符串
.  匹配任意单个字符
//
(pattern) 匹配pattern 并捕获他的子表达式
(?:pattern) 不捕获子表达式
(?=pattern) 前面的字符匹配到之后，判断后面的是否能够匹配pattern 如果能那么就捕获，否则不匹配
(?!pattern) 反向捕获，不捕获包含patter的字符串
//规则集
x|y 匹配x或y
[xyz] 字符集，匹配三者的任一字符
[^xyz] 反向捕获
[a-z]  匹配a-z 中的任一字符
[^a-z] 反向匹配不包含的
//
\b     border 以这个符号之前的字符(串)为边界的匹配
\B     非边界匹配
\cx    x 为[a-z] 或 [A-Z] 匹配ctrl + x
\d     数字匹配，十进制[0-9]
\D     [^0-9]
\f     匹配换页符
\n     换行符
\r     匹配回车
\w     匹配字类字符 [A-Za-z0-9]
\W     非字类字符
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><ul>
<li><strong>groupId</strong>(必须): 定义了当前 Maven 项目隶属的组织或公司。groupId 一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是 org（因为 tomcat 是非营利项目），公司名称是 apache，artifactId 是 tomcat。</li>
<li><strong>artifactId</strong>(必须)：定义了当前 Maven 项目的名称，项目的唯一的标识符，对应项目根目录的名称。</li>
<li><strong>version</strong>(必须)：定义了 Maven 项目当前所处版本。</li>
<li><strong>packaging</strong>（可选）：定义了 Maven 项目的打包方式（比如 jar，war…），默认使用 jar。</li>
<li><strong>classifier</strong>(可选)：常用于区分从同一 POM 构建的具有不同内容的构件，可以是任意的字符串，附加在版本号之后。</li>
</ul>
<hr>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>dependencies：一个 pom.xml 文件中只能存在一个这样的标签，是用来管理依赖的总标签。</li>
<li>dependency：包含在 dependencies 标签中，可以有多个，每一个表示项目的一个依赖。</li>
<li>groupId,artifactId,version(必要)：依赖的基本坐标，对于任何一个依赖来说，基本坐标是最重要的，Maven 根据坐标才能找到需要的依赖。我们在上面解释过这些元素的具体意思，这里就不重复提了。</li>
<li>type(可选)：依赖的类型，对应于项目坐标定义的 packaging。大部分情况下，该元素不必声明，其默认值是 jar。</li>
<li>scope(可选)：依赖的范围，默认值是 compile。</li>
<li>optional(可选)：标记依赖是否可选</li>
<li>exclusions(可选)：用来排除传递性依赖,例如 jar 包冲突</li>
</ul>
<hr>
<p>著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：<a href="https://javaguide.cn/tools/maven/maven-core-concepts.html">https://javaguide.cn/tools/maven/maven-core-concepts.html</a></p>
<p>著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：<a href="https://javaguide.cn/tools/maven/maven-core-concepts.html">https://javaguide.cn/tools/maven/maven-core-concepts.html</a></p>
<h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><p>eXtensible Markup Language 即可扩展标记语言。<br>一般用于做数据存储，支持自定义标签</p>
<blockquote>
<p>通过 XML，数据能够存储在独立的 XML 文件中。这样您就可以专注于使用 HTML/CSS 进行显示和布局，并确保修改底层数据不再需要对 HTML 进行任何的改变。<br>通过使用几行 JavaScript 代码，您就可以读取一个外部 XML 文件，并更新您的网页的数据内容。</p>
</blockquote>
<h2 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//文档声明:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?xml</span> <span class="token attr-name">version</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">?</span> <span class="token attr-name">encodiing</span> <span class="token attr-name">standlone</span><span class="token punctuation">&gt;</span></span>
encoding 指定文档的编码 UTF-8等
standalone 文档是否独立 yes or no

注释：
<span class="token comment">&lt;!--comment --&gt;</span>

标签内要包含要传递的信息
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>示例: Bob写个Tom的信<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?xml</span> <span class="token attr-name">version</span> <span class="token attr-name">"1.0"</span> <span class="token attr-name">encoding</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--声明--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 根元素，来表示本文档的类型--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">&gt;</span></span> Tom <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">&gt;</span></span> Bob <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">&gt;</span></span> Reminder <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> Dont' forget me this weekend <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>xml文档必须包含一个根元素，且只能有一个根元素，其他所有元素都是根元素的子元素</li>
<li>所有的标签都有一个闭标签 &lt;/…&gt;</li>
<li>xml 标签对大小写敏感</li>
<li>属性值必须加引号<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span> <span class="token attr-name">date</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12/11/2023<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>实体引用，用于转义某些符号</li>
</ul>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">
&lt;  &lt;  less than
&gt;  &gt;  greater than
&amp; &amp;  ampersand
&amp;apos; ' apostrophe
" " quotation mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>标签命名： 尽量用 __ 来进行命名 first_name</li>
<li>属性Attribute : 提供有关元素的额外信息 (尽量减少属性的使用，将属性作为一个新的标签即可)</li>
<li>DTD 用于定义xml文档结构 Schema 基于xml的DTD替代</li>
<li>XSLT来显示XML</li>
</ul>
<h2 id="XMLHttpRequest-对象-JavaScript"><a href="#XMLHttpRequest-对象-JavaScript" class="headerlink" title="XMLHttpRequest 对象(JavaScript)"></a>XMLHttpRequest 对象(JavaScript)</h2><p>功能：</p>
<blockquote>
<p>在不重新加载页面的情况下更新网页<br>在页面已加载后从服务器请求数据<br>在页面已加载后从服务器接收数据<br>在后台向服务器发送数据</p>
</blockquote>
<h1 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h1><p>特点:</p>
<ol>
<li>使用缩进表示层级关系</li>
<li>缩进不能使用tab键</li>
<li>只要相同层级的元素左对齐即可，不需要控制多少空格数</li>
<li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li>
</ol>
<p>示例:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">key</span><span class="token punctuation">:</span>
	<span class="token key atrule">child-key</span><span class="token punctuation">:</span> value <span class="token comment"># 给予值的时候要空一个额格</span>

<span class="token comment">#较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：</span>

<span class="token punctuation">?</span>  
    <span class="token punctuation">-</span> complexkey1
    <span class="token punctuation">-</span> <span class="token key atrule">complexkey2</span>
<span class="token punctuation">:</span>
    <span class="token punctuation">-</span> complexvalue1
    <span class="token punctuation">-</span> complexvalue2

意思即对象的属性是一个数组 <span class="token punctuation">[</span>complexkey1<span class="token punctuation">,</span>complexkey2<span class="token punctuation">]</span>，对应的值也是一个数组 <span class="token punctuation">[</span>complexvalue1<span class="token punctuation">,</span>complexvalue2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment"># 多维数组</span>
<span class="token punctuation">-</span> a
<span class="token punctuation">-</span> b
<span class="token punctuation">-</span> c
  <span class="token punctuation">-</span> d
  <span class="token punctuation">-</span> e
    <span class="token punctuation">-</span> f


<span class="token key atrule">companies</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span>
        <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> company1
        <span class="token key atrule">price</span><span class="token punctuation">:</span> 200W
    <span class="token punctuation">-</span>
        <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> company2
        <span class="token key atrule">price</span><span class="token punctuation">:</span> 500W
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">数组和对象可以构成复合结构，例：

<span class="token key atrule">languages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Ruby
  <span class="token punctuation">-</span> Perl
  <span class="token punctuation">-</span> Python 
<span class="token key atrule">websites</span><span class="token punctuation">:</span>
  <span class="token key atrule">YAML</span><span class="token punctuation">:</span> yaml.org 
  <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> ruby<span class="token punctuation">-</span>lang.org 
  <span class="token key atrule">Python</span><span class="token punctuation">:</span> python.org 
  <span class="token key atrule">Perl</span><span class="token punctuation">:</span> use.perl.org

转换为 json 为：

<span class="token punctuation">{</span> 
  <span class="token key atrule">languages</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'Ruby'</span><span class="token punctuation">,</span> <span class="token string">'Perl'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token key atrule">websites</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token key atrule">YAML</span><span class="token punctuation">:</span> <span class="token string">'yaml.org'</span><span class="token punctuation">,</span>
    <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> <span class="token string">'ruby-lang.org'</span><span class="token punctuation">,</span>
    <span class="token key atrule">Python</span><span class="token punctuation">:</span> <span class="token string">'python.org'</span><span class="token punctuation">,</span>
    <span class="token key atrule">Perl</span><span class="token punctuation">:</span> <span class="token string">'use.perl.org'</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ol>
<li>安装，并修改安装路径(windows)<br>此方法官方文档里有<br>先下载安装包<br>在想安装的地方建立文件夹Docker即可<br>然后打开cmd，输入<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Docker Desktop Installer.exe"</span> <span class="token function">install</span> --installation-dir<span class="token operator">=</span><span class="token string">"E:\Program Files\Docker"</span>
后面的是你自己的路径，根据实际修改即可，等待安装完毕即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>容器是镜像的实例化，容器是一个小型的os，包含应用和其本身所需要的环境，镜像是只读的，而容器是可以运行的可写的，其中的容器处于运行状态</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><img src="/2023/07/04/56/docker%E5%91%BD%E4%BB%A4.webp"></p>
<ul>
<li>基础镜像命令(与git类似)</li>
<li>ls , tag , inspect<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">docker tag 旧 新
docker inspect 获得该镜像的详细信息.
-f 后面加上想获得的某一项的key就可以单独获得这一项的内容了
格式为</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">".key名"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
docker history 查看某一镜像的历史
docker search -f=is-official=true --limit 5 --no-trunc  nginx  
-f 过滤条件
limit 限制输出的数量
--no-trunc 不截断输出结果
docker rmi  -f  myubuntu 当存在多个标签时，删除的只是标签，当仅仅剩下一个标签时会把这个镜像直接删除 -f
强制删除
docker image prune 清理临时镜像文件<span class="token punctuation">,</span>虚悬文件，指的是docker images 中没有名字的文件
-a 删除所有无用image 不光是临时镜像
-filter 只删除符合过滤条件的镜像
	- `until`<span class="token punctuation">:</span> 根据镜像的创建时间来筛选。例如，`until=24h`将删除24小时之前创建的镜像。
    
	- `label`<span class="token punctuation">:</span> 根据标签来筛选。例如，`label=myapp`将删除带有标签为<span class="token string">"myapp"</span>的镜像。
    
	- `dangling`<span class="token punctuation">:</span> 筛选出悬挂（无用）镜像。使用`dangling=true`来删除悬挂镜像。
-f 强制删除

创建镜像
docker commit [OPTIONS] CONTAINER [REPOSITORY[<span class="token punctuation">:</span>TAG]]
docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[<span class="token punctuation">:</span>&lt;标签&gt;]]
 docker commit \
    --author <span class="token string">"Tao Wang &lt;twang2218@gmail.com&gt;"</span> \
    --message <span class="token string">"修改了默认网页"</span> \
    webserver \
    <span class="token property">nginx</span><span class="token punctuation">:</span>v2
//
- `CONTAINER`是要保存状态的容器的名称或容器ID。
- `REPOSITORY[<span class="token punctuation">:</span>TAG]`是新镜像的名称和标签。如果不提供标签，将默认使用<span class="token string">"latest"</span>标签。
docker commit -m <span class="token string">"xxx"</span> 被提交的容器

//导入导出镜像
docker save -o my_images.tar <span class="token property">image1</span><span class="token punctuation">:</span>tag <span class="token property">image2</span><span class="token punctuation">:</span>tag <span class="token property">image3</span><span class="token punctuation">:</span>tag  保存多个到镜像到指定的文件夹

docker load -i my_image.tar <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>容器操作</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker create  xxx
可选。。。
-i 默认打开标准输入
-t分配一个伪终端
docker start xx  启动一个容器
docker run --name 新名字 options 镜像 创建并启动一个容器
可选
-d 以守护态后台运行，容器是否会长久运行，是和 `docker run` 指定的命令有关，和 `-d` 参数无关。
-t 分配一个伪终端
-i 让容器的标准输入保持打开
docker restart 关闭容器并重新启动
docker logs 
-details
-f follow 持续保持输出
since string 从某一个时间开始日志
-tail string 输出最近的若干日志
-t timestamps 显示时间戳信息
-until string 输出某个时间段之前的信息

docker exec -it xxx 进入一个后台的容器 使用这个之后再容器内部执行exit 时不会导致容器停止，但是使用 docker attach 进入容器并退出的话会导致容器停止并退出
docker rm 
-f 强制终止并删除一个容器
-l 删除容器的链接，但保留容器
-v 删除容器挂在的数据卷
docker top 容器名称 查看容器的进程
docker inspect 容器名称 查看容器信息
docker cp &lt;本地文件/目录路径&gt; &lt;容器ID或名称&gt;<span class="token punctuation">:</span>&lt;容器内部路径&gt;
docker cp &lt;容器ID或名称&gt;<span class="token punctuation">:</span>&lt;容器内部路径&gt; &lt;本地文件/目录路径&gt;
-a 打包
-L 跟随软连接
docker pause id 暂停<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><ol>
<li><strong>创建卷</strong>： 您可以使用以下命令创建一个卷：</li>
</ol>
<p>  bashCopy code</p>
<p>  <code>docker volume create my_volume</code></p>
<p>  这将创建一个名为 <code>my_volume</code> 的卷。</p>
</li>
</ul>
<ol start="2">
<li><p><strong>查看卷列表</strong>： 要查看系统中的所有卷，可以运行：</p>
<p> bashCopy code</p>
<p> <code>docker volume ls</code></p>
</li>
<li><p><strong>删除卷</strong>： 要删除一个不再需要的卷，可以运行：</p>
<p> bashCopy code</p>
<p> <code>docker volume rm my_volume</code></p>
</li>
<li><p><strong>挂载卷到容器</strong>： 在运行容器时，使用 <code>-v</code> 或 <code>--volume</code> 标志来将卷挂载到容器内部。例如：</p>
<p> bashCopy code</p>
<p> <code>docker run -d -v my_volume:/path/in/container my_image</code></p>
<p> 这将把 <code>my_volume</code> 卷挂载到容器内部的 <code>/path/in/container</code> 目录。</p>
</li>
<li><p><strong>挂载主机目录到容器</strong>： 您还可以将主机上的目录挂载到容器内。例如：</p>
<p> bashCopy code</p>
<p> <code>docker run -d -v /host/path:/path/in/container my_image</code></p>
<p> 这将把主机上的 <code>/host/path</code> 目录挂载到容器内的 <code>/path/in/container</code>。</p>
</li>
<li><p><strong>查看容器的挂载卷</strong>： 要查看正在运行的容器挂载了哪些卷，可以使用以下命令：</p>
<p> bashCopy code</p>
<p> <code>docker inspect -f '{{ .Mounts }}' container_name_or_id</code></p>
</li>
<li><p><strong>复制文件到卷</strong>： 如果需要将文件复制到卷中，可以运行一个临时容器，然后将文件复制到挂载卷的路径。例如：</p>
<p> bashCopy code</p>
<p> <code>docker run --rm -v my_volume:/path/in/container -v /local/path/to/file:/data busybox cp /local/path/to/file /path/in/container</code></p>
<p> 这将复制 <code>/local/path/to/file</code> 到 <code>my_volume</code> 卷的 <code>/path/in/container</code>。</p>
</li>
<li><p><strong>卷数据备份和恢复</strong>： 您可以使用工具如 <code>docker cp</code> 或 <code>docker export</code> 来备份卷数据，然后使用 <code>docker create</code> 和 <code>docker start</code> 来恢复它们。备份和恢复数据的确切方法取决于您的需求和容器的情况。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">挂载数据卷
1.建立数据卷
docker run -it -v /db --name db0 ubuntu
docker run -it --volume-from db --name db1 ubuntu
docker run -it --volume-from db --name db2 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>VOLUME 的使用<br>将数据读写存储在数据卷中，使得容器尽量不发生读写操作，dockerfile 中的VOLUME是可以呗docker run覆盖的</li>
</ul>
<h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><h2 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h2><table>
<thead>
<tr>
<th>Dockerfile 指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定基础镜像，用于后续的指令构建。</td>
</tr>
<tr>
<td>LABEL</td>
<td>添加镜像的元数据，使用键值对的形式，方便后续进行filter来筛选。</td>
</tr>
<tr>
<td>RUN</td>
<td>在构建过程中在镜像中执行命令。</td>
</tr>
<tr>
<td>CMD</td>
<td>指定容器创建时的默认命令。（可以被覆盖）</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>设置容器创建时的主要命令。（不可被覆盖），</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>声明容器运行时监听的特定网络端口，不会自动映射，只是声明，需要自己配置</td>
</tr>
<tr>
<td>ENV</td>
<td>在容器内部设置环境变量。</td>
</tr>
<tr>
<td>ADD</td>
<td>将文件、目录或远程URL复制到镜像，自动解压</td>
</tr>
<tr>
<td>COPY</td>
<td>将文件或目录复制到镜像中。</td>
</tr>
<tr>
<td>VOLUME</td>
<td>为容器创建挂载点或声明卷。</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>设置后续指令的工作目录。</td>
</tr>
<tr>
<td>USER</td>
<td>指定后续指令的用户上下文。</td>
</tr>
<tr>
<td>ARG</td>
<td>定义在构建过程中传递给构建器的变量，可使用 “docker build” 命令设置。</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>当该镜像被用作另一个构建过程的基础时，添加触发器。</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>设置发送给容器以退出的系统调用信号。</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>定义周期性检查容器健康状态的命令</td>
</tr>
<tr>
<td>SHELL</td>
<td>覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td>
</tr>
<tr>
<td>RUN</td>
<td>运行指定命令</td>
</tr>
<tr>
<td>CMD</td>
<td>启动容器时指定默认执行的命令</td>
</tr>
<tr>
<td>ADD</td>
<td>添加内容到镜像</td>
</tr>
<tr>
<td>COPY</td>
<td>复制内容到镜像</td>
</tr>
</tbody></table>
<h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>推荐使用基础镜像：<br>BusyBox 集成Linux的命令<br>Alpine  在BusyBox基础上减小体积和消耗，并提供了apt管理工具</p>
<ul>
<li>使用dockerfile为镜像添加ssh服务<pre class="line-numbers language-css" data-language="css"><code class="language-css">#设置继承镜像
FROM myub

#提供作者信息
MAINTAINER docker_user <span class="token punctuation">(</span>user@docker.com<span class="token punctuation">)</span>

#执行命令
RUN apt-get update
RUN apt-get install -y openssh-server
RUN mkdir -p /var/run/sshd
RUN mkdir -p /root/.ssh
RUN sed -ri <span class="token string">'s/session required pam_loginid.so/#session required pam_loginuid.so/g'</span> /etc/pam.d/sshd

#复制配置文件到对应位置，并赋予其可执行权限
ADD authorized_keys /root/.ssh/authorized_eys
ADD run.sh /run.sh
RUN chmod 755 /run.sh
#开放端口
EXPOSE 22
#设置自启动命令
CMD [<span class="token string">"/run.sh"</span>]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>FROM scratch</p>
<p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。使用 <a href="https://golang.google.cn/">Go 语言</a> 开发的应用很多会使用这种方式来制作镜像，这也是有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p>
<p>每一个RUN会建立一层，所以要进行多重操作的时候不要每一行都建立一个RUN而是将他们合在一层</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM debian:stretch

RUN <span class="token builtin class-name">set</span> -x<span class="token punctuation">;</span> <span class="token assign-left variable">buildDeps</span><span class="token operator">=</span><span class="token string">'gcc libc6-dev make wget'</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> update <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token variable">$buildDeps</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> redis.tar.gz <span class="token string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/src/redis <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xzf</span> redis.tar.gz <span class="token parameter variable">-C</span> /usr/src/redis --strip-components<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token parameter variable">-C</span> /usr/src/redis <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token parameter variable">-C</span> /usr/src/redis <span class="token function">install</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/apt/lists/* <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> redis.tar.gz <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> /usr/src/redis <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> purge <span class="token parameter variable">-y</span> --auto-remove <span class="token variable">$buildDeps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>docker 不是虚拟机不存在后台运行，其中的所有应用都是在前台运行的，所以dockerfile 中直接执行这个应用即可，然后退出容器，让容器在后台运行即可</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"nginx"</span>, <span class="token string">"-g"</span>, <span class="token string">"daemon off;"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p>
</li>
<li><p>ENV 设置</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENV</span> key1=value1 key2=value2 .....</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>ARG 设置变量 等于 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code></p>
</li>
<li><p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 只在 FROM 中生效</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">${DOCKER_USERNAME}</span>/alpine</span>

<span class="token comment"># 要想在 FROM 之后使用，必须再次指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">${DOCKER_USERNAME}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
<li><p>HEALTHCHECK</p>
</li>
<li><p><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</p>
</li>
<li><p><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</p>
</li>
<li><p><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</p>
</li>
</ul>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">5s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token operator">\</span>
  <span class="token keyword">CMD</span> curl -fs http://localhost/ || exit 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>多阶段构造镜像<ol>
<li>多个FROM 和 构造过程写在一个dockerfile 中</li>
<li>使用as 来为某一阶段的构造命名 FROM golang:alpine as builder之后构造时直接指定名字即可, $ docker build –target builder -t username/imagename:tag .</li>
</ol>
</li>
<li>docker 导入导出容器<br>示例：<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker export 7691a814370e &gt; ubuntu.tar
cat ubuntu.tar | docker import - test/<span class="token property">ubuntu</span><span class="token punctuation">:</span>v1.0 # 将文件读入到标准输入流，再将其导入到镜像中
# 或者使用URL 来导入也行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="docker-查看容器ip"><a href="#docker-查看容器ip" class="headerlink" title="docker 查看容器ip"></a>docker 查看容器ip</h3><pre class="line-numbers language-none"><code class="language-none">docker inspect 容器ID | grep IPAddress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Nexus-容器"><a href="#Nexus-容器" class="headerlink" title="Nexus 容器"></a>Nexus 容器</h3><p>可以方便进行对Maven , Docker ,Yum,PyPI的管理</p>
<h1 id="Lua-一种可以嵌入程序的简便语言"><a href="#Lua-一种可以嵌入程序的简便语言" class="headerlink" title="Lua 一种可以嵌入程序的简便语言"></a>Lua 一种可以嵌入程序的简便语言</h1><p>一般只适合在linux上使用<br>安装：<br><code>apt-get install luaxxx(版本号)</code><br>执行<br><code>lua xxx.lua</code></p>
<h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><p>Lua 提供了交互式编程模式。我们可以在命令行中输入程序并立即查看效果。</p>
<p>Lua 交互式编程模式可以通过命令&nbsp;<strong>lua -i</strong>&nbsp;或&nbsp;<strong>lua</strong>&nbsp;来启用</p>
<ol>
<li>基本语法<ul>
<li>注释 – 单行  <code>--[[xxxx --]]</code> 多行注释</li>
<li>默认为全局变量，全局变量不需要声明，不需要时置为nil即可,局部变量使用 local 来指定</li>
<li>基本数据类型: nil ,boolean , number(为double类型) , string ,userdata (任意存储在变量中的数据结构)</li>
<li>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型。 可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用</li>
<li>function(由C 或Lua编写的函数) , thread(线程), table(关联数组)</li>
<li>使用<code>[[]]</code> 来跨越多行赋值</li>
<li>Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量<pre class="line-numbers language-Lua" data-language="Lua"><code class="language-Lua">html = [[
&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;a href="https://www.twle.cn/"&gt;简单编程&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<ul>
<li>lua会尝试将字符数字转化为数字来进行数字计算，字符串连接符是 <code>..</code></li>
<li><h1 id="string-来计算字符串的长度"><a href="#string-来计算字符串的长度" class="headerlink" title="string 来计算字符串的长度"></a>string 来计算字符串的长度</h1></li>
<li><strong>默认索引是从1开始</strong></li>
<li>function 可以以匿名函数（anonymous function）的方式通过参数传递<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- !/usr/bin/lua</span>
<span class="token comment">-- -*- encoding:utf-8 -*-</span>
<span class="token comment">-- filename: main.lua</span>
<span class="token comment">-- author: 简单教程(www.twle.cn)</span>
<span class="token comment">-- Copyright © 2015-2065 www.twle.cn. All rights reserved.</span>

<span class="token keyword">function</span> <span class="token function">testFun</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>fun<span class="token punctuation">)</span>
    <span class="token keyword">for</span> k <span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

tab<span class="token operator">=</span><span class="token punctuation">{</span>key1<span class="token operator">=</span><span class="token string">"val1"</span><span class="token punctuation">,</span>key2<span class="token operator">=</span><span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">testFun</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token comment">--匿名函数</span>
    <span class="token keyword">return</span> key<span class="token operator">..</span><span class="token string">"="</span><span class="token operator">..</span>val<span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>table变量可以使用索引，key，或者 . 来获取值</li>
<li>注意 : Lua 中 0 为 true</li>
<li><strong>多返回值</strong>Lua 中的函数可以返回<strong>多个结果值</strong>，例如&nbsp;<strong>string.find</strong>&nbsp;返回匹配串 “开始和结束的下标”（如果不存在匹配串返回 nil ）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> s, e <span class="token operator">=</span> string.find<span class="token punctuation">(</span><span class="token string">"www.twle.cn"</span>, <span class="token string">"twle"</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>s, e<span class="token punctuation">)</span>
<span class="token number">5</span>   <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>可变参数 使用 … 来代表</li>
<li>算术运算符 有 ^ 幂运算哦 </li>
<li>不等于是 -= 不是 != </li>
<li>逻辑运算 and , or ,not</li>
<li><h1 id="返回字符串个数或者传入参数个数"><a href="#返回字符串个数或者传入参数个数" class="headerlink" title="返回字符串个数或者传入参数个数.."></a>返回字符串个数或者传入参数个数..</h1></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>响铃(BEL)</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF) ，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT) （跳到下一个TAB位置）</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\</td>
<td>代表一个反斜线字符’’'</td>
<td>092</td>
</tr>
<tr>
<td>'</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>"</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>\0</td>
<td>空字符(NULL)</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>1到3位八进制数所代表的任意字符</td>
<td>三位八进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>1到2位十六进制所代表的任意字符</td>
<td>二位十六进制</td>
</tr>
</tbody></table>
<ul>
<li><p>常用字符串方法 string + . +</p>
<ul>
<li>upper 大写 lower 小写</li>
<li>gsub(string , findstring , replacestring ,num) 从string中查找findstring,并替换为replacestring ，num是替换的次数</li>
<li>find ()  返回首次出现该字符串的前后位置，包括开始和结束的位置</li>
<li>reverse 反转</li>
<li>char(num1,num2…) 将数字变为字母，ascii码</li>
<li>byte(字母串,指定某个字符) 将字母变为数字</li>
<li>len 长度</li>
<li>rep(string,num) 返回重复num次的string</li>
<li>gmatch(string,pattern) 返回一个迭代器，返回一个符合pattern的字串，可以使用 </li>
<li>format ()格式化 <a href="https://www.twle.cn/l/yufei/lua53/lua-basic-strings-format.html">转义码</a></li>
</ul>
</li>
<li><p>数组 lua的数组可以从负数开始遍历索引从1开始</p>
<ul>
<li><code>for i= -1 , 10 do ...</code></li>
<li>迭代器: <pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- pairs用于匹配键值对</span>
<span class="token keyword">local</span> myTable <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>myTable<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">--ispairs 用于遍历数组，字符串等</span>
<span class="token keyword">local</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">--自定义迭代器，实际就是自己写的遍历算法。。</span>
<span class="token keyword">function</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span>
    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">local</span> size <span class="token operator">=</span> <span class="token operator">#</span>collection
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> size <span class="token keyword">then</span>
            <span class="token keyword">local</span> value <span class="token operator">=</span> collection<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">return</span> value
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">}</span>
<span class="token keyword">local</span> iter <span class="token operator">=</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> iter <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>table常用方法 table + . +</p>
<ul>
<li>concat 是 concatenate (连锁, 连接) 的缩写. table.concat() 函数列出参数中指定 table 的数组部分从 start 位置到 end 位置的所有元素, 元素间以指定的分隔符(sep)隔开</li>
<li>insert(table,pos,value) 在指定位置添加一个value ,如果未指定位置，默认从尾部加入</li>
<li>remove(table,post) 返回并移除table 位于pos位置的元素，后面的元素会自动向前</li>
<li>sort 进行升序排序</li>
</ul>
</li>
<li><p>lua的模式匹配<br><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">开源中国中正则表达式列表</a><br><a href="https://www.twle.cn/l/yufei/lua53/lua-basic-strings-match.html">lua模式匹配</a></p>
</li>
<li><p>% 用于将后面的字符转义为字面量而不是特殊字符，例如</p>
</li>
<li><p>%。 匹配的是。而不是其他的</p>
</li>
<li><p>有时也会有特殊含义: %a 代表的是匹配一个字母，%d 代表匹配一个数字</p>
</li>
<li><p>字符类 %d 匹配任意数字，所以可以使用模式串 ‘%d%d/%d%d/%d%d%d%d’ 搜索 dd/mm/yyyy 格式</p>
</li>
<li><p>模块和导包</p>
</li>
<li><p>导包require(模块名)，甚至可以加个.var赋给一个变量来调用模块</p>
</li>
<li><p>元表？</p>
</li>
<li><p>协程</p>
</li>
<li><p><a href="https://www.twle.cn/l/yufei/lua53/lua-basic-file-io.html">文件</a></p>
</li>
</ul>
<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>一种高性能的 HTTP 和&nbsp;反向代理的服务器，<strong>默认监听端口是80</strong>不是8080</p>
<ul>
<li>基本命令<pre class="line-numbers language-css" data-language="css"><code class="language-css">nginx 启动
nginx -s quit 优雅的退出，完成所有任务后退出
nginx -s stop 强制退出
nginx -s reload 重启，来刷新配置文件
nginx -t 测试配置文件是否可用，同时会显示配置文件的路径
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><strong>配置文件</strong><br>配置文件分为三类</li>
</ul>
<ol>
<li>全局块,服务器配置，日志存放等</li>
<li>events 主要影响服务器和用户的网络连接</li>
<li>http 可以分很多块<ul>
<li><p>server块  全局块 本机监听配置和ip配置</p>
</li>
<li><p>location 局部块  控制地址定向，转发等 ， 在server块内来匹配新的转发路径</p>
</li>
</ul>
</li>
</ol>
<p>用法一：反向代理，作为另一个服务器的转发服务器来隐藏另一个服务器<br>使用docker 启动一个tomcat服务器，并进入并启动服务</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">docker run -itd tomcat /bin/sh
进入tomcat/bin目录
./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>错误情况：</p>
<p>docker tomcat无法启动</p>
<ol>
<li>可能没有映射端口或者没有关闭防火墙</li>
<li>把webapps.dist目录换成webapps</li>
<li>将文件扔到webapps即可</li>
</ol>
<p>测试第一个方法，解决问题！</p>
<p>进入容器内部</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">docker exec <span class="token operator">-</span>it mytomcat <span class="token operator">/</span>bin<span class="token operator">/</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>复制</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">rm <span class="token operator">-</span>rf webapps
mv webapps<span class="token punctuation">.</span>dist webapps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>复制</p>
<p>重启tomcat</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">docker restart mytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看docker的tomcat ip<br><code>docker inspect ID | grep IPAddress</code><br>配置文件:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">server</span> <span class="token punctuation">{</span>
    listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888
    server_name  [服务器的ip地址]<span class="token punctuation">;</span> # 不带http

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>

    <span class="token selector">location /</span> <span class="token punctuation">{</span>
        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//<span class="token property">tomcat服务器ip</span><span class="token punctuation">:</span>8080<span class="token punctuation">;</span> ##需要代理的服务器地址
        index index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    error_page 404 /404.html<span class="token punctuation">;</span>
        <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>
        <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开浏览器输入服务器的ip和代理端口，就可以看到docker容器中tomcat的主界面</p>
<ul>
<li><p>实现服务器分发<br>配置</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">server</span> <span class="token punctuation">{</span>
    listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888
    server_name  [服务器的ip地址]<span class="token punctuation">;</span>

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>

    <span class="token selector">location /hi/</span> <span class="token punctuation">{</span>
        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//服务器2<span class="token punctuation">;</span> ##需要代理的服务器地址
        index index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token selector">location /hello/</span> <span class="token punctuation">{</span>
        proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//服务器2<span class="token punctuation">;</span> ##需要代理的服务器地址
        index index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    error_page 404 /404.html<span class="token punctuation">;</span>
        <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>
        <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><a href="https://segmentfault.com/a/1190000022315733">location 匹配</a></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">location [ = | ~ | ~* | ^~ ] /URI</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>
<span class="token selector">location @/name/</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>
########### 顺序
1. location =    # 精准匹配
2. location ^~   # 带参前缀匹配
3. location ~    # 正则匹配（区分大小写）
4. location ~*   # 正则匹配（不区分大小写）
5. location /a   # 普通前缀匹配，优先级低于带参数前缀匹配。
6. location /    # 任何没有匹配成功的，都会匹配这里处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>空</code></strong></td>
<td>location 后没有参数直接跟着&nbsp;<strong>标准 URI</strong>，表示前缀匹配，代表跟请求中的 URI 从头开始匹配。</td>
</tr>
<tr>
<td><strong><code>=</code></strong></td>
<td>用于<strong>标准 URI</strong>&nbsp;前，要求请求字符串与其精准匹配，成功则立即处理，nginx停止搜索其他匹配。</td>
</tr>
<tr>
<td><strong><code>^~</code></strong></td>
<td>用于<strong>标准 URI</strong>&nbsp;前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</td>
</tr>
<tr>
<td><strong><code>~</code></strong></td>
<td>用于<strong>正则 URI</strong>&nbsp;前，表示 URI 包含正则表达式，&nbsp;<strong>区分</strong>大小写</td>
</tr>
<tr>
<td><strong><code>~*</code></strong></td>
<td>用于<strong>正则 URI</strong>&nbsp;前， 表示 URI 包含正则表达式，&nbsp;<strong>不区分</strong>大小写</td>
</tr>
<tr>
<td><strong><code>@</code></strong></td>
<td>@ 定义一个命名的 location，@ 定义的locaiton名字一般用在内部定向，例如error_page, try_files命令中。它的功能类似于编程中的goto。</td>
</tr>
</tbody></table>
</li>
<li><p>顺序</p>
</li>
</ul>
<ol>
<li>先精准匹配&nbsp;<strong><code>=</code></strong>&nbsp;，精准匹配成功则会立即停止其他类型匹配；</li>
<li>没有精准匹配成功时，进行前缀匹配。先查找带有&nbsp;<strong><code>^~</code></strong>&nbsp;的前缀匹配，带有&nbsp;<strong><code>^~</code></strong>&nbsp;的前缀匹配成功则立即停止其他类型匹配，普通前缀匹配（不带参数&nbsp;<strong><code>^~</code></strong>&nbsp;）成功则会暂存，继续查找正则匹配；</li>
<li><strong><code>=</code></strong>&nbsp;和&nbsp;<strong><code>^~</code></strong>&nbsp;均未匹配成功前提下，查找正则匹配&nbsp;<strong><code>~</code></strong>&nbsp;和&nbsp;<strong><code>~*</code></strong>&nbsp;。当同时有多个正则匹配时，按其在配置文件中出现的先后顺序优先匹配，命中则立即停止其他类型匹配；</li>
<li>所有正则匹配均未成功时，返回步骤 2 中暂存的普通前缀匹配（不带参数&nbsp;<strong><code>^~</code></strong>&nbsp;）结果</li>
</ol>
<ul>
<li>负载均衡<br>配置文件(server块)<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">http</span> <span class="token punctuation">{</span>

<span class="token selector">###此处省略一大堆没有改的配置


    ##自定义我们的服务列表
    upstream myserver</span><span class="token punctuation">{</span>
	    #### 可以使用 ip_hash 来进行hash 分配，可以与weight一起使用
	   ip_hash<span class="token punctuation">;</span>
       server 服务器1及端口<span class="token punctuation">;</span> # 可加权值来表示优先级，server 服务器1及端口 + weight = 数字<span class="token punctuation">;</span> 数字越大，权重越高
       server 服务器2及接口<span class="token punctuation">;</span>
	   ……
     <span class="token punctuation">}</span>


   <span class="token selector">server</span> <span class="token punctuation">{</span>
       listen       8888 <span class="token punctuation">;</span> ##设置我们nginx监听端口为8888
       server_name  [服务器的ip地址]<span class="token punctuation">;</span>

       # Load configuration files for the default server block.
       include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>

       <span class="token selector">location /</span> <span class="token punctuation">{</span>
           proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//myserver<span class="token punctuation">;</span> ##叮，核心配置在这里
           proxy_connect_timeout 10<span class="token punctuation">;</span> #超时时间，单位秒
       <span class="token punctuation">}</span>

       error_page 404 /404.html<span class="token punctuation">;</span>
           <span class="token selector">location = /40x.html</span> <span class="token punctuation">{</span>
       <span class="token punctuation">}</span>

       error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>
           <span class="token selector">location = /50x.html</span> <span class="token punctuation">{</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>关闭一个tomcat之后，发现仍然可以访问，但关闭所有的tomcat时发现无法访问了，说明实现了负载均衡</li>
</ul>
<h1 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h1><h2 id="常用操作："><a href="#常用操作：" class="headerlink" title="常用操作："></a>常用操作：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token parameter variable">-i:9999</span> 查看端口占用情况
top/htop 查看系统资源占用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="Bash界面"><a href="#Bash界面" class="headerlink" title="Bash界面"></a>Bash界面</h2><p>快捷键</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">Ctl-U   删除光标到行首的所有字符<span class="token punctuation">,</span>在某些设置下<span class="token punctuation">,</span>删除全行
Ctl-W   删除当前光标到前边的最近一个空格之间的字符
Ctl-H   backspace<span class="token punctuation">,</span>删除光标前边的字符
Ctl-R   匹配最相近的一个文件，然后输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">useradd -m username 创建用户，-m是会创建对应的用户目录到/home下，不加的话不会创建这个目录，-d 参数用来指定用户目录的位置
userdel -r 直接把用户目录删掉了不加r就不删除目录
who am i 看当前账号是什么
groupadd 创建一个用户组
useradd -g 用户组 用户名   把这个用户加入到用户组
usermod -g 用户组 用户名  修改
usermod -d 目录名 用户名 改变该用户登录的初始目录
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他指令</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">mkdir -p 创建多级目录
cp -r 递归的复制整个文件夹
cat -n 显示行
head -n 数字 默认看前10行 ， 加上-n 之后可以指定查看多少行
tial -n 数字 查看最后几行 
tail -f 实时追踪该文件的所有更新
&gt; 将内容覆盖在文件中
&gt;&gt; 在后面追加
ln -s 文件 链接的地方 
history 
! + history 中的指令编号，重新执行这条指令
date
cal 日历
find 路径 
-name 匹配文件名
-user 属于某个用户的
-size +n /-n /n 匹配文件大小 + 代表大于，-代表小于，不加代表等于 可加单位 K/M/G
locate 通过自建的数据库来进行查找，速度迅速，但是需要自己更新数据库
限制性updatedb


grep 
|grep + -n 显示行号/ -i 忽略字母大小写匹配 + 要匹配的关键字
权限
1-9位依次是 user group other的武安县
chown  -R 用户 文件 改变所属 -R来把里面的文件也执行这种修改
chgrp  组名 文件名 改变所有组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="任务按时调度"><a href="#任务按时调度" class="headerlink" title="任务按时调度"></a>任务按时调度</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">crond -l 显示当前用户的定时任务
crontab -e 来编辑内容
语法：
* * * * * /path/to/command 也可以直接写一行shell脚本

1. 第一个星号：分钟（0-59）
2. 第二个星号：小时（0-23）
3. 第三个星号：日期（1-31）
4. 第四个星号：月份（1-12或使用缩写，如1代表一月，2代表二月，以此类推）
5. 第五个星号：星期几（0-7或使用缩写，0和7都代表星期日，1代表星期一，以此类推）

使用这些星号，您可以定义定时任务的执行时间。例如，以下是一些示例：

- `* * * * *`：每分钟都执行任务。
- `0 * * * *`：每小时的开始时执行任务。
- `0 0 * * *`：每天的午夜（凌晨12点）执行任务。
- `0 0 1 * *`：每个月的第一天（日期1）的午夜执行任务。
- `0 0 * * 5`：每个星期五的午夜执行任务。

如果您想要更具体的时间表，可以将具体的数字替换星号，例如 `30 8 * * 1-5` 表示每个工作日的上午8点30分执行任务。

at 执行一次性任务只会在指定的时间点执行但是不会重复执行措辞
用法
1. at + 时间  <span class="token property">hh</span><span class="token punctuation">:</span>mm
2. 输入要执行的指令然后按 ctrl + d 保存
atq 查看计划中的任务
删除计划任务
atrm  id 
crontab -r 删除定时任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">lsblk 显示所有的磁盘和分区和挂载情况
fdisk 指定目录下的磁盘
mkfs 格式化磁盘
mount 磁盘目录 挂载目录 挂载分区
umount 取消挂载
df-h 查看磁盘状态 -T 查看磁盘类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">ifconfig 查看ip
netstat  查看系统网络情况
-an 按照一定顺序排序输出
-p  不加参数 显示哪个进程在调用
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进程管理</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">ps 
-a 显示当前所有进程信息
-u 以用户的格式显示进程信息
-x 显示后台运行的参数
-e 显示所有进程 包括父进程等等
-f 全格式
kill  + pid 删除进程
-9 强制
killall 进程名称<span class="token punctuation">(</span>支持通配符匹配<span class="token punctuation">)</span>
pstree 查看进程树
-p 显示pid
-u 显示进程所属用户
<span class="token comment">/*service*/</span>
systemctl +
start xxx 
stop
restart
status 查看某个服务的状态
enable 启动一个服务，使其自启动
list-unit-files --type=service | grep enabled 查看所有已启动的服务
get-default 查看系统的默认目标
set-default 设置默认目标
list-units 列出正在运行的单元

top 和ps相似，但是可以实时更新正在运行的的进程
-d + 秒数 每隔多少秒更新一次
-i 使top不显示任何僵死进程
-p + pid 监视某个指定进程的状态
top中使用
P 按照cpu使用率排序，默认
M 以内存使用率
N 以PID
q 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="shell-编程"><a href="#shell-编程" class="headerlink" title="shell 编程"></a>shell 编程</h1><ul>
<li>重定向</li>
<li>here document<pre class="line-numbers language-css" data-language="css"><code class="language-css">#!/bin/bash
cat &lt;&lt; END
<span class="token string">"这里是ls的使用方法"</span>
END
ls /root/shell_test

输出&gt;&gt;&gt;
<span class="token string">"这里是ls的使用方法"</span>
hell.sh  ls.sh	say.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>管道<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">|</span><span class="token operator">&amp;</span>    将标准输出和错误信息一起传递给后面的命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>命令分组<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">{</span>
	commands
	.......
<span class="token punctuation">}</span> &gt; 文件
使用 <span class="token punctuation">(</span><span class="token punctuation">)</span> 会将命令由子shell来进行执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>:</code> 等于true</li>
<li>echo<pre class="line-numbers language-css" data-language="css"><code class="language-css">echo 
-e 后面就可以加上换行符和制表符等特殊符号了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>printf<pre class="line-numbers language-css" data-language="css"><code class="language-css">printf 格式<span class="token punctuation">(</span>%s等<span class="token punctuation">)</span> 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>set / unset 设置/取消 环境变量</li>
<li>read 从标准输入读入放入后面给出的变量</li>
<li>wait 控制多进程</li>
<li>eval , exec , sed</li>
<li>source 执行shell脚本</li>
</ul>
<h1 id="k8s-kubernetes"><a href="#k8s-kubernetes" class="headerlink" title="k8s kubernetes"></a>k8s kubernetes</h1><blockquote>
<p>解决容器编排问题，实现分布式部署和替换，实现服务器集群</p>
</blockquote>
<p>kubernetes组件<br>一个kubernetes集群主要是由控制节点(master)、**工作节点(node)**构成，每个节点上都会安装不同的组件。  </p>
<ul>
<li>master：集群的控制平面，负责集群的决策 ( 管理 )</li>
</ul>
<p>ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制  </p>
<p>Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上  </p>
<p>ControllerManager : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等  </p>
<p>Etcd ：负责存储集群中各种资源对象的信息  </p>
<ul>
<li>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</li>
</ul>
<p>Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器  </p>
<p>KubeProxy : 负责提供集群内部的服务发现和负载均衡  </p>
<p>Docker : 负责节点上容器的各种操作</p>
<ul>
<li>基础概念<br>Master：集群控制节点，每个集群需要至少一个master节点负责集群的管控</li>
</ul>
<p>Node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行  </p>
<p>Pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器  </p>
<p>Controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等  </p>
<p>Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod  </p>
<p>Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签  </p>
<p>NameSpace：命名空间，用来隔离pod的运行环境</p>
<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p>Jenkins原理<img src="/2023/07/04/56/jenkins%E5%8E%9F%E7%90%86.png"></p>
<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>与Maven相比，Maven更侧重于包的管理，而Gradle侧重于大项目构建</p>
<h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><p>一种不同于git 的版本控制系统<br>SVN主要是集中式的版本控制系统：所有的文件版本信息都存储在中央服务器，用户进行工作时是创建一个副本，所以版本的历史是线性的<br>目录也是版本控制的一部分，分支和标签是目录的复制<br>而git是每个人的电脑上都是一个具体的版本库，版本的历史不是线性的，分支处理更加高效。<br>SVN的分支实际上就是新建一个目录，然后把原来的文件复制一份进去。<br>优缺点对比：</p>
<ul>
<li>SVN：<ul>
<li>优点 更加高效的处理二进制文件，版本历史线性，容易理解，更好的处理权限访问和控制。</li>
<li>缺点：提交和更改需要联网，然后分支合并更加麻烦，速度慢，每次操作都需要与服务器通信。</li>
</ul>
</li>
<li>Git <ul>
<li>优点：分布式控制，离线也可以进行开发，速度更快</li>
<li>缺点：学习比SVN复杂，对二进制的处理不好，容易造成性能问题。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vim git</tag>
      </tags>
  </entry>
  <entry>
    <title>git快速使用</title>
    <url>/2024/07/22/14/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文不是git入门，但后续会补一些入门知识，主要是写给工作室的学弟学妹快速排障使用。<del>主要是被某些同学整无语了才想着记录一下</del><br>观看前提：会上github</p>
<h1 id="git后悔药"><a href="#git后悔药" class="headerlink" title="git后悔药"></a>git后悔药</h1><blockquote>
<p>世上没有后悔药</p>
</blockquote>
<p>但是git有(￣︶￣*))<br>还在担心上班时脑子一热写下臭骂老板的话导致绩效奖没有吗，还在担心提交记录写的丑吗，还在担心远程push的时候不会搞吗，这篇文章用来记录如何解决这些问题。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>先介绍一些概念：</p>
<ol>
<li>工作区：工作区就是我们修改的文件但是还没有进行git add</li>
<li>暂存区：我们使用git add 之后但是还么有进行git commit</li>
<li>已提交：进行git commit 之后</li>
<li>已经推送到远程仓库：git push之后</li>
<li>HEAD：Git中的一个特殊的指针，指向了当前<strong>所在分支的最新提交</strong>。可以使用 ^ 来当作指针修饰符，HEAD^代表前一个提交， HEAD^^或者HEAD<del>2代表上两层提交，同理HEAD</del>n 当前提交的第n级父提交</li>
</ol>
<h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>在工作区进行修改之后，发现不想要了可以使用<br><code>git checkout -- &lt;文件名&gt;</code>来撤回修改<br>不过现在git新版本推荐使用<br><code>git restore &lt;文件名&gt;</code> 来撤回修改</p>
<h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p><code>git reset HEAD &lt;文件名&gt;</code> 使用这个命令可以将这个文件放回工作区，之后如果不想要了可以结合工作区的命令来撤回修改</p>
<h2 id="已提交"><a href="#已提交" class="headerlink" title="已提交"></a>已提交</h2><ol>
<li>撤回提交但是保留修改：也就是回到工作区 : <code>git reset --soft HEAD^</code></li>
<li>撤回提交并且撤回修改：也就是回到暂存区，<code>git rest --mixed HEAD^</code>可以简写为 <code>git rest HEAD^</code></li>
<li>撤回修改并且丢失所有的修改：也就是将工作区和暂存区的修改都给撤回：<code>git reset --hard HEAD^</code></li>
</ol>
<h2 id="已经推送到远程仓库"><a href="#已经推送到远程仓库" class="headerlink" title="已经推送到远程仓库"></a>已经推送到远程仓库</h2><p>当你到达这一步的时候，你肯定已经慌了，绩效奖多半是没了（；´д｀）ゞ<br><code>git revert HEAD</code><br>使用这个可以将你修改的东西撤回，然后你将这个新的提交上去就能够覆盖掉你原来的提交了，但是你原来的那个提交还是在记录中的，仍然可以访问的。</p>
<h1 id="git开发注意"><a href="#git开发注意" class="headerlink" title="git开发注意"></a>git开发注意</h1><h2 id="如何进去github"><a href="#如何进去github" class="headerlink" title="如何进去github"></a>如何进去github</h2><p>由于不可抗力，github需要一些魔法才能进去。不过工作室目前使用的是工作室服务器上搭建的gitea进行代码的管理，操作和github上基本一致。但是仓库目前由于学校锁ip，必须使用校园网才能进去，所以当成员不在校时，可以使用github来进行开发。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="如何提交代码"><a href="#如何提交代码" class="headerlink" title="如何提交代码"></a>如何提交代码</h3><ol>
<li>在仓库上中建立一个你英文名字的分支或者forked一个到自己仓库中(工作室一般采用第一种)</li>
<li>本地打开terminal，输入<code>git push origin 你要提交的本地分支:你要提交到的远程分支名字</code>，示例：<code>git push origin main:huangzhenwei</code> </li>
<li>点开仓库，找到Pull Request (pr)</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>掌上先机凉经</title>
    <url>/2024/09/29/08/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一面二面，面试官都觉得不错，三面hr面完之后貌似被横向对比了，没后续了，说好等到周五之前给结果，结果消息也不回了，果然还是跟京爷比不了，白浪费我找的空教室面试<br>省流：给的少，住的是上下铺，加班严重，面试官不咋地，hr不回消息，一坨屎，有更好的别看这玩意，离得远的别考虑了</p>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>问的好少</p>
<h2 id="实习学到啥"><a href="#实习学到啥" class="headerlink" title="实习学到啥"></a>实习学到啥</h2><p><del>摸鱼</del></p>
<h2 id="八股"><a href="#八股" class="headerlink" title="八股"></a>八股</h2><h3 id="HashMap、HashTable、ConcurrentHashMap"><a href="#HashMap、HashTable、ConcurrentHashMap" class="headerlink" title="HashMap、HashTable、ConcurrentHashMap"></a>HashMap、HashTable、ConcurrentHashMap</h3><p>经典问题，不写了</p>
<h3 id="线程池相关"><a href="#线程池相关" class="headerlink" title="线程池相关"></a>线程池相关</h3><h3 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h3><p>核心线程数、最大线程数、空闲等待时间、任务队列</p>
<h3 id="如何防止重复消费"><a href="#如何防止重复消费" class="headerlink" title="如何防止重复消费"></a>如何防止重复消费</h3><ol>
<li>消息唯一标识</li>
<li>幂等性操作</li>
<li>分布式锁，处理消息前，先获取分布式锁，确保同一时间只能有一个消费者处理消息</li>
</ol>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>陈年旧题了，不写了</p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>流程老一套，自我介绍-拷打-反问<br><del>面试官咄咄逼人，提问都说不明白什么意思，也不等回答直接打断，体验不好，在我目前面过的排第二差，第一是慢脚的那次</del></p>
<h2 id="项目是实际项目吗"><a href="#项目是实际项目吗" class="headerlink" title="项目是实际项目吗"></a>项目是实际项目吗</h2><p>md，老子不是写了已经上线使用了，UV都给了</p>
<h2 id="Kafka在签到中为何使用"><a href="#Kafka在签到中为何使用" class="headerlink" title="Kafka在签到中为何使用"></a>Kafka在签到中为何使用</h2><p>为了异步处理改库，对于签到成功我们使用的是Token + Redis来实现接口幂等性，保证少走数据库，然后改库的操作放到Kafka中去，异步执行，从而削峰，减少数据库压力</p>
<h2 id="为什么要使用Token"><a href="#为什么要使用Token" class="headerlink" title="为什么要使用Token"></a>为什么要使用Token</h2><p>目的是为了减少查库</p>
<h2 id="实习为什么实习这么短"><a href="#实习为什么实习这么短" class="headerlink" title="实习为什么实习这么短"></a>实习为什么实习这么短</h2><p>因为要秋招了给我开了(怪我了)<br>可以实习多久：4-6个月</p>
<h2 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h2><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 讲讲原理<br>有点忘了</li>
</ul>
<h2 id="广度优先和深度优先什么区别"><a href="#广度优先和深度优先什么区别" class="headerlink" title="广度优先和深度优先什么区别"></a>广度优先和深度优先什么区别</h2><p>什么牛马问题，问这个真不如给道笔试题<br>dfs如何优化，剪枝 + 条件判断<br>空间成本对比</p>
<h2 id="MySQL相关"><a href="#MySQL相关" class="headerlink" title="MySQL相关"></a>MySQL相关</h2><p>~~问的很牛马·~ </p>
<h3 id="空值走不走索引"><a href="#空值走不走索引" class="headerlink" title="空值走不走索引"></a>空值走不走索引</h3><p>md，被自己搞懵了，具体回答在另一篇博客中~~</p>
<h3 id="走不走索引的决定因素"><a href="#走不走索引的决定因素" class="headerlink" title="走不走索引的决定因素"></a>走不走索引的决定因素</h3><p>答得一坨</p>
<ol>
<li>索引列中的不同值的比例：不同值的比例越高，越有可能走索引。</li>
<li>表的大小：对于小表，更倾向于使用全表扫描</li>
<li>查询复杂度：也就是优化器的决定</li>
<li>索引覆盖：如果索引覆盖了所需查的所有列，那么可能更可能走索引</li>
</ol>
<h3 id="10w条数据，null就一个，is-null-走不走索引"><a href="#10w条数据，null就一个，is-null-走不走索引" class="headerlink" title="10w条数据，null就一个，is null 走不走索引"></a>10w条数据，null就一个，is null 走不走索引</h3><p>走索引，md没答出来</p>
<h3 id="MySQL使用二分查找的环节"><a href="#MySQL使用二分查找的环节" class="headerlink" title="MySQL使用二分查找的环节"></a>MySQL使用二分查找的环节</h3><ol>
<li>节点上使用主键或者索引列来进行二分查找确定数据页的位置</li>
<li>数据页中使用二分查找来定位记录的位置</li>
</ol>
<h3 id="牛马问题"><a href="#牛马问题" class="headerlink" title="牛马问题"></a>牛马问题</h3><p>问的一些逆天问题。不想记录了，一坨屎就完了。查户口md，</p>
<h1 id="三面-hr面"><a href="#三面-hr面" class="headerlink" title="三面(hr面)"></a>三面(hr面)</h1><p>聊是聊的挺开心的，聊完就不再回消息了，笑死</p>
]]></content>
  </entry>
  <entry>
    <title>脚本语言学习</title>
    <url>/2024/08/01/12/</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>基本语法</p>
]]></content>
  </entry>
  <entry>
    <title>美团测开一面</title>
    <url>/2024/09/09/30/</url>
    <content><![CDATA[<h1 id="美团一进宫"><a href="#美团一进宫" class="headerlink" title="美团一进宫"></a>美团一进宫</h1><p>🤡</p>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol>
<li>自我介绍</li>
<li>介绍实习项目</li>
<li>[[美团测开一面#美团一进宫#多态有哪些|如何理解封装继承和多态(多态记得不牢)]]</li>
<li>子类可以继承父类的方法吗？(看关键字，可以继承public和protected方法，默认访问权限的话如果在一个包内可以继承，private不可继承)</li>
<li>常见的集合(List，Set，Map，Queue，Stack)</li>
<li>[[美团测开一面#美团一进宫#ArrayList和LinkedList的区别 |ArrayList和LinkedList的区别]]</li>
<li>什么场景下LinkedList比ArrayList好用</li>
<li>HashMap常见八股：<ul>
<li>线程是否安全</li>
<li>HashTable</li>
<li>ConcurrentHashMap</li>
<li>jdk1.7和1.8的区别</li>
</ul>
</li>
<li>[[美团测开一面#抽象类，接口，抽象类和接口的如何选|抽象类，接口，抽象类和接口的如何选择]]</li>
<li>[[美团测开一面#@SpringBootApplication包含哪些|SpringBoot常见注解，@SpringBootApplication包含什么]]</li>
<li>常见的异常<ul>
<li>IO异常</li>
<li>SQL异常</li>
<li>堆内存溢出</li>
<li>空指针</li>
<li>索引越界</li>
</ul>
</li>
<li>什么情况下会导致堆内存溢出：<ul>
<li>内存泄漏：存在某些未释放的对象引用</li>
<li>大对象分配</li>
<li>数据结构过大</li>
<li>无限递归</li>
<li><strong>线程创建过多会导致堆外内存溢出</strong></li>
</ul>
</li>
<li>常见的空指针异常的情况：<ul>
<li>访问未初始化的对象</li>
<li>访问数组中的空元素</li>
<li>访问集合中的空元素：map.put(key, null)</li>
<li>自动拆箱 Integer num = null; int value = num;</li>
<li>多线程下一个线程可能会在另一个线程初始化对象之前就访问该对象。</li>
</ul>
</li>
<li>如何解决空指针异常：<ul>
<li>使用之前先检查是否为null</li>
<li>使用Optional类</li>
<li>try-catch</li>
<li>多线程下使用同步机制来保证</li>
</ul>
</li>
<li>debug的技巧，远程debug如何保证不会被其他请求干扰</li>
<li>什么情况下可以使用工厂模式，有何优点<ul>
<li>对象创建逻辑较为复杂，可以封装创建逻辑</li>
<li>需要根据不同的条件创建不同的对象时</li>
<li>解耦对象的创建和使用</li>
<li>提高可维护性</li>
<li>优点：封装对象创建的细节，减少重复代码，支持扩展性</li>
</ul>
</li>
<li>[[美团测开一面#线程池参数如何设置|线程池的参数如何设置]]</li>
<li>[[美团测开一面#旁路缓存有什么缺点，有没有遇到查询数据不一致的情况|旁路缓存有什么缺点，有没有遇到查询数据不一致的情况]]</li>
<li>为什么使用Token + Redis保证幂等性，有什么优点</li>
<li>[[美团测开一面#AOP相关| AOP相关]]，如何做的全局异常处理和日志处理</li>
<li>实习项目中为何使用Kafka</li>
<li>[[美团测开一面#数据库三大范式|数据库三大范式]]</li>
<li>索引类型</li>
<li>手写sql三个大题，不难<code>ALTER TABLE table_name ADD column_name data_type [constraint];</code></li>
<li>前端的一些基础知识提问(不记录了)</li>
<li>手撕 <a href="https://leetcode.cn/problems/wtcaE1/">无重复字符的最长子串</a>(思路对了，条件判断写的有点问题，给过了)</li>
<li>反问环节：<ul>
<li>测开比例-&gt;开发占60%</li>
<li>面试表现：有点紧张，平常心对待就行，没有给出实际回答(多半是毁面评了)</li>
<li>多久能有后续-&gt;一个星期之内</li>
</ul>
</li>
</ol>
<h2 id="答得不好以及后续答案"><a href="#答得不好以及后续答案" class="headerlink" title="答得不好以及后续答案"></a>答得不好以及后续答案</h2><h3 id="多态有哪些"><a href="#多态有哪些" class="headerlink" title="多态有哪些"></a>多态有哪些</h3><blockquote>
<p>已经答出方法重载和方法重写，面试官问是否有其他</p>
</blockquote>
<p>还有接口实现和抽象类和抽象方法，运行时多态</p>
<ol>
<li>接口实现：一个类可以实现一个或多个接口，接口中的方法可以有不同的实现。</li>
<li>抽象类不能被实例化，必须由子类去实现其抽象方法</li>
<li>运行时多态：通过父类引用指向子类，在运行时决定调用哪个类的方法</li>
</ol>
<h3 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h3><ol>
<li>数据结构不同<ul>
<li>动态数组，随机访问，索引访问</li>
<li>双向链表，每个元素都包含前一个元素的引用</li>
</ul>
</li>
<li>性能上：<ul>
<li>速度快复杂度O(1)</li>
<li>速度慢：O(n)</li>
</ul>
</li>
<li>插入和删除元素：<ul>
<li>中间插入较慢</li>
<li>复杂度O(1)</li>
</ul>
</li>
<li>内存使用<ul>
<li>紧凑，扩容时需要重新分配和复制数组</li>
<li>每个元素都需要额外的存储空间来保存前后引用，内存开销较大</li>
</ul>
</li>
</ol>
<ul>
<li><code>ArrayList</code>&nbsp;适用于频繁读取和随机访问的场景。</li>
<li><code>LinkedList</code>&nbsp;适用于频繁插入和删除的场景，尤其是在列表中间进行操作时。</li>
</ul>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 抽象类，接口如何选择</li>
</ul>
<h3 id="抽象类，接口，抽象类和接口的如何选择"><a href="#抽象类，接口，抽象类和接口的如何选择" class="headerlink" title="抽象类，接口，抽象类和接口的如何选择"></a>抽象类，接口，抽象类和接口的如何选择</h3><h4 id="什么场景下使用抽象类"><a href="#什么场景下使用抽象类" class="headerlink" title="什么场景下使用抽象类"></a>什么场景下使用抽象类</h4><ol>
<li>定义通用接口，具体实现由子类提供</li>
<li>代码复用：一些通用的代码需要在子类之间进行复用，可以放在抽象类中，由子类继承减少代码重复</li>
<li>模板方法模式：抽象类顶一个一个模板方法，包含一些列的步骤，具体的实现由子类实现。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 模板方法</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Football</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Football Game Initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Football Game Started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Football Game Ended"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Basketball</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Basketball Game Initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Basketball Game Started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Basketball Game Ended"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>提供默认行为</li>
<li>强制子类实现某些方法</li>
</ol>
<h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><ul>
<li>抽象类用来描述共同行为和特性，可以有自己的成员变量和具体方法，有明显的继承关系</li>
<li>接口用于定义行为规范，可以多实现，只能有常量和抽象方法(jdk1.8之后可以有默认方法和静态方法)</li>
</ul>
<h4 id="如何选择二者"><a href="#如何选择二者" class="headerlink" title="如何选择二者"></a>如何选择二者</h4><ol>
<li>是否需要继承多个父类的行为-&gt;接口</li>
<li>是否需要共享代码-&gt;抽象类</li>
<li>是否需要构造方法-&gt;抽象类</li>
<li>是否需要默认方法-&gt;接口</li>
</ol>
<h3 id="SpringBootApplication包含哪些"><a href="#SpringBootApplication包含哪些" class="headerlink" title="@SpringBootApplication包含哪些"></a>@SpringBootApplication包含哪些</h3><ol>
<li><strong><code>@SpringBootConfiguration</code></strong> 配置类，允许在类中定义@Bean方法，以便在Spring容器中注册Bean</li>
<li><strong><code>@EnableAutoConfiguration</code></strong> 根据项目中的依赖自动配置Spring应用程序，扫描类路径中的依赖，根据这些依赖自动配置Spring Bean</li>
<li><strong><code>@ComponentScan</code></strong> 启用组件扫描</li>
</ol>
<h3 id="debug的技巧，远程debug如何保证不会被其他请求干扰"><a href="#debug的技巧，远程debug如何保证不会被其他请求干扰" class="headerlink" title="debug的技巧，远程debug如何保证不会被其他请求干扰"></a>debug的技巧，远程debug如何保证不会被其他请求干扰</h3><p>远程debug的原理是通过网络将本地调试器和远程JVM链接起来，从而允许开发者在本地测试远程服务器上的代码。<br>通过的是JDWP Java Debug Wire Protocol协议进行通信<br>第二个问题可以搞一个测试环境，将生产环境中的数据复制过来进行debug</p>
<h3 id="线程池参数如何设置"><a href="#线程池参数如何设置" class="headerlink" title="线程池参数如何设置"></a>线程池参数如何设置</h3><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 线程池参数如何设置</li>
</ul>
<ol>
<li>CPU密集型设置为CPU核心数+1，也就是计算为主，数据排序</li>
<li>I/O密集型设置为<code>n*2</code>，也就是网络读取，文件读取。</li>
</ol>
<h3 id="旁路缓存有什么缺点，有没有遇到查询数据不一致的情况"><a href="#旁路缓存有什么缺点，有没有遇到查询数据不一致的情况" class="headerlink" title="旁路缓存有什么缺点，有没有遇到查询数据不一致的情况"></a>旁路缓存有什么缺点，有没有遇到查询数据不一致的情况</h3><h3 id="AOP相关"><a href="#AOP相关" class="headerlink" title="AOP相关"></a>AOP相关</h3><h4 id="AOP基础"><a href="#AOP基础" class="headerlink" title="AOP基础"></a>AOP基础</h4><h4 id="有哪些通知类型"><a href="#有哪些通知类型" class="headerlink" title="有哪些通知类型"></a>有哪些通知类型</h4><ol>
<li>前置通知 获取方法签名和参数，不能获取返回值</li>
<li>后置通知 方法执行后执行，无论是否出现异常，不能获得返回值，但可以获取异常信息</li>
<li>返回通知：方法执行并返回结果后执行吗，可以获得返回值，但是获得不了异常信息</li>
<li>异常通知：异常后执行，获取异常信息，不能获得返回值</li>
<li>环绕通知：可以在方法之前和定义逻辑，可以获取方法签名、参数、返回值、异常信息。</li>
</ol>
<h4 id="面试记录-什么是动态代理-x2F-静态代理-动态代理的原理"><a href="#面试记录-什么是动态代理-x2F-静态代理-动态代理的原理" class="headerlink" title="[[面试记录#什么是动态代理/静态代理|动态代理的原理]"></a>[[面试记录#什么是动态代理/静态代理|动态代理的原理]</h4><h4 id="使用AOP进行操作日志处理"><a href="#使用AOP进行操作日志处理" class="headerlink" title="使用AOP进行操作日志处理"></a>使用AOP进行操作日志处理</h4><p>主要是使用环绕通知</p>
<h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><p>@ControllerAdvice底层原理是AOP</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">businessExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">runtimeExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string">"服务器发生错误, 请及时告知开发人员"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name">HandlerMethodValidationException</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ArgumentValidExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span>
                <span class="token string">"请检查参数是否正确"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MissingServletRequestParameterException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MissingServletParameterExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span>
                <span class="token string">"请核对参数，以免重新登录"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">NoResourceFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">illegalStateExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">NoResourceFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span>
                <span class="token string">"请求路径或资源不正确！"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h3><ol>
<li>第一范式：每一列都是原子，不可分割</li>
<li>第二范式：要求每个非主键列都完全依赖于主键</li>
<li>第三范式要求在第二范式的基础上，非主键列直接依赖于主键而不是传递依赖</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>面试记录</title>
    <url>/2024/06/07/17/</url>
    <content><![CDATA[<p>DevOps</p>
<h2 id="2024-05-11-同余信科一面（二面已过，但是不要26届的）"><a href="#2024-05-11-同余信科一面（二面已过，但是不要26届的）" class="headerlink" title="2024-05-11 同余信科一面（二面已过，但是不要26届的）"></a>2024-05-11 同余信科一面（二面已过，但是不要26届的）</h2><h3 id="项目中承担的开发工作"><a href="#项目中承担的开发工作" class="headerlink" title="项目中承担的开发工作"></a>项目中承担的开发工作</h3><h3 id="写过哪些模块"><a href="#写过哪些模块" class="headerlink" title="写过哪些模块"></a>写过哪些模块</h3><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><h3 id="Java的常用集合用过哪些"><a href="#Java的常用集合用过哪些" class="headerlink" title="Java的常用集合用过哪些"></a>Java的常用集合用过哪些</h3><ol>
<li><strong>ArrayList</strong>f</li>
<li>LinkedList</li>
<li>HashSet</li>
<li>TreeSet</li>
<li>HashMap</li>
</ol>
<h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h3 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h3><ol>
<li>当超过最大长度的0.75的时候开始扩容</li>
<li>创建新的哈希表，容量为原来的两倍</li>
<li>重新哈希：遍历旧的哈希表，将每个元素重新哈希到新的哈希表中。</li>
<li>替换旧的哈希表。</li>
</ol>
<h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ol>
<li>类加载器找到字节码文件，从这个文件中读取数据，创建一个在内存中表示的java.lang.Class对象</li>
<li>链接：<ul>
<li>验证：确保被加载的类是否满足Java虚拟机的限制，例如：字节码是否有正确的格式，符号引用是否可以正确解析等</li>
<li>准备：在住呢比阶段，Java虚拟机为类的静态变量分配内存，并且初始化默认值</li>
<li>解析：Java虚拟机将类的符号引用转化为直接引用</li>
</ul>
</li>
<li>初始化：执行类的初始化方法和静态初始化块和静态字段的初始化。</li>
</ol>
<h3 id="MySQL的存储引擎"><a href="#MySQL的存储引擎" class="headerlink" title="MySQL的存储引擎"></a>MySQL的存储引擎</h3><h4 id="InnoDB的底层数据结构，B-树和B树的区别"><a href="#InnoDB的底层数据结构，B-树和B树的区别" class="headerlink" title="InnoDB的底层数据结构，B+树和B树的区别"></a>InnoDB的底层数据结构，B+树和B树的区别</h4><p>B+树<br>区别：</p>
<ol>
<li>B+树中，所有的数据存储在叶子节点中，非叶子节点只存储关键字信息。而在B树中，关键字和数据可以存储在任何节点</li>
<li>叶子节点链接：在B+树中，所有的叶子节点都通过指针连接在一次，形成一个链表结构。B树中叶子节点之间没有链接</li>
<li>关键字重复：B+树种，非叶子节点的关键字会重复出现叶子节点，而在B树种，关键字只出现一次。<br>优点：</li>
<li>B+树的叶子节点不存数据，仅存键值，相同的页表大小的情况下，B+树可以存更多的键值，从而使得树的高度更矮，查找数据进行磁盘IO次数就会减少。数据查询效率也会更快</li>
<li>B+树索引的数据都在叶子节点，而且是按照顺序排列的，查找的时候更容易查找，效率更高</li>
</ol>
<h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p>不可以解决幻读问题</p>
<h3 id="数据库的并发一致性问题"><a href="#数据库的并发一致性问题" class="headerlink" title="数据库的并发一致性问题"></a>数据库的并发一致性问题</h3><ol>
<li><p><strong>脏读（Dirty Read）：一个事务读取了另一个未提交事务的修改。如果那个事务回滚，那么这个读取操作就会读到错误的数据。</strong></p>
</li>
<li><p><strong>不可重复读（Non-repeatable Read）</strong>：在同一个事务中，一个查询操作对同一行数据进行了多次读取，但由于其他事务的修改，导致多次读取的结果不一致。</p>
</li>
<li><p><strong>幻读（Phantom Read）</strong>：在同一个事务中，一个查询操作在前后两次查询中，由于其他事务的插入或删除操作，导致读取到了额外的行或者少了一些行。</p>
</li>
<li><p><strong>丢失更新（Lost Update）</strong>：两个事务同时修改同一行数据，后提交的事务会覆盖前一个事务的修改，导致前一个事务的修改丢失。</p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="索引在项目中的实际应用"><a href="#索引在项目中的实际应用" class="headerlink" title="索引在项目中的实际应用"></a>索引在项目中的实际应用</h3><h3 id="AOP相关"><a href="#AOP相关" class="headerlink" title="AOP相关"></a>AOP相关</h3><p>业务逻辑成功，AOP数据库插入操作失败，如何解决<br>怎么把日志写到文件里</p>
<h3 id="对于大量的数据同步，如何处理"><a href="#对于大量的数据同步，如何处理" class="headerlink" title="对于大量的数据同步，如何处理"></a>对于大量的数据同步，如何处理</h3><h4 id="怎么从Nginx的转发中获取实际的IP"><a href="#怎么从Nginx的转发中获取实际的IP" class="headerlink" title="怎么从Nginx的转发中获取实际的IP"></a>怎么从Nginx的转发中获取实际的IP</h4><p>使用proxy_set_header指令将客户端实际IP地址添加到HTTP请求中即可</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
//Java
<span class="token directive"><span class="token keyword">import</span> javax.servlet.http.HttpServletRequest</span><span class="token punctuation">;</span>

@RestController
<span class="token directive"><span class="token keyword">public</span> class MyController</span> <span class="token punctuation">{</span>

    @RequestMapping("/")
    <span class="token directive"><span class="token keyword">public</span> String index(HttpServletRequest request)</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">String</span> ipAddress = request.getHeader(<span class="token string">"X-Forwarded-For"</span>)</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">if</span> (ipAddress == null)</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">ipAddress</span> = request.getHeader(<span class="token string">"X-Real-IP"</span>)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token directive"><span class="token keyword">return</span> <span class="token string">"Client IP: "</span> + ipAddress</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Canal如何使用，有何好处，项目中如何使用"><a href="#Canal如何使用，有何好处，项目中如何使用" class="headerlink" title="Canal如何使用，有何好处，项目中如何使用"></a>Canal如何使用，有何好处，项目中如何使用</h3><h3 id="多线程对逻辑优化"><a href="#多线程对逻辑优化" class="headerlink" title="多线程对逻辑优化"></a>多线程对逻辑优化</h3><h4 id="使用并行Stream流来处理常用数据"><a href="#使用并行Stream流来处理常用数据" class="headerlink" title="使用并行Stream流来处理常用数据"></a>使用并行Stream流来处理常用数据</h4><h4 id="并行流的各种问题"><a href="#并行流的各种问题" class="headerlink" title="并行流的各种问题"></a>并行流的各种问题</h4><ol>
<li><p><strong>线程安全问题</strong>：并行处理数据时，需要注意线程安全问题。如果并行流修改了共享资源，可能会导致数据不一致。</p>
</li>
<li><p><strong>顺序问题</strong>：并行流在处理数据时，不能保证数据的处理顺序。</p>
</li>
<li><p><strong>开销问题</strong>：并行流虽然可以提高处理速度，但是它也会增加额外的开销，如线程切换的开销。对于小数据集，这种开销可能会使并行流的性能低于串行流。</p>
</li>
<li><p><strong>阻塞问题</strong>：如果并行流的任务中有阻塞操作，如 I/O 操作，那么并行流的性能可能会大大降低。</p>
</li>
</ol>
<h3 id="可以对自己的代码进行优化，考虑性能优化"><a href="#可以对自己的代码进行优化，考虑性能优化" class="headerlink" title="可以对自己的代码进行优化，考虑性能优化"></a>可以对自己的代码进行优化，考虑性能优化</h3><h3 id="SpringSecurity相关"><a href="#SpringSecurity相关" class="headerlink" title="SpringSecurity相关"></a>SpringSecurity相关</h3><p>SecurityContext是Spring Security中的一个重要组件，它用于存储与当前执行线程相关的安全性和身份验证信息。在任何地方，你都可以通过SecurityContextHolder来访问当前的SecurityContext。</p>
<h2 id="2024-05-18-青鹤信息一面（笔试挂"><a href="#2024-05-18-青鹤信息一面（笔试挂" class="headerlink" title="2024-05-18 青鹤信息一面（笔试挂)"></a>2024-05-18 青鹤信息一面（笔试挂)</h2><h3 id="MyBatis的延迟加载优化查询效率"><a href="#MyBatis的延迟加载优化查询效率" class="headerlink" title="MyBatis的延迟加载优化查询效率"></a>MyBatis的延迟加载优化查询效率</h3><p>当使用一对多或者多对多的关联查询时，使用延迟加载可以在不需要获取关联数据时，可以避免执行关联查询，从而提高查询效率。</p>
<h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><h3 id="MySQL的主从同步过程"><a href="#MySQL的主从同步过程" class="headerlink" title="MySQL的主从同步过程"></a>MySQL的主从同步过程</h3><p>使用binlog</p>
<ul>
<li>主从复制：<ul>
<li>master节点会不断将sql命令写入Binary Log，子节点使用I/O线程读入master节点中的Bin Log</li>
<li>字节点使用SQL线程执行Bin Log的语句</li>
</ul>
</li>
</ul>
<h3 id="主主同步如何实现，如何解决并发问题"><a href="#主主同步如何实现，如何解决并发问题" class="headerlink" title="主主同步如何实现，如何解决并发问题"></a>主主同步如何实现，如何解决并发问题</h3><h3 id="如何解决IO的负载均衡分布"><a href="#如何解决IO的负载均衡分布" class="headerlink" title="如何解决IO的负载均衡分布"></a>如何解决IO的负载均衡分布</h3><h3 id="AOP的优势"><a href="#AOP的优势" class="headerlink" title="AOP的优势"></a>AOP的优势</h3><h3 id="JDK17和JDK8的区别"><a href="#JDK17和JDK8的区别" class="headerlink" title="JDK17和JDK8的区别"></a>JDK17和JDK8的区别</h3><h2 id="2024-06-19-中和农信一面（一面挂）"><a href="#2024-06-19-中和农信一面（一面挂）" class="headerlink" title="2024-06-19 中和农信一面（一面挂）"></a>2024-06-19 中和农信一面（一面挂）</h2><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><h4 id="索引失效的场景（重点）"><a href="#索引失效的场景（重点）" class="headerlink" title="索引失效的场景（重点）"></a>索引失效的场景（重点）</h4><ol>
<li>LiIKE操作符以通配符开头例如 “%xx”或 “%xx%” ，但是 “xx%” 可以使用索引。</li>
<li>对索引使用函数或者表达式操作 <code>select * from t_user where length(name)=6 </code></li>
<li>对索引隐式转换，如果查询条件中的类型和列的类型不匹配，MySQL可能会进行类型转换，索引就会失效</li>
<li>联合索引非最左匹配，多个普通字段组合在一起创建的索引叫做联合索引，不遵循最左优先的方式就会失效。</li>
<li>where子句中使用了OR，如果OR后的条件不是索引列就会失效</li>
<li>出现NULL值：如果列中包含NULL值，那么使用IS NULL或IS NOT NULL 查询时索引可能会失效。</li>
</ol>
<h4 id="Text对于字段类型索引会失效吗"><a href="#Text对于字段类型索引会失效吗" class="headerlink" title="Text对于字段类型索引会失效吗"></a>Text对于字段类型索引会失效吗</h4><p><code>TEXT</code>类型的字段是可以被索引的，但是由于<code>TEXT</code>类型的长度可能非常大，所以必须指定前缀长度。这是因为MySQL的B-Tree索引只能存储固定长度的值。如果不指定前缀长度，MySQL会报错。</p>
<h4 id="MySQL如何使用索引的"><a href="#MySQL如何使用索引的" class="headerlink" title="MySQL如何使用索引的"></a>MySQL如何使用索引的</h4><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="Java中的类什么时候会加载到内存中"><a href="#Java中的类什么时候会加载到内存中" class="headerlink" title="Java中的类什么时候会加载到内存中"></a>Java中的类什么时候会加载到内存中</h4><ol>
<li>实例化的时候：new </li>
<li>访问静态对象时，</li>
<li>子类加载时会把父类也加载进内存</li>
<li>通过反射API时，使用反射时会把对应的类加载到内存中。</li>
</ol>
<h4 id="Hash冲突-amp-HashMap如何解决Hash冲突的，HashMap插入数据的过程"><a href="#Hash冲突-amp-HashMap如何解决Hash冲突的，HashMap插入数据的过程" class="headerlink" title="Hash冲突 &amp; HashMap如何解决Hash冲突的，HashMap插入数据的过程"></a>Hash冲突 &amp; HashMap如何解决Hash冲突的，HashMap插入数据的过程</h4><p>HashMap使用链地址法解决哈希冲突的。HashMap使用数组加链表的方式，数组中的位置可以看作一个桶，每个桶实际就是一个链表或者红黑树。<br>当桶中的数据超过一定的阈值时，默认为8，会转为红黑树。<br>插入过程：</p>
<ol>
<li>计算哈希值，使用键的hashCode()</li>
<li>确定桶的位置，使用哈希值的一部分来确认键值对应该存储在哪个桶中。一般用哈希值的地位来选择桶</li>
<li>检查冲突：<ul>
<li>没有冲突就直接建一个新的节点</li>
<li>有冲突就判断键值是否相同，使用的是equals方法，相等就覆盖，不相等就添加一个新的节点存储键值对</li>
</ul>
</li>
<li>如果HashMap的大小超过了数组长度的0.75就会进行扩容，扩容之后是原来的两倍</li>
</ol>
<h4 id="ThreadLocal的实现原理"><a href="#ThreadLocal的实现原理" class="headerlink" title="ThreadLocal的实现原理"></a>ThreadLocal的实现原理</h4><ol>
<li>每个Thread对象内部有一个ThreadLocalMap对象，然后它的键是ThreadLocal，值是我们像存储的值</li>
<li>ThreadLocal的get实际上使用了ThreadLocalMap来获取值的</li>
</ol>
<h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><h4 id="栅栏-Barrier"><a href="#栅栏-Barrier" class="headerlink" title="栅栏 Barrier"></a>栅栏 Barrier</h4><p>Barrier是一种同步机制，它可以让一组线程在所有线程到达某个点之后再一起继续执行。CountDownLatch就是栅栏的实现。</p>
<h2 id="2024-06-25-江苏运联笔试（已过"><a href="#2024-06-25-江苏运联笔试（已过" class="headerlink" title="2024-06-25 江苏运联笔试（已过)"></a>2024-06-25 江苏运联笔试（已过)</h2><h3 id="如何捕捉一个IO异常，简单说明NULLPoniterException的理解"><a href="#如何捕捉一个IO异常，简单说明NULLPoniterException的理解" class="headerlink" title="如何捕捉一个IO异常，简单说明NULLPoniterException的理解"></a>如何捕捉一个IO异常，简单说明NULLPoniterException的理解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>NullPointerException是程序尝试使用一个需要对象引用的擦欧总，但是这个对象引用却是null，就会抛出这个异常。</p>
<h3 id="代码运行题目"><a href="#代码运行题目" class="headerlink" title="代码运行题目"></a>代码运行题目</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunningMan</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">RunningMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Hi</span><span class="token punctuation">,</span>man<span class="token operator">!</span> <span class="token class-name">Just</span> run<span class="token operator">!</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="SQL题目"><a href="#SQL题目" class="headerlink" title="SQL题目"></a>SQL题目</h3><p>建表，多表联合，更新数据，排序，分组</p>
<h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><h3 id="MyBatis的主要组成部分，以及需要配置的东西"><a href="#MyBatis的主要组成部分，以及需要配置的东西" class="headerlink" title="MyBatis的主要组成部分，以及需要配置的东西"></a>MyBatis的主要组成部分，以及需要配置的东西</h3><h2 id="2024-06-28-江苏运联一面-已过"><a href="#2024-06-28-江苏运联一面-已过" class="headerlink" title="2024-06-28 江苏运联一面(已过)"></a>2024-06-28 江苏运联一面(已过)</h2><h3 id="项目提问："><a href="#项目提问：" class="headerlink" title="项目提问："></a>项目提问：</h3><p>哪个项目对你提升最大</p>
<h3 id="jdk17新特性-（不会"><a href="#jdk17新特性-（不会" class="headerlink" title="jdk17新特性 （不会)"></a>jdk17新特性 （不会)</h3><p>模式匹配for instanceof、记录</p>
<h4 id="模式匹配的增强"><a href="#模式匹配的增强" class="headerlink" title="模式匹配的增强"></a>模式匹配的增强</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">17</span>之前
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token comment">// 使用s</span>
<span class="token punctuation">}</span>
<span class="token number">17</span>中
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接使用s</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h4><p>可以指定哪些类或者接口可以继承或实现它</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类定义</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类定义</span>
<span class="token punctuation">}</span>

<span class="token keyword">non-sealed</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类定义</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="强化的空指针异常信息"><a href="#强化的空指针异常信息" class="headerlink" title="强化的空指针异常信息"></a>强化的空指针异常信息</h4><p>从JDK 17开始，异常信息会明确指出是哪个变量或哪个表达式的结果为<code>null</code>，大大减少了调试时间。</p>
<h3 id="jdk8-新特性"><a href="#jdk8-新特性" class="headerlink" title="jdk8 新特性"></a>jdk8 新特性</h3><p>Lambda，Stream，新的日期API、Optional类</p>
<h4 id="Stream流相关"><a href="#Stream流相关" class="headerlink" title="Stream流相关"></a>Stream流相关</h4><p>Lambda表达式是Java 8引入的一个重要特性，它提供了一种简洁的方式来表示匿名方法。这种表达式基于数学中的λ演算（一种用于描述函数的系统），在Java中主要用于实现函数式编程的概念。<br>分组：collect里面使用Collectors.groupingBy方法进行分组</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> peopleByAge <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>过滤：filter和 limit和distinct和skip</p>
<h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><p>有什么好处，使用lambda表达式<br>::new 是方法引用的一种，用于引用构造函数<br>可以搭配函数式接口来更加简洁的创建一个类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personSupplier <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> person <span class="token operator">=</span> personSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Person的无参数构造函数</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personFunction <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> person <span class="token operator">=</span> personFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Person的带有一个String参数的构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="有什么用"><a href="#有什么用" class="headerlink" title="::有什么用"></a>::有什么用</h4><ol>
<li>引用静态方法，例如Integer::parseInt</li>
<li>引用实例方法：<code>String s = "hello";</code>，则<code>s::toUpperCase</code></li>
<li>引用特定类型的任意对象的实例方法：String::toLowerCase</li>
<li>引用构造函数：ArrayList::new</li>
</ol>
<h3 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h3><h4 id="哪些组件"><a href="#哪些组件" class="headerlink" title="哪些组件"></a>哪些组件</h4><p>Nacos、Sentinel、Dubbo、RocketMQ、Seata、Gateway</p>
<h3 id="Nacos的作用"><a href="#Nacos的作用" class="headerlink" title="Nacos的作用"></a>Nacos的作用</h3><h4 id="Nacos如何区分不同的配置"><a href="#Nacos如何区分不同的配置" class="headerlink" title="Nacos如何区分不同的配置"></a>Nacos如何区分不同的配置</h4><ol>
<li><strong>Data ID</strong>：配置ID，通常用于唯一标识一个配置内容。</li>
<li><strong>Group</strong>：分组，Nacos允许用户通过分组来对配置进行分类，一个Group中可以有多个Data ID。</li>
<li><strong>Namespace</strong>：命名空间，用于进一步隔离配置。一个命名空间下可以有多个Group，一个Group下可以有多个Data ID。命名空间通常用于区分不同的开发环境，如开发环境、测试环境和生产环境。</li>
</ol>
<h4 id="命名空间重复了会怎么用"><a href="#命名空间重复了会怎么用" class="headerlink" title="命名空间重复了会怎么用"></a>命名空间重复了会怎么用</h4><p>命名空间是通过唯一的Namespace ID来标识的，而不是仅仅通过名称。即使两个命名空间的名称相同，它们的Namespace ID也是不同的，因此Nacos仍然能够区分它们。<br>如果服务分发后服务断开了会怎么办</p>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><p>Redisson会无限延长一个键的过期时间吗，可以设置超时时间</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> 尝试<span class="token number">10</span>s内获得锁，锁的最大生存时间是<span class="token number">60</span>s
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>进行看门狗
这两步操作实际上是获得了两个锁，不能做到对同一个锁进行看门狗和到达一定时间就放弃这个锁
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Java基础-JUC"><a href="#Java基础-JUC" class="headerlink" title="Java基础 JUC***"></a>Java基础 JUC***</h3><p><strong>AtomicInteger</strong>：并发场景下使用，它提供了一种在多线程环境中安全地操作单个整数的方式，而无需使用<code>synchronized</code>关键字。这是通过使用底层的非阻塞算法实现的，通常是利用CPU的原子指令。<code>AtomicInteger</code>支持原子操作，这意味着每个操作都是不可分割的，保证了在并发环境中的线程安全。</p>
<h4 id="八大数据类型和延展性"><a href="#八大数据类型和延展性" class="headerlink" title="八大数据类型和延展性"></a>八大数据类型和延展性</h4><h3 id="MyBatis如何在查询的时候就进行组装"><a href="#MyBatis如何在查询的时候就进行组装" class="headerlink" title="MyBatis如何在查询的时候就进行组装"></a>MyBatis如何在查询的时候就进行组装</h3><ol>
<li>使用resultMap进行结果映射<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>genderResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>YourModelClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender_column<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenderTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!-- 其他字段映射 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">JdbcType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">TypeHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenderTypeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置参数时的逻辑（如果需要）</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> gender <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> gender <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"男"</span> <span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> gender <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> gender <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"男"</span> <span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> gender <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> gender <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"男"</span> <span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
最后在配置文件中进行注册<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yourpackage.GenderTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="2024-06-28-深圳同行者科技一面（一面挂）"><a href="#2024-06-28-深圳同行者科技一面（一面挂）" class="headerlink" title="2024-06-28 深圳同行者科技一面（一面挂）"></a>2024-06-28 深圳同行者科技一面（一面挂）</h2><h3 id="拷打笔试题-x2F-算法题"><a href="#拷打笔试题-x2F-算法题" class="headerlink" title="拷打笔试题/算法题"></a>拷打笔试题/算法题</h3><h4 id="1000w个数据中只有两个相同的数据，如何找出来"><a href="#1000w个数据中只有两个相同的数据，如何找出来" class="headerlink" title="1000w个数据中只有两个相同的数据，如何找出来"></a>1000w个数据中只有两个相同的数据，如何找出来</h4><p>使用HashSet</p>
<h3 id="解释一下签到模块中的接口幂等性"><a href="#解释一下签到模块中的接口幂等性" class="headerlink" title="解释一下签到模块中的接口幂等性"></a>解释一下签到模块中的接口幂等性</h3><h3 id="解释一下如何保证的Redis的高可用性"><a href="#解释一下如何保证的Redis的高可用性" class="headerlink" title="解释一下如何保证的Redis的高可用性"></a>解释一下如何保证的Redis的高可用性</h3><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><h4 id="分布式架构要注意哪些问题"><a href="#分布式架构要注意哪些问题" class="headerlink" title="分布式架构要注意哪些问题"></a>分布式架构要注意哪些问题</h4><ol>
<li>数据一致性：要保证集群中的数据是一致的</li>
<li>网络分区容忍性：出现了网络分区，根据CAP定理，出现网络分区时需要在业务需求的一致性和可用性之间做出均衡</li>
<li>服务发现：当服务出现增加减少或者移动，客户端需要找到这些服务，可以使用Nacos解决</li>
<li>负载均衡：合理分配请求或任务到多个服务节点，来优化资源利用率和响应时间</li>
<li>容错和故障转移：单点故障会导致整个系统不可用</li>
<li>事务管理：分布式系统中管理跨多个服务的事务，保证操作的原子性和一致性</li>
<li>安全性：分布式系统中勉励多种安全威胁，数据泄露，服务拒绝攻击</li>
<li>性能监控和调优：<br>CAP原理<br><strong>一致性（Consistency）</strong><br><strong>可用性（Availability</strong>）<br><strong>分区容忍性（Partition tolerance</strong>）<br>当出现网络分区P时，CA只能保证一个</li>
</ol>
<h3 id="项目中遇见的比较棘手的问题，如何解决的"><a href="#项目中遇见的比较棘手的问题，如何解决的" class="headerlink" title="项目中遇见的比较棘手的问题，如何解决的"></a>项目中遇见的比较棘手的问题，如何解决的</h3><h3 id="数据库中的脏数据如何处理"><a href="#数据库中的脏数据如何处理" class="headerlink" title="数据库中的脏数据如何处理"></a>数据库中的脏数据如何处理</h3><h2 id="2024-07-02-江苏运联二面-等结果，自我感觉还可以"><a href="#2024-07-02-江苏运联二面-等结果，自我感觉还可以" class="headerlink" title="2024-07-02 江苏运联二面(等结果，自我感觉还可以)"></a>2024-07-02 江苏运联二面(等结果，自我感觉还可以)</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主动把自己的亮点项目介绍出来，在自我介绍环节就努力介绍。把自己的优点（英语、六级、博客、项目开发、github、想给开源项目做贡献）</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>自我介绍</li>
<li>承担的责任、前后端都参与开发，主要框架搭建，周期</li>
<li>介绍项目（要主动介绍自己的特点和亮点）</li>
<li>框架搭建使用了哪些技术栈</li>
<li>签到相关</li>
<li>需求怎么来的</li>
<li>有课否？学分能修满否？大三下学期有可否？大四要干嘛？</li>
<li>英语如何</li>
<li>怎么提升阅读</li>
<li>期望薪资</li>
<li>最快到岗</li>
<li></li>
</ol>
<h3 id="HashMap和HashTable什么区别"><a href="#HashMap和HashTable什么区别" class="headerlink" title="HashMap和HashTable什么区别"></a>HashMap和HashTable什么区别</h3><ol>
<li>线程安全：<ul>
<li><strong>HashTable</strong> 线程更安全,他的每个方法都是同步的，可以用在多线程中，不建议使用，建议使用ConcurrentHashMap</li>
</ul>
</li>
<li>性能：HashMap性能更好，因为不需要进行同步</li>
<li>空值：HashTable不允许key/value为null，而HashMap允许一条记录的key为null，允许多个记录的value为null</li>
<li>继承的跟类不同：<ul>
<li><code>HashTable</code>&nbsp;继承自&nbsp;<code>Dictionary</code>&nbsp;类。</li>
<li><code>HashMap</code>&nbsp;继承自&nbsp;<code>AbstractMap</code>&nbsp;类并实现了&nbsp;<code>Map</code>&nbsp;接口。</li>
</ul>
</li>
<li>迭代器<ul>
<li><code>HashTable</code>&nbsp;使用&nbsp;<code>Enumerator</code>&nbsp;进行迭代。</li>
<li><code>HashMap</code>&nbsp;使用&nbsp;<code>Iterator</code>&nbsp;进行迭代。<code>Iterator</code>&nbsp;是fail-fast迭代器，如果在迭代过程中有其他线程修改了&nbsp;<code>HashMap</code>，则会抛出&nbsp;<code>ConcurrentModificationException</code>。</li>
</ul>
</li>
<li><strong>内部结构</strong>（Java 8 及以后）：<ul>
<li><code>HashMap</code>&nbsp;在解决哈希冲突时，当链表长度大于阈值（默认为8）时，链表转换为红黑树，以提高搜索效率。</li>
<li><code>HashTable</code>&nbsp;不具备这种链表到红黑树的转换机制。</li>
</ul>
</li>
</ol>
<h3 id="ConcurrentHashMap相关"><a href="#ConcurrentHashMap相关" class="headerlink" title="ConcurrentHashMap相关"></a>ConcurrentHashMap相关</h3><h3 id="MySQL索引-1"><a href="#MySQL索引-1" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><h3 id="索引有什么用"><a href="#索引有什么用" class="headerlink" title="索引有什么用"></a>索引有什么用</h3><h4 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h4><p>建议搭配自己项目中的场景介绍</p>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><h3 id="摄像头识别分析数据类的场景了解过没"><a href="#摄像头识别分析数据类的场景了解过没" class="headerlink" title="摄像头识别分析数据类的场景了解过没"></a>摄像头识别分析数据类的场景了解过没</h3><h2 id="2024-07-03-神州灵云一面-已过，已发ofifer"><a href="#2024-07-03-神州灵云一面-已过，已发ofifer" class="headerlink" title="2024-07-03 神州灵云一面(已过，已发ofifer)"></a>2024-07-03 神州灵云一面(已过，已发ofifer)</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><ol>
<li>自我介绍</li>
<li>介绍工作室</li>
<li>项目上线了or实验室项目</li>
<li>已经学完的课程</li>
<li>关于笔试题的提问：<ul>
<li>解题的关键点是什么</li>
<li>或运算和＋运算有什么区别，这个题目中两种运算有什么区别</li>
<li>整型转字符串</li>
</ul>
</li>
<li>一周几天/时间/最快到岗</li>
<li>项目代码/几人开发 </li>
<li>反问:<ul>
<li>多久出面试结果 答：技术面，还有二面</li>
<li>面的怎么样，有什么建议，答：面的还可以</li>
<li>职位的职责， 答：文档，简单开发，对网络要求较高。</li>
</ul>
</li>
</ol>
<h3 id="TCP握手过程-忘了。。。"><a href="#TCP握手过程-忘了。。。" class="headerlink" title="TCP握手过程(忘了。。。)"></a>TCP握手过程(忘了。。。)</h3><ol>
<li>客户端发送带有同步序列编号(SYN)报文到服务器，然后客户端进入SYN-SENT的状态</li>
<li>服务器收到带有SYN的报文之后，如果统一建立连接，就会发送一个SYN-ACK报文作文响应，这个报文包含服务器自己的初始序列号，同时对客户端的SYN报文进行确认</li>
<li>客户端收到服务器的STN-ACK报文之后会发送一个ACK报文作为响应，之后客户端进入ESTABLISHED状态，之后服务器接收到之后也进入连接状态。</li>
</ol>
<h3 id="JWT是什么，JWT就是Token的一种格式"><a href="#JWT是什么，JWT就是Token的一种格式" class="headerlink" title="JWT是什么，JWT就是Token的一种格式"></a>JWT是什么，JWT就是Token的一种格式</h3><h3 id="MongoDB基础提问（不会-还有ES的命令"><a href="#MongoDB基础提问（不会-还有ES的命令" class="headerlink" title="MongoDB基础提问（不会)还有ES的命令"></a>MongoDB基础提问（不会)还有ES的命令</h3><p>背背主要的查询语句去</p>
<h3 id="权限管理的设计"><a href="#权限管理的设计" class="headerlink" title="权限管理的设计"></a>权限管理的设计</h3><h4 id="RBAC-（Role-Based-Access-Control）基于角色的访问控制"><a href="#RBAC-（Role-Based-Access-Control）基于角色的访问控制" class="headerlink" title="RBAC （Role-Based Access Control）基于角色的访问控制"></a>RBAC （<strong>Role-Based Access Control</strong>）基于角色的访问控制</h4><p><img src="/2024/06/07/17/RABC.png"><br>将权限赋予角色，然后将角色赋予用户，这样的设计就可以很方柏霓的更改角色内所有用户的权限，也方便将用户的权限变更</p>
<h4 id="ABAC-Attribute-Based-Access-Control-基于属性的访问控制"><a href="#ABAC-Attribute-Based-Access-Control-基于属性的访问控制" class="headerlink" title="ABAC (**Attribute-Based Access Control ) 基于属性的访问控制"></a>ABAC (**Attribute-Based Access Control ) 基于属性的访问控制</h4><p>通过各种属性来动态判断一个操作是否可以被允许。<br>比如赋予某个人可以查看某个文档的权限，但是不可以修改。<br>是基于对象、资源、操作、环境（上下文，时间和位置，协议等），具体的实现</p>
<h4 id="新权限系统"><a href="#新权限系统" class="headerlink" title="新权限系统"></a>新权限系统</h4><p><img src="/2024/06/07/17/%E6%96%B0%E6%9D%83%E9%99%90.png"><br>主要就是在RBAC的基础上，允许绕过角色来直接给用户添加一些权限</p>
<h3 id="集群怎么设计的，有什么用，如何应对脑裂"><a href="#集群怎么设计的，有什么用，如何应对脑裂" class="headerlink" title="集群怎么设计的，有什么用，如何应对脑裂"></a>集群怎么设计的，有什么用，如何应对脑裂</h3><h3 id="如何中止SQL语句"><a href="#如何中止SQL语句" class="headerlink" title="如何中止SQL语句"></a>如何中止SQL语句</h3><p>场景：有一个访问需要查询一个很大的数据库，然后前端那边等不及了刷新，就会不断发送这个请求，我数据库该如何处理这些无效的查询？</p>
<h2 id="2024-08-28-北京用友一面"><a href="#2024-08-28-北京用友一面" class="headerlink" title="2024-08-28 北京用友一面"></a>2024-08-28 北京用友一面</h2><p>自我介绍</p>
<h3 id="介绍旁路缓存，旁路缓存一定能保证一致性吗"><a href="#介绍旁路缓存，旁路缓存一定能保证一致性吗" class="headerlink" title="介绍旁路缓存，旁路缓存一定能保证一致性吗"></a>介绍旁路缓存，旁路缓存一定能保证一致性吗</h3><p>旁路缓存是由应用程序来保证缓存和数据库的一致性，特点是直接更新数据库，删除缓存。<br>可以保证一致性，因为缓存写入的速度是远远快于数据库的写入的。</p>
<h3 id="为什么使用Redisson而不是使用synchronized"><a href="#为什么使用Redisson而不是使用synchronized" class="headerlink" title="为什么使用Redisson而不是使用synchronized"></a>为什么使用Redisson而不是使用synchronized</h3><ol>
<li>分布式锁，Synchronized只能在单个JVM内部工作</li>
<li>可重入性，Redisson提供了可重入性锁的实现，而Synchronized需要手动管理可重入性</li>
<li>锁超时，Redisson支持超时释放防止死锁发生</li>
</ol>
<h3 id="HashMap、ConcurrentHashMap-jdk1-7的区别"><a href="#HashMap、ConcurrentHashMap-jdk1-7的区别" class="headerlink" title="HashMap、ConcurrentHashMap jdk1.7的区别"></a>HashMap、ConcurrentHashMap jdk1.7的区别</h3><h3 id="Sentinel-相关"><a href="#Sentinel-相关" class="headerlink" title="Sentinel 相关"></a>Sentinel 相关</h3><h3 id="建立索引有哪些考量"><a href="#建立索引有哪些考量" class="headerlink" title="建立索引有哪些考量"></a>建立索引有哪些考量</h3><h3 id="索引失效场景-1"><a href="#索引失效场景-1" class="headerlink" title="索引失效场景"></a>索引失效场景</h3><ol>
<li>查询条件不符合索引列的顺序</li>
<li>使用函数或表达式</li>
<li>隐式类型转换</li>
<li>不等于操作</li>
<li>范围查询</li>
</ol>
<h3 id="ES和MySQL区别"><a href="#ES和MySQL区别" class="headerlink" title="ES和MySQL区别"></a>ES和MySQL区别</h3><h3 id="Redis常见数据结构，string底层"><a href="#Redis常见数据结构，string底层" class="headerlink" title="Redis常见数据结构，string底层"></a>Redis常见数据结构，string底层</h3><h3 id="JVM内存泄漏如何定位、排查"><a href="#JVM内存泄漏如何定位、排查" class="headerlink" title="JVM内存泄漏如何定位、排查"></a>JVM内存泄漏如何定位、排查</h3><h3 id="docker常见指令"><a href="#docker常见指令" class="headerlink" title="docker常见指令"></a>docker常见指令</h3><h3 id="并行Stream流的底层"><a href="#并行Stream流的底层" class="headerlink" title="并行Stream流的底层"></a>并行Stream流的底层</h3><h2 id="ks测开一面-2024-09-04"><a href="#ks测开一面-2024-09-04" class="headerlink" title="ks测开一面 2024.09.04"></a>ks测开一面 2024.09.04</h2><p>水平不够 + 学历歧视 + 专业不对口，太难受了<br>自我介绍<br>实习负责的业务<br> 面向对象的三大特性，分别介绍什么场景下使用<br> 重载</p>
<blockquote>
<p>多态（Polymorphism）是面向对象编程（OOP）中的一个核心概念，它允许对象以多种形式出现。多态性使得相同的操作可以作用于不同的对象，并且这些对象可以根据具体的实现表现出不同的行为。多态性主要通过继承和接口实现。</p>
<ol>
<li><strong>编译时多态（静态多态）</strong>：<br> 通过方法重载（Method Overloading）实现。同一个类中可以有多个方法，它们具有相同的名字但参数不同。<br> <strong>运行时多态（动态多态）</strong>：<br>  通过方法重写（Method Overriding）实现。子类可以重写父类的方法，并且在运行时可以根据对象的实际类型调用相应的方法。</li>
</ol>
</blockquote>
<h3 id="垃圾回收机制，怎么判断哪些对象是回收对象"><a href="#垃圾回收机制，怎么判断哪些对象是回收对象" class="headerlink" title="垃圾回收机制，怎么判断哪些对象是回收对象"></a>垃圾回收机制，怎么判断哪些对象是回收对象</h3><ol>
<li>引用计数法，每个对象有一个引用计数器，当有一个新的引用指向该对象时，计数器+1，当一个引用不再指向该对象时，计数器-1。如果引用计数器为0，则可以被回收。缺点是：循环引用，两个对象互相引用对方，并且不再被其他对象引用，引用计数器永远不会为0，导致内存泄漏</li>
<li>可达性算法：通过GC Roots的对象为起点，从这些对象开始，通过引用链可达的就不会被回收，不可达的就会被回收。(常见的GC Roots是虚拟机栈中的引用对象，方法区中的类静态属性引用对象，方法去中的常量引用对象，本地方法栈中的Native方法引用的对象)</li>
<li>标记-清除算法(Mark-Sweep) <ol>
<li>从GC Roots开始标记可达对象</li>
<li>遍历堆中的所有对象，清除那些没有被标记的对象。</li>
</ol>
</li>
</ol>
<h3 id="常见的集合的实现类，集合的好处"><a href="#常见的集合的实现类，集合的好处" class="headerlink" title="常见的集合的实现类，集合的好处"></a>常见的集合的实现类，集合的好处</h3><ol>
<li>简化代码，简化数据结构的使用</li>
<li>提高开发效率</li>
<li>性能优化</li>
<li>类型安全，使用泛型可以确保集合中的元素类型一致避免了类型转化错误</li>
<li>丰富的工具类</li>
</ol>
<h3 id="MySQL常见命令"><a href="#MySQL常见命令" class="headerlink" title="MySQL常见命令"></a>MySQL常见命令</h3><ol>
<li>库 CREATE DATABEASE, DROP DATABASE,USE ,SHOW DATABASES</li>
<li>表 CREATE TABLE,DROP TABLE,SHOW TABLES, ALTER TABLE ADD/DROP/MODIFY</li>
<li>数据 INSERT INTO,UPDATE,DELETE FROM,SELECT</li>
</ol>
<p>查一个表的第10行和20行，limit 9,10 跳过前9行，然后读取10行</p>
<h3 id="MySQL默认索引的数据结构是什么"><a href="#MySQL默认索引的数据结构是什么" class="headerlink" title="MySQL默认索引的数据结构是什么"></a>MySQL默认索引的数据结构是什么</h3><p>默认数据结构是B树，InnoDB存储引擎使用的是B+树作为索引数据结构<br>B树和B+树的区别：将所有的值存在叶子节点中</p>
<h3 id="Redis和MySQL的区别"><a href="#Redis和MySQL的区别" class="headerlink" title="Redis和MySQL的区别"></a>Redis和MySQL的区别</h3><h3 id="Linux常见命令"><a href="#Linux常见命令" class="headerlink" title="Linux常见命令"></a>Linux常见命令</h3><h3 id="为什么使用了Kafka"><a href="#为什么使用了Kafka" class="headerlink" title="为什么使用了Kafka"></a>为什么使用了Kafka</h3><ol>
<li>解耦</li>
<li>异步处理</li>
<li>流量削峰</li>
<li>可靠性</li>
<li>可扩展性</li>
</ol>
<h3 id="介绍一下实习项目之间的服务调用"><a href="#介绍一下实习项目之间的服务调用" class="headerlink" title="介绍一下实习项目之间的服务调用"></a>介绍一下实习项目之间的服务调用</h3><h3 id="有用过测试吗"><a href="#有用过测试吗" class="headerlink" title="有用过测试吗"></a>有用过测试吗</h3><p>如何进行压测</p>
<h3 id="分布式锁如何实现的，有哪些实现方式"><a href="#分布式锁如何实现的，有哪些实现方式" class="headerlink" title="分布式锁如何实现的，有哪些实现方式"></a>分布式锁如何实现的，有哪些实现方式</h3><ol>
<li>基于Redis实现的分布式锁，</li>
<li>基于ZooKeeper实现</li>
</ol>
<h4 id="ZooKeeper实现"><a href="#ZooKeeper实现" class="headerlink" title="ZooKeeper实现"></a>ZooKeeper实现</h4><p>有更高的可靠性之外，功能外层还有一个分厂有用的特性：Watch机制。这个机制可以用来实现公平的分布式锁。性能方面较差</p>
<h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><p><img src="/2024/06/07/17/ZooKeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.png" alt="|525"><br>ZooKeeper分布式锁是基于临时顺序节点和Watcher(事件监听器)实现的</p>
<ol>
<li>首先要有一个持久节点/locks，客户端获取锁就是在locks下创建临时顺序节点</li>
<li>创建/locks/lock1节点之后，会判断lock1是否是/locks下最小的子节点</li>
<li>如果是最小的子节点，则获取锁成功，否则获取失败。</li>
<li>如果获取失败，客户端会在/locks/lock0上注册一个时间监听器，这个监听器的作业用是当前一个节点释放锁之后通知客户端1，避免无效自旋<br>释放锁：</li>
<li>成功获取锁的客户端在执行完任务流程之后，会将对应的子节点删除</li>
<li>成功获取锁的客户端出现故障之后，对应的子节点是临时顺序节点，会被自动删除，避免了锁无法被释放</li>
<li>事件监听器就是监听这个子节点删除事件</li>
</ol>
<h5 id="为什么要使用临时顺序节点"><a href="#为什么要使用临时顺序节点" class="headerlink" title="为什么要使用临时顺序节点"></a>为什么要使用临时顺序节点</h5><p>znode是ZooKeeper中数据的最小单元<br>znode有4大分类</p>
<ol>
<li>持久节点：一旦创建就一直存在，即使ZooKeeper集群宕机</li>
<li>临时节点：与客户端会话绑定，会话消失则节点消失，临时节点只能作为叶子节点，不能再创建子节点</li>
<li>持久顺序节点：持久+顺序性</li>
<li>临时顺寻节点：临时+顺序性</li>
</ol>
<h5 id="为什么要对前一个节点监听"><a href="#为什么要对前一个节点监听" class="headerlink" title="为什么要对前一个节点监听"></a>为什么要对前一个节点监听</h5><blockquote>
<p>当前一个节点对应的客户端释放锁之后（也就是前一个节点被删除之后，监听的是删除事件），通知获取锁失败的客户端（唤醒等待的线程，Java 中的 <code>wait/notifyAll</code> ），让它尝试去获取锁，然后就成功获取锁了。</p>
</blockquote>
<h3 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h3><ol>
<li>实习生该做什么：给啥做啥</li>
<li>测试开发比例多少：至少7：3</li>
<li>面试结果如何，表现如何：代码能力可以，对测试的了解不太行，对测试是否感兴趣</li>
<li>测试挂了对其他岗位有什么影响：只有不来会影响</li>
</ol>
<h3 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h3><p>最大路径和(最小路径和变体) mid难度<br>如何验证算法题是对的</p>
<h2 id="2024-09-14-高顿教育一面"><a href="#2024-09-14-高顿教育一面" class="headerlink" title="2024-09-14 高顿教育一面"></a>2024-09-14 高顿教育一面</h2><p>状态不好+没复习，成功的挂了</p>
<h3 id="HashMap工作原理和底层"><a href="#HashMap工作原理和底层" class="headerlink" title="HashMap工作原理和底层"></a>HashMap工作原理和底层</h3><p>经典问题，但是当时没看源码，有点烂</p>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 好好看</li>
</ul>
<h3 id="如何解决哈希冲突"><a href="#如何解决哈希冲突" class="headerlink" title="如何解决哈希冲突"></a>如何解决哈希冲突</h3><h3 id="HashMap-put的方法"><a href="#HashMap-put的方法" class="headerlink" title="HashMap put的方法"></a>HashMap put的方法</h3><h3 id="HashMap的扩容机制-1"><a href="#HashMap的扩容机制-1" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h3><h3 id="为什么扩容是2-n-次方"><a href="#为什么扩容是2-n-次方" class="headerlink" title="为什么扩容是2^n 次方"></a>为什么扩容是2^n 次方</h3><h3 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h3><p>当时没复习，有点不会，现在看来很简单</p>
<h2 id="2024-09-12明源云一面"><a href="#2024-09-12明源云一面" class="headerlink" title="2024-09-12明源云一面"></a>2024-09-12明源云一面</h2><p>体验一般，八股不问，算法不问，项目不问，就问实习，实习他自己都表达不出来</p>
<h3 id="实习提问"><a href="#实习提问" class="headerlink" title="实习提问"></a>实习提问</h3><ol>
<li>实习的项目业务。。。</li>
<li>开发有多少人</li>
<li>自研ORM有啥用，问的什么牛马东西</li>
<li>为什么要分表，</li>
</ol>
<h3 id="HTTP和TCP"><a href="#HTTP和TCP" class="headerlink" title="HTTP和TCP"></a>HTTP和TCP</h3><p>#todo 计网相关</p>
<ul>
<li><input disabled type="checkbox"> 慢慢看八股吧，这边重点看，腾讯常考</li>
</ul>
<h3 id="多线程相关"><a href="#多线程相关" class="headerlink" title="多线程相关"></a>多线程相关</h3><p>现在感觉能拷打对面了</p>
<h3 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h3><p>#todo myslq锁</p>
<ul>
<li><input disabled type="checkbox"> mysql锁看看面经</li>
</ul>
<h2 id="2024-09-09畅捷通一面"><a href="#2024-09-09畅捷通一面" class="headerlink" title="2024-09-09畅捷通一面"></a>2024-09-09畅捷通一面</h2><p>最幽默的一集，用友总部都发offer了，子公司瞧不起我🤣👉<br>#todo 实习经历需要准备的</p>
<ul>
<li><input disabled type="checkbox"> 实习经历需要准备的</li>
</ul>
<h3 id="实习拷问"><a href="#实习拷问" class="headerlink" title="实习拷问"></a>实习拷问</h3><ol>
<li>主要负责了哪些模块</li>
<li>MongoDB中聚合的结果，使用的什么数据结构存放的，redis中的key是什么</li>
</ol>
<h3 id="八股"><a href="#八股" class="headerlink" title="八股"></a>八股</h3><h4 id="Redis常见的数据结构"><a href="#Redis常见的数据结构" class="headerlink" title="Redis常见的数据结构"></a>Redis常见的数据结构</h4><ol>
<li>hash</li>
<li>list</li>
<li>set</li>
<li>zset</li>
<li>string</li>
<li>bitmap</li>
<li>stream</li>
</ol>
<h4 id="聚合结果使用的哪个类型"><a href="#聚合结果使用的哪个类型" class="headerlink" title="聚合结果使用的哪个类型"></a>聚合结果使用的哪个类型</h4><p>没听明白，现在想想好像是</p>
<ol>
<li>简单值可以使用string，适合自增</li>
<li>多个字段的计算结果可以使用hash，用来存放一些对象<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 存储计算结果</span>
HSET user:1000 name <span class="token string">"John"</span>
HSET user:1000 score <span class="token number">95</span>

<span class="token comment"># 获取计算结果</span>
HGET user:1000 score
HGETALL user:1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>有序的结果集可以使用list</li>
<li>结果去重可以使用set</li>
<li>有序集合zset，适合存储分数那种，比如说排行榜</li>
</ol>
<h4 id="Redis的过期策略和删除策略"><a href="#Redis的过期策略和删除策略" class="headerlink" title="Redis的过期策略和删除策略"></a>Redis的过期策略和删除策略</h4><ol>
<li>惰性删除：访问时进行键的检查，如果过期了才会删除，减少性能负担</li>
<li>定期删除：Redis定期扫描一部分键，如果过期就删除，减少内存占用</li>
<li>内存淘汰机制：内存达到最大配置的限制时，会根据这个来<ul>
<li><strong>noeviction</strong>：当内存不足时，不删除任何键，直接返回错误。</li>
<li><strong>allkeys-lru</strong>：使用 LRU（最近最少使用）算法删除任意键。</li>
<li><strong>volatile-lru</strong>：使用 LRU 算法删除有过期时间的键。</li>
<li><strong>allkeys-random</strong>：随机删除任意键。</li>
<li><strong>volatile-random</strong>：随机删除有过期时间的键。</li>
<li><strong>volatile-ttl</strong>：删除最早过期的键。</li>
</ul>
</li>
</ol>
<h2 id="浙江未讯-小厂"><a href="#浙江未讯-小厂" class="headerlink" title="浙江未讯(小厂)"></a>浙江未讯(小厂)</h2><h3 id="2024-12-19-笔试-基础题挺恶心的，可以刷刷牛客的基础题"><a href="#2024-12-19-笔试-基础题挺恶心的，可以刷刷牛客的基础题" class="headerlink" title="2024-12-19 笔试(基础题挺恶心的，可以刷刷牛客的基础题)"></a>2024-12-19 笔试(基础题挺恶心的，可以刷刷牛客的基础题)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0.3</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出 0.3000000000000000166533453693773481063544750213623046875</span>
第一行保持了精确的十进制表示，而第二行则受到浮点运算固有的精度问题的影响<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>![[面试记录.png]]</p>
<ol>
<li>线程数小于核心线程数时，直接创建线程来执行任务</li>
<li>大于核心线程且工作队列没满就将任务提交给工作队列</li>
<li>大于核心线程数且队列已满，直接创建一个临时线程来处理任务</li>
<li>大于最大线程数，工作队列已满，执行拒绝策略<br>AD<br>![[面试记录-1.png]]</li>
</ol>
<p>AB<br>C在service层面就会捕捉到异常，所以会回滚事务的<br>![[面试记录-2.png]]</p>
<p>ABC<br>D：LinkedBlockingQueue 是线程安全的。它实现了 BlockingQueue 接口，内部使用了锁机制来保证线程安全<br>![[面试记录-3.png]]<br>AC</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>other</span><span class="token punctuation">;</span>  
  
<span class="token comment">/**  
 * 〈〉  
 *  
 * @author zuowei  
 * @create 2024/12/19  
 * @since 1.0.0  
 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> p_StaticField <span class="token operator">=</span> <span class="token string">"父类静态变量"</span><span class="token punctuation">;</span>  
    <span class="token keyword">protected</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">protected</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">String</span> p_Field <span class="token operator">=</span> <span class="token string">"父类成员变量"</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">static</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p_StaticField<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p_Field<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">", j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>other</span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> s_StaticField <span class="token operator">=</span> <span class="token string">"子类静态变量"</span><span class="token punctuation">;</span>  
    <span class="token keyword">public</span>  <span class="token class-name">String</span> s_Field <span class="token operator">=</span> <span class="token string">"子类成员变量"</span><span class="token punctuation">;</span>  
    <span class="token keyword">static</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s_StaticField<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s_Field<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">",j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>优先父类，但是静态的子块可以优先于父类的非静态内容</p>
<p>![[面试记录-4.png]]<br>BC<br>A：属性内部的变量可以更改<br>D：final修饰的方法不能被重写，但是可以被重载和继承<br>![[面试记录-5.png]]<br>ABD<br>![[面试记录-6.png]]<br>AB<br>D用的是equals<br>![[面试记录-7.png]]<br>jstack<br>jmap<br>java -Xms512m(最小堆内存) -Xmx1024m(最大堆内存) -jar your-application.jar</p>
<h2 id="其他人面试遇到的问题"><a href="#其他人面试遇到的问题" class="headerlink" title="其他人面试遇到的问题"></a>其他人面试遇到的问题</h2><h3 id="Class-forName和ClassLoader"><a href="#Class-forName和ClassLoader" class="headerlink" title="Class.forName和ClassLoader"></a>Class.forName和ClassLoader</h3><p>Class.forName是静态方法，用于提供类的完全限定名，运行时加载类。根据类名加载类<br>ClassLoader是一个抽象类，用于加载类的工具，可以<br>自定义类加载过程</p>
<h3 id="对象创建的几种方式"><a href="#对象创建的几种方式" class="headerlink" title="对象创建的几种方式"></a>对象创建的几种方式</h3><ol>
<li>new关键字</li>
<li>使用反射</li>
<li>newInstance方法</li>
<li>clone方法</li>
<li>使用对象的反序列化</li>
</ol>
<h3 id="equals和-x3D-x3D-区别"><a href="#equals和-x3D-x3D-区别" class="headerlink" title="equals和== 区别"></a>equals和== 区别</h3><p>== 比较的是基本数据类型的值和引用数据类型的地址，equals可以比较他们的实际值。</p>
<h3 id="final-finally-finalize"><a href="#final-finally-finalize" class="headerlink" title="final,finally,finalize"></a>final,finally,finalize</h3><p>fianl 用来修饰类，方法，变量，表示最终，不可被继承，重写，修改<br>finally try-catch使用<br>finalize finalize是Object类中的方法，用于垃圾回收机制，是对象在垃圾回收之前进行调用，用于释放资源</p>
<h3 id="什么是动态代理-x2F-静态代理"><a href="#什么是动态代理-x2F-静态代理" class="headerlink" title="什么是动态代理/静态代理"></a>什么是动态代理/静态代理</h3><p>动态代理<br>动态代理是在运行时创建代理对象的机制。代理对象可以在不修改原始对象代码的情况下，拦截对目标对象的方法调用，并在调用前后添加额外的逻辑。Java 中的动态代理主要有两种实现方式：<br>静态代理<br>静态代理是在编译时创建代理类的机制。代理类在编译时就已经存在，并且实现了与目标对象相同的接口。静态代理通过在代理类中调用目标对象的方法来实现对目标对象的代理。</p>
<h4 id="JDK和CGLIB实现的区别"><a href="#JDK和CGLIB实现的区别" class="headerlink" title="JDK和CGLIB实现的区别"></a>JDK和CGLIB实现的区别</h4><p>JDK基于接口实现，目标类必须实现一个或者多个接口<br>CGLIB基于继承实现，可以代理普通类，不需要目标类实现接口，使用的是字节码</p>
<h3 id="可重入锁与手写"><a href="#可重入锁与手写" class="headerlink" title="可重入锁与手写"></a>可重入锁与手写</h3><h3 id="什么是事务传播"><a href="#什么是事务传播" class="headerlink" title="什么是事务传播"></a>什么是事务传播</h3><p>事务传播 Transaction Propagation 是指Spring框架中定义事务在方法调用的过程中如何传播的机制。决定了一个方法在调用另一个方法时，事务应该如何进行管理。</p>
<ul>
<li>REQUIRED：默认支持当前事务，如果当前没有事务，就创建一个事务。这是默认的<img src="/2024/06/07/17/REQUIRED.png"></li>
<li>REQUIRED_NEW：总是创建一个新事务，当前存在事务就把当前事务挂起<img src="/2024/06/07/17/REQUIRED_NEW.png"></li>
<li>SUPPORTS：如果存在事务，就加入该事务，如果没有，就以非事务的方式执行</li>
<li>NOT_SUPPORTED：即使当前存在事务，也不进行事务操作。</li>
<li>MANDATORY：存在就加入，没有就抛出异常</li>
<li>NEVER：总是以非事务的方式运行，存在事务就抛出异常</li>
<li>NESTED：存在事务就嵌套事务内执行，没有事务就创建一个事务。可以读到嵌套事务</li>
</ul>
<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h3 id="g1-full-gc退化过程"><a href="#g1-full-gc退化过程" class="headerlink" title="g1 full gc退化过程"></a>g1 full gc退化过程</h3><h4 id="G1的工作原理"><a href="#G1的工作原理" class="headerlink" title="G1的工作原理"></a>G1的工作原理</h4><ol>
<li>分代收集:G1将堆内存划分为多个大小相等的区域，Yong GC 主要收集Eden区和Survivor区的垃圾对象</li>
<li>混合收集Mixed GC：不仅年轻代，还收集部分老年代的垃圾对象</li>
<li>并发标记周期：并发标记，垃圾收集可以与应用程序并发执行，减少垃圾收集对应用程序的影响标记老年代中存活对象，以便在混合收集中回收。</li>
</ol>
<h4 id="退化的原因"><a href="#退化的原因" class="headerlink" title="退化的原因"></a>退化的原因</h4><ol>
<li>内存不足：当内存不足以分配新的对象或无法通过Yong GC和Mixed GC会搜狐，足够的内存时，会触发Full GC</li>
<li>并发失败：在并发标记周期中，如果无法即使完成标记或者回收，可能会退化为Full GC</li>
<li>晋升失败：当对象从年轻代晋升到老年代时，如果老年代没有足够的空间</li>
<li>元数据空间不足</li>
</ol>
<h4 id="退化过程"><a href="#退化过程" class="headerlink" title="退化过程"></a>退化过程</h4><ol>
<li>内存分配失败，尝试触发Yong GC</li>
<li>Yong GC失败，触发Mixed GC</li>
<li>Mixed GC失败，JVM进入Full GC</li>
<li>Full GC会暂停所有应用线程，进行全站扫描和压缩，以会搜尽可能多的内存。</li>
</ol>
<h3 id="gRPC为什么可以提高效率"><a href="#gRPC为什么可以提高效率" class="headerlink" title="gRPC为什么可以提高效率"></a>gRPC为什么可以提高效率</h3><ol>
<li>高效的协议 Protocol Buffers</li>
<li>基于HTTP/2的传输协议：<ul>
<li>多路复用：HTTP/2允许在单个TCP连接上并行发送多个请求和响应，减少了连接建立的开销</li>
<li>头部压缩：使用HPACK算法对头部进行压缩</li>
<li>服务器推送，可以在客户端请求之前发送数据，减少延迟</li>
<li>流控制：更细力度的流控制，优化了带宽利用率</li>
</ul>
</li>
<li>双向流和流控制：允许客户端和服务器单个连接上同时接收和发送数据。</li>
<li>负载均衡和服务发现，支持多种负载均衡策略</li>
<li>高效的异步通信：</li>
<li>安全性：内置对TLS的支持<br><img src="/2024/06/07/17/grpc%E5%8E%9F%E7%90%86.png"></li>
</ol>
<h3 id="synchronized介绍下？底层原理？和LOCK的区别是什么？具体优缺点是什么？"><a href="#synchronized介绍下？底层原理？和LOCK的区别是什么？具体优缺点是什么？" class="headerlink" title="synchronized介绍下？底层原理？和LOCK的区别是什么？具体优缺点是什么？"></a>synchronized介绍下？底层原理？和LOCK的区别是什么？具体优缺点是什么？</h3><p>用来实现线程之间的互斥访问，确保同一时刻只能由一个线程可以执行被修饰的代码。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>通过对象头中的监视器锁Monitor实现，当一个线程进入同步代码块或者方法时，会尝试获取该对象的监视器锁。<br>监视器锁的组成:</p>
<ol>
<li>对象头：每个对象在内存中都一个对象头，包含对象的元数据和锁信息</li>
<li>Mark Word：对象头中的Mark Word存储了锁装填、哈希码、GC信息等</li>
<li>Monitor：每个对象都有一个关联的监视器，用于是实现同步。<br>和Lock的区别<br>synchronied是Java语言级别的关键字，使用方便，而且由JVM管理，是隐式锁，如果一个线程获取锁失败会被阻塞，不可中断，线程在等待锁时无法被中断。<br>Lock时显示锁，需要显示获取和释放，支持可重入锁，公平锁等，非阻塞，可中断</li>
</ol>
<h3 id="Kafka是如何保证消息的顺序性的？你了解底层的原理吗？"><a href="#Kafka是如何保证消息的顺序性的？你了解底层的原理吗？" class="headerlink" title="Kafka是如何保证消息的顺序性的？你了解底层的原理吗？"></a>Kafka是如何保证消息的顺序性的？你了解底层的原理吗？</h3><h3 id="保障服务稳定性最重要的一个环节是"><a href="#保障服务稳定性最重要的一个环节是" class="headerlink" title="保障服务稳定性最重要的一个环节是"></a>保障服务稳定性最重要的一个环节是</h3><p>监控和预警</p>
<h4 id="如何提前预估接口的QPS"><a href="#如何提前预估接口的QPS" class="headerlink" title="如何提前预估接口的QPS"></a>如何提前预估接口的QPS</h4><ol>
<li>历史数据分析：分析历史日志和监控数据，了解不同时间段的QPS</li>
<li>业务需求分析：</li>
<li>模拟测试：压测模拟</li>
</ol>
<h3 id="HTTP1-0-x2F-1-1-x2F-2-0的区别"><a href="#HTTP1-0-x2F-1-1-x2F-2-0的区别" class="headerlink" title="HTTP1.0/1.1/2.0的区别"></a>HTTP1.0/1.1/2.0的区别</h3><p>HTTP1.0 默认短链接，每次请求都需要建立一次连接<br>1.1 默认长连接，可以在一个TCP连接上传送多个HTTP请求和响应<br>2.0 增加多路复用，报文头压缩，允许服务端推送资源给客户端。</p>
<h3 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h3><h3 id="Redis相关"><a href="#Redis相关" class="headerlink" title="Redis相关"></a>Redis相关</h3><h4 id="大key问题"><a href="#大key问题" class="headerlink" title="大key问题"></a>大key问题</h4><p>解决：使用压缩gzip等，定时清理</p>
<h4 id="热key"><a href="#热key" class="headerlink" title="热key"></a>热key</h4><p>Redis中，频繁被访问的键，可能会导致Redis性能瓶颈。<br>解决方案：</p>
<ol>
<li>在Redis之前增加一个缓存层</li>
<li>数据分片，将热key的数据分片存储到多个Redis实例中</li>
<li>请求分摊</li>
</ol>
<h3 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h3><h4 id="在有多个索引时，数据库会如何选择使用哪个索引？"><a href="#在有多个索引时，数据库会如何选择使用哪个索引？" class="headerlink" title="在有多个索引时，数据库会如何选择使用哪个索引？"></a>在有多个索引时，数据库会如何选择使用哪个索引？</h4><p>会使用选择性高(索引列中的不通知的数量与总行数的比率)、索引覆盖(可以避免回表操作的)、索引类型()、查询条件(例如最左匹配，复合索引(A,B)不可单独作用于B)</p>
<h4 id="MySQL的架构"><a href="#MySQL的架构" class="headerlink" title="MySQL的架构"></a>MySQL的架构</h4><ol>
<li>连接层：处理客户端的连接和授权认证</li>
<li>服务层：包括查询解析、分析、优化、缓存等功能</li>
<li>存储殷勤层：负责数据的存储和提取</li>
<li>物理层：负责数据文件的存储</li>
</ol>
<h4 id="有一些逻辑在服务层和存储引擎层中是属于同一个的，就好像是一个分布式系统，怎么保证他们之间的数据一致性呢？"><a href="#有一些逻辑在服务层和存储引擎层中是属于同一个的，就好像是一个分布式系统，怎么保证他们之间的数据一致性呢？" class="headerlink" title="有一些逻辑在服务层和存储引擎层中是属于同一个的，就好像是一个分布式系统，怎么保证他们之间的数据一致性呢？"></a>有一些逻辑在服务层和存储引擎层中是属于同一个的，就好像是一个分布式系统，怎么保证他们之间的数据一致性呢？</h4><h4 id="binlog和redolog的区别"><a href="#binlog和redolog的区别" class="headerlink" title="binlog和redolog的区别"></a>binlog和redolog的区别</h4><p>Binlog记录的是逻辑更改，事务提交后写入，用于主从复制，数据持久化，数据恢复<br>Redolog记录的是数据页的实际更改，是物理更改，事务执行过程中写入，崩溃回复和rollback</p>
<h3 id="分布式相关"><a href="#分布式相关" class="headerlink" title="分布式相关"></a>分布式相关</h3><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p><a href="https://xiaomi-info.github.io/2020/01/02/distributed-transaction/">https://xiaomi-info.github.io/2020/01/02/distributed-transaction/</a></p>
<h4 id="令牌桶限流算法底层"><a href="#令牌桶限流算法底层" class="headerlink" title="令牌桶限流算法底层"></a>令牌桶限流算法底层</h4><h4 id="Minio怎么分片，分片原理"><a href="#Minio怎么分片，分片原理" class="headerlink" title="Minio怎么分片，分片原理"></a>Minio怎么分片，分片原理</h4><h4 id="XXL-JOB如何使用"><a href="#XXL-JOB如何使用" class="headerlink" title="XXL-JOB如何使用"></a>XXL-JOB如何使用</h4><h3 id="业务相关"><a href="#业务相关" class="headerlink" title="业务相关"></a>业务相关</h3><h4 id="如何实现延迟队列"><a href="#如何实现延迟队列" class="headerlink" title="如何实现延迟队列"></a>如何实现延迟队列</h4><ol>
<li>使用DelayQueue,<code>DelayQueue</code>的<code>put</code>方法是线程安全的，因为<code>put</code>方法内部使用了<code>ReentrantLock</code>锁进行线程同步。<code>DelayQueue</code>还提供了两种出队的方法 <code>poll()</code> 和 <code>take()</code> ， <code>poll()</code> 为非阻塞获取，没有到期的元素直接返回null；<code>take()</code> 阻塞方式获取，没有到期的元素线程将会等待。</li>
<li>基于定时任务</li>
<li>基于Redis过期键的回调函数</li>
</ol>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>反射的原理基于Java的元数据（metadata），这些元数据在编译时被嵌入到类文件中，并在运行时通过Java反射API进行访问。</p>
<h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><h4 id="Java零拷贝，大文件断点续传，秒传实现"><a href="#Java零拷贝，大文件断点续传，秒传实现" class="headerlink" title="Java零拷贝，大文件断点续传，秒传实现"></a>Java零拷贝，大文件断点续传，秒传实现</h4><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><h4 id="SpringBoot和Spring相比，简化了哪些"><a href="#SpringBoot和Spring相比，简化了哪些" class="headerlink" title="SpringBoot和Spring相比，简化了哪些"></a>SpringBoot和Spring相比，简化了哪些</h4><ol>
<li>自动配置：通过starter包简化了Maven或Gradle的依赖管理</li>
<li>内嵌服务器：Tomcat</li>
<li>内置运行环境：直接java -jar 即可运行Spring Boot应用，无需复杂的部署过程</li>
<li>自动装配：</li>
</ol>
<h4 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><blockquote>
<p>AOP基于动态代理，如果要代理的对象实现了某个接口，那额会使用JDKProxy，如果没实现接口，那么会使用基于asm框架字节流的Cglib动态代理来生成一个被代理对象的子类来作为代理。</p>
</blockquote>
<h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><ol>
<li>new</li>
<li>Class.newInstance：需要有public无参构造器</li>
<li>Contructor.newInstance：调用有参数和私有的构造函数</li>
<li>使用Clone</li>
<li>反序列化</li>
</ol>
<h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><h5 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h5><ol>
<li>实例化：也就是new</li>
<li>IOC注入</li>
</ol>
<h4 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h4><blockquote>
<p>两个或两个以上的Bean互相持有对方，形成相互持有对方，最终形成闭环。</p>
</blockquote>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>三级缓存</p>
<ol>
<li>Spring容器通过构造器初始化对象之后提前暴漏到Spring容器的singletonFactorys(三级缓存)</li>
<li>调用另一个对象时，尝试从容器中获取，如果不存在就初始化，现将自己放在三级缓存中，之后从一级、二级、三级缓存中一次获取第一个对象</li>
<li>获取之后将自己放在单例池中，供第一个实例完成初始化。</li>
</ol>
<h3 id="如何保证多次请求-x2F-刷新的幂等性"><a href="#如何保证多次请求-x2F-刷新的幂等性" class="headerlink" title="如何保证多次请求/刷新的幂等性"></a>如何保证多次请求/刷新的幂等性</h3><ol>
<li>使用PRG(POST/Redirect/GET)：用户填写表单，之后服务器收到请求之后进行处理，然后通过返回重定向，后续用户通过GET进行请求</li>
<li>Token机制：服务端通过生成唯一有时效性的Token，之后客户端携带这个Token发送请求，如果Token失效则拒绝执行。并发场景下可以使用SETNX来保证有效，同时避免多个请求同时通过验证</li>
</ol>
<h3 id="SpringBoot自动装配的原理"><a href="#SpringBoot自动装配的原理" class="headerlink" title="SpringBoot自动装配的原理"></a>SpringBoot自动装配的原理</h3><h4 id="SpringBootApplication到底有什么内容"><a href="#SpringBootApplication到底有什么内容" class="headerlink" title="@SpringBootApplication到底有什么内容"></a>@SpringBootApplication到底有什么内容</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token generics"><span class="token punctuation">&lt;</span>1<span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span><span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token generics"><span class="token punctuation">&lt;</span>2<span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span><span class="token annotation punctuation">@ComponentScan</span>
<span class="token generics"><span class="token punctuation">&lt;</span>3<span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span><span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment">//实际上它也是一个配置类</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看见，是包含@Configuration、@ComponentScan(组件扫描)、@EnableAutoConfiguration(启用自动装配)</p>
<p>所以Spring Boot的自动配置实质就是 将这些需要自动配置的类的全类名先保存在这些文件中 然后读取到List集合里面 然后通过@Import注解读取导入，也就是SPI实现的</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="Docker端口映射有几种方式"><a href="#Docker端口映射有几种方式" class="headerlink" title="Docker端口映射有几种方式"></a>Docker端口映射有几种方式</h4><ol>
<li>指定端口映射：<code>docker run -p host_port:container_port image_name</code></li>
<li>随机端口映射:   <code>docker run -P image_name</code> 将容器的所有暴露端口随机映射到主机的高端口号</li>
<li>指定IP和端口映射：<code>docker run -p host_pi:host_port:container_port image_name</code></li>
<li>指定协议的端口映射<code>docker run -p host_port:container_port /tcp image_name</code></li>
</ol>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><p>懒汉模式，第一次使用时才进行对象的初始化，延迟加载，避免不必要的开销，多线程下要考虑线程安全和同步开销</p>
<h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><p>在类加载时就进行对象的初始化，无论是否需要，通过类加载机制保证线程安全性，获取实例的性能够开销少</p>
<h3 id="JVM相关"><a href="#JVM相关" class="headerlink" title="JVM相关"></a>JVM相关</h3><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> leetcode手写LRU</li>
</ul>
<h1 id="鹅厂-不是我的"><a href="#鹅厂-不是我的" class="headerlink" title="鹅厂,不是我的"></a>鹅厂,不是我的</h1><p><a href="https://www.yuque.com/u33398543/wte491/mtg3graol8x117r2">https://www.yuque.com/u33398543/wte491/mtg3graol8x117r2</a></p>
<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>时间：30min，一面秒过，发邮件9.27二面</p>
<p>面试官自我介绍，海外业务，做全栈，c++, go, py啥都写，（就是没有java）</p>
<p>没有自我介绍</p>
<p>没有项目</p>
<p>https为什么安全，说了TLS，对称加密和非对称加密，数字证书</p>
<p>https调试过程中有没有进行过抓包（wireshark）</p>
<p>抓包怎么实现数字证书？没听清问什么（听录音应该是想问中间人攻击，抓包原理，应该是在软件上配置过数字证书）</p>
<p>配置过web服务吗（应该是想问怎么给域名配证书，没有get到他的意思，我直接说了自己的项目上线过，他也没继续问）</p>
<p>数据库三大范式（不可分割，不能部分依赖，不能只与一部分相关，最开始说对了，面试官没听清，第二遍的时候第二第三说反了）</p>
<p>手撕，秒了</p>
<p><a href="https://leetcode.cn/problems/two-sum/description/">1. 两数之和</a></p>
<pre class="line-numbers language-none"><code class="language-none">public int[] twoSum(int[] nums, int target) {
    Map&lt;Integer, Integer&gt; record = new HashMap&lt;&gt;();
    for (int i = 0; i &lt; nums.length; ++i) {
        if (record.get(target - nums[i]) != null) {
            return new int[] { record.get(target - nums[i]), i };
        } else {
            record.put(nums[i], i);
        }
    }
    return new int[] { 0 };
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接着问三数之和</p>
<p><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/">442. 数组中重复的数据</a></p>
<pre class="line-numbers language-none"><code class="language-none">public List&lt;Integer&gt; findDuplicates(int[] nums) {
    int n = nums.length;
    List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; n; ++i) {
        while (nums[i] != nums[nums[i] - 1]) {
            swap(nums, i, nums[i] - 1);
        }
    }
    for (int i = 0; i &lt; n; ++i) {
        if (nums[i] - 1 != i) {
            ans.add(nums[i]);
        }
    }
    return ans;
}
public void swap(int[] nums, int i, int j) {
    if (i == j) return;
    nums[i] = nums[i] ^ nums[j];
    nums[j] = nums[i] ^ nums[j];
    nums[i] = nums[i] ^ nums[j];
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>问时间复杂度，O(n), 问能不能优化空间复杂度，大哥，O(1)了怎么优化</p>
<h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>时间：30min 面试官有引导</p>
<p>什么时候能到岗，实习时间多久</p>
<p>如果有一个慢查询怎么处理</p>
<p>索引失效</p>
<p>说一下联合查询</p>
<p>索引的底层结构</p>
<p>b树的b+树的区别</p>
<p>密码怎么存储，怎么加密，还有其他加密算法吗</p>
<p>常见的 <strong>对称加密</strong> 算法主要有 <code>DES</code>、<code>3DES</code>、<code>AES</code> 等，常见的 <a href="https://zhida.zhihu.com/search?content_id=165266533&amp;content_type=Article&amp;match_order=1&amp;q=%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95&amp;zhida_source=entity"><strong>非对称算法</strong></a> 主要有 <code>RSA</code>、<code>DSA</code> 等，<strong>散列算法</strong> 主要有 <code>SHA-1</code>、<code>MD5</code> 等。</p>
<p><strong>MD5、SHA1等单向HASH算法</strong></p>
<p><strong>PBKDF2算法</strong></p>
<p><strong>bcrypt、scrypt等算法</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/34888372/1727409377032-21a49b28-d6ec-4050-9d20-ddca5685e866.jpeg"></p>
<p>https为什么比http更安全</p>
<p>抓包</p>
<p>https TLS四次握手（说了RSA）</p>
<p>https整个连接多少个RTT（3.5）</p>
<p>如何优化https（说了http3和合并第二次和第三次握手）</p>
<p><a href="https://xiaolincoding.com/network/2_http/https_optimize.html#_3-5-https-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96">HTTPS 如何优化？</a></p>
<p>延伸：可以说一下http3吗</p>
<p>前端了解的怎么样（只会做）</p>
<p>二分查找（看看代码风格）</p>
<p>反问</p>
<p>有什么学习建议的吗</p>
<h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>时间：30min</p>
<p>很多闲聊，疯狂打断</p>
<p><a href="https://leetcode.cn/problems/longest-duplicate-substring/description/">1044. 最长重复子串</a></p>
<p>遇到什么难题（就是刚做过的这道题，没做过的hard，我操了，谢谢你啊面试官，心脏都要跳出来了）</p>
<p>网络协议OSI， TCP/IP</p>
<p>ping命令底层是什么（icmp）</p>
<p>常用的I/O阻塞，应用场景</p>
<p>性格的优缺点</p>
<p>反问：</p>
<p>业务，实习生做什么</p>
<p>学习建议</p>
<h2 id="别人的快手测开实习一面"><a href="#别人的快手测开实习一面" class="headerlink" title="别人的快手测开实习一面"></a>别人的快手测开实习一面</h2><ol>
<li>实习经历：公司里面负责什么项目，哪个模块，具体的背景</li>
<li>沙箱？</li>
<li>如何拿到用户地址：调用地图的API，放在GEO中</li>
<li>司机位置不会变？ 应该设计成定时刷新上报位置</li>
<li>CF的异步编排，服务间的数据依赖</li>
<li>异步的话，司机结束里程的时候会看到订单结束吗？ 订单这个状态的是要实时结算的，否则会影响下一单。 主要还是订单是否要实时阶段，付款可以异步</li>
<li>实习项目了解：</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>6.S081</title>
    <url>/2024/03/06/23/</url>
    <content><![CDATA[<h1 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h1><ol>
<li><p>系统调用跳到内核与标准的函数调用跳到另一个函数相比，区别是什么？</p>
<p> Kernel的代码总是有特殊的权限。当机器启动Kernel时，Kernel会有特殊的权限能直接访问各种各样的硬件，例如磁盘。而普通的用户程序是没有办法直接访问这些硬件的。所以，当你执行一个普通的函数调用时，你所调用的函数并没有对于硬件的特殊权限。然而，如果你触发系统调用到内核中，内核中的具体实现会具有这些特殊的权限，这样就能修改敏感的和被保护的硬件资源，比如访问硬件磁盘。我们之后会介绍更多有关的细节。</p>
</li>
<li><p>Kernel<br> 内核使用CPU提供的硬件保护机制来确保每个在用户空间执行的进程只能访问它自己的内存。内核程序的执行拥有操控硬件的权限，它需要实现这些保护；而用户程序执行时没有这些特权。当用户程序调用系统调用时，硬件会提升权限级别，并开始执行内核中预先安排好的函数。<br> <img src="/2024/03/06/23/Kernel.png" alt="Kernel"></p>
</li>
<li><p>xv6提供的系统调用<br> <a href="https://xv6.dgs.zone/tranlate_books/book-riscv-rev1/c1/s0.html">看文档</a></p>
</li>
<li><p>Shell 是一个普通的进程，是一个用户程序，用户使用Shell来与系统调用进行交互</p>
</li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol>
<li>进程由 用户空间内存(指令、数据和堆栈)和对内核私有的每个进程状态组成</li>
<li>Xv6 采用分时进程，等待执行中的进程集合切换可用的CPU，当进程没有执行时，xv6会保存他的CPU寄存器，并在下一次运行时恢复，使用进程id或PID标示进程、</li>
</ol>
<h3 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I/O"></a>I/O</h3><ol>
<li>文件描述符是一个小整数(small integer)，表示进程可以读取或写入的由内核管理的对象</li>
<li>进程从文件描述符0读取（标准输入），将输出写入文件描述符1（标准输出），并将错误消息写入文件描述符2（标准错误）。</li>
<li>管道：作为一对文件描述符公开给进程的小型内核缓冲区，一个用于读取，一个用于写入。将数据写入管道的一端使得这些数据可以从管道的另一端读取。管道为进程提供了一种通信方式。</li>
</ol>
<ul>
<li><p>首先，管道会自动清理自己；在文件重定向时，shell使用完<code>/tmp/xyz</code>后必须小心删除</p>
</li>
<li><p>其次，管道可以任意传递长的数据流，而文件重定向需要磁盘上足够的空闲空间来存储所有的数据。</p>
</li>
<li><p>第三，管道允许并行执行管道阶段，而文件方法要求第一个程序在第二个程序启动之前完成。</p>
</li>
<li><p>第四，如果实现进程间通讯，管道的<strong>阻塞</strong>式读写比文件的非阻塞语义更高效。</p>
</li>
</ul>
<h3 id="操作系统架构"><a href="#操作系统架构" class="headerlink" title="操作系统架构"></a>操作系统架构</h3><p>操作系统必须满足三个要求：多路复用、隔离和交互。</p>
<ol>
<li>隔离：禁止应用程序直接访问敏感的硬件资源，将资源抽象成服务。提供系统调用</li>
<li>用户想要执行内核函数必须由用户模式过渡到管理模式</li>
</ol>
<ul>
<li>整个操作系统都驻留在内核中，这样所有系统调用的实现都以管理模式运行。这种组织被称为<strong>宏内核（monolithic kernel）</strong>。<ul>
<li>缺点是操作系统不同部分之间的接口通常很复杂（正如我们将在本文的其余部分中看到的），因此操作系统开发人员很容易犯错误。在宏内核中，一个错误就可能是致命的，因为管理模式中的错误经常会导致内核失败。如果内核失败，计算机停止工作，因此所有应用程序也会失败。计算机必须重启才能再次使用。</li>
</ul>
</li>
<li>微内核<ul>
<li>操作系统设计者可以最大限度地减少在管理模式下运行的操作系统代码量，并在用户模式下执行大部分操作系统。这种内核组织被称为<strong>微内核（microkernel）</strong></li>
<li>文件系统作为用户级进程运行。作为进程运行的操作系统服务被称为服务器。为了允许应用程序与文件服务器交互，内核提供了允许从一个用户态进程向另一个用户态进程发送消息的进程间通信机制。</li>
</ul>
</li>
<li>进程<ul>
<li>进程抽象给程序提供了一种错觉，即它有自己的专用机器。进程为程序提供了一个看起来像是私有内存系统或地址空间的东西，其他进程不能读取或写入。</li>
</ul>
</li>
<li>启动过程： 初始化自己并运行一个存储在只读内存中的引导加载程序。引导加载程序将xv6内核加载到内存中。然后，在机器模式下，中央处理器从<code>_entry</code>&nbsp;(<strong><em>kernel/entry.S</em></strong>:6)开始运行xv6。Xv6启动时页式硬件（paging hardware）处于禁用模式：也就是说虚拟地址将直接映射到物理地址。</li>
</ul>
<h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>页表是操作系统为每个进程提供私有地址空间和内存的机制。页表决定了内存地址的含义，以及物理内存的哪些部分可以访问。</p>
<h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><h3 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h3><p>推荐使用2021版的官方教程，2020的我打开不了<br>不建议在root用户下进行</p>
<h4 id="sleep-easy"><a href="#sleep-easy" class="headerlink" title="sleep (easy)"></a>sleep (easy)</h4><p><strong>实现xv6的UNIX程序</strong><code>sleep</code><strong>：您的</strong><code>sleep</code><strong>应该暂停到用户指定的计时数。一个滴答(tick)是由xv6内核定义的时间概念，即来自定时器芯片的两个中断之间的时间。您的解决方案应该在文件user/sleep.c中</strong></p>
<p>思路：<strong>先查看系统调用的代码</strong></p>
<ol>
<li>引入头文件，即&nbsp;<code>kernel/types.h</code>&nbsp;声明类型的头文件和&nbsp;<code>user/user.h</code>&nbsp;声明系统调用函数和&nbsp;<code>ulib.c</code>&nbsp;中函数的头文件。</li>
<li>编写&nbsp;<code>main(int argc,char* argv[])</code>&nbsp;函数。其中，参数&nbsp;<code>argc</code>&nbsp;是命令行总参数的个数，参数&nbsp;<code>argv[]</code>&nbsp;是&nbsp;<code>argc</code>&nbsp;个参数，其中第 0 个参数是程序的全名，其他的参数是命令行后面跟的用户输入的参数。</li>
<li>在Makefile中加入$U/_sleep<br>参考答案:<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//引入type定义和系统调用文件
#include "kernel/types.h"
#include "user/user.h"

//编写main函数
//argc 是shell接受的参数个数，argv指向对应的参数
//argv[0] 始终指向函数的全名
int main(int argc, char **argv)</span> <span class="token punctuation">{</span>
    <span class="token selector">//shell 中应该输入 sleep +参数，所以只接受一个参数, argc 应为 2
    if(argc != 2)</span> <span class="token punctuation">{</span>
        //write（int fd <span class="token punctuation">,</span>char *buf<span class="token punctuation">,</span> int n<span class="token punctuation">)</span>
        // fd是文件描述符 0 是标准输入，1标准输出<span class="token punctuation">,</span>2是标准错误
        //buf 存放要写入写出的字符数组
        // n 是要传输的字节数
        <span class="token function">write</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span><span class="token string">"Usage: sleep time\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"Usage: sleep time\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //<span class="token function">exit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> 0 标示正常退出，非0藐视错误退出
        <span class="token function">exit</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    //使用atoi来转为int型
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv[1]<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
Makefile:<pre class="line-numbers language-css" data-language="css"><code class="language-css">UPROGS=\
	$U/_cat\
	$U/_echo\
	$U/_forktest\
	$U/_grep\
	$U/_init\
	$U/_kill\
	$U/_ln\
	$U/_ls\
	$U/_mkdir\
	$U/_rm\
	$U/_sh\
	$U/_stressfs\
	$U/_usertests\
	$U/_grind\
	$U/_wc\
	$U/_zombie\
	$U/_sleep\ # 这是我们要写的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
单元测试:</li>
<li>make qemu 之后在shell中 sleep 100 看看是否停顿， 如果make qemu 报错，可能是没有 自动编译，建议重新启动</li>
<li>不启动xv6,在xv6-labs-2021 路径下使用： ./grade-lab-util sleep              —-sleep可替换为其他待测的，也可以不加，直接把全部实验代码都进行测，权限不够自己sudo, 报错了可能没安装python3</li>
</ol>
<h4 id="pingpong-Easy"><a href="#pingpong-Easy" class="headerlink" title="pingpong (Easy)"></a>pingpong (Easy)</h4><blockquote>
<p><strong>编写一个使用UNIX系统调用的程序来在两个进程之间“ping-pong”一个字节，请使用两个管道，每个方向一个。父进程应该向子进程发送一个字节;子进程应该打印“<code>&lt;pid&gt;: received ping</code>”，其中<code>&lt;pid&gt;</code>是进程ID，并在管道中写入字节发送给父进程，然后退出;父级应该从读取从子进程而来的字节，打印“<code>&lt;pid&gt;: received pong</code>”，然后退出。您的解决方案应该在文件_user/pingpong.c_中。</strong></p>
</blockquote>
<p>思路：</p>
<ol>
<li>使用pipe来建立管道</li>
<li>fork来建立子进程并用来区分父进程和子进程</li>
<li>getpid来获取进程pid</li>
<li>read 和 write来进行读写</li>
<li>Makefile <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// pingpong.c 
#include "kernel/types.h"
#include "user/user.h"
#include "stddef.h"

//
int main(int argc, char **argv)</span> <span class="token punctuation">{</span> // argc是输入的参数个数，argv指向对应的参数
    //定义两个pipe
    int pp2c[2]<span class="token punctuation">,</span>pc2p[2]<span class="token punctuation">;</span> // p parent to child
    //p[0] 是文件描述符0<span class="token punctuation">,</span> 0 是输入端，1是输出端
    <span class="token function">pipe</span><span class="token punctuation">(</span>pp2c<span class="token punctuation">)</span><span class="token punctuation">;</span> //父进程 -&gt; 子进程
    <span class="token function">pipe</span><span class="token punctuation">(</span>pc2p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token selector">//使用fork来判断子进程和父进程
    if(fork() != 0 )</span> <span class="token punctuation">{</span> //父进程
        //<span class="token function">write</span><span class="token punctuation">(</span>文件描述符<span class="token punctuation">,</span>指针，字节数<span class="token punctuation">)</span>
        <span class="token function">write</span><span class="token punctuation">(</span>pp2c[1]<span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span> //父进程向子进程发出一个字节
        char buf <span class="token punctuation">;</span> //待读入缓冲区<span class="token punctuation">,</span>用于存储
        <span class="token function">read</span><span class="token punctuation">(</span>pc2p[0]<span class="token punctuation">,</span>&amp;buf<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received pong\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>
        char buf<span class="token punctuation">;</span>
        //从父进程读入
        <span class="token function">read</span><span class="token punctuation">(</span>pp2c[0]<span class="token punctuation">,</span>&amp;buf<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received ping\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //子进程重新发送给父进程
        <span class="token function">write</span><span class="token punctuation">(</span>pc2p[1]<span class="token punctuation">,</span>&amp;buf<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="prime"><a href="#prime" class="headerlink" title="prime"></a>prime</h4><p>思路：使用筛法，每次输出一个素数之后，把这个素数的倍数删除，之后再重新写入pipe中供下一个子进程使用即可。注意回收文件描述符即可<br>注意: <strong>一定要使用子进程</strong> ，不使用子进程会导致阻塞致死</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#include "kernel/types.h"
#include "user/user.h"
#include "stddef.h" // 为了得到NULL

//将描述符重新定向
void mapping(int n , int pd[])</span> <span class="token punctuation">{</span>
    <span class="token function">close</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //dup会返回一个最小的未使用的文件描述符，然后我们close
    //了n，也就是会返回n<span class="token punctuation">,</span>之后会将这个描述符指向pd[n]所指向的文件
    <span class="token function">dup</span><span class="token punctuation">(</span>pd[n]<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //再关闭pd 就实现了将pd[n] 重定向到n的操作
    <span class="token function">close</span><span class="token punctuation">(</span>pd[0]<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>pd[1]<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">void primes()</span> <span class="token punctuation">{</span>
    //开始读入数据
    int current<span class="token punctuation">,</span>next<span class="token punctuation">;</span> //current来保存现在的数
    int fd[2]<span class="token punctuation">;</span>
    <span class="token selector">// 从0中读取数据，并写入current,读取字节长度为sizeof(int)
    if(read(0,&amp;current,sizeof(int)))</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token selector">//开始筛选，每经历一个子进程就drop一些数据
        if(fork() == 0)</span> <span class="token punctuation">{</span>
            <span class="token function">mapping</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>//定向到写入端
            <span class="token selector">//重复从1中读入，判断是否是current的倍数
            while(read(0,&amp;next,sizeof(int)))</span> <span class="token punctuation">{</span>
                <span class="token selector">if(next % current != 0)</span> <span class="token punctuation">{</span>
                    <span class="token function">write</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>&amp;next<span class="token punctuation">,</span><span class="token function">sizeof</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>
            <span class="token function">wait</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span> //等待子进程结束
            //反复调用即可
            <span class="token function">mapping</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">//0用来读取， 1用来写入
int main(int argc, char **argv)</span> <span class="token punctuation">{</span>
    int fd[2]<span class="token punctuation">;</span> //文件描述符
    //fd是共用的
    <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token selector">//fd[0]是读入端，也就是从pipe中读取字节，fd[1]是写入端，可以向pipe中写入
    if(fork() == 0)</span> <span class="token punctuation">{</span>
    //子进程写入 2 - 35
        <span class="token function">mapping</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>//将标准输出指向fd的写入端，也就是将输指向写入端
        <span class="token function">for</span><span class="token punctuation">(</span>int i = 2<span class="token punctuation">;</span> i &lt;= 35<span class="token punctuation">;</span> <span class="token selector">i ++)</span> <span class="token punctuation">{</span>
            //write 是向标准输出写入东西，标准输出已经指向fd[1]了，也就是向fd写入数据
                <span class="token function">write</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>&amp;i<span class="token punctuation">,</span><span class="token function">sizeof</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>//等待子进程写完
        <span class="token comment">/**
         * 当调用 wait(NULL) 时，父进程会被阻塞，直到任意一个子进程终止。一旦子进程终止，wait(NULL) 函数会返回被终止的子进程的进程 ID（PID），并且如果提供了 status 参数，
         * 子进程的退出状态会存储在 status 中。
        */</span>
      <span class="token function">mapping</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>//将标准输入指向fd来进行读入
      <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>train</title>
    <url>/2024/04/23/25/</url>
    <content><![CDATA[<p>Tigs:</p>
<ol>
<li>相同的application文件优先使用公共的配置</li>
</ol>
<h2 id="一些没什么用的小概念"><a href="#一些没什么用的小概念" class="headerlink" title="一些没什么用的小概念"></a>一些没什么用的小概念</h2><ul>
<li>并发量：同一时间内，系统中同时处理的用户请求数</li>
<li>响应时间：系统处理一个请求所需的时间</li>
<li>吞吐量：系统在给定时间内处理处理的业务请求数量</li>
<li>QPS(Queries Per Second) 表示系统每秒钟处理的请求数量</li>
<li>TPS(Transactions Per Second ) 表示系统每秒钟完成的事务数量</li>
</ul>
<h2 id="Gateway-网关负责分发前端请求"><a href="#Gateway-网关负责分发前端请求" class="headerlink" title="Gateway 网关负责分发前端请求"></a>Gateway 网关负责分发前端请求</h2><p>使用分布式锁来解决缓存击穿</p>
<ul>
<li><strong>以下是要自己完成的：</strong><ol>
<li>使用Spring Security和GateWay完成路由转发和认证</li>
<li>使用kafka或rocketmq<br>Redis作为缓存</li>
</ol>
</li>
<li>缓存问题：<ol>
<li>每天的用户很多但是用户每天使用的次数很少，同时会员的信息涉及的表很多<ul>
<li>解决：使用本地缓存，因为每个会员使用次数很少，一分钟有效，</li>
<li>问题:fullgc频繁，导致短时间内大量请求失败，因为缓存时间很短，所以大量的新生代出现，引起频繁的gc，然后大量放入老年代引起fullgc ， 解决：不用本地缓存，而是用线程本地变量，放在内存中。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Senta"><a href="#Senta" class="headerlink" title="Senta"></a>Senta</h2><ul>
<li>原理：生成反向sql</li>
<li>模式：<ol>
<li>AT模式：默认，添加undo_log,反向生成sql，回滚之后原来没数据的依然没有数据<ul>
<li>使用方法：<ol>
<li>建立undo_log表</li>
</ol>
</li>
</ul>
</li>
<li>TCC模式： try confirm/cancel 三个阶段的代码自己实现，Seata负责调度</li>
<li>SAGA模式：长事务解决方案，需要编写两个阶段的代码，需要一个JSON文件，可以异步执行</li>
<li>XA模式：适用于银行和金融，需要数据库支持XA协议<br>  try 之前的代码出现异常会直接结束，不会走finally</li>
</ol>
</li>
</ul>
<h2 id="如何处理多并发的买票"><a href="#如何处理多并发的买票" class="headerlink" title="如何处理多并发的买票"></a>如何处理多并发的买票</h2><ol>
<li>使用synchronized ，缺点：会导致卡住，只适合单机</li>
<li>使用Redis分布式锁，使用日期+车次来作为锁key，然后放入Redis中，如果拿到锁则继续执行，使用的使setIfAbsent(key,value,timeout),如果这个锁不存在则设置并且返回true，买到票之后删除key 缺点：如果线程执行时间超过了超时时间，也会导致超卖    <strong>对应Redis的命令是setnx</strong></li>
<li>使用Redisson看门狗，使用一个守护线程来关注超时间是，如果事务未完成但是锁即将过期则重置时间，如果事务结束则守护线程结束，lock.isHeldByCurrentThread来判断是否是当前线程的锁，缺点：Redis集群中Redis宕机，会导致获得得不到锁，然后新的线程向新的Redis主节点中获得锁，仍然可以获得锁 ， <strong>最常用</strong> ，Redisson中的锁在释放了之后Redis就查不到了！！！</li>
<li>使用红锁：只有拿到半数以上的同等地位的Redis的锁才算拿到锁，Redisson中也有自带的红锁，不常用， 缺点：性能问题，并且如果都得不到锁就都会等待了，尽量去尝试获得更多的锁来解决单机宕机问题</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/buy"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> ticket<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">//当前日期</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> ticket <span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

            <span class="token comment">//获取锁</span>
            lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span>
            <span class="token keyword">boolean</span> tryLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待100秒，上锁以后10秒自动解锁</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"tryLock:{}"</span><span class="token punctuation">,</span> tryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//模拟业务处理</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tryLock<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//单位是毫秒</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"购买成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> lock <span class="token operator">&amp;&amp;</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token string">"购买成功"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"没拿到锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"购买失败"</span><span class="token punctuation">;</span>
<span class="token comment">//                throw new RuntimeException("没拿到锁");</span>
            <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用Sentinal进行限流和降级"><a href="#使用Sentinal进行限流和降级" class="headerlink" title="使用Sentinal进行限流和降级"></a>使用Sentinal进行限流和降级</h3><ul>
<li>常见的限流算法：<ol>
<li>静态窗口限流：每秒限制多少个请求，例如：第2.5会统计第2秒到现在的流量</li>
<li>动态窗口限流：滑动窗口，往前取1秒,例如：第2.5秒会统计第1.5秒到现在的请求数</li>
<li>漏桶限流：队列，请求全在队列中，出队是匀速的</li>
<li>令牌桶限流：放的是令牌，令牌就是计数，会有一个计数器匀速产生令牌,出队不是匀速的可以适应短时间内大量请求</li>
<li>令牌大闸：当令牌到达一定数量就不再产生新的令牌</li>
</ol>
</li>
</ul>
<h2 id="如何应对刷票"><a href="#如何应对刷票" class="headerlink" title="如何应对刷票"></a>如何应对刷票</h2><p>使用令牌大闸：令牌按照匀速生成，即使有再多的机器人刷票也会被领票的数量限制，判断令牌肯定比更新库存更快</p>
<ol>
<li>使用令牌锁，持有令牌锁的人才能对令牌进行操作</li>
<li>检测令牌数量，如果有就执行，没有就不能执行</li>
<li>不要立刻释放令牌锁，使用固定的时间来释放令牌锁，这样即使有机器人也得等待令牌锁的释放</li>
</ol>
<ul>
<li>同时也可以加入验证码来防止机器人刷票<br>优化：使用缓存加速令牌锁<br>将数据库查出来的令牌存在Redis中，每次对Redis中的令牌数量-1，只有当数量等于我们设定的阈值时再去更改数据库的令牌数量，所以需要在Redis中长期保持这个key</li>
</ul>
<h2 id="使用RocketMQ"><a href="#使用RocketMQ" class="headerlink" title="使用RocketMQ"></a>使用RocketMQ</h2><p>使用RocketMQ来完成<br>购票之后，将请求发送给RocketMQ，然后另一边去消费这个消息，并且进行数据库的增删改查，可以将请求直接转为String 发送，之后另一端pull然后转为需要的类，之后执行具体具体的逻辑</p>
<h2 id="纯手写"><a href="#纯手写" class="headerlink" title="纯手写"></a>纯手写</h2><ol>
<li>登录：<ul>
<li>使用gateway + SpringSecurity + JWT + Redis实现微服务登录</li>
<li>Mybatis+Mybatis-plus</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>人事</title>
    <url>/2023/10/11/58/</url>
    <content><![CDATA[<h1 id="简单的增删改查练习"><a href="#简单的增删改查练习" class="headerlink" title="简单的增删改查练习"></a>简单的增删改查练习</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><pre class="line-numbers language-none"><code class="language-none">## 服务器
给nginx设置负载均衡即可
## 具体编码
1. BeanUtils的使用
2. DigestUtils md5加密



- 一些借鉴
jwt拦截器,md5加密，全局错误处理，ThreadLocal 进行线程内部传递变量

PageHelper分页
```java
//设置分页和分页大小
    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());
//进行查询
    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);//后续定义
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>xml中的mapper示例:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageQuery<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sky.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        select * from employee
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name != null and name != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                and name like concat('%',#{name},'%')
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
        order by create_time desc
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于时间格式的全局管理，在mvcconfig中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扩展消息转换器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个消息转换器对象</span>
    <span class="token class-name">MappingJackson2HttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span>
    converter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将自己的消息转化器加入容器中</span>
    converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>aop</p>
</li>
<li><p>Apache POI 来进行文件格式转换，导出为excel</p>
</li>
<li><p>Apache ECharts 可视化图表</p>
</li>
<li><p><strong>Spring Task</strong> 定时任务</p>
</li>
<li><p>HttpClient<br><strong>HttpClient的核心API：</strong></p>
</li>
<li><p>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</p>
</li>
<li><p>HttpClients：可认为是构建器，可创建HttpClient对象。</p>
</li>
<li><p>CloseableHttpClient：实现类，实现了HttpClient接口。</p>
</li>
<li><p>HttpGet：Get方式请求类型。</p>
</li>
<li><p>HttpPost：Post方式请求类型。</p>
</li>
</ul>
<p><strong>HttpClient发送请求步骤：</strong></p>
<ul>
<li><p>创建HttpClient对象</p>
</li>
<li><p>创建Http请求对象</p>
</li>
<li><p>调用HttpClient的execute方法发送请求</p>
</li>
</ul>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>学生管理系统</p>
<p>一．功能要求</p>
<ul>
<li><p>添加学生功能：姓名、学号、性别、出生年月日。（学号自动生成且唯一）</p>
</li>
<li><p>添加学生成绩功能：每个人都有数学、Java、英语、体育四门课，可分课程输入成绩。</p>
</li>
<li><p>根据学生学号查找学生成绩功能：在界面上显示姓名、学号和成绩，学号不存在的能给出提示信息。</p>
</li>
<li><p>根据学生姓名（支持模糊匹配）查找学生成绩功能：并在界面上显示姓名、学号和成绩，如果有多个相同姓名学生存在，一起显示出来，姓名不存在的给出提示信息。</p>
</li>
<li><p>支持对单个学生各科成绩画出柱状分布图。</p>
</li>
<li><p>学生信息的修改与删除功能：不能修改学号。</p>
</li>
<li><p>生成学生学习情况报表功能：报表包含学号、姓名、各科目成绩及对应的该科目班级平均值，总成绩以及班级总成绩平均值，并将该排序结果输出至excel文件。</p>
</li>
</ul>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><ol>
<li>admin<pre class="line-numbers language-css" data-language="css"><code class="language-css">id
username 
password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>student<pre class="line-numbers language-css" data-language="css"><code class="language-css">id <span class="token punctuation">(</span>学号自动生成且唯一<span class="token punctuation">)</span>
name
birthday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>score<pre class="line-numbers language-css" data-language="css"><code class="language-css">id
Math
Java
English
PE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
sql设计</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> management<span class="token punctuation">;</span>
<span class="token keyword">USE</span> management<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> admin<span class="token punctuation">(</span>
    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    Username <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    Password <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    StudentId <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    StudentName <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    Birthday <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score<span class="token punctuation">(</span>
    Id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    Math <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    Java <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    English <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    PE <span class="token keyword">DOUBLE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ps: 使用方式 mysql -u username -p  &lt;  xxx.sql ，之后输入密码即可</p>
<p>xml配置<br>druid<br>knife4j生成接口文档</p>
<ul>
<li>部署<br>服务器配置:<br>mysql<br>将服务器上的mysql配置文件修改<pre class="line-numbers language-css" data-language="css"><code class="language-css">vim /etc/mysql/mysql.conf.d/mysqld.cnf
将bind-address 的127.0.0.1 改为  0.0.0.0 
服务器开放端口 3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
redis<br>1.打开redis的配置文件“redis.conf”。</li>
</ul>
<p>2.将“bind 127.0.0.1”注释掉。</p>
<p>3.将“protected-mode yes”改成“protected-mode no”。</p>
<p>4.添加以下一行代码。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">daemonize no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>复制</p>
<p>5.重启redis服务即可<br><code>sudo service redis restart</code></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>knif4j注意设置好扫描的包</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol>
<li>common module<ol>
<li>返回类封装Result</li>
<li>pageHelper所需的分页参数</li>
</ol>
</li>
<li></li>
</ol>
<h1 id="苍穹外卖项目"><a href="#苍穹外卖项目" class="headerlink" title="苍穹外卖项目"></a>苍穹外卖项目</h1><p>仓库： 已完成 <a href="https://github.com/qiuEly/sky-take-out">https://github.com/qiuEly/sky-take-out</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol>
<li>当前端传输的数据与实体类差距比较大时使用DTO来封装</li>
<li><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/2987565?fromModule=lemma_inlink">数据传输</a>对象（DTO）(Data Transfer Object)，是一种<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fromModule=lemma_inlink">设计模式</a>之间传输数据的软件<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/56497111?fromModule=lemma_inlink">应用系统</a>。数据传输目标往往是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1/3351868?fromModule=lemma_inlink">数据访问对象</a>从数据库中检索数据。数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具有任何行为除了存储和检索的数据（访问和存取器）。</li>
<li>ThreadLocal 不是一个线程，但是可以用于保存Thread的一个变量，相当于设置线程内部的变量，可以用来存token和cookie</li>
<li>mybatis-plus 分页插件的使用，并且配合queryWrapper来封装自定义查询</li>
<li>使用配置jackson和java格式互相转化器</li>
<li>‘ALTER TABLE table_name AUTO_INCREMENT = value;’  记得删除没有用的数据之后并且让value大于当前的行数</li>
<li>mp 实现递增需要在配置文件中加上 ‘mybatis-plus:<br>global-config:<br>db-config:<br>id-type: auto’</li>
<li>自定义注解： <ol>
<li><p><strong><code>@Target</code> 注解</strong>：</p>
<p> @Target注解：</p>
<ul>
<li>作用：<code>@Target</code> 注解用于指定可以将注解应用到的元素类型。它决定了注解可以用于标记哪些程序元素，例如类、方法、字段等。</li>
<li>参数：<code>@Target</code> 的参数是一个 <code>ElementType</code> 枚举数组，你可以在其中指定一个或多个目标元素类型。对于 <code>@ComponentScan</code> 来说，<code>@Target(ElementType.TYPE)</code> 表示该注解可以用于标记类。</li>
</ul>
</li>
<li><p><strong><code>@Retention</code> 注解</strong>：</p>
<ul>
<li>作用：<code>@Retention</code> 注解用于指定注解在编译后是否保留到运行时，并且是否可以通过反射访问注解。有三个可能的 <code>RetentionPolicy</code> 值：<code>SOURCE</code>、<code>CLASS</code> 和 <code>RUNTIME</code>。</li>
<li>参数：<code>@Retention</code> 的参数是一个 <code>RetentionPolicy</code> 枚举值。<code>@Retention(RetentionPolicy.RUNTIME)</code> 表示注解会在运行时保留，并可以通过反射访问。</li>
</ul>
</li>
<li><p><strong><code>@Documented</code> 注解</strong>：</p>
<ul>
<li>作用：<code>@Documented</code> 注解用于指示该注解应该包含在生成的文档中。如果你想要将注解的信息包含在 Java 文档中，可以使用 <code>@Documented</code> 注解。</li>
<li>参数：<code>@Documented</code> 注解没有参数，它只是一个标记注解，用于指示文档工具要包括注解信息。</li>
</ul>
</li>
</ol>
</li>
<li>阿里云oss使用，主要使用的是spring 中的MultipartFile </li>
<li>Redis的使用</li>
<li>通过给RestController设置标识名来防止依赖注入无法识别相同名称的Bean</li>
<li>vivo50<blockquote>
<p><strong>HttpClient的核心API：</strong></p>
</blockquote>
</li>
</ol>
<ul>
<li><p>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</p>
</li>
<li><p>HttpClients：可认为是构建器，可创建HttpClient对象。</p>
</li>
<li><p>CloseableHttpClient：实现类，实现了HttpClient接口。</p>
</li>
<li><p>HttpGet：Get方式请求类型。</p>
</li>
<li><p>HttpPost：Post方式请求类型。</p>
</li>
</ul>
<p><strong>HttpClient发送请求步骤：</strong></p>
<ul>
<li><p>创建HttpClient对象</p>
</li>
<li><p>创建Http请求对象</p>
</li>
<li><p>调用HttpClient的execute方法发送请求<br>用例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">CloseableHttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpGet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CloseableHttpClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HttpClients</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">EntityUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientTest</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 测试通过httpclient发送GET方式的请求
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGET</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token comment">//创建httpclient对象</span>
        <span class="token class-name">CloseableHttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建请求对象</span>
        <span class="token class-name">HttpGet</span> httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user/shop/status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//发送请求，接受响应结果</span>
        <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取服务端返回的状态码</span>
        <span class="token keyword">int</span> statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端返回的状态码为："</span> <span class="token operator">+</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HttpEntity</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端返回的数据为："</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//关闭资源</span>
        response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ol start="13">
<li>spring cache<br>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能，通常加在启动类上</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody></table>
<p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可。</p>
<ol start="14">
<li>spring task 定时任务</li>
<li>websocket<br>WebSocket 是基于 TCP 的一种新的<strong>网络协议</strong>。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建<strong>持久性</strong>的连接， 并进行<strong>双向</strong>数据传输。</li>
</ol>
<p><strong>HTTP协议和WebSocket协议对比：</strong></p>
<ul>
<li><p>HTTP是<strong>短连接</strong></p>
</li>
<li><p>WebSocket是<strong>长连接</strong></p>
</li>
<li><p>HTTP通信是<strong>单向</strong>的，基于请求响应模式</p>
</li>
<li><p>WebSocket支持<strong>双向</strong>通信</p>
</li>
<li><p>HTTP和WebSocket底层都是TCP连接</p>
</li>
</ul>
<ol start="16">
<li>Apache ECharts</li>
<li>Apache POI</li>
<li>部署！！！</li>
</ol>
<ul>
<li>build过程中出现检测问题 <a href="https://www.cnblogs.com/SparkMore/p/15919302.html">https://www.cnblogs.com/SparkMore/p/15919302.html</a></li>
</ul>
<ol start="19">
<li>当springboot项目不识别application配置文件时，右键resource -&gt; Mark Directory as &gt; Resources Root</li>
</ol>
<h2 id="修改建议Todo"><a href="#修改建议Todo" class="headerlink" title="修改建议Todo:"></a>修改建议Todo:</h2><ol>
<li>密码加密 使用 security + jwt ，前端保存session</li>
<li>微信小程序开发 + 前端 vue </li>
<li>docker环境下使用</li>
</ol>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol>
<li>admin 界面来管理</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>手写rpc</title>
    <url>/2024/09/02/00/</url>
    <content><![CDATA[<h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><p><a href="https://zuofw.github.io/">https://zuofw.github.io/</a><br>本项目详细介绍和实现：<br><a href="https://zuofw.github.io/2024/09/02/00/">手写rpc | QingQiu’Blog (zuofw.github.io)</a><br>源码地址：<a href="https://github.com/Zuofw/zuofw-rpc">Zuofw/zuofw-rpc: 一个废物的手写rpc (github.com)</a></p>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>zuofw-rpc是一款基于Java、Netty、Zookeeper实现的RPC通信框架，它具有以下核心特性：</p>
<ol>
<li>使用”微内核+可插拔”架构，通过自定义SPI加载机制，支持缓存，动态替代扩展点组件</li>
<li>灵活使用设计模式来提高系统可扩展性，如单例模式、工厂模式、建造者模式</li>
<li>实现服务调用负载均衡机制，支持轮询、随机、一致性哈希算法，优化调用体验</li>
<li>通过自定义通信协议、支持多种序列化方式，同时实现Gzip压缩，提高网络传输效率。</li>
<li>实现自定义request - response模型，在异步通信条件下确保消息的请求和响应成功</li>
<li>基于自定义starter实现，优化SpringBoot环境下的使用。</li>
</ol>
<h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p><img src="/2024/09/02/00/%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.png"></p>
<ol>
<li>注册中心，用于服务注册和获取</li>
<li>服务端：提供服务的一方Provider</li>
<li>客户端：调用服务的一方Consumer<br>基本流程：</li>
<li>服务端把服务信息注册到注册中心上，一般包括服务端地址、接口类和方法</li>
<li>客户端从注册中心获取对应的服务信息</li>
<li>客户端根据服务的信息，通过网络调用服务端的接口<span id="more"></span></li>
</ol>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol>
<li>SpringBoot环境下引入依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zuofw.rpc.spring.boot.starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zuofw-rpc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在启动类上加上 <code>@EnableZuofwRpc(needServer = false)</code> 服务提供者将false改为true<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>  
<span class="token annotation punctuation">@EnableZuofwRpc</span><span class="token punctuation">(</span>needServer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuofwRpcSpringConsumerApplication</span> <span class="token punctuation">{</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ZuofwRpcSpringConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>服务提供者在实现类上加上<code>@ZuofwRPCService</code>注解<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@ZuofwRPCService</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserserviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端接收到请求，请求参数为："</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>服务调用者在需要使用的服务上加上 <code>@ZuofwRPCReference</code> 即可使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ZuofwRPCReference</span>
 <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zuofw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">User</span> resultUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer get User:"</span> <span class="token operator">+</span> resultUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ol>
<li>注册中心：如何实现或者使用哪个</li>
<li>动态代理：客户端调用接口，需要框架去根据接口去远程调用服务，需要使用动态代理，常见的有 JDK Proxy、CGLIb、Javassist等</li>
<li>网络传输：RPC实际上是网络传输，使用Netty</li>
<li>自定义协议：网络传输需要搭配良好的协议提高传输效率</li>
<li>序列化：将对象转化为字节流/转换回对象，网络传输只能传输字节流，所以需要实现序列化。</li>
<li>负载均衡：请求大量调用时，服务端如何选择？</li>
<li>集群容错：当请求异常时，如何处理？ 报错？重试？还是请求其他服务？</li>
</ol>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ol>
<li>请求<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 服务名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 方法名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 参数类型列表
     * Class是Java反射机制中的类，用于描述类的类型信息
     * 为何使用Class&lt;?&gt;而不是Class&lt;T&gt;？
     * Class&lt;?&gt;表示未知类型，而Class&lt;T&gt;表示具体类型
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 参数列表
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>响应<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCResponse</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 请求ID
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> requestId<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 响应数据
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 响应数据类型
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> dataType<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 响应信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>


    <span class="token comment">/**
     * 异常信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><ul>
<li>配置定义<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCConfig</span> <span class="token punctuation">{</span>  
     <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zuofw-rpc"</span><span class="token punctuation">;</span>  
     <span class="token keyword">private</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span>  
     <span class="token keyword">private</span> <span class="token class-name">String</span> serverHost <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>  
     <span class="token keyword">private</span> <span class="token class-name">Integer</span> serverPort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>  
  
     <span class="token keyword">private</span> <span class="token keyword">boolean</span> mock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
     <span class="token comment">/**  
      * 序列化器  
      */</span>  
     <span class="token keyword">private</span> <span class="token class-name">String</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerKeys</span><span class="token punctuation">.</span><span class="token constant">JDK</span><span class="token punctuation">;</span>  
  
     <span class="token keyword">private</span> <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token punctuation">}</span>
<span class="token comment">// 注册中心配置</span>
<span class="token annotation punctuation">@Data</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryConfig</span> <span class="token punctuation">{</span>  
    <span class="token comment">/**  
     * 注册中心类型  
     */</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> registry <span class="token operator">=</span> <span class="token string">"zookeeper"</span><span class="token punctuation">;</span>  
  
    <span class="token comment">/**  
     * 地址  
     */</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">"http://192.168.61.190:2181"</span><span class="token punctuation">;</span>  
  
    <span class="token comment">/**  
     * 用户名  
     */</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>  
  
  
    <span class="token comment">/**  
     * 密码  
     */</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  
  
    <span class="token comment">/**  
     * 超时时间  
     */</span>  
    <span class="token keyword">private</span> <span class="token class-name">Long</span> timeout <span class="token operator">=</span> <span class="token number">100000L</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>初始化过程(重点)：读取properties文件中的内容，然后填入我们配置中即可</li>
</ul>
<ol>
<li>init()实现<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RPCConfig</span> newRpcConfig<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        newRpcConfig <span class="token operator">=</span> <span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">RPCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RPCConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CONFIG_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取配置文件失败，使用默认配置</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"读取文件配置失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newRpcConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RPCConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newRpcConfig: "</span> <span class="token operator">+</span> newRpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>newRpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>读取文件实现，使用hutool工具<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">StringBuilder</span> configFileBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果有环境，加载对应环境的配置</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//  application-dev.properties</span>
          configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//读取yaml配置文件</span>
      <span class="token class-name">Props</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Props</span><span class="token punctuation">(</span>configFileBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> props<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>tClass<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>实际使用:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RPCApplication</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>基本接口定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Registry</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 初始化
     *
     * @param registryConfig
     */</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span> registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 注册服务 服务端
     *
     * @param serviceMetaInfo
     * @throws Exception
     */</span>
    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 取消注册服务 服务端
     *
     * @param serviceMetaInfo
     */</span>
    <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 服务发现  获取某服务的所有节点  客户端 消费端
     *
     * @param serviceKey
     * @return
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">serviceDiscovery</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>本地注册<br>本地是实现的核心思路就是使用一个ConcurrentHashMap作为注册中心，将服务信息保存在里面。</li>
<li>ZooKeeper实现<blockquote>
<p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，设计目标是将哪些复杂且容易出错的分布式一致性服务封装起来，构成一个高效的原语(原语的执行必须连续且不可分割)集，并以一系列简单易用的接口提供给用户时使用</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>首先引入依赖</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-x-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们使用curator框架，而不是官方提供的原生方案。因为这个框架简化了与ZooKeeper的交互。</p>
<blockquote>
<p>简化的API：提供了更高层次的API，简化了与ZooKeeper的交互。<br>内置的重试机制：自动处理ZooKeeper的连接和会话超时，提供了内置的重试机制。<br>服务发现和注册：提供了服务发现和注册的功能，简化了分布式系统中服务的管理。<br>集成度高：与Curator的其他模块无缝集成，提供了更多的功能和灵活性。</p>
</blockquote>
</li>
<li><p>核心实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZooKeeperRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">Registry</span> <span class="token punctuation">{</span>

    <span class="token comment">// zk客户端</span>
    <span class="token keyword">private</span> <span class="token class-name">CuratorFramework</span> client<span class="token punctuation">;</span>

    <span class="token comment">// 服务发现</span>
    <span class="token keyword">private</span> <span class="token class-name">ServiceDiscovery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceDiscovery<span class="token punctuation">;</span>

    <span class="token comment">// 根节点</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ZK_ROOT_PATH</span> <span class="token operator">=</span> <span class="token string">"/rpc/zk"</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 本地注册节点 key 集合 用于维护续期
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> localRegisterNodeKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 注册中心缓存
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RegistryInstanceCache</span> registryServiceCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryInstanceCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 监听的key集合, 用于续期
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> watchingKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span> registryConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Client 是 Curator 提供的一个类，用于管理与 Zookeeper 的连接，它提供了一些方法用于创建、删除、读取节点等操作。</span>
        client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toIntExact</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 构建serviceDiscovery 实例</span>
        <span class="token comment">//Discovery 是用于管理服务的注册和发现的组件，它提供了服务注册、服务发现、服务状态监控等功能。</span>
        serviceDiscovery <span class="token operator">=</span> <span class="token class-name">ServiceDiscoveryBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">basePath</span><span class="token punctuation">(</span><span class="token constant">ZK_ROOT_PATH</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonInstanceSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceDiscovery<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//注册过去</span>
        serviceDiscovery<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token function">buildServiceInstance</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"服务注册成功:{}"</span><span class="token punctuation">,</span> serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> registerKey <span class="token operator">=</span> <span class="token constant">ZK_ROOT_PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加节点信息到本地缓存，方便续期</span>
        localRegisterNodeKeySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            serviceDiscovery<span class="token punctuation">.</span><span class="token function">unregisterService</span><span class="token punctuation">(</span><span class="token function">buildServiceInstance</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> registerKey <span class="token operator">=</span> <span class="token constant">ZK_ROOT_PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            localRegisterNodeKeySet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">serviceDiscovery</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 优先从缓存中获取</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList <span class="token operator">=</span> registryServiceCache<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//!= null 和 isEmpty()和 isBlank()的区别, isBlank()是Apache commons-lang3包中的方法，用来判断字符串是否为空或者空格</span>
        <span class="token comment">//isBlank()方法是对字符串进行处理后再判断是否为空，而isEmpty()方法是直接判断字符串是否为空，不做任何处理。</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>serviceMetaInfoList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从zk中获取</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> serviceDiscovery<span class="token punctuation">.</span><span class="token function">queryForInstances</span><span class="token punctuation">(</span>serviceKey<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span><span class="token operator">::</span><span class="token function">getPayload</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 缓存</span>
            registryServiceCache<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> collect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前服务销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> localRegisterNodeKeySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"下线失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceNodeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//监听节点</span>
        <span class="token class-name">String</span> watchKey <span class="token operator">=</span> <span class="token constant">ZK_ROOT_PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> serviceNodeKey<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> newWatch <span class="token operator">=</span> watchingKeySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>watchKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//forDeletes()方法用于监听节点的删除事件，当节点被删除时，会触发监听器的回调方法。</span>
        <span class="token comment">//forChanges()方法用于监听节点的变化事件，当节点的数据发生变化时，会触发监听器的回调方法。</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//cache是Curator提供的一个类，用于监听节点的变化，包括节点的增加、删除、数据的变化等。</span>
            <span class="token class-name">CuratorCache</span> curatorCache <span class="token operator">=</span> <span class="token class-name">CuratorCache</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> watchKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            curatorCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            curatorCache<span class="token punctuation">.</span><span class="token function">listenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>
                    <span class="token class-name">CuratorCacheListener</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">forDeletes</span><span class="token punctuation">(</span>childData <span class="token operator">-&gt;</span> registryServiceCache<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">forChanges</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oldData<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> registryServiceCache<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token class-name">ServiceInstance</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//ServiceInstance 是 Curator 提供的一个类，用于描述一个服务实例的信息，包括服务名称、服务地址、服务端口等。</span>
        <span class="token class-name">String</span> serviceAddress <span class="token operator">=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstance</span>
                <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>serviceAddress<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span>serviceAddress<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">payload</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>服务注册<br>构造一个服务实例，然后使用serviceDiscovery注册即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//注册过去</span>
        serviceDiscovery<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token function">buildServiceInstance</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"服务注册成功:{}"</span><span class="token punctuation">,</span> serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> registerKey <span class="token operator">=</span> <span class="token constant">ZK_ROOT_PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加节点信息到本地缓存，方便续期</span>
        localRegisterNodeKeySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token class-name">ServiceInstance</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
    <span class="token comment">//ServiceInstance 是 Curator 提供的一个类，用于描述一个服务实例的信息，包括服务名称、服务地址、服务端口等。  </span>
    <span class="token class-name">String</span> serviceAddress <span class="token operator">=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token class-name">ServiceInstance</span>  
            <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>serviceAddress<span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span>serviceAddress<span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">payload</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span>  
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            
  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>初始化连接客户端</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span> registryConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//Client 是 Curator 提供的一个类，用于管理与 Zookeeper 的连接，它提供了一些方法用于创建、删除、读取节点等操作。</span>
      client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toIntExact</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 构建serviceDiscovery 实例</span>
      <span class="token comment">//Discovery 是用于管理服务的注册和发现的组件，它提供了服务注册、服务发现、服务状态监控等功能。</span>
      serviceDiscovery <span class="token operator">=</span> <span class="token class-name">ServiceDiscoveryBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">basePath</span><span class="token punctuation">(</span><span class="token constant">ZK_ROOT_PATH</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonInstanceSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          serviceDiscovery<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="RPC调用-代理"><a href="#RPC调用-代理" class="headerlink" title="RPC调用(代理)"></a>RPC调用(代理)</h3><p>RPC的调用实际上就是由框架去代理被注解的对象去远程调用服务。<br>代理分为动态代理和静态代理<br>二者区别：</p>
<blockquote>
<p>静态代理实际上在编译期间就已经生成对应的字节码文件，需要手动编写，实现与目标类相同的接口，在内部调用目标类的方法，实际就是由代理类去包裹实现类，并在代理类内部去调用被代理类。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 目标类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealService</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Performing service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 代理类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyService</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RealService</span> realService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">StaticProxyService</span><span class="token punctuation">(</span><span class="token class-name">RealService</span> realService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realService <span class="token operator">=</span> realService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before performing service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        realService<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After performing service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用静态代理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RealService</span> realService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Service</span> proxyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticProxyService</span><span class="token punctuation">(</span>realService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyService<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="JDK动态代理实现"><a href="#JDK动态代理实现" class="headerlink" title="JDK动态代理实现"></a>JDK动态代理实现</h4><blockquote>
<p>创建接口：定义一个接口，声明需要代理的方法。<br>实现接口：创建一个类实现该接口。<br>创建代理类：实现InvocationHandler接口，重写invoke方法。<br>生成代理对象：使用Proxy.newProxyInstance方法生成代理对象</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实际interface</span>
<span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//代理类</span>
<span class="token keyword">class</span> <span class="token class-name">AProxy</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//实际调用</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际实现：使用工厂模式来获取具体的代理类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProxyFactory</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> serviceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 三个参数分别是：ClassLoader指定使用哪个类加载器来加载代理类，一般使用加载目标类的方式来加载。</span>
    <span class="token comment">// new Class[]{} 一个数组，包括代理列要实习那的接口，这里传入的是目标类实现的接口。</span>
    <span class="token comment">// new ServiceProxy() 自定义的InvocationHandler实现类。</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>  
                serviceClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>serviceClass<span class="token punctuation">}</span><span class="token punctuation">,</span>  
                <span class="token keyword">new</span> <span class="token class-name">ServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
        <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>动态代理-&gt;jdk实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">// 参数分别是： proxy 代理类， method 调用的方法， args方法的参数</span>
        <span class="token comment">// 构造请求</span>
        <span class="token class-name">JDKSerializer</span> jdkSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDKSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RPCRequst</span> rpcRequst <span class="token operator">=</span> <span class="token class-name">RPCRequst</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serviceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameterTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyBytes <span class="token operator">=</span> jdkSerializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>rpcRequst<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 发送请求</span>
            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">HttpResponse</span> httpResponse <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">bodyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RPCResponse</span> response <span class="token operator">=</span> jdkSerializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">RPCResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际使用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zuofw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> newUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Get user success, name: "</span> <span class="token operator">+</span> newUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Get user failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">RPCConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">RPCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"rpc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        testMock();</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>jdk动态代理的原理：我们通过实现 InvocationHandler来实现自定义代理处理器，当我们调用动态代理对象代理的对象的方法时，这个方法的调用就会被转发到我们实现的这个接口的invoke方法来调用，从而实现动态进行一些操作。<br>补充：</li>
</ul>
<h4 id="CGLIB动态代理机制"><a href="#CGLIB动态代理机制" class="headerlink" title="CGLIB动态代理机制"></a>CGLIB动态代理机制</h4><p>JDK动态代理的一个缺点：<br>只能代理实现了接口的类，Spring AOP中就使用到了CGLIB来进行动态代理-&gt;如果目标实现了接口，默认使用JDK代理，否则使用CGLIB动态代理。</p>
<blockquote>
<p>CGLIB是一个基于ASM的字节码生成库，允许在运行时对字节码进行修改和动态生成。 CGLIB在Java 9及更高版本中无法访问某些受保护的JDK内部API导致的。具体来说，java.lang.ClassLoader.defineClass方法在Java 9及更高版本中变得不可访问。推荐使用JDK代理或者其他代理框架</p>
</blockquote>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Invoker</span> invoker <span class="token operator">=</span> <span class="token class-name">InvokerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"netty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取代理类</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 拦截方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构造请求</span>
        <span class="token class-name">RPCRequest</span> rpcRequest <span class="token operator">=</span> <span class="token class-name">RPCRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serviceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameterTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RPCResult</span> invoke <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"invoke result:{}"</span><span class="token punctuation">,</span> invoke<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RPCResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RPCResponse</span><span class="token punctuation">)</span> invoke<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="序列化器实现"><a href="#序列化器实现" class="headerlink" title="序列化器实现"></a>序列化器实现</h3><ol>
<li>JDK原生序列化：<br>优点：使用方便，无需引入额外依赖<br>缺点：速度慢，占空间、有安全问题</li>
<li>JSON：<br>优点：跨语言，使用简单，易读<br>缺点：序列化结果较大，性能一般，可能存在反序列化漏洞，不能很好处理负载的数据结构和循环引用，导致性能下降或者序列化失败</li>
<li>Kryo<br>优点：高性能，体积小，适合分布式<br>去点：不跨语言，只有Java，序列化格式复杂<br>如何实现？<br>使用interface 来定义，方便扩展和使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
     * @description: 序列化
     * @author zuofw
     * @date: 2024/9/6 10:28
    * @param obj
    * @return byte[]
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>


    <span class="token comment">/**
     * 反序列化
     * @param bytes
     * @param clazz
     * @return
     * @param &lt;T&gt;
     * @throws IOException
     */</span>
    <span class="token comment">//&lt;T&gt;是泛型方法的声明，表示这是一个泛型方法，T是泛型参数，表示这个方法是一个泛型方法，T是泛型参数，表示这个方法可以接受任意类型的参数</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<strong>当使用泛型进行序列化时，会出现泛型擦除，原始类型信息在编译时会被擦除掉，使得使用泛型作为方法参数和返回值时，实际上类型是Object类型</strong></li>
</ol>
<ul>
<li>JDK实现<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKSerializer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     * @description:   JDK实现
     * @author zuofw
     * @date: 2024/9/6 11:06
     * @param obj
     * @return byte[]
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//这是一个字节数组输出流，数据会被写到一个字节数组中</span>
        <span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将对象写入到字节数组输出流中</span>
        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteArrayInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>JSON实现<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSONSerializer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializer</span><span class="token punctuation">{</span>

    <span class="token comment">//全局唯一</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> <span class="token constant">OBJECT_MAPPER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//将对象转换为字节数组</span>
        <span class="token keyword">return</span> <span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> obj <span class="token operator">=</span> <span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RPCRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RPCRequest</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RPCResponse</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span>  <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RPCResponse</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">RPCResponse</span> rpcResponse<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//为什么要将data转换为字节数组，再转换为对象？</span>
        <span class="token comment">//因为data是一个Object类型，我们不知道它的具体类型，所以我们需要将它转换为字节数组，再转换为具体的对象</span>
        <span class="token comment">//将data转换为字节数组</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>rpcResponse<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将字节数组转换为对象</span>
        rpcResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> rpcResponse<span class="token punctuation">.</span><span class="token function">getDataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过反射创建对象</span>
        <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>rpcResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">RPCRequest</span> rpcRequest<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取参数类型</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取参数</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 循环处理每个参数的类型</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果类型不同，需要重新转换</span>
            <span class="token comment">//isAssignableFrom()方法是用来判断一个类Class1和另一个类Class2是否相同或是另一个类的超类或接口</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">OBJECT_MAPPER</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>实现方式：</p>
<ol>
<li>引入依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.jsonzou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmockdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>实现代理接口<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Mock 服务代理 JDK动态代理
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 调用代理
     *
     * @throws Throwable
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据方法的返回值类型，生成特定的默认值对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> mockData <span class="token operator">=</span> <span class="token class-name">JMockData</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"mockData:{}"</span><span class="token punctuation">,</span> mockData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mockData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="SPI机制-gt-热拔插"><a href="#SPI机制-gt-热拔插" class="headerlink" title="SPI机制->热拔插"></a>SPI机制-&gt;热拔插</h3><p>面向对象鼓励模块之间基于接口而非具体实现变成来降低耦合，支持开闭原则(对扩展开放，对修改封闭)，但是直接依赖实现，在替代实现时需要修改代码，违背了开闭原则。SPI因此诞生。 </p>
<blockquote>
<p>SPI(Service Provider Interface 服务提供者的接口)与API(应用提供的接口，供外部调用)类似，是JDK内置的一种服务提供发现机制，可以用来启用框架拓展和替换组件。SPI 允许框架或应用程序通过接口定义服务，并允许第三方或用户提供这些服务的实现。SPI 的主要目的是提供一种可插拔的架构，使得服务的实现可以在运行时动态加载和替换。类似于IOC，只不过将装配的控制移交到了程序之外</p>
</blockquote>
<p><img src="/2024/09/02/00/SPI.png"></p>
<h4 id="实现热拔插的流程"><a href="#实现热拔插的流程" class="headerlink" title="实现热拔插的流程"></a>实现热拔插的流程</h4><ol>
<li>服务的提供者实现一种接口的实现，然后在classpath路径下的META-INF/services/目录里创建一个以服务接口命名的文件。里面填写需要加载的实现类的全限定符</li>
<li>使用自定义加载，加载实现的接口</li>
</ol>
<p><strong>最核心的就是通过类的全限定符去找到这个类，然后通过反射来进行加载</strong></p>
<p>自定义加载实现：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> calss <span class="token class-name">SPILoader</span> <span class="token punctuation">{</span>
	<span class="token comment">// 只展示核心方法，完整内容可以去看源码</span>
	<span class="token comment">// 参数：要加载的类型	</span>
	  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> loadClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"加载类型为{} 的SPI"</span><span class="token punctuation">,</span>loadClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//扫描路径，用户自定义的SPI优先级高于系统SPI</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyClassMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// SCANS_DIRS是我们自定义的加载路径</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> dir <span class="token operator">:</span> <span class="token constant">SCANS_DIRS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扫描路径为{}"</span><span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取资源</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"资源为{}"</span><span class="token punctuation">,</span>dir <span class="token operator">+</span> loadClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> resources <span class="token operator">=</span> <span class="token class-name">ResourceUtil</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>dir <span class="token operator">+</span> loadClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//URL是什么类型，为什么要用它，因为它是一个统一资源定位符，可以用来定位资源</span>
            <span class="token comment">//url.openStream()是什么意思，是打开一个输入流，可以用来读取资源</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token constant">URL</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//打开一个输入流</span>
                    <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//缓冲读取字符流</span>
                    <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token class-name">String</span> line<span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>splits<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SPI配置文件格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token class-name">String</span> key <span class="token operator">=</span> splits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token class-name">String</span> className <span class="token operator">=</span> splits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token comment">//Class.forNam用于动态加载一个类</span>
                        keyClassMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"加载SPI配置文件失败"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"需要加载的类不存在"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        loaderMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>loadClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyClassMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyClassMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 获得类名</span>
       <span class="token class-name">String</span> tClassName <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyClassMap <span class="token operator">=</span> loaderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>keyClassMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SpiLoader 未加载 %s 类型"</span><span class="token punctuation">,</span> tClassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyClassMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SpiLoader 的 %s 不存在 key= %s"</span><span class="token punctuation">,</span> tClassName<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token comment">// 通过类名获得实现类</span>
       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> implClass <span class="token operator">=</span> keyClassMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 从缓存中加载指定类型的实例</span>
       <span class="token class-name">String</span> implClassName <span class="token operator">=</span> implClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 判断缓存中是否有实例</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instanceCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">try</span> <span class="token punctuation">{</span>
               instanceCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">,</span>  implClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"实例化 %s 失败"</span><span class="token punctuation">,</span> implClassName<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> instanceCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>文件内容：<img src="/2024/09/02/00/SPIURL.png" alt="|475"> <img src="/2024/09/02/00/URL%E5%86%85%E5%AE%B9.png"><br>核心流程：</p>
<ol>
<li>通过URL来定位文件位置</li>
<li>读取文件内容，将类的信息加载到map中</li>
<li>获取实例时根据类型来加载具体的类型和是实现类。</li>
<li>核心还是反射。</li>
</ol>
<h4 id="常见的反射使用方法"><a href="#常见的反射使用方法" class="headerlink" title="常见的反射使用方法"></a>常见的反射使用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forNmae</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>根据传入的类名，动态加载并返回一个<span class="token class-name">Class</span>对象，不会新建一个对象
<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或者通过构造函数反射来进行实例化一个新的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>采用加载Class对象和创建实例分离的方式，使得SPI只有在需要实现类的时候才触发实例化，更加高效灵活</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过类名获得实现类</span>
      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> implClass <span class="token operator">=</span> keyClassMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 从缓存中加载指定类型的实例</span>
      <span class="token class-name">String</span> implClassName <span class="token operator">=</span> implClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//判断缓存中是否有实例</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instanceCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              instanceCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">)</span> implClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"实例化 %s 失败"</span><span class="token punctuation">,</span> implClassName<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> instanceCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>implClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h3><p>RPC框架使用Netty通信时，实际上是将数据转化为ByteBuf的方式放松的，那么该如何转化？如果直接转化会出现粘包和拆包问题<br>什么是粘包和拆包问题</p>
<blockquote>
<p>使用TCP时，使用的是没有界限的二进制流传输，TCP会根据缓冲区来进行数据包的划分，但是划分不一定就是实际的一个业务上的完整的包，所以会出现接收端将多个数据包合并成一个数据包或者将一个数据包拆分成多个包</p>
</blockquote>
<p>如何解决？</p>
<ol>
<li>固定长度的消息</li>
<li>使用特定的分隔符</li>
<li>消息头：包含消息的长度。<br>实现：</li>
</ol>
<h4 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h4><p>参考：<a href="https://www.cnblogs.com/chenchuxin/p/15227253.html">从零开始实现简单 RPC 框架 7：网络通信之自定义协议(粘包拆包、编解码) - 小新是也 - 博客园 (cnblogs.com)</a><a href="https://yunfeidog.github.io/yunfei-rpc/docs/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE(%E9%87%8D%E7%82%B9).html#%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1">自定义协议(重点) | 手写RPC框架 (yunfeidog.github.io)</a><br>int占用4个自己额，byte占用1个字节<br>消息所需要的信息</p>
<ul>
<li>魔数：标识是我们自定义的RPC消息，同时用来校验消息是否合法 1B</li>
<li>版本号：1B</li>
<li>序列化类型：标识使用的序列化方式，用来方便同意序列化和反序列化 1B</li>
<li>类型：标识消息的类型，普通请求，心跳，响应 1B</li>
<li>状态：标识消息是否成功推送 1B</li>
<li>请求id：标识当前消息的唯一标识 8B</li>
<li>压缩类型：将字节流进行压缩，传输更快，但是会消耗CPU资源。 1B</li>
<li>消息长度：标识消息的长度，解决粘包 4B</li>
<li>消息体：<br>所以请求占用字节为 18B<br>问题： [[JVM学习#内部类引用外部类|静态内部类的好处]]</li>
</ul>
<h4 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token comment">// 使用T泛型，可以接收任意类型的消息体</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 请求头
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Header</span> header<span class="token punctuation">;</span>

    <span class="token comment">/**
     * body
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> body<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 使用静态内部类，定义请求头,优点是可以直接通过ZMessage.Header访问，方便解耦，内部类也不会出现外部引用
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@AllArgsConstructor</span>
    <span class="token annotation punctuation">@NoArgsConstructor</span>
    <span class="token annotation punctuation">@Builder</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token punctuation">{</span>
        <span class="token comment">/**
         * 魔数
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> magic<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 版本
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> version<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 序列化器
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> serialize<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 消息类型
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> type<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 消息状态
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> status<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 请求id
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">long</span> requestId<span class="token punctuation">;</span>



        <span class="token comment">/**
         * 压缩格式
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> compress<span class="token punctuation">;</span>

        <span class="token comment">/**
         * 消息体长度
         */</span>

        <span class="token keyword">private</span> <span class="token keyword">int</span> bodyLength<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><ol>
<li>接口定义<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Compressor</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 压缩
     *
     * @param bytes 压缩前的字节数组
     * @return 压缩后的字节数组
     */</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 解压
     *
     * @param bytes 解压前的字节数组
     * @return 解压后的字节数组
     */</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>gzip实现<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GzipCompressor</span> <span class="token keyword">implements</span> <span class="token class-name">Compressor</span><span class="token punctuation">{</span>

    <span class="token comment">/**
     * 4k 缓冲区
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token string">"bytes should not null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">GZIPOutputStream</span> gzip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            gzip<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            gzip<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            gzip<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"gzip compress error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token string">"bytes should not null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">GZIPInputStream</span> gunzip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> gunzip<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"gzip decompress error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="解码器和编码器"><a href="#解码器和编码器" class="headerlink" title="解码器和编码器"></a>解码器和编码器</h4><p>本文使用的通信方式是基于Netty实现的<br>Netty中的Decoder和Encoder</p>
<ol>
<li>LengthFieldBasedFrameDecoder是ByteToMessageDecoder的一个实现类，可以解决存在定长的消息的解码问题</li>
<li>MessageToByteEncoder和ByteToMessageDecoder是最基础的两个编码类。LengthFieldBasedFrameDecoder是ByteToMessageDecoder的一个实现，可以根据自己的需求选择。<br>编码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtocolDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> channelHandlerContext<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解码消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"可读字节数：{}"</span><span class="token punctuation">,</span> byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 一共18B，但是Length占4B，所以最少要14B</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">markReaderIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"读指针：{}"</span><span class="token punctuation">,</span> byteBuf<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> magic <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>magic <span class="token operator">!=</span> <span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">MAGIC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的协议"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span> version <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> serialize <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> type <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> status <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取8个字节</span>
        <span class="token keyword">long</span> requestId <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> compress <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取4个字节</span>
        <span class="token keyword">int</span> bodyLength <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果可读字节数小于bodyLength，说明数据还没到齐，等待下一次读取</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bodyLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 重置读指针</span>
            byteBuf<span class="token punctuation">.</span><span class="token function">resetReaderIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bodyLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Compressor</span> compressor <span class="token operator">=</span> <span class="token class-name">CompressorFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> unCompressBody <span class="token operator">=</span> compressor<span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 序列化</span>
        <span class="token class-name">SerializerEnum</span> serializerEnum <span class="token operator">=</span> <span class="token class-name">SerializerEnum</span><span class="token punctuation">.</span><span class="token function">getByKey</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"serializer种类是{}"</span><span class="token punctuation">,</span> serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serializerEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的序列化器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Class&lt;?&gt; 是一个通配符，表示任意类型</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> type <span class="token operator">==</span> <span class="token class-name">MessageType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">RPCRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">RPCResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> bodyObj <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>unCompressBody<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZMessage<span class="token punctuation">.</span>Header</span><span class="token punctuation">(</span>magic<span class="token punctuation">,</span> version<span class="token punctuation">,</span> serialize<span class="token punctuation">,</span> type<span class="token punctuation">,</span> status<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> compress<span class="token punctuation">,</span> bodyLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZMessage</span> zMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZMessage</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> bodyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解码消息：{}"</span><span class="token punctuation">,</span> zMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>zMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
解码：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtocolEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToByteEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZMessage</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> channelHandlerContext<span class="token punctuation">,</span> <span class="token class-name">ZMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> zMessage<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>zMessage <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> zMessage<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Message{}"</span><span class="token punctuation">,</span>zMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> zMessage<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getCompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SerializerEnum</span> serializerEnum <span class="token operator">=</span> <span class="token class-name">SerializerEnum</span><span class="token punctuation">.</span><span class="token function">getByKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>serializerEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的序列化器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"serializer的种类是{}"</span><span class="token punctuation">,</span> serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyBytes <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>zMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compressedBody <span class="token operator">=</span> <span class="token class-name">CompressorFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Serialized message body length: {}"</span><span class="token punctuation">,</span> compressedBody<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加日志以确认序列化后的消息长度</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>compressedBody<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>compressedBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
如何加入Netty中？<br>我们需要在netty的handler中添加这个即可，注意需要在我们消息handler处理类之前添加<img src="/2024/09/02/00/%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81.png"><br>同时对于一个消息的发送和接收，Netty中的路径顺序是不一样的，发送消息时，我们先经过解码器，将要发送的内容解码成ZMessage，之后经过编码器，将其解码成字节的形式<br>接收消息时我们要经历的流程是相反的，要先将byte编码成我们的自定义的字节格式，之后再解码成我们的ZMessage。</li>
</ol>
<h3 id="网络传输的实现"><a href="#网络传输的实现" class="headerlink" title="网络传输的实现"></a>网络传输的实现</h3><p>Netty实现</p>
<blockquote>
<ol>
<li>网络通信层：支持多种网络协议，当网络数据读取到内核缓冲区后，会触发各种网络事件，会分发给事件调度层进行处理。核心是<ul>
<li>BootStrap，负责Netty客户端的启动、初始化、服务器连接等过程</li>
<li>ServerBootStrap：用于服务端绑定本地端端口，会绑定Boss和Worker两个EventLoopGroup</li>
<li>Channle 通道，基于NIO更高层次的抽象吗</li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="request-response模型"><a href="#request-response模型" class="headerlink" title="request - response模型"></a>request - response模型</h4><p>Netty的通信是异步通信，也就是说我们的客户端和服务端是不能够同步来确认请求和响应是否成功，所以我们可以使用一个未处理请求来确定我们的请求是否成功得到响应<br><img src="/2024/09/02/00/%E6%9C%AA%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82.png"><br>在Invoker中，我们成功发送请求之前先将这个结果放入map中<br><img src="/2024/09/02/00/put.png"><br>在我们的ClientHandler中，我们可以通过响应的requestId来确认我们是否成功收到了回复<br><img src="/2024/09/02/00/complete.png"></p>
<h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><p>更加详细的介绍 <a href="https://www.cnblogs.com/chenchuxin/p/15236259.html">从零开始实现简单 RPC 框架 9：网络通信之心跳与重连机制 - 小新是也 - 博客园 (cnblogs.com)</a><br>Netty已经帮我们提供了一个心跳Handler <code>IdleStateHandler</code>，当连接的空闲时间过长时，<code>IdleStateHandler</code>会触发一个 <code>IdleStateEvent</code> 事件，传递的到下一个Handler，我们可以通过在自定义的Handler中重写<code>userEventTrigged</code>方法来处理这个事件。<strong>需要注意的是自定义的Handler应该追加在心跳Handler之后。</strong><br>1.完整的构造函数<img src="/2024/09/02/00/Idle%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png"></p>
<ul>
<li><code>observeOutput</code>：是否考虑出站较慢的情况。如果为true就不触发此次事件，如果false就会触发。默认为false</li>
<li><code>readerIdleTime</code>：读空闲时间，0表示禁用读空闲时间事件</li>
<li><code>writerIdleTime</code>：写空闲事件，0表示禁用写空闲事件。</li>
<li><code>allIdleTime</code>：读或者写空闲时间，0表示禁用事件</li>
<li><code>unit</code>：单位<br>2.核心的事件处理机制<br><code>IdleStateHandler</code>&nbsp;继承&nbsp;<code>ChannelDuplexHandler</code>，重写了出站和入站的事件，我们来看看代码。<br>当 channel 添加、注册、活跃的时候，会初始化&nbsp;<code>initialize(ctx)</code>，删除、不活跃的时候销毁&nbsp;<code>destroy()</code>，读写的时候设置&nbsp;<code>lastReadTime</code>&nbsp;和&nbsp;<code>lastWriteTime</code>&nbsp;字段。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdleStateHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelDuplexHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">initialize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRegistered</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">initialize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelRegistered</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">initialize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelInactive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否开启 读空闲 或者 读写空闲 监控</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>readerIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> allIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置 reading 标志位</span>
            reading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            firstReaderIdleEvent <span class="token operator">=</span> firstAllIdleEvent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 读完成之后</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否开启 读空闲 或者 读写空闲 监控，检查 reading 标志位</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readerIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> allIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> reading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置 lastReadTime，后面判断读超时有用</span>
            lastReadTime <span class="token operator">=</span> <span class="token function">ticksInNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            reading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否开启 写空闲 或者 读写空闲 监控</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>writerIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> allIdleTimeNanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// writeListener 的方法在下面，主要是设置 lastWriteTime</span>
            ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">.</span><span class="token function">unvoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>writeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChannelFutureListener</span> writeListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            lastWriteTime <span class="token operator">=</span> <span class="token function">ticksInNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            firstWriterIdleEvent <span class="token operator">=</span> firstAllIdleEvent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
最底层的调用，也即是实际上如何进行<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeUserEventTriggered</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 触发事件，说白了，就是直接调用 userEventTriggered 方法而已</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelInboundHandler</span><span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userEventTriggered</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">notifyHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">fireUserEventTriggered</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
可以看到，其实实际上就是将事件传给下一个Handler，也就是调用了userEventTriggered方法<br>3.实现</li>
<li>客户端Client实现<img src="/2024/09/02/00/client%E5%BF%83%E8%B7%B3.png"></li>
<li>服务端实现：对于心跳包我们没必要去回复，我们只需要处理是否有写事件是否发生即可<br>4.断线重连的秘密<br>核心就是我们的这个缓存，对于每一个连接，我们都通过连接地址来保存他的Channel<img src="/2024/09/02/00/channel%E7%BC%93%E5%AD%98.png"><br>核心函数是这个<img src="/2024/09/02/00/getChannel.png"><br>当我们检测到这个channel不存在或者不活跃时我们重新建立连接并放在缓存中即可<br>需要保证我们的字节数要对的上，因为我们自定义协议的字节不满足会放在缓冲区，<br>然后如果不需要处理其他协议比如HTTP可以不加那种Handler</li>
</ul>
<h4 id="消息的处理Handler"><a href="#消息的处理Handler" class="headerlink" title="消息的处理Handler"></a>消息的处理Handler</h4><p>具体实现可以参考 NettyClientHandler和NettyServerHandler两个类的实现，思路很简单这里就不贴出源码了。</p>
<h3 id="负载均衡的实现"><a href="#负载均衡的实现" class="headerlink" title="负载均衡的实现"></a>负载均衡的实现</h3><ol>
<li>随机：随机数选取</li>
<li>轮询：使用AtomicInteger来保证线程安全和原子操作，保证轮询的实现。</li>
<li>一致性哈希算法<br>实现思路仍然是根据SPI实现，然后篇幅原因，具体的实现可以参照源码。</li>
</ol>
<h4 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h4><p>主要是在Hash算法的基础上增加环形空间、虚拟节点等。从而当服务器数量出现变化时不会导致</p>
<h3 id="重试与容错"><a href="#重试与容错" class="headerlink" title="重试与容错"></a>重试与容错</h3><p>出现故障时，如何处理<br> Callable对象:</p>
<blockquote>
<p>Callable 是 Java 中的一个接口，用于表示可以返回结果并可能抛出异常的任务。它与 Runnable 接口类似，但 Runnable 不能返回结果，也不能抛出受检异常。<br>主要用途<br>异步任务：Callable 常用于需要在后台线程中执行并返回结果的任务。<br>异常处理：Callable 可以抛出受检异常，允许更灵活的错误处理。</p>
</blockquote>
<h4 id="常见的重试策略"><a href="#常见的重试策略" class="headerlink" title="常见的重试策略"></a>常见的重试策略</h4><ol>
<li>固定间隔重试：固定间隔</li>
<li>线性重试：时间间隔线性增加</li>
<li>最大重试次数</li>
<li>不重试<br>固定间隔实现：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedIntervalRetryStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RetryStrategy</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RPCResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// Retryer是重试的核心类，RetryerBuilder是构建Retryer的工厂类</span>
        <span class="token class-name">Retryer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCResponse</span><span class="token punctuation">&gt;</span></span> retryer <span class="token operator">=</span> <span class="token class-name">RetryerBuilder</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCResponse</span><span class="token punctuation">&gt;</span></span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 重试条件，当发生Exception时重试</span>
                <span class="token punctuation">.</span><span class="token function">retryIfExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">// 重试间隔时间策略，每次重试间隔3秒</span>
                <span class="token punctuation">.</span><span class="token function">withWaitStrategy</span><span class="token punctuation">(</span><span class="token class-name">WaitStrategies</span><span class="token punctuation">.</span><span class="token function">fixedWait</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 重试停止策略，重试3次后停止</span>
                <span class="token punctuation">.</span><span class="token function">withStopStrategy</span><span class="token punctuation">(</span><span class="token class-name">StopStrategies</span><span class="token punctuation">.</span><span class="token function">stopAfterAttempt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 重试监听器，监听重试事件</span>
                <span class="token punctuation">.</span><span class="token function">withRetryListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">onRetry</span><span class="token punctuation">(</span><span class="token class-name">Attempt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> attempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 重试日志</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"重试第{}次"</span><span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">getAttemptNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> retryer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="常见的容错策略"><a href="#常见的容错策略" class="headerlink" title="常见的容错策略"></a>常见的容错策略</h4><blockquote>
<p>容错机制是分布式系统设计中非常重要的一部分,它的目标是在部分组件或节点出现故障时,仍能保证系统整体的正常运转和服务可用性。</p>
</blockquote>
<ol>
<li>失败自动切换(Failover)</li>
<li>快速失败(Failfast)：立刻抛出异常，不进行重试或者降级<br>故障转移实现：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailOverTolerantStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">TolerantStrategy</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RPCResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> metaInfos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">SERVICE_LIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceMetaInfo</span> metaInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">CURRENT_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RPCRequest</span> rpcRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RPCRequest</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">RPC_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>metaInfos <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> metaInfos<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"故障转移失败，metaInfos为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">NettyClient</span> nettyClient <span class="token operator">=</span> <span class="token class-name">NettyClient</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZMessage</span> message <span class="token operator">=</span> <span class="token class-name">NettyInvoker</span><span class="token punctuation">.</span><span class="token function">buildMessage</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token operator">:</span> metaInfos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">RetryStrategy</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"fixedinterval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> retryStrategy<span class="token punctuation">.</span><span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">InetSocketAddress</span> socketAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> nettyClient<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCResponse</span><span class="token punctuation">&gt;</span></span> resultFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">UnprocessedRequests</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resultFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">)</span> future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"client send message{}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                resultFuture<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"send failed{}"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> resultFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"channel is not active. address="</span> <span class="token operator">+</span> socketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"故障转移失败，重试失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"容错失败,所有的服务重试都失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
实际使用：<img src="/2024/09/02/00/%E5%AE%B9%E9%94%99%E4%BD%BF%E7%94%A8.png"></li>
</ol>
<h3 id="Starter包"><a href="#Starter包" class="headerlink" title="Starter包"></a>Starter包</h3><ol>
<li>服务扫描设计<br>使用BeanPostProcessor来加载被@ZuoRpcService注解的类<blockquote>
<p>BeanPostProcessor 是 Spring 框架中的一个接口，允许在 Spring 容器实例化 bean 之后但在依赖注入发生之前对 bean 进行自定义修改。它提供了两个主要方法：<br>postProcessBeforeInitialization(Object bean, String beanName)：在 bean 初始化之前进行处理。<br>postProcessAfterInitialization(Object bean, String beanName)：在 bean 初始化之后进行处理。<br>如何编写一个Starter包？<br>引入springboot启动依赖，编写bootstrap类<br>ImportBeanDefinitionRegistrar 是 Spring 框架中的一个接口，用于在运行时动态注册 Bean 定义。它允许您在 Spring 应用程序上下文中注册额外的 Bean 定义，而无需在 XML 配置文件或注解中显式声明它们。<br>注册服务应该在服务启动之前就进行，因为Netty会阻塞，导致后续无法注册成功</p>
</blockquote>
</li>
</ol>
<p><strong>遇到的问题</strong><br>我使用的依赖是</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span> 
	<span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span> 
	<span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>zookeeper<span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span> 
	<span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.6</span><span class="token number">.3</span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span> 
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
	<span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>
	<span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>
		spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zookeeper<span class="token operator">-</span>discovery
	<span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>
	<span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.1</span><span class="token number">.2</span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span> 
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个依赖也可以直接使用curator，但是他的zookeeper的配置是单独的，会绑定spring启动，我们自定义写的registry中心不能和这个绑定，就导致一直是绑定到本地zookeeper，即使我们已经成功注册了<br>所以使用curator的依赖来解决</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>curator<span class="token operator">-</span>x<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">5.6</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>基础设置启动</p>
<h4 id="注解设计"><a href="#注解设计" class="headerlink" title="注解设计"></a>注解设计</h4><p>启动注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RPCInitBootStrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RPCProviderBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RPCConsumerBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 自动按照顺序加载这几个类</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableZuofwRpc</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 需要启动server
     *
     * @return
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">needServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>客户端调用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ZuofwRPCReference</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 服务接口类
     * @return
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 服务版本
     * @return
     */</span>
    <span class="token class-name">String</span> <span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RPCConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_SERVICE_VERSION</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>服务提供者</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ZuofwRPCService</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 服务接口类
     *
     * @return
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 服务版本
     *
     * @return
     */</span>
    <span class="token class-name">String</span> <span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RPCConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_SERVICE_VERSION</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="扫描类实现"><a href="#扫描类实现" class="headerlink" title="扫描类实现"></a>扫描类实现</h4><p>初始化类加载</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCInitBootStrap</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * Spring初始化执行时候，初始化Rpc框架
     *
     * @param importingClassMetadata
     * @param registry
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取EnableRpc 注解的属性值</span>
        <span class="token keyword">boolean</span> needServer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableZuofwRpc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"needServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Rpc框架初始化（配置和注册中心）</span>
        <span class="token class-name">RPCApplication</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">RPCConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RPCApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动服务器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>needServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">NettyServer</span> nettyServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"port:{}"</span><span class="token punctuation">,</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                nettyServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Rpc server is not started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代理扫描实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCConsumerBootstrap</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历对象的所有属性</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ZuofwRPCReference</span> rpcReference <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ZuofwRPCReference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcReference <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 为属性生成代理对象</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> rpcReference<span class="token punctuation">.</span><span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    interfaceClass <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成代理对象:"</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生成代理对象:{}"</span><span class="token punctuation">,</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">ServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                Object proxy = ServiceProxyFactory.getCGProxy(interfaceClass);</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成代理对象失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>服务扫描和注册实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCProviderBootstrap</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZuofwRPCService</span> rpcService <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ZuofwRPCService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 需要注册服务</span>
            <span class="token comment">// 获取服务基本信息</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> rpcService<span class="token punctuation">.</span><span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 默认值处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                interfaceClass <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span> serviceName <span class="token operator">=</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> serviceVersion <span class="token operator">=</span> rpcService<span class="token punctuation">.</span><span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册服务</span>
            <span class="token comment">// 本地注册</span>
            <span class="token class-name">LocalRegistry</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 全局配置</span>
            <span class="token keyword">final</span> <span class="token class-name">RPCConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RPCApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 注册到注册中心</span>
            <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceVersion</span><span class="token punctuation">(</span>serviceVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceHost</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServicePort</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感谢观看，到这里我们基本缕清了一遍RPC的实现原理，具体的实现可以到我的Github中查看源码。</p>
]]></content>
      <categories>
        <category>深入理解系列</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>简历</title>
    <url>/2023/10/21/39/</url>
    <content><![CDATA[<p>国外的那些课的实验是可以写在简历上的比如 15445<br>苍穹外卖项目 + 服务器部署</p>
]]></content>
  </entry>
  <entry>
    <title>软考</title>
    <url>/2023/09/19/11/</url>
    <content><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>描述软件需求的方法：</p>
<p>功能层次模型：一般来讲就是系统的功能图，模块分布图等描述整个系统的功能的分布和功能的层次结构；</p>
<p>数据流模型：就是以数据流为着眼点的分析方法得到的模型，主要通过数据在整个系统的流动情况来确定系统的主要功能主线和流程；</p>
<p>控制流模型：通过了解和界定系统中控制线，通过控制流的走向和控制的对象来确定系统的功能分布和控制与被控制的关系；</p>
<p><strong>结构化分析（SA)</strong> 方法是一种面向数据流的需求分析方法，它适用于分析大型数据处理系统。结构化分析方法的基本思想是自顶向下逐层分解，这样做可以把一个大问题分解成若干个小问题，经过多次逐层分解，每个最底层的问题都是足够简单、容易解决的，这个过程就是分解的过程。</p>
<p>结构化方法的分析结果由数据流图DFD、数据词典和加工逻辑说明几个部分组成。其中，DFD的基本成分有数据流（data flow）、加工（process）、文件（file）和源/宿（source/sink）。</p>
<p><strong>结构化设计（SD)</strong> 方法是一种面向数据流的设计方法，它可以与SA方法衔接。</p>
<p>结构化设计采用<strong>结构图（SC）</strong> 来描述程序的结构。其基本成分有模块、调用和输入/输出数据。</p>
<p>结构图：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="file:///C:\Users\ASUS\AppData\Local\Temp\ksohtml32068\wps1.jpg">　 <img src="file:///C:\Users\ASUS\AppData\Local\Temp\ksohtml32068\wps2.jpg"></td>
<td></td>
</tr>
<tr>
<td></td>
<td><img src="file:///C:\Users\ASUS\AppData\Local\Temp\ksohtml32068\wps3.jpg"></td>
</tr>
</tbody></table>
<p>条件调用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;循环调用</p>
<p>&nbsp;&nbsp;&nbsp;在需求分析阶段用SA方法产生了<strong>数据流图（DFD）</strong> 。面向数据流的设计可以方便的将DFD转换成程序结构图。DFD从系统的输入数据流到系统的输出数据流的一连串连续变换形成一条信息流。DFD的信息流大体可分为两种类型：变换流和事务流。与之对应的也存在两种分析，变换分析和事务分析。变换分析是从变换流型的DFD导出程序结构图，而事务分析则是从事务流行型的DFD导出程序结构图。</p>
<p>SD方法的具体设计步骤为：</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 复查并精化数据流图</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 确定DFD的信息流类型</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据信息流类型分别将变换流或事务流转换成程序结构图</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据软件设计的原则对程序结构图作改进</p>
<ul>
<li>测试</li>
</ul>
<p>白盒测试是根据程序的内部逻辑来设计测试用例，常用的技术是逻辑覆盖，即考察用例测试数据运行被测程序时对程序逻辑的覆盖程度。主要的覆盖标准有6种： </p>
<p>黑盒测试</p>
<p>黑盒测试时根据规格说明所规定的功能来设计测试用例，它不考虑程序的内部结构和处理过程。常用的黑盒测试技术有：</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 等价类划分</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 边值划分</p>
<p>Ø&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 错误猜测</p>
]]></content>
  </entry>
  <entry>
    <title>美云智数一面</title>
    <url>/2024/10/11/36/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><del>碎碎念没必要看</del><br>公司面试挺水的，只有一面，是美的的子公司，我也不清楚到底能不能学到东西，但是对我这种废物来说，美的这个牌子就足够我去探探深浅了，所以我选择了去实习几个月。<br>最开始是不想去的，因为子公司终究不是美的，而且美的也不是互联网厂，所以可能认可度不是很高，但是最近招实习有难困难，同时我也感觉自己的水平可能不够去大厂的，而且上一段实习还被莫名其妙的开了，没学到多少东西，所以我只能骑驴找马了。<br>不过，hr还有面试官都很好，面试官也不严厉，虽然没开摄像头，但是面起来很舒服，然后面试官感觉就像是跟同龄人聊天一样，很可爱的小姐姐😃，他们俩是我去美云的重要因素吧。<br><del>许愿明年能找到大厂的转正实习吧，然后再转正一番，唉，双非 + 农村出身，我已经尽力了。</del></p>
<p>流程啥的就不说了，经典介绍 + 八股项目拷问 + 反问，没有算法。顺便被夸奖了经验挺丰富的hhh</p>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="IOC和AOP的区别"><a href="#IOC和AOP的区别" class="headerlink" title="IOC和AOP的区别"></a>IOC和AOP的区别</h2><p>这个问题感觉有点抽象。。。感觉他们没啥关系，硬要说的话也是AOP是在Spring框架的基础上实现的，而Spring的核心就是IOC<br>回答就是经典的IOC + DI咏唱，AOP的咏唱：切点，通知，顺便说了一下AOP如何实现的，简单来说就是JDK动态代理和CGLIB，还有和静态代理的区别。</p>
<h2 id="集合和链表里哪些是有序的，哪些是无序的"><a href="#集合和链表里哪些是有序的，哪些是无序的" class="headerlink" title="集合和链表里哪些是有序的，哪些是无序的"></a>集合和链表里哪些是有序的，哪些是无序的</h2><p>抽象问题，我以为是问的TreeSet，PriorityQueue这种。。。<br>下面随便挑几个讲讲就行了<br>有序：</p>
<ol>
<li>ArrayList、LinkedList、Vector、Stack</li>
<li>TreeSet</li>
<li>PriorityQueue、双向队列Deque<br>无序：</li>
<li>HashSet、LinkedHashSet</li>
<li>HashMap。。。。<br>总结：<br>有序：list，链表，队列，栈，treeset,<br>无序：set除了treeset，map除了LinkedHashMap</li>
</ol>
<h2 id="有用到什么设计模式吗"><a href="#有用到什么设计模式吗" class="headerlink" title="有用到什么设计模式吗"></a>有用到什么设计模式吗</h2><p>我用到过<br>模板方法模式、工厂模式、策略模式。。忘了，自己结合项目回答吧。</p>
<h2 id="消息队列相关"><a href="#消息队列相关" class="headerlink" title="消息队列相关"></a>消息队列相关</h2><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 这个八股准备的不充分，要使劲学学</li>
</ul>
<h3 id="Kafka和RocketMQ分别适合哪些场景"><a href="#Kafka和RocketMQ分别适合哪些场景" class="headerlink" title="Kafka和RocketMQ分别适合哪些场景"></a>Kafka和RocketMQ分别适合哪些场景</h3><h3 id="有用过分区顺序消息吗"><a href="#有用过分区顺序消息吗" class="headerlink" title="有用过分区顺序消息吗"></a>有用过分区顺序消息吗</h3><h3 id="有了解过RocketMQ的消息大小限制吗"><a href="#有了解过RocketMQ的消息大小限制吗" class="headerlink" title="有了解过RocketMQ的消息大小限制吗"></a>有了解过RocketMQ的消息大小限制吗</h3><h2 id="简单介绍一下RBAC的原理"><a href="#简单介绍一下RBAC的原理" class="headerlink" title="简单介绍一下RBAC的原理"></a>简单介绍一下RBAC的原理</h2><p>直接看JavaGuide的原理就行，没难度</p>
<h2 id="自定义任务引擎"><a href="#自定义任务引擎" class="headerlink" title="自定义任务引擎"></a>自定义任务引擎</h2><p>#todo </p>
<ul>
<li><input disabled type="checkbox"> 学学 XXL-JOB<br>为什么使用了Quartz而不是XXL-JOB<br>因为公司的陈年老项目</li>
</ul>
<h2 id="有多线程的经历吗，简单举例有哪几种线程池"><a href="#有多线程的经历吗，简单举例有哪几种线程池" class="headerlink" title="有多线程的经历吗，简单举例有哪几种线程池"></a>有多线程的经历吗，简单举例有哪几种线程池</h2><p>回答：有看过线程池的的源码，然后线程池八股，顺便穿插了一些源码里的东西。</p>
<h2 id="ForkJoinPool适合哪些场景"><a href="#ForkJoinPool适合哪些场景" class="headerlink" title="ForkJoinPool适合哪些场景"></a>ForkJoinPool适合哪些场景</h2><ol>
<li>递归任务：任务可分，可并行处理，例如递归和分支</li>
<li>大规模的数据处理：当需要处理大量数据和数据分块时</li>
<li>CPU密集型任务：适合大量计算的场景，能够利用多核处理器的优势</li>
<li>任务之间相互独立：任务之间没有太多依赖关系，可以独立执行时，使用ForkJoinPool可以最大化并行度减少任务之间的等待时间</li>
</ol>
<p>#todo </p>
<ul>
<li><input disabled type="checkbox"> forkJoin的源码和parralelStream的原理看看<br>简单讲解一下，顺便说ParallelStream的底层就是ForkJoin</li>
</ul>
<h2 id="并行流有什么缺点"><a href="#并行流有什么缺点" class="headerlink" title="并行流有什么缺点"></a>并行流有什么缺点</h2><ol>
<li>线程开销：底层是使用ForkJoinPool来管理线程的，需要创建和管理线程，任务数量较少时会影响性能</li>
<li>线程安全：如果操作不是线程安全的可能会导致</li>
<li>非确定性：执行顺序不确定，所以每次执行的结果可能不同</li>
<li>资源竞争：会使用共享的ForkJoinPool，如果别的任务也使用这个并行流，那么会出席那资源竞争，同时使用的</li>
<li>调试困难：</li>
<li>不适合强依赖性的任务</li>
</ol>
<h2 id="RPC相关"><a href="#RPC相关" class="headerlink" title="RPC相关"></a>RPC相关</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ol>
<li>注册中心</li>
<li>服务提供者</li>
<li>服务消费者</li>
<li>剩下的就是其他东西，SPI之类的</li>
</ol>
<h3 id="有参考过dubbo和其他吗"><a href="#有参考过dubbo和其他吗" class="headerlink" title="有参考过dubbo和其他吗"></a>有参考过dubbo和其他吗</h3><p>有</p>
<h3 id="有处理限流吗"><a href="#有处理限流吗" class="headerlink" title="有处理限流吗"></a>有处理限流吗</h3><p>还没实现</p>
<h3 id="有哪些实现的注册中心"><a href="#有哪些实现的注册中心" class="headerlink" title="有哪些实现的注册中心"></a>有哪些实现的注册中心</h3><p>目前只实现了zookeeper，但是完全可以使用nacos来实现，同时看见一个使用了etcd来实现的，但是时间关系，就没实现</p>
<h3 id="工具有落地到哪个项目吗"><a href="#工具有落地到哪个项目吗" class="headerlink" title="工具有落地到哪个项目吗"></a>工具有落地到哪个项目吗</h3><p>目前在写一个微服务项目，后续可能会使用他来替换掉OpenFeign</p>
<h2 id="Token过期如何处理的"><a href="#Token过期如何处理的" class="headerlink" title="Token过期如何处理的"></a>Token过期如何处理的</h2><p>使用Redis的自动过期。。。<br>每次访问续写一次，退出登录删除token</p>
<h2 id="Redis集群和哨兵的区别"><a href="#Redis集群和哨兵的区别" class="headerlink" title="Redis集群和哨兵的区别"></a>Redis集群和哨兵的区别</h2><p>集群是数据分片，目的是高可用性<br>哨兵是监控主节点和从节点，不存储数据，故障转移时发起投票之类的</p>
<h2 id="大模型的API调用了哪些"><a href="#大模型的API调用了哪些" class="headerlink" title="大模型的API调用了哪些"></a>大模型的API调用了哪些</h2><p>答：调用了图片识别相关的</p>
<h2 id="使用的什么进行项目管理"><a href="#使用的什么进行项目管理" class="headerlink" title="使用的什么进行项目管理"></a>使用的什么进行项目管理</h2><p>gitea</p>
<h2 id="git-rebase命令了解吗"><a href="#git-rebase命令了解吗" class="headerlink" title="git rebase命令了解吗"></a>git rebase命令了解吗</h2><h2 id="打包相关"><a href="#打包相关" class="headerlink" title="打包相关"></a>打包相关</h2><p>docker-compose，为什么没有使用Jenkins之类的。。服务器太烂了</p>
<h2 id="问课结束了吗，毕业论文啥时候开始，目前在哪，何时过来"><a href="#问课结束了吗，毕业论文啥时候开始，目前在哪，何时过来" class="headerlink" title="问课结束了吗，毕业论文啥时候开始，目前在哪，何时过来"></a>问课结束了吗，毕业论文啥时候开始，目前在哪，何时过来</h2><p>老问题了，直接 结束了，大四，在学校，马上过来</p>
<h2 id="反问："><a href="#反问：" class="headerlink" title="反问："></a>反问：</h2><ol>
<li>是驻场吗，是外包吗</li>
<li>业务相关</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/02/19/24/</url>
    <content><![CDATA[<p>这是你的新<em>仓库</em>。</p>
<p>写点笔记，[[创建链接]]，或者试一试<a href="https://help.obsidian.md/Plugins/Importer">导入器</a>插件!</p>
<p>当你准备好了，就将该笔记文件删除，使这个仓库为你所用。</p>
]]></content>
  </entry>
  <entry>
    <title>快手数据部门-日常实习</title>
    <url>/2025/03/11/28/</url>
    <content><![CDATA[<h1 id="2025-3-10-一面-秒过，晚上约第二天下午二面"><a href="#2025-3-10-一面-秒过，晚上约第二天下午二面" class="headerlink" title="2025.3.10 一面(秒过，晚上约第二天下午二面)"></a>2025.3.10 一面(秒过，晚上约第二天下午二面)</h1><p>比较抽象，面试官一直说感觉你们这一届有点卷，疯狂打断</p>
<ol>
<li>自我介绍</li>
<li>介绍代表性的项目：</li>
<li>下游数据上报时，在多个上报中，如何处理数据一致性</li>
<li>直接查表的话，对这张表的库造成大量压力，为什么可以查但是要同步到本地呢？</li>
<li>实习的时候可以多思考，全链路，思考很多的数据一致性处理之类的，不要只停留在理论，该问就问</li>
<li>Redis做分布式锁有什么不好的地方</li>
<li>如果数据同步到一半，出现了问题，如何处理一致性和判断上一次同步的断点呢/断点重新同步如何设计的？</li>
<li>如果同步过程中，同步没有失败，Redis过期了还没有执行完，那么如何处理</li>
<li>手撕：二叉树的直径、k个一组反转链表</li>
<li>工作室情况</li>
<li>反问：部门业务</li>
</ol>
<h1 id="2025-3-11-二面-下午五点面，第二天早上9点通知三面"><a href="#2025-3-11-二面-下午五点面，第二天早上9点通知三面" class="headerlink" title="2025.3.11 二面(下午五点面，第二天早上9点通知三面)"></a>2025.3.11 二面(下午五点面，第二天早上9点通知三面)</h1><p>手撕了三道算法</p>
<ol>
<li>自我介绍</li>
<li>介绍一下线程池，有哪些线程池(被八股，巴拉巴拉，背到一半给我打断了)</li>
<li>CompletableFuture和Future的区别</li>
<li>forkjoin线程池原理，为什么CF要使用forkjoin线程池</li>
<li>为什么使用RocketMQ</li>
<li>如何手动通过Kafka实现事务消息和死信队列</li>
<li>除了Redis还有哪些可以实现ZooKeeper，实现原理</li>
<li>手撕：大数相加(字符串模拟)、寻找重复子树、岛屿数量</li>
<li>反问：做过多少算法题、是日常吗-&gt;问hr，还有三面吗-&gt;应该有，面试结果多久可以出-&gt; 问hr</li>
<li>对未来的指点：多学点技术、大数据方面的可以看一看。</li>
</ol>
<h1 id="2025-3-12-三面-下午五点，面的好累，许愿吧，没有运气也白搭"><a href="#2025-3-12-三面-下午五点，面的好累，许愿吧，没有运气也白搭" class="headerlink" title="2025.3.12 三面 (下午五点，面的好累，许愿吧，没有运气也白搭)"></a>2025.3.12 三面 (下午五点，面的好累，许愿吧，没有运气也白搭)</h1><ol>
<li>自我介绍</li>
<li>实习地点和市场</li>
<li>讲讲最有挑战的项目：我真的好想把美的这个垃圾项目换掉啊，屎山</li>
<li>RPC相关(自己去看文档)</li>
<li>介绍一下一致性哈希算法</li>
<li>如果节点挂掉，是如何从哈希环中找到替代节点(还有节点重新哈希的位置如何确定)</li>
<li>很多的节点宕机了，下一个节点需要拆分(虚拟节点)如何确定新的节点应该哈希到哪个位置。</li>
<li>看源码的时候有觉得哪些比较有意思的源码(我讲的CF和FutureTask) <code>public class CompletableFuture&lt;T&gt; implements Future&lt;T&gt;, CompletionStage&lt;T&gt; </code></li>
<li>围绕着Java的特性，你觉得Java是一种什么样的语言</li>
<li>GC(疯狂打断)</li>
<li>如何确定需要被清除的垃圾</li>
<li>哪些节点可以作为GC Roots</li>
<li>简单介绍一下本地方法栈</li>
<li>本地方法在栈中是怎么存呢</li>
<li>方法内联？</li>
<li>G1(Garbage First)，介绍一下他的实现还有使用的算法</li>
<li>如何判断哪些Region需要进行回收、如何判断哪些Region需要进行回收、Region回收的评估标准(不会)</li>
<li>Synchronized和ReentrantLock底层</li>
<li>手写生产者消费者模式(多线程)</li>
<li>连续子数组的最大和</li>
<li>反问：还有新的一轮技术面的：没有了</li>
<li>多久出结果：很快，等通知吧</li>
<li>有哪些指点吗：挺不错的，没啥指点的，看下来比同龄人优秀不少</li>
</ol>
<h2 id="手撕生产者消费者模式-多线程并发版，synchronized的使用方式"><a href="#手撕生产者消费者模式-多线程并发版，synchronized的使用方式" class="headerlink" title="手撕生产者消费者模式(多线程并发版，synchronized的使用方式)"></a>手撕生产者消费者模式(多线程并发版，synchronized的使用方式)</h2>]]></content>
  </entry>
</search>
