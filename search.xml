<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql</title>
      <link href="/2023/08/02/hou-duan/mysql/"/>
      <url>/2023/08/02/hou-duan/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p>打开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数据类型</strong></p><p>关系型数据库：建立在关系模型基础上，由多张相互链接的二维表组成的数据库</p><ol><li><p><strong>数值类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TINYINT 1byte -128 - 127  0 - 255 /*后面加上unsigned 即可指定为无符号*/SMALLINT 2MEDIUMINT 3INT 4BIGINT 8FLOAT 4DOUBLE 8DECIMAL 看精度和标度  125.25 精度为5 标度为2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>字符串类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHAR() 定长字符串VARCHAR 根据内容计算字符串长度TINYTEXT 短文本字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>日期类</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DATE YYYY-MM-DDTIME HH:MM:SSYEAR YYYYDATETIME YYYY-MM-DD HH:MM:SSTIMESTAMP YYYY-MM-DD HH:MM:SS 时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>时间戳记</strong>或称为<strong>时间标记</strong>（英语：timestamp）是指字符串或编码信息用于辨识记录下来的时间日期。国际标准为<a href="https://zh.wikipedia.org/wiki/ISO_8601" title="ISO 8601">ISO 8601</a>。</p><p>时间戳记的范例如下：</p><ul><li>2016-12-25T00:15:22Z</li><li>2005-10-30 10:45&nbsp;<a href="https://zh.wikipedia.org/wiki/UTC" title="UTC">UTC</a></li><li>Sat Jul 23 02:16:57 2005</li><li>2016年12月25日 (日) 00:14 (UTC)</li></ul></blockquote></li></ol><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>注释 # 或者 /**/</p><ol><li>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头 ^c501f6</li><li>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</li><li>DQL (Data Query Language 数据查询语言 )用于查询数据</li><li>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</li></ol><h3 id="DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头"><a href="#DDL-Data-Definition-Language-数据定义语言）用于操作对象及对象本身，这种对象包括数据库-表对象，及视图对象，表头" class="headerlink" title="DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头"></a>DDL (Data Definition Language 数据定义语言）用于操作对象及对象本身，这种对象包括数据库,表对象，及视图对象，表头</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES 查询所有的数据库SELECT DATABASE(); 查询当前所处数据库CREATE DATABASE  创建DROP DATABASE XXX 删除USE xxx  使用数据库SHOW TABLES 查询当前数据库的所有表DESC 表名   查询表结构SHOW CREATE TABLE 表明 查询指定表的建表语句字段1 字段1类型 COMMENT 'XXX',/*注释*/     ........    ) COMMENTT 'XXX'/*注释可以省略*//*字符串类型是varchar(指定的字符长度)*//*修改表*/ALTER TABLE tablename 1.ADD字段名 类型 comment xxx 添加表头2.CHANGE 旧 新 类型 comment xxx 修改3.DROP name4.RENAME TO name 修改表名DROP TABLE name 删除TRUNCATE TABLE name 删除并重新创建同名表，数据依旧会删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据"><a href="#DML-（Data-Manipulation-Language-数据操控语言-用于操作数据库对象对象中包含的数据" class="headerlink" title="DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据"></a>DML （Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*添加数据*/INSERT INTO 表名(字段名) VALUES (数值) 给指定字段添加数据INSERT INTO 表名  VALUES (数值) 给所有字段加上数据INSERT INTO 表明(字段名) VALUES (数据) ,(数据)INSERT INTO 表明 VALUE (数据),(数据).../*修改*/UPDATE 表名 SET 字段名=值, .... WHERE 条件DELETE 表名 (WHERE 条件) /*删除*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>语句：INSERT</p><p>前提:<em><strong><u>获得权限</u></strong></em></p><p>用法：</p><blockquote><p> 插入完整的行；</p><p> 插入行的一部分；</p><p> 插入某些查询的结果。</p></blockquote><p>语法：</p>   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers VALUES('1000000006',  'Toy Land',  '123 Any Street',  'New York',  'NY',  '11111',  'USA',  NULL,  NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   更加安全的操作,将要插入的列也列出</p>   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO Customers(cust_id,  cust_name,  cust_address,  cust_city,  cust_state,  cust_zip,  cust_country,  cust_contact,  cust_email) VALUES('1000000006',  'Toy Land',  '123 Any Street',  'New York',  'NY',  '11111',  'USA',  NULL,  NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>插入列的一部分，语法和上面一样，只是不需要插入的列可以省略不写，列名不写，对应的数据也不写</p></li><li><p>插入检索出的数据</p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id,  cust_contact,  cust_email,  cust_name,  cust_address,  cust_city,  cust_state,  cust_zip,  cust_country FROM CustNew;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>它使用的是列的位置，因此 SELECT 中的第一列（不管</u></p><p><u>其列名）将用来填充表列中指定的第一列，第二列将用来填充表列中</u></p><p><u>指定的第二列，如此等等</u></p><p>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</p><p>INSERT 通常只插入一行。要插入多行，必须执行多个 INSERT 语句。</p><p>INSERT SELECT是个例外，它可以用一条INSERT插入多行，不管SELECT</p><p>语句返回多少行，都</p></li><li><p>从一个表复制到另一个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE CustCopy AS SELECT * FROM Customers;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>SELECT INTO 是试验新 SQL 语句前进行表复制的很好工具。先进行复</u></p><p><u>制，可在复制的数据上测试 SQL 代码，而不会影响实际的数据。</u></p><h2 id="更新与删除"><a href="#更新与删除" class="headerlink" title="更新与删除"></a>更新与删除</h2><h3 id="更新：UPDATE-注意要用WHERE-否则会出事"><a href="#更新：UPDATE-注意要用WHERE-否则会出事" class="headerlink" title="更新：UPDATE 注意要用WHERE 否则会出事"></a>更新：UPDATE 注意要用WHERE 否则会出事</h3><ol><li><p>更新特定行</p><p>语法：</p><p> 要更新的表；</p><p> 列名和它们的新值；</p><p> 确定要更新哪些行的过滤条件。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers SET cust_email = 'kim@thetoystore.com' WHERE cust_id = '1000000005';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>UPDATE 语句以 WHERE 子句结束，它告诉 DBMS 更新哪一行。没有 WHERE</p><p>子句，DBMS 将会用这个电子邮件地址更新 Customers 表中的所有行，</p><p>这不是我们希望的。</p></blockquote></li><li><p>更新特定列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE Customers SET cust_contact = 'Sam Roberts',  cust_email = 'sam@toyland.com' WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在更新多个列时，只需要使用一条 SET 命令，每个“列=值”对之间用</p><p>UPDATE 语句中可以使用子查询，使得能用 SELECT 语句检索出的数据</p><p>更新列数据</p><p>要删除某个列的值，可设置它为 NULL（假如表定义允许 NULL 值）</p></blockquote></li></ol></li></ol><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>DELETE  注意WHERE 缺少是会出事的</p><p> 从表中删除特定的行</p><p> 从表中删除所有行。</p><ol><li><p>删除特定行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM Customers WHERE cust_id = '1000000006';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE</p><p>不删除表本身</p><p>果想从表中删除所有行，不要使用 DELETE。可使用 TRUNCATE +TABLE +表名</p><p>语句，它完成相同的工作，而速度更快（因为不记录数据的变动）。</p></blockquote></li><li><p>删除全部行</p><blockquote><p>如果执行 DELETE 语句而不带 WHERE</p><p>子句，表的所有数据都将被删除</p></blockquote></li></ol><h3 id="DQL-Data-Query-Language-数据查询语言-用于查询数据"><a href="#DQL-Data-Query-Language-数据查询语言-用于查询数据" class="headerlink" title="DQL (Data Query Language 数据查询语言 )用于查询数据"></a>DQL (Data Query Language 数据查询语言 )用于查询数据</h3><blockquote><p>SELECT + 字段列表<br>FROM  表名列表<br>WHERE 条件列表<br>[[mysql#^aa4a30|GROUP BY 分组字段列表]]<br>HAVING 分组后条件列表<br>ORDER BY 排序<br>LIMIT  分页参数<br>[[mysql#^1cd456|AS 设置别名]]<br>WHRER 和 HAVING 的区别，WHERE 在分组之前起作用，HAVING在分组之后起作用</p></blockquote><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1，... FROM 表 或者 SELECT * FROMSELECT DISTINCT 去重SELECT 字段 AS 别名  ... FROM 设置字段的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>条件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT XXX FROM XXX WHERE +&gt; &gt;= &lt; &lt;= = &lt;&gt;(不等于，相当于!=) BETWEEN ... AND ... IN (...) 满足列表中的其一LIKE 包含这个字符 模糊匹配'%a'     //以a结尾的数据'a%'     //以a开头的数据'%a%'    //含有a的数据'_a_'    //三位且中间字母是a的'_a'     //两位且结尾字母是a的'a_'     //两位且开头字母是a的'___'    //含有三个字符的'[]'     //类似正则表达式'[^]'    //不包含括号之内的单个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合函数:将一列数据作为一个整体，进行纵向计算</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT +count maxminavg 平均值sum+ 字段列表+  FROM 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分组查询 ^aa4a30</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表 WHERE GROUP BY 分组字段名 HAVING 分组之后的过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM 表名 ORDER BY 字段1 排序方式(ASC升序，DESC 降序)，字段2 XXX <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分页查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT xx FROM XXX LIMIT 起始索引，查询记录数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限"><a href="#DCL-（Data-Control-Language-数据控制语句）-用于操作数据库对象的权限" class="headerlink" title="DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限"></a>DCL （Data Control Language 数据控制语句） 用于操作数据库对象的权限</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FORM userCREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'/*使用%来指定任意主机都可以访问*/ALTER USER '用户名' @ '主机名' IDENTIFIED WITH  mysql_native_password BY '新密码'  修改密码DROP USER '用户名' @ '主机名' 删除用户/*权限控制*/SHOW GRANT FOR '用户名'@'主机名'GRANT 权限列表 ON 数据库名 表名 TO '用户名'@'主机名'取消权限REVOKE 权限列表 ON 数据库名 表名 FROM '用户名'@'主机名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数-配合SELECT-使用"><a href="#函数-配合SELECT-使用" class="headerlink" title="函数 配合SELECT 使用"></a>函数 配合SELECT 使用</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CONCAT (s1,s2...) 拼接LOWER(str)UPPER(str)LPAD(str,n,pad) 左填充，用pad来填充原字符串，填充n次RPAD 右填充TRIM(str) 去掉首位的空格SUBSTRING(str,start,len) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CEIL() 向上取整FLOOR() 向下取整MOD(x,y) x % yRAND() 0-1内的随机数ROUND(x,y) 四舍五入保留y位小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a><em>日期函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CURDATE() 返回当前日期CURTIME()NOW() 当前日期和时间YEAR(date) 获取指定日期的年份MONTH(date)DAY(date)DATE_ADD(date,interval expr type) 返回一个日期/时间加上时间间隔expr后的时间DATEDIFF(date1,date2) 返回两个日期相差的天数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a><em>流程函数</em></h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">if (value,t,f) 如果value true 返回t 否则返回fIFNULL(v1,v2) 如果v1不为空返回v1,否则返回v2CASE WHEN (v1) THEN (res1)WHEN (v2) THEN (res2)....ELSE default END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约束-作用域表中字段上的规则，用于限制存储在表中的数据"><a href="#约束-作用域表中字段上的规则，用于限制存储在表中的数据" class="headerlink" title="约束 作用域表中字段上的规则，用于限制存储在表中的数据"></a>约束 作用域表中字段上的规则，用于限制存储在表中的数据</h2><p>目的是未来保证数据库中数据的正确性和完整性有效性<br>分类</p><blockquote><p>非空约束，字段不能为null     关键字: NOT NULL<br>唯一约束 字段不能重复           UNIQUE<br>主键约束 主键是一行数据的唯一表示，要求非空且唯一 PRIMARY KEY<br>默认约束 使用默认值 DEFAULT<br>检查约束 保证字段值满足某一个条件 CHECK<br>外键约束 来让两整表之间建立练习，保证数据的一致性 FOREIGN KEY</p></blockquote><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user  (      name   varchar(10) not null unique comment '姓名不为空且不能重复',      age    int check ( age &gt; 0 &amp;&amp; age &lt;= 120) comment '年龄检查为0-120',      status char(1) default '1' comment '状态默认为1',      gender char(1) comment '性别'  ) comment '用户表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外键</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.建表时CREATE TABLE ( .... .... CONSTRAINT 外键名称 FOREGIN KEY (外键字段名) REFERENCES 主表列名)2. ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除/更新</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表 ADD CONSTRAINT 外键名(自定义) FOREIGN KEY (本表)字段名 REFERENCES 外表+(字段名) ON UPDATE 更新时的操作  ON DELETE 删除时要执行的操作操作有NO ACTION 在父表中删除/更新时，首先检查，该记录是否有外键，如果有则不允许更新或者删除RESTRICT  同 NO ACTION CASCADE 可以删除/更新外键在子表中的记录SET NULL 设置子表中的外键记录为NULLSET DEFAULT 设置为一个默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote><p>多表关系：<br>一对多 多的一方建立外键指向一<br>多对多 建立第三张中间表，中间表至少包含两个外键，分别关联两方<br>一对一 任意一方加上外键并设置为UNIQUE</p></blockquote><h3 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h3><p>查询嵌套，括号内的查询结果作为括号外的条件 例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_id FROM Orders WHERE order_num IN (SELECT order_num  FROM OrderItems  WHERE prod_id = 'RGAN01');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name,  cust_state,  (SELECT COUNT(*)  FROM Orders  WHERE Orders.cust_id = Customers.cust_id) AS orders FROM Customers ORDER BY cust_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标量子查询<br>子查询返回单个值<br>列子查询，返回结果是一列或者多行<br>常用操作符号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INNOT INANYSOME  和ANY相同ALL <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行子查询，返回一行或者是多列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">= &lt; &gt; IN NOT IN <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表子查询<br>返回多行多列<br>常用IN 来进行查询</p><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><ol><li>内联结</li></ol><p>比如</p><p>进行数据存储的时候，会指定一种联系方式</p><p>可以类比为散列表或者map</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正式用法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT vend_name, prod_name, prod_price FROM Vendors INNER JOIN Products  ON Vendors.vend_id = Products.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>on之后的式匹配规则，同时为了防止冲突，尽量用点来获取每个不同的库的数据</p><p>联结多个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_name, vend_name, prod_price, quantity FROM OrderItems, Products, Vendors WHERE Products.vend_id = Vendors.vend_id  AND OrderItems.prod_id = Products.prod_id  AND order_num = 20007;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.自联结</p><p><u>联结中仍然可以使用内聚函数</u></p><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id,  COUNT(Orders.order_num) AS num_ord FROM Customers INNER JOIN Orders  ON Customers.cust_id = Orders.cust_id GROUP BY Customers.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一表内联结自己</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM Customers AS c1, Customers AS c2 WHERE c1.cust_name = c2.cust_name  AND c2.cust_contact = 'Jim Jones';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.自然联结</p><blockquote><p>自然联结排除多次出现，使每一列只返回一次。</p></blockquote><blockquote><p>自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符</p><p>（SELECT *），而对其他表的列使用明确的子集来完成。</p></blockquote><p>要自己完成，系统不提供</p><p>事实上，我们迄今为止建立的每个内联结都是自然联结，很可能永远都</p><p>不会用到不是自然联结的内联结。</p><p>4.外联结</p><blockquote><p>联结包含了那些在相关表中没有关联行的行。这种联结</p><p>称为外联结。</p></blockquote><p>语法：</p><p>內联结：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num FROM Customers INNER JOIN Orders  ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外联结：<br>使用场景</p><ul><li><p><input disabled="" type="checkbox"> 对每个顾客下的订单进行计数，包括那些至今尚未下订单的顾客；</p></li><li><p><input disabled="" type="checkbox"> 列出所有产品以及订购数量，包括没有人订购的产品；</p></li><li><p><input disabled="" type="checkbox"> 计算平均销售规模，包括那些至今尚未下订单的顾客。</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT Customers.cust_id, Orders.order_num FROM Customers LEFT OUTER JOIN Orders  ON Customers.cust_id = Orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在使用 OUTER </p><p>JOIN 语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表</p><p>（RIGHT 指出的是 OUTER JOIN 右边的表，而 LEFT 指出的是 OUTER JOIN</p><p>左边的表）。</p><p>也就是left 将要联结左侧的那个表全部选出</p><p>right 将右侧的那个表全选出</p></blockquote><p><strong>全外联结</strong></p><p><u><em>Access、MariaDB、MySQL、Open Office Base 和 SQLite 不支持 FULL</em></u></p><blockquote><p>还存在另一种外联结，就是全外联结（full outer join），它检索两个表中</p><p>的所有行并关联那些可以关联的行。与左外联结或右外联结包含一个表</p><p>的不关联的行不同，全外联结包含两个表的不关联的行。</p></blockquote><h2 id="联结使用条件"><a href="#联结使用条件" class="headerlink" title="联结使用条件"></a>联结使用条件</h2><blockquote><p><strong><u> 注意所使用的联结类型。一般我们使用内联结，但使用外联结也有效。</u></strong></p><p><u><strong> 关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何</strong></u><u><strong>种语法（大多数 DBMS 使用这两课中描述的某种语法）。</strong></u></p><p><u><strong> 保证使用正确的联结条件（不管采用哪种语法），否则会返回不正确</strong></u></p><p><u><strong>的数据。</strong></u></p><p><u><strong> 应该总是提供联结条件，否则会得出笛卡儿积。</strong></u></p><p><u><strong> 在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结</strong></u></p><p><u><strong>类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们</strong></u></p><p><strong><u><strong>前分别测试每个联结。这会使故障排除更为简单。</strong></u></strong> </p></blockquote><h3 id="join区别"><a href="#join区别" class="headerlink" title="join区别"></a>join区别</h3><p><img src="/2023/08/02/hou-duan/mysql/join.jpg"></p><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p>在使用时直接用AS +别名就可以用了 ^1cd456</p><p><strong>只能每次用的时候起一次别名并且当时使用</strong></p><p>下一个语句别名就不能用了，要重新起名字</p><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p>语法：</p><p>适用于从多个不同的表中挑选不同的列</p><blockquote><p>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过，</p><p>各个列不需要以相同的次序列出）</p></blockquote><blockquote><p>UNION 从查询结果集中自动去除了重复的行；换句话说，它的行为与一</p><p>条 SELECT 语句中使用多个 WHERE 子句条件一样。</p><p>这是 UNION 的默认行为，如果愿意也可以改变它。事实上，如果想返回</p><p>所有的匹配行，可使用 UNION ALL 而不是 UNION</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_state IN ('IL','IN','MI') UNION SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_name = 'Fun4All';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>SELECT 语句的输出用 ORDER BY 子句排序。在用 UNION 组合查询时，只</p><p>能使用一条 ORDER BY 子句，它必须位于最后一条 SELECT 语句之后。对</p><p>于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条 ORDER BY 子句</p><p>用它来排序所有 SELECT 语句返回的所有结果。</p></blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE A(  prod_id CHAR(10) NOT NULL,  vend_id CHAR(10) NOT NULL,  prod_name CHAR(254) NOT NULL,  prod_price DECIMAL(8,2) NOT NULL,  prod_desc VARCHAR(1000) NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要指定行列,并且后跟列的数据</p><p>类型</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders (  order_num INTEGER NOT NULL,  order_date DATETIME NOT NULL,  cust_id CHAR(10) NOT NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不要把 NULL 值与空字符串相混淆。NULL 值是没有值，不是空字符串。</p><p>如果指定’’（两个单引号，其间没有字符），这在 NOT NULL 列中是允</p><p>许的。空字符串是一个有效的值，它不是无值。NULL 值用关键字 NULL</p><p>而不是空字符串</p><p>默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定</p></blockquote><p>更新表定义，可以使用 ALTER TABLE 语句。</p><blockquote><p>使用 ALTER TABLE 更改表结构，必须给出下面的信息：</p><p> 在 ALTER TABLE 之后给出要更改的表名（该表必须存在，否则将</p><p>出错）；</p><p> 列出要做哪些更改</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors ADD vend_phone CHAR(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>更改或删除列、增加约束或增加键，这些操作也使用类似的语法（注意，</p><p>下面的例子并非对所有 DBMS 都有效）：</p><p>输入▼</p><p>ALTER TABLE Vendors </p><p>DROP COLUMN vend_phone; </p></blockquote><blockquote><p><u><em><strong>使用 ALTER TABLE 要极为小心，应该在进行改动前做完整的备份（表</strong></em></u></p><p><u><em><strong>结构和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的</strong></em></u></p><p><u><em><strong>列，也许无法删除它们。类似地，如果删除了不应该删除的列，可能</strong></em></u></p><p><u><em><strong>会丢失该列中的所有数据。</strong></em></u></p></blockquote><p>删除表（删除整个表而不是其内容）非常简单，使用 DROP TABLE 语句即可：</p><p>DELETE  只删除表的内容不删除表本身</p><h2 id="重新命名"><a href="#重新命名" class="headerlink" title="重新命名"></a>重新命名</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE oldname RENAME TO newname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p><u><em><strong>视图为虚拟的表。它们包含的不是数据而是根据需要检索数据的查询。</strong></em></u></p><p><u><em><strong>视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新</strong></em></u></p><p><u><em><strong>格式化或保护基础数据。</strong></em></u></p></blockquote><p>用视图将联结集合起来，也就是一个子查询，相当于一个API</p><p>创建 视图用 CREATE VIEW 语句来创建。与 CREATE TABLE 一样，CREATE VIEW</p><p>删除 删除视图，可以使用 DROP 语句，其语法为 DROP VIEW viewname;。</p><p>覆盖（或更新）视图，必须先删除它，然后再重新创建。</p><p>用法：</p><p>建立视图</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW ProductCustomers AS SELECT cust_name, cust_contact, prod_id FROM Customers, Orders, OrderItems WHERE Customers.cust_id = Orders.cust_id  AND OrderItems.order_num = Orders.order_num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句创建一个名为 ProductCustomers 的视图，它联结三个表，返</p><p>回已订购了任意产品的所有顾客的列表。</p><p>使用视图</p><p>使用时，</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT cust_name, cust_contact FROM ProductCustomers WHERE prod_id = 'RGAN01';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以用于统一格式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW VendorLocations AS SELECT RTRIM(vend_name) || ' (' || RTRIM(vend_country) || ')'  AS vend_title FROM Vendors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后可用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM VendorLocations;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用于过滤也一样</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW CustomerEMailList AS SELECT cust_id, cust_name, cust_email FROM Customers WHERE cust_email IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM CustomerEMailList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>计算字段</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW OrderItemsExpanded AS SELECT order_num,  prod_id,  quantity, item_price,  quantity*item_price AS expanded_price FROM OrderItems;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM OrderItemsExpanded WHERE order_num = 20008;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="存储（不会）"><a href="#存储（不会）" class="headerlink" title="存储（不会）"></a>存储（<u><em><strong>不会</strong></em></u>）</h2><blockquote><p>可以创建存储过程。简单来说，存储过程就是为以后使用而保存的一条</p><p>或多条 SQL 语句。可将其视为批文件，虽然它们的作用不仅限于批处理</p><p> 通过把处理封装在一个易用的单元中，可以简化复杂的操作（如前面</p><p>例子所述）。</p><p> 由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如</p><p>果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都</p><p>是相同的。</p></blockquote><blockquote><p>EXECUTE AddNewProduct( ‘JTS01’, </p><p>‘Stuffed Eiffel Tower’, </p><p>6.49, </p><p>‘Plush stuffed toy with the text La </p><p>➥Tour Eiffel in red white and blue’ ); </p></blockquote><h2 id="管理事务处理（不会深入学习的时候再看）"><a href="#管理事务处理（不会深入学习的时候再看）" class="headerlink" title="管理事务处理（不会深入学习的时候再看）"></a>管理事务处理（不会深入学习的时候再看）</h2><blockquote><p>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么</p><p>完全执行，要么完全不执行，来维护数据库的完整性</p></blockquote><blockquote><p> 事务（transaction）指一组 SQL 语句；</p><p> 回退（rollback）指撤销指定 SQL 语句的过程；</p><p> 提交（commit）指将未存储的 SQL 语句结果写入数据库表；</p><p> 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），</p><p>可以对它发布回退（与回退整个事务处理不同）。</p></blockquote><p><strong>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT</strong></p><p><strong>语句（回退 SELECT 语句也没有必要），也不能回退 CREATE 或 DROP 操</strong></p><p><strong>作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</strong></p><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><blockquote><p>有时，需要在检索出来的行中前进或后退一行或多行，这就是游标的用</p><p>途所在。游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，</p><p>它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储了</p><p>游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p></blockquote><p>游标的选项和特性</p><blockquote><p> 能够标记游标为只读，使数据能读取，但不能更新和删除。</p><p> 能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、</p><p>相对位置等）。</p><p> 能标记某些列为可编辑的，某些列为不可编辑的。</p><p> 规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求</p><p>可访问。</p><p> 指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，</p><p>使数据在游标打开和访问期间不变化。</p></blockquote><p>游标使用</p><blockquote><p> 在使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，</p><p>它只是定义要使用的 SELECT 语句和游标选项。</p><p> 一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT</p><p>语句把数据实际检索出来。</p><p> 对于填有数据的游标，根据需要取出（检索）各行。</p><p> 在结束游标使用时，必须关闭游标，可能的话，释放游标（有赖于具</p><p>体的 DBMS）。</p><p>声明游标后，可根据需要频繁地打开和关闭游标。在游标打开时，可根</p><p>据需要频繁地执行取操作。</p></blockquote><p>创建游标</p><blockquote><p>使用 DECLARE 语句创建游标，这条语句在不同的 DBMS 中有所不同。</p><p>DECLARE 命名游标，并定义相应的 SELECT 语句，根据需要带 WHERE 和</p><p>其他子句。为了说明，我们创建一个游标来检索没有电子邮件地址的所</p><p>有顾客，作为应用程序的组成部分，帮助操作人员找出空缺的电子邮件</p><p>地址</p></blockquote><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE CustCursor CURSOR FOR SELECT * FROM Customers WHERE cust_email IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用游标</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPEN CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭游标</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CLOSE CustCursor DEALLOCATE CURSOR CustCursor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="约束（不会捏）"><a href="#约束（不会捏）" class="headerlink" title="约束（不会捏）"></a>约束（不会捏）</h2><blockquote><p>DBMS 通过在数据库表上施加约束来实施引用完整性。大多数约束是在</p><p>表定义中定义的，如第 17 课所述，用 CREATE TABLE 或 ALTER TABLE</p><p>语句。</p></blockquote><p>主键</p><blockquote><p>我们在第 1 课简单提过主键。主键是一种特殊的约束，用来保证一列（或</p><p>一组列）中的值是唯一的，而且永不改动。换句话说，表中的一列（或</p><p>多个列）的值唯一标识表中的每一行。这方便了直接或交互地处理表中</p><p>的行。没有主键，要安全地 UPDATE 或 DELETE 特定行而不影响其他行会</p><p>非常困难。</p><p>表中任意列只要满足以下条件，都可以用于主键。</p><p> 任意两行的主键值都不相同。</p><p> 每行都具有一个主键值（即列中不允许 NULL 值）。</p><p> 包含主键值的列从不修改或更新。（大多数 DBMS 不允许这么做，但</p><p>如果你使用的 DBMS 允许这样做，好吧，千万别！）</p><p> 主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</p><p>一种定义主键的方法是创建它，如下所示</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Vendors (  vend_id CHAR(10) NOT NULL PRIMARY KEY,  vend_name CHAR(50) NOT NULL,  vend_address CHAR(50) NULL,  vend_city CHAR(50) NULL,  vend_state CHAR(5) NULL,  vend_zip CHAR(10) NULL,  vend_country CHAR(50) NULL );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此例子中，给表的 vend_id 列定义添加关键字 PRIMARY KEY，使其成</p><p>为主键。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE Vendors ADD CONSTRAINT PRIMARY KEY (vend_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里定义相同的列为主键，但使用的是 CONSTRAINT 语法。此语法也可</p><p>以用于 CREATE TABLE 和 ALTER TABLE 语句</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键是表中的一列，其值必须列在另一表的主键中。外键是保证引用完</p><p>整性的极其重要部分。我们举个例子来理解外键</p><blockquote><p>如第 6 课所述，除帮助保证引用完整性外，外键还有另一个重要作用。</p><p>在定义外键后，DBMS 不允许删除在另一个表中具有关联行的行。例</p><p>如，不能删除关联订单的顾客。删除该顾客的唯一方法是首先删除相</p><p>关的订单（这表示还要删除相关的订单项）。由于需要一系列的删除，</p><p>因而利用外键可以防止意外删除数据。</p><p>有的 DBMS 支持称为级联删除（cascading delete）的特性。如果启用，</p><p>该特性在从一个表中删除行时删除所有相关的数据。例如，如果启用</p><p>级联删除并且从 Customers 表中删除某个顾客，则任何关联的订单行</p><p>也会被自动删除。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Orders (  order_num INTEGER NOT NULL PRIMARY KEY,  order_date DATETIME NOT NULL, cust_id CHAR(10) NOT NULL REFERENCES ➥Customers(cust_id) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (inex_col_name,... ) ; UNIQUE 代表的是一个唯一的索引，不可重复SHOW INDEX FROM table_name ;iDROP INDEX index_name ON table_name ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">触发器&gt; 触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发&gt;&gt; 器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。&gt;&gt; 与存储过程不一样（存储过程只是简单的存储 SQL 语句），触发器与单&gt;&gt; 个的表相关联。与 Orders 表上的 INSERT 操作相关联的触发器只在&gt;&gt; Orders 表中插入行时执行。类似地，Customers 表上的 INSERT 和&gt;&gt; UPDATE 操作的触发器只在表上出现这些操作时执行。&gt; 触发器内的代码具有以下数据的访问权：&gt;&gt;  INSERT 操作中的所有新数据；&gt;&gt;  UPDATE 操作中的所有新数据和旧数据；&gt;&gt;  DELETE 操作中删除的数据。&gt;&gt; 根据所使用的 DBMS的不同，触发器可在特定操作执行之前或之后执行。&gt;&gt; 下面是触发器的一些常见用途。&gt;&gt;  保证数据一致。例如，在 INSERT 或 UPDATE 操作中将所有州名转换&gt;&gt; 为大写。&gt;&gt;  基于某个表的变动在其他表上执行活动。例如，每当更新或删除一行&gt;&gt; 时将审计跟踪记录写入某个日志表。```mysqlCREATE TRIGGER customer_state ON Customers FOR INSERT, UPDATE AS UPDATE Customers SET cust_state = Upper(cust_state) WHERE Customers.cust_id = inserted.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="case-来进行多条件判断-不要忘记END"><a href="#case-来进行多条件判断-不要忘记END" class="headerlink" title="case 来进行多条件判断 不要忘记END"></a>case 来进行多条件判断 不要忘记END</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件 THEN 满足的结果 ELSE 不满足结果 END<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行耦合</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE WHEN XXX条件1 THEN Y1 WHEN XXX 条件2 THEN  Y2 WHEN XXX 条件3 THEN Y3 ELSE Y4 END  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>一组操作的集合，不可分割，这些操作要么同时成功，要么同时失败，mysql默认提交方式是自动提交的，所以要改为手动提交才行</p></blockquote><p>方式1</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@autocommit; 查看提交方式，返回为1则为自动提交，否则为手动提交set @@autocommit = 0 ; 设置为手动提交commit 提交rollback 回滚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二<br>事务操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction 或者 begin 开启事务commit 提交rollback 回滚 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务特点</p><ul><li><p><strong>原子性</strong> 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p><strong>一致性</strong> 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性</strong> 数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p><strong>持久性</strong> 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li>脏读 一个事务读到另一个事务还没有提交的数据</li><li>不可重复读，一个事务先后读取一条重复记录，但两次读取的数据不同，成为不可重复读</li><li>幻读 一个事务按照条件查询时，没有对应的数据行但是在插入数据时，这行数据已经存在了，出现了幻影<br>事务隔离级别<br><img src="/2023/08/02/hou-duan/mysql/1.png"><br>可以手动设置系统的隔离级别</li></ul><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(字段1 字段1类型 [ COMMENT 字段1注释 ] ,......字段n 字段n类型 [COMMENT 字段n注释 ]) ENGINE = INNODB [ COMMENT 表注释 ] ;show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>InnoDB特点<br>支持事务，行级锁，外键约束</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><blockquote><p>全局锁：锁定数据库中的所有表。<br>表级锁：每次操作锁住整张表。<br>行级锁：每次操作锁住对应的行数据。</p></blockquote><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><blockquote><p>　1）、length()：mysql里面的length()函数是一个用来获取字符串长度的内置函数。<br>　　2）、char_length()：在mysql内置函数里面查看字符串长度的还有一个函数是char_length()。<br>　　3）、这两个函数的区别是：<br>　　　　a）、length()： 单位是字节，utf8编码下,一个汉字三个字节，一个数字或字母一个字节。gbk编码下,一个汉字两个字节，一个数字或字母一个字节。<br>　　　　b）、char_length()：单位为字符，不管汉字还是数字或者是字母都算是一个字符。</p></blockquote><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">//导包import com.mysql.jdbc.Driver;    import javax.swing.plaf.nimbus.State;  import java.sql.*;  public class Name {  public static void main(String[] args) throws Exception {  //注册驱动程序  Class.forName("com.mysql.jdbc.Driver");  //获取连接  String url = "jdbc:mysql://localhost:3306/t";  String username = "root";  String password = "hutao1224";  Connection conn = DriverManager.getConnection(url,username,password);  //获取执行sql语句的对象  String sql = "insert into employees (name)value ('Amy');";  Statement stmt = conn.createStatement();  //执行sql语句  int count = stmt.executeUpdate(sql);  //处理结果  System.out.println(count);  //释放资源  stmt.close();  conn.close();}    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防止sql注入使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPreparedStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接收用户输入 用户名和密码</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token string">"' or '1' = '1"</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tb_user where username = ? and password = ?"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置？的值</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//?的位置和参数</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不需要传递sql语句了</span>    <span class="token comment">// 判断登录是否成功</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7. 释放资源</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tools</title>
      <link href="/2023/07/04/yu-yan-ji-gong-ju/tools/"/>
      <url>/2023/07/04/yu-yan-ji-gong-ju/tools/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><p><del>Emacs后续学习</del></p><p>快捷键之类的，大部分都是可以组合使用的</p><p>键位练习：命令行输入 vimtutor</p><pre class="line-numbers language-none"><code class="language-none">COMMAND模式:set ic / noic  查找时不/区分大小写使用v选中之后使用:会看见'&lt;'&gt;之后可以通过 w + filename 将选中的字保存为新的文件:! + shell 命令，在不退出vim的情况下使用shell指令:r + filename 将filename文件中的文字写入当前光标所在位置:set number 显示行号:s/old/new/g  替换一行中的old为new,加上g会对整行都起作用，不加g只会修改第一个old:sp 打开当前文件打开多个窗口:qa 关闭所有窗口normal模式A        append  移动到末尾进行inserta                光标之后插入内容ctrl + r redou   撤销hjkl 左下上右v     进入选中块模式V    选中模式，每次选中一行ctrl + w         切换window ctrl + v         选中一个矩形~选中之后，使得大小写互换f + 要查找的字符   find 这一行中光标之后第一个关键字F + xxx           find 反向查找t + xxx           移动到这个字符的前面一个字符T + xxx           反向查找，移动到字符之后一个字符d + 移动的键位     删除  d + $ 删除到(一行)结尾， d + 0 删除到(一行)开头c + 移动的键位     change 删除并进入insert进行修改dd        删除一行cc删除一行并进入insertx             删除当前字符r + 字符          替换当前一个字符R                 连续替换w  word 向后移动一个单词b  向前移动一个单词e  end 移动到下一个单词的最后一个字母o  下方开一个新行O  上方开一个新行0  移动到行首%  从{/[/( 移动到)/]/}$  移动到行末数字 + G         跳转到指定行ctrl + g         显示当前的行数G  最后一行gg 第一行y + 移动的键位   复制yy         复制一行p   粘贴L/M/H 当前页面的lowest/middle/highestctrl + u / d 向上滚动/向下滚动数字 + 键位   执行几次这个键位操作例如:7dw          删除七个单词修饰词a 删除所在的整体例如：{djsafljaflsjlf}123使用di{只剩下了123Fi 内部，例如{skdajsldjas}想要删除{}内的东西只需要ci{/ + 内容      全文查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>切换分支和版本号实际上就是指针的切换</p><p>工作区：磁盘目录</p><p>使用git add把工作区代码加入暂存区 临时储存</p><p>git commit</p><p>将暂存区代码提交到本地库，得到历史版本(代码删除不了了)</p><p>push </p><p>推送到远程库</p><p>github是远程库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init 初始化仓库<span class="token function">git</span> status 查看仓库状态<span class="token comment">##Untracked files: 是未追踪的文件，也就是文件只处于工作区，不处于暂存区和本地库，红色的文字</span><span class="token comment">##绿色的文件名是存在于暂存区</span><span class="token function">git</span> <span class="token function">add</span> + filename 添加到暂存区<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>    全部提交<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-i</span>    添加到暂存区，但是会有提问<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> filename 删除暂存区的文件<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"日志信息"</span> filenaem 提交到本地库<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> + 日志 <span class="token comment">#覆盖最新的一次提交日志</span><span class="token comment">##提交之后git status 会显示为没有提交</span><span class="token function">git</span> reflog 查看提交记录<span class="token function">git</span> log    查看日志，包括提交记录和提交用户<span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span>xxx  只查看某人的提交记录<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline 每一个提交记录只占一行<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--all</span> 通过 ASCII 艺术的树形结构来展示所有的分支<span class="token function">git</span> log --name-status 看哪个文件改变了<span class="token parameter variable">-n</span> n为数字 //最新n个提交<span class="token comment">##版本穿越，修改HEAD指针 本地原文件一并会被修改</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> + 版本号<span class="token function">git</span> tag xxx 提交ID前10个字符，创建一个标签   <span class="token function">git</span> cherry-pick +xx xxx xx 把某几个分支复制到当前分支上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分支操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch 创建分支<span class="token function">git</span> branch <span class="token parameter variable">-v</span> 查看有哪些分支<span class="token parameter variable">-m</span> 改名<span class="token parameter variable">-d</span> 删除<span class="token function">git</span> checkout  + name 切换分支<span class="token function">git</span> merge  + name    将当name合并在当前分支<span class="token function">git</span> reset    撤销提交记录,但是撤销之前的还是存在的，只是处于未加入缓冲区的状态，仅限本地<span class="token function">git</span> revert   撤销更改分享给别人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分支冲突：两个人同时对同一个内容 进行了两个不同的修改，git无法决定新的文件手</p><p>手动修改后，commit 不要再加上文件名了</p><p>HEAD指向的是当前分支</p><p>远程开发：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span> 查看所有远程地址别名<span class="token function">git</span> remote <span class="token function">add</span> 别名 + 远程地址    给远程地址起一个别名，方便切换<span class="token function">git</span> push +别名/库地址 + 分支名    把这个分支推送到远程库<span class="token function">git</span> pull +别名/库地址 + 分支名    把远程的分支名拉取<span class="token function">git</span> clone + 库地址               克隆到本地  会进行：1.拉取代码2.初始化本地库3.创建别名<span class="token comment">###############</span><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote-repo-url<span class="token operator">&gt;</span> 克隆指定分支<span class="token comment">###############</span><span class="token function">git</span> fetch + xxx <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master  获取服务器上最后一次改动，并将本地主分支指向它，实现放弃本地所有改动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他知识</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitk 内建的图形化<span class="token comment">##显示历史记录时，每个提交的信息只显示一行：</span><span class="token function">git</span> config format.pretty oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其他：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span> <span class="token comment">#查看仓库大小</span><span class="token function">git</span> log <span class="token parameter variable">--reverse</span>  <span class="token comment">#从旧到新查看提交记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="gitignore配置"><a href="#gitignore配置" class="headerlink" title=".gitignore配置"></a>.gitignore配置</h2><ul><li>所有以#开头的行会被忽略</li><li>可以使用glob模式匹配</li><li>匹配模式后跟反斜杠（/）表示要忽略的是目录</li><li>如果不要忽略某模式的文件在模式前加”!”</li></ul><p>　　比如：</p><blockquote><p># 此为注释 – 将被 Git 忽略<br><em>.a # 忽略所有 .a 结尾的文件<br>!lib.a # 但 lib.a 除外<br>/TODO # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO<br>build/ # 忽略 build/ 目录下的所有文件<br>doc/</em>.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</p></blockquote><h3 id="工作中常用"><a href="#工作中常用" class="headerlink" title="工作中常用"></a>工作中常用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash //将当前的工作暂存，但是不进行提交<span class="token function">git</span> stash show //显示暂存的内容，哪些被修改了，可指定序号<span class="token function">git</span> stash list //已经暂存的列表和序号<span class="token function">git</span> stash apply + stash@<span class="token punctuation">{</span>数字<span class="token punctuation">}</span> //切换回来继续工作 //可以加上--index 来回到原来文件的暂存状态<span class="token function">git</span> stash drop //丢弃指定的stash<span class="token function">git</span> stash pop //apply + drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><blockquote><p>Scoop是一个Windows系统管理包的开源软件，相比从百度上搜索，从几十条垃圾信息中筛选出一个能用的安装链接，Scoop可以只使用一行代码进行安装</p></blockquote><h2 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h2><p>本人使用的是Windows11系统，已经内置PowerShell了，如果是Windows7系统，需要手动安装新版本的PowerShell</p><p>Scoop 源文件在GitHub上，推荐使用<strong>魔法</strong></p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p>使用快捷键ctrl + x 打开 Windows终端，<strong>不要打开管理员的终端</strong></p><p><img src="/2023/07/04/yu-yan-ji-gong-ju/tools/Scoop.png" alt="Scoop"></p><p>之后输入</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel"># 设置 PowerShell 执行策略Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser# 下载安装脚本irm get.scoop.sh -outfile 'install.ps1'# 执行安装, --ScoopDir 参数指定 Scoop 安装路径 ' ' 内的是自定义的安装目录.\install.ps1 -ScoopDir 'D:\Scoop'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><a href="https://github.com/ScoopInstaller/Scoop">官方文档</a> 或 <a href="https://github.com/ScoopInstaller/Scoop/wiki/Quick-Start">快速入门</a> </p><p><a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">大佬的博客</a></p><p>scoop社区维护的安装路径大部分在国外，所以下载时建议使用魔法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop <span class="token builtin class-name">help</span>  命令参考说明scoop + 动作 + 对象， 对象可以省略scoop +search 搜索软件名<span class="token function">install</span> 安装软件update  更新软件status  查看软件装填uninstall 卸载软件info     查看软件详情home     打开软件主页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><ul><li>查看本机有无安装typora</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop search typora<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Scoop下载软件的安装路径是自定义下载路径中的apps文件夹</strong></p><h2 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h2><pre class="line-numbers language-none"><code class="language-none">$ 匹配末尾位置  ^ 匹配开头位置* 匹配前一个字符的0次或n次  例如： zo* 会匹配z zo zoo zooo z......  等+ 匹配前一个字符一次或多次u        zo+ 匹配 zo zoo zooo zo...... 等? 匹配前一个字符0次或1次           zo?      z  zo{n,m}  匹配 n 到 m 次{n}      n 次? + 其他限定符，表示匹配非贪心，默认的匹配会尽力匹配较长的满足条件的字符串，使用这个后尽力匹配较短的字符串.  匹配任意单个字符//(pattern) 匹配pattern 并捕获他的子表达式(?:pattern) 不捕获子表达式(?=pattern) 前面的字符匹配到之后，判断后面的是否能够匹配pattern 如果能那么就捕获，否则不匹配(?!pattern) 反向捕获，不捕获包含patter的字符串//规则集x|y 匹配x或y[xyz] 字符集，匹配三者的任一字符[^xyz] 反向捕获[a-z]  匹配a-z 中的任一字符[^a-z] 反向匹配不包含的//\b     border 以这个符号之前的字符(串)为边界的匹配\B     非边界匹配\cx    x 为[a-z] 或 [A-Z] 匹配ctrl + x\d     数字匹配，十进制[0-9]\D     [^0-9]\f     匹配换页符\n     换行符\r     匹配回车\w     匹配字类字符 [A-Za-z0-9]\W     非字类字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vim git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2023/06/28/yu-yan-ji-gong-ju/go/"/>
      <url>/2023/06/28/yu-yan-ji-gong-ju/go/</url>
      
        <content type="html"><![CDATA[<h1 id="Go学习"><a href="#Go学习" class="headerlink" title="Go学习 ."></a>Go学习 .</h1><p>Go比起Java和C++ ，他与C的关系更密切</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明多个变量</span><span class="token keyword">var</span> <span class="token punctuation">(</span>v1    v2<span class="token punctuation">)</span><span class="token comment">//变量初始化，无需声明变量类型</span>v1 <span class="token operator">:=</span> <span class="token number">1</span><span class="token comment">//多重赋值</span>v1 <span class="token punctuation">,</span> v2 <span class="token operator">=</span> v2 <span class="token punctuation">,</span> v1 <span class="token comment">//实现交换两个变量，但是只能交换两个同一类型的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>^75e37b</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型:"></a>类型:</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">float32</span> <span class="token comment">//等于c中的float</span><span class="token builtin">float64</span> <span class="token comment">// double</span><span class="token comment">//复数类型，和数学上的表达一样</span><span class="token keyword">var</span> <span class="token punctuation">(</span>v1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5i</span>v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6i</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token comment">//输出为</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1i</span><span class="token punctuation">)</span><span class="token comment">//中文字符在UTF-8中占三个字节</span>s <span class="token operator">:=</span> <span class="token string">"你好"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//数组通过range来遍历，range有两个返回值所以，第一个返回的是数组的下标，第二个是返回的数组的数值，所以要用两个变量来存储</span>s <span class="token operator">:=</span> <span class="token string">"0123456"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//同时注意数组的初始化的方式是这这样的</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span> <span class="token comment">//当不需要某个返回类型时使用_来跳过这个返回类型即可</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><pre class="line-numbers language-none"><code class="language-none">strconv.xxxx即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组定于的一种方式，会根据给定的初始化的元素决定数组的长度</p><p><code>a := [...]int{1}</code></p><p>数组切片，类似于vector</p><p>切片创建方式有：</p><ol><li><p>基于原有的数组来创建</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">//需要使用Var 来声明切片数组的类型，等号的右侧可以时 array[first , end] ,想要截取的首位位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><u><strong>直接创建</strong></u></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//使用make进行直接创建</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//建立一个初始原为5个但是预留十个元素的空间的切片</span><span class="token comment">//直接在建立的过程中赋予初值</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>切片的部分常用函数</p><ul><li>len() 返回已经存储的元素的个数</li><li>cap() 返回切片分配的空间大小</li><li>append() 追加元素</li><li>copy() 复制</li></ul><p>数组也可以定为接口数组，结构体数组，管道数组等等</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//接口数组</span><span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> unknown <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">}</span><span class="token comment">//管道数组</span><span class="token keyword">var</span> chanList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义空数组:</p><p><code>var a [0] int</code></p><h3 id="map类型"><a href="#map类型" class="headerlink" title="map类型"></a><u>map类型</u></h3><p>Go中将其变为基本类型，可以直接使用，不需要引入库</p><p>声明:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myMap <span class="token keyword">map</span><span class="token punctuation">[</span>键的类型<span class="token punctuation">]</span>值的类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建:初始化创建时要注意在初始化的最后一个数据的后面加上逗号才代表初始化完成，否则会报错</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//指定容量</span>myMap <span class="token operator">=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>键<span class="token punctuation">]</span>值 <span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token comment">//直接初始化</span>myMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token comment">//一定要加上逗号</span><span class="token punctuation">}</span><span class="token comment">//直接声明＋初始化一起</span>myMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">delete</span> <span class="token punctuation">(</span>myMap <span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> myMap<span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>if else 结构</p><ul><li><p>if else 的括号必须在一行，否则编译失败，当出现else时，else 必须和 ‘’} ‘’在一行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//正确</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//错误</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//所以也推荐使用省略else的语句</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件不需要使用括号</p></li><li><p>花括号必须存在</p></li></ul></li><li><p>switch : 不需要显性的使用break来退出判断，默认的已经带有break了</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">{</span><span class="token comment">//用来替代if 语句，比起嵌套if更好判断代码</span><span class="token keyword">case</span> t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">:</span>    xxxx<span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token punctuation">:</span>    xxxx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>                      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更强大的break break后面可以加上标签，使用方法与goto一致</p></li><li><p>函数 </p><p>Go的函数拥有多重返回值，可以更方便的把函数的执行结果返回</p><p>注意：小写字母开头的函数只有本包可见，而大写字母开头的函数才可以被其他包使用</p><p>一般语法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">(</span>返回列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不定参数 在写形参列表的时候使用…来省略参数即可达到不定参数的作用</p><p>例:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>概念: 这种使用方式是语法糖，语法糖对语言的功能没有用影响但是可以方便使用，也能够增加程序的可读性，减少出错的机会</p><p>这里的 … 相当于一个数组切片，等价于下面的语句</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">name</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//调用的时候必须使用这种方式进行调用了</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名函数：Go支持随时随地定义匿名函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//在定义的时候进行调用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//匿名函数赋给变量</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 注意此处的a相当于 args [] 所以a不是int型不可以直接返回</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>闭包</strong></p><p>闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境)。</p><p>匿名函数是一类闭包</p><ul><li>包含自由变量的代码块，这些变量不在这个代码块内或者任何全局上下文中定义，而是在定义代码块中的环境中进行定义的。要执行的代码块为自由变量提供绑定的计算环境(作用域)</li><li>闭包每次调用都是新的实例</li><li>闭包中的变量会保存，即使调用结束也会保存，，可以保证闭包中的变量的安全性，不会被外部函数修改</li></ul><p>闭包可以获得所在函数内的作用域，但是外部不可修改闭包的数据</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token comment">//闭包</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token operator">++</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//每一次调用都是新的实例</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回函数的函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f <span class="token operator">:=</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//fmt.Println(Add1()(1, 2)) 另一种方式</span><span class="token punctuation">}</span><span class="token comment">//返回了一个 匿名函数</span><span class="token keyword">func</span> <span class="token function">Add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>错误处理</p><p>error接口是内置的，里面只有一个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>      <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>defer</p><p>类似于析构函数，遵循先进后出，用于函数执行之后进行一些资源释放的收尾工作</p><p>使用语法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">defer</span> <span class="token operator">+</span> 执行语句要执行语句很多时可以写一个匿名函数来进行处理<span class="token keyword">defer</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    回收工作<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panic() 和 recover()</p><p>panic ( ) 用于立刻终止程序，但是defer不影响，会正常执行，panic可以接受任意类型的数据</p><p>recover ( ) 用于终止错误处理流程，一般放在defer中来截取错误信息</p></li></ol><h2 id="面型对象编程-OOP-Object-Oriented-Programming"><a href="#面型对象编程-OOP-Object-Oriented-Programming" class="headerlink" title="面型对象编程(OOP , Object Oriented Programming)"></a>面型对象编程(OOP , Object Oriented Programming)</h2><ol><li><p>类型系统</p><p>Go可以给任意类型(包括内置类型，但不包括指针类型)添加相应的方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Integer <span class="token builtin">int</span><span class="token comment">//Integer 与int 并无区别，只是我们认为给他加上了一个自带的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">less</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"回收了"</span><span class="token punctuation">)</span><span class="token keyword">if</span> a<span class="token punctuation">.</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"错误回收"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>面向对象只是换了一种方式来表达语法，所以实质上也是语法糖</p><p>Go没有隐藏的指针</p><ul><li>方法的对象显式传递</li><li>方法的对象不需要是指针，也不需要是this</li></ul></li><li><p>对于public 类， 需要采用类名首字母大写</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Base <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>base <span class="token operator">*</span>Base<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>Base<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>foo<span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>base <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span>base<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>foo <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>foo<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>接口</strong></p><p>其他语言在使用接口时必须要先从接口进行继承，才能进行实现接口</p><p>简言之，必须知道接口要实现什么才能定义接口，但实际情况是，不知道接口要实现什么</p><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Java 语法</span><span class="token keyword">interface</span> <span class="token class-name">IFoo</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：</p><ol><li>提供哪些接口好呢？</li><li>如果两个类实现了相同的接口，应该把接口放进哪个包内？</li></ol><p>Go的接口是非侵入式的，只要类实现了接口要求的所有函数，就算是实现了这个接口，可以直接进行赋值</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//实现接口的类</span><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 实现类方法，也就是接口的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//两个以后出现的接口</span><span class="token keyword">type</span> IFile <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> IPrint <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Print</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> file1 IFile <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span><span class="token keyword">var</span> file2 IPrint <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>file3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>file1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IFile接口实现"</span><span class="token punctuation">)</span>file2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"IPrint接口实现"</span><span class="token punctuation">)</span>file3<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"实现接口的类，并不需要提前知道有哪些接口，只要能够实现了以后会出现的接口的函数即可直接使用"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是 Go 语言里有非常灵活的 <strong>接口</strong> 概念，通过它可以实现很多面向对象的特性。接口提供了一种方式来 <strong>说明</strong> 对象的行为：如果谁能搞定这件事，它就可以用在这儿。</p><p>接口定义了一组方法（方法集），但是这些方法不包含（实现）代码：它们没有被实现（它们是抽象的）。接口里也不能包含变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Method1</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type    <span class="token function">Method2</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用接口时，如果某个类实现了接口的方法，那么接口类型的变量可以赋值为这个类的变量</p><p>如果接口接口A和接口B的方法是一致的，那么在Go中属于完全等价</p><p>如果A接口的方法是B接口方法的子集，那么B接口可以赋值给A接口，而A接口不能赋值给B接口</p><p>接口查询：用于查询某个接口是否属于某个类型</p><blockquote><p>实例 <code>num2</code> 是否属于接口 <code>Number1</code>，可以这么做：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num1 Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 Number2 <span class="token operator">=</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">;</span><span class="token keyword">if</span> num3<span class="token punctuation">,</span> ok <span class="token operator">:=</span> num2<span class="token punctuation">.</span><span class="token punctuation">(</span>Number1<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num3<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果num2 实例所指的对象是属于Number1的，那么ok值为1 ，num3 转化为 Number1的一个实例，之后执行条件内的代码</p></blockquote><p>类型查询：用于查询接口指向的对象实例的类型</p><p>语法:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> v <span class="token operator">:=</span> v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两者一般搭配使用</p><p>Any类型</p><p>任何对象实例都满足空接口 interface { } 所以interface { } 可以作为一个可以指向任何对象的Any类型，当函数可以接受任何实例时，可以将其声明为interface { } </p><p>例如： fmt库中的Print函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Print <span class="token punctuation">(</span>fmt <span class="token builtin">string</span> <span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>主流实现模型:</p><ol><li><p>多进程</p><p>操作系统层面进行的</p></li><li><p>多线程</p><p>操作系统之上的调度</p></li><li><p>基于回调的非阻塞/异步IO</p><p>通过事件驱动的方式使用异步IO，使服务器持续运转并且尽可能的少用线程，降低开销，代表有Node.js，会对流程进行分割</p></li><li><p>协程</p><p>本质是用户态线程，不需要抢占式调度，寄存于线程，缺点是需要语言支持</p></li></ol><p> <strong><u>gorountine</u></strong></p><p>通过在代码中加上go关键字启用协程，主程序结束时，写成会被结束</p><p>通信方式：消息机制和共享内存</p><p>消息机制：每个并发单位都是自包含、独立的个体，都有自己的变量，并且单元间的变量不共享，每个单元的输入输出只有一种那就是消息。不同进程依靠消息来进行通信，他们不会共享内存</p><p><strong><u>channel</u></strong></p><p>Go提供的goroutine间的通信方式，是进程内的通信方式，不适合进程之间进行通信</p><p>一个channel 只能传递一种类型的值</p><p>基本语法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//声明</span><span class="token keyword">var</span> chanName <span class="token keyword">chan</span> ElemenType <span class="token comment">//例如 声明一个传递类型为int的channel</span><span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//定义</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//缓冲大小为2</span><span class="token comment">//写入channel</span>ch <span class="token operator">&lt;-</span> value <span class="token comment">//写入数据会导致陈孤虚阻塞，直到有其他goroutine 从channel中读取数据</span><span class="token comment">//读取</span>value <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch <span class="token comment">// 如果channel中没有数据也会进行堵塞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Count</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Counting"</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">//写入数据,导致这个goroutine阻塞，直到有其他goroutine从中读取数据</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>chs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 储存十个goroutine的channel数组</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//启动十个协程</span><span class="token keyword">go</span> <span class="token function">Count</span><span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> chs <span class="token punctuation">{</span><span class="token operator">&lt;-</span>ch <span class="token comment">//读取channel</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select</p><p>文件发生IO动作，select会被调用并返回</p><p>语法： 条件必须是IO操作</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> chan1 <span class="token punctuation">:</span> <span class="token comment">//从chan1成功读取到数据</span>    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token comment">//成功向chan2写入数据</span>    <span class="token keyword">default</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//随机向ch 中写入一个1或者是0</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">}</span>i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>chfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value Received :"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓冲机制</p><p>建立channel数组即可实现缓冲</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>超时机制</p><p>Go中没有提供查实处理机制，但是可以使用select来处理，因为select只要有一个case已经完成即可继续进行下去</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//未写入任何数据，所以会把程序堵塞</span>timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//等待一秒钟</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"读取中"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"超时了"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>channel 传递，可以用来实现pipe 待补充</u></p><p>单向channel  用于防止写入某些不需要的数据或者被不需要的函数读取</p><p>只能读或者只能写</p><p>定义</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ch1 <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//正常的channel</span><span class="token keyword">var</span> ch2 <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">float64</span> <span class="token comment">// 只能写</span><span class="token keyword">var</span> ch3 <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//只能读</span><span class="token comment">//初始化</span>ch4 <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 正常</span>ch5 <span class="token operator">:=</span>  <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 从正常的channel进行类型转化为单项读取的channel</span>ch6 <span class="token operator">:=</span>  <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">int</span> <span class="token punctuation">(</span>ch4<span class="token punctuation">)</span> <span class="token comment">// 转化为单项写入的channel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭channel</p><p>使用close()即可</p><p>如何判断已经关闭?</p><p>多重返回值的方式进行帕努的那</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch<span class="token comment">//只需要看ok即可，如果ch已经关闭，那么读取失败，ok的返回值为false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h4><p>同步锁</p><p>sync包中提供</p><p>Mutex锁</p><p>当一个goroutine 获得了Mutex 后，其他的goroutine 只能等待这个释放锁</p><p>RWMutex 锁 </p><p>单写多读 ， 在读锁占用时，会阻止写，但是不会阻止读</p><p>全局唯一性操作</p><p>使用Once类型，当别的goroutine </p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="Socket编程-IP-层"><a href="#Socket编程-IP-层" class="headerlink" title="Socket编程  IP 层"></a>Socket编程  IP 层</h3><p>socket是什么？</p><blockquote><p>Socket是对TCP/IP协议的封装，自身并非协议而是一套调用的接口规范（API）。通过套接字Socket，才能使用TCP/IP协议。</p></blockquote><p>传统的Socket编程主要步骤：</p><ol><li>建立Socket： 使用socket() 函数</li><li>绑定Socket :使用bind() 函数</li><li>监听： 使用listen() 函数，或者connec() 函数</li><li>接受连接： accept() 函数</li><li>接收： receive() 函数 ，发送send() 函数</li></ol><p>Go的：</p><p>Go语言标准库对此过程进行了抽象和封装，无论我们期望使用什么形式的连接，只需要调用net.Dial()即可</p><p>Dial原型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> Dial <span class="token punctuation">(</span> net <span class="token punctuation">,</span> addr <span class="token builtin">string</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> Conn <span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">/*net : 网路协议名称addr IP地址或域名，端口以":" 的形式跟在后面，端口号可选Conn 是否成功连接*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工程管理"><a href="#工程管理" class="headerlink" title="工程管理"></a>工程管理</h2><p>代码格式化</p><p>格式化之前的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> Foo <span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span> <span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> a<span class="token operator">&gt;</span>b <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>i <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span> <span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令行: go fmt xxx.go得到的代码,也可以直接go fmt 会格式化所有*.go的文件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,word"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gotool</p><p>生成exe</p><p>gobuild 后面可以加上-o + name 指定执行文件的名字</p><p><strong>格式化输出</strong>: Printf</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">%</span>v按值的本来值输出<span class="token operator">%</span><span class="token operator">+</span>v在 <span class="token operator">%</span>v 基础上，对结构体字段名和值进行展开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成随机数需要设置随机数种子</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>v <span class="token operator">:=</span> <span class="token number">100</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h2 id="GO工具"><a href="#GO工具" class="headerlink" title="GO工具"></a>GO工具</h2><p>gofmt</p><p>goimports == gofmt + 依赖包管理</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github学生包/学生认证申请那些事</title>
      <link href="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/"/>
      <url>/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Github对学生有很多优惠，<del>至于哪些可太多了，所以有必要申请一个</del>，</p><p>这个大佬写的很详细了，我在这里加一些我踩得坑，如果跟大佬的步骤走没通过的话，可以回来看看有没有我踩过的坑</p><p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p></blockquote><h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><blockquote><ol><li>一个好的浏览器(支持定位的浏览器)</li><li>一份学信网学籍认证 和 一个教育邮箱(更容易通过 ，可以去企业微信里看看有没有开通)</li><li>修改pdf文件中的信息</li><li>github profile 中修改个人信息</li><li>认证并且全程不要挂梯子</li></ol></blockquote><h2 id="1-好的浏览器"><a href="#1-好的浏览器" class="headerlink" title="1.好的浏览器"></a>1.好的浏览器</h2><p><strong>这是重中之重，我在申请的时候不知道Chrome怎么了，一直定位不成功，换成 edge之后就成功了</strong></p><h2 id="2-学信网认证"><a href="#2-学信网认证" class="headerlink" title="2.学信网认证"></a>2.学信网认证</h2><p>进入学信网，下载电子报告即可，网上都有教程，这里不做赘述了</p><p><a href="https://www.chsi.com.cn/">中国高等教育学生信息网（学信网） (chsi.com.cn)</a></p><h2 id="3-修改pdf文件信息"><a href="#3-修改pdf文件信息" class="headerlink" title="3.修改pdf文件信息"></a>3.修改pdf文件信息</h2><p>因为github不是国内的，所以中文档案是不能通过的，而且pdf编辑好像很难搞，这里给一个下载链接，使用这个进行编辑会方便些</p><p>密码：tko9</p><p><a href="https://cloud.189.cn/web/share?code=ZNbamiEziq6z">Adobe CC 2022 免费高速下载 | 天翼云盘 珍藏美好生活 家庭云|网盘|文件备份|资源分享 (189.cn)</a></p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618200641.png" alt="下载安装即可"></p><p>修改内容：</p><p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程 - 知乎 (zhihu.com)</a></p><p>可以看这篇文章</p><h2 id="4-修改github-profile-中的信息"><a href="#4-修改github-profile-中的信息" class="headerlink" title="4.修改github profile 中的信息"></a>4.修改github profile 中的信息</h2><ul><li>名字改为英文名</li><li>Bio 修改为   student of 学校英文名 + @ 学校英文名</li><li>company 修改为学校英文名</li></ul><h2 id="5-申请："><a href="#5-申请：" class="headerlink" title="5.申请："></a>5.申请：</h2><p>网站：<a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p><p><strong><u>全程不要挂梯子</u></strong></p><ol><li><p>添加教育邮箱 </p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618201441.png" alt="添加邮箱"></p></li><li><p>填写申请理由，理由随便写，可以参考我的</p><pre class="line-numbers language-none"><code class="language-none">I would like to use the Github Student Pack to further explore more features of Github, such as Github Copilot and Educative's learning courses.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>点击continue </p><blockquote><p>点击之后会询问你是否允许访问位置，同意即可</p><p><strong><u>如果点击之后，一直卡在这个页面，那么是浏览器的问题，可以换个浏览器试试或者过几天再试试</u></strong> </p><p><del>我就是换了好几个不成功，最后莫名其妙就能访问了</del></p><p>之后进入上传图片的页面，右下角有上传图片 <strong>(如果你没有的话，说明你上梯子了或者离学校太远了，直接重新认证一遍吧)</strong></p><p>上传修改之后的学信网认证截图</p><p><strong>注意：上传图片格式是jpg 不支持png！！！</strong></p></blockquote></li><li><p>点击提交，如果按以上流程走的话应该是秒通过的，看看邮箱是否收到邮件，或者返回认证申请的第一页，看看右侧是否通过</p><p><a href="https://education.github.com/discount_requests/application">Request a discount - GitHub Education</a></p></li></ol><h2 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h2><p>一定要有耐心，不挂梯子的话，github的访问基本上是时有时无的，所以要有耐心，多试试，过几天再试试，推荐在学校里申请，或者使用学校的vpn访问网站</p><p>祝通过！！！</p><p><img src="/2023/06/18/yu-yan-ji-gong-ju/github-xue-sheng-bao-xue-sheng-ren-zheng-shen-qing-na-xie-shi/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230618202519.png" alt="Elysia会祝福你的"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web学习</title>
      <link href="/2023/06/17/qian-duan/web-xue-xi/"/>
      <url>/2023/06/17/qian-duan/web-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="新坑-到P83页了。。。"><a href="#新坑-到P83页了。。。" class="headerlink" title="新坑  到P83页了。。。"></a>新坑  到P83页了。。。</h1><h2 id="HTML5基本语法"><a href="#HTML5基本语法" class="headerlink" title="HTML5基本语法"></a>HTML5基本语法</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 一个横线<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档声明，目的是让浏览器知道这是什么类型的文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档的开始，没有什么实际含义--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--头标记，放在html 内来防止这个文件中的信息，比如提供索引信息或者定义CSS样式等--&gt;</span>         <span class="token comment">&lt;!--标题标记，网页的标题，也就是上方的标~ 题，不是内容的标题--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>                    我的测试文件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--文档正文的开始--&gt;</span> <span class="token comment">&lt;!--文本属性中可以加入text 来表示文本的颜色，bgcolor来表示背景的颜色--&gt;</span>        <span class="token comment">&lt;!-- &lt;body text="red" bgcolor="blue"&gt;--&gt;</span>        <span class="token comment">&lt;!--hn 各种大小标题--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--设置字体颜色--&gt;</span>                蓝色的一级标题            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--段落标记--&gt;</span>            这是我的第一个测试文件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字样式标记--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--加粗--&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--斜体--&gt;</span>            这是加粗斜体字         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--删除线--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">&gt;</span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--下划线--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--放大缩小，加强强调，强调，现实电子邮件或者地址，写代码--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>放大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>缩小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--加强强调--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>加强强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>强调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>2354796263@qq.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>            #include &lt;bits/stdc++.h&gt;            using namespace std;            int main(){                cout &lt;&lt; "Hello World!"&lt;&lt; endl;                return 0;            }        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字上浮和下浮--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下浮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文字样式标记--&gt;</span>        <span class="token comment">&lt;!--文本的位置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">face</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 实现居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--font 还可以设置字体和大小，属性是 face 和 size--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span>  <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>实现右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--照片的操作--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source/image/Elysia.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片丢失时显示<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>鼠标放在上面可以看到<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="class-的用法："><a href="#class-的用法：" class="headerlink" title="class 的用法："></a>class 的用法：</h2><ul><li><p>一个对象可以包含多个class(方便了在CSS中定义)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">&lt;style type="text/css"&gt;        .Ely</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.red</span><span class="token punctuation">{</span>            <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style&gt;&lt;p class =<span class="token string">"Ely red"</span> align = <span class="token string">"center"</span> &gt;Elysia  &lt;small&gt;&lt;/small&gt;  &lt;/p&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p>基本规则:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">张飞{    身高：    体重：    性别    民族}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>选择器</p><blockquote><p>对网页中指定的对象进设置</p></blockquote><ul><li><p>标记选择器：所有同名的标签都会被选择</p><p>使用html 的标记标签进行选择，例如：<code>&lt;p&gt;</code></p><p>基本语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;h1</span> <span class="token punctuation">{</span>     标签选择    声明    <span class="token property">color</span> <span class="token punctuation">:</span>red <span class="token punctuation">;</span>  属性 + 值    <span class="token property">font_size</span> <span class="token punctuation">:</span>25px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类别选择器：实现只修改指定的标签class</p><p>基本语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span> . + 类别名<span class="token punctuation">(</span>自定义的名字<span class="token punctuation">)</span> 声明   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>ID选择器，**<u>id在HTML中具有唯一性，不可重复，尽量做到一个标签一个id</u>**</p><p><strong><u>ヽ（≧□≦）ノ</u></strong></p></li></ul></li><li><p>HTML中使用方法：</p><ul><li><p>行内央视，直接使用 <code>&lt;style&gt;</code>属性 <strong><u>注意，每一个声明之后要加入分号</u></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p style=<span class="token string">"color : purple; font-size :larger"</span> align = <span class="token string">"center"</span>&gt;Elysia    &lt;/p&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内嵌式一般放在 <code>&lt;head&gt;</code> 标签之间</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;head&gt;    &lt;style type="text/css"&gt;        .Ely</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span>larger<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.red</span><span class="token punctuation">{</span>            <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>链接式，将CSS与HTML文件分离 在html中使用 <code>&lt;link&gt;</code> 标签进行 导入</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"文件地址"</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导入式 使用@import 在html初始化时就会进行导入，而使用链接式只有在需要格式时才进行导入</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*需要放在style 标签中*/</span>&lt;style&gt;        <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"1.css"</span><span class="token punctuation">;</span></span>    &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Tips:CSS中遵循覆盖规则，对于同一个被选择的对象，后面的定义会覆盖前面的定义，所以可以使用标签进行全局定义，在使用class 来对指定的对象进行微调</p></li><li><p>Tips2:优先级</p><p>最后面导入的样式    &gt;   最后面的连接式 ， 链接式与  <code>&lt;style&gt;</code> 遵循先后顺序， 同一个 <code>&lt;style&gt;</code> 中内嵌式   &gt;    导入式</p></li><li><p>CSS3新特性：</p><p>交集选择器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">Ely</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p.Ely</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并集选择器：使用  ， 进行隔开即可</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p,.Ely,h5</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>全局选择器：*  使得所有HTML标签都遵循这个规则</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>后代选择器，空格隔开即可</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li ul ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li ul ul ul</span> <span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只对直接后代有用的选择器： p &gt;   可搭配*使用</p></li><li><p>ID 选择器：#+id</p></li><li><p>相邻选择器：A+B 直接兄弟，紧跟着的后面那个</p></li><li><p>相邻兄弟组选择器：A~B 后面的所有兄弟</p></li><li><p>属性选择器： 使用中括号进行选择，属性是自定义的</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p ely = <span class="token string">"123"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;  <span class="token comment">/*这里ely是自定义的属性，它的值是123*/</span><span class="token selector">p[ely]</span><span class="token punctuation">{</span> <span class="token comment">/*使用这个进行选择，即可*/</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*也可以使用属性+属性的值来进行选择*/</span><span class="token comment">/*需要属性的值必须是给定的这个值*/</span><span class="token selector">p[ely = "123"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*属性包含选择器，只需要属性的值包含给定的值的即可*/</span><span class="token selector">p[ely *= "1"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;p ely = <span class="token string">"123 4 5 6"</span>&gt;最喜欢爱莉希雅了&lt;/p&gt;<span class="token comment">/*单词包含选择器 ， 只要包含给定单词即可*/</span><span class="token selector">p[ely ~= "123"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以某个单词或者字母开开头的选择器*/</span><span class="token selector">p[ely ^= "1"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以什么结尾的选择器，只要以某个单词结尾或则和某个字母结尾即可，数字也行*/</span><span class="token selector">p[ely $= "6"]</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><u>结构伪类选择器</u></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*基本语法： E是父元素E : nth - child 第几个元素E : root 根元素，HTML中根元素始终为html还有很多。。。自己去看吧 给个链接：https://juejin.cn/post/7001869576069873695*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><u>伪元素选择器  <del>待补</del></u></strong></p></li></ol><h3 id="CSS继承和层叠特性"><a href="#CSS继承和层叠特性" class="headerlink" title="CSS继承和层叠特性"></a>CSS继承和层叠特性</h3><p>子标记会继承夫标记的所有样式风格，但是子标记的改变不会影响父标记</p><p>层叠是出现冲突时的处理方式，越特殊的样式，优先级越高，</p><p>层叠优先级：行内样式&gt; ID 样式 &gt; 类别样式 &gt;  标记样式</p><h2 id="CSS设置文本样式"><a href="#CSS设置文本样式" class="headerlink" title="CSS设置文本样式"></a>CSS设置文本样式</h2><h3 id="单位："><a href="#单位：" class="headerlink" title="单位："></a>单位：</h3><ol><li><p>相对类型：</p><p>px : 像素，根据设备类分辨率来进行调整，最常用的</p><p>em: 设置以目前字符的高度为单位</p><p>rem: root em 设置以网页跟元素HTML 字符的高度为单位， 一般浏览器莫默认单位为1rem = 16px</p><p>vw 和 vh 基于视图窗口的相对单， 1vw 等于视口宽度的1% 1vh 等于窗口高度的的1%</p></li><li><p>绝对类型</p><p>in 英尺</p><p>cm 厘米</p><p>mm </p><p>pt 点数</p><p>pc 印刷单位 1pc = 12pt</p></li></ol><h3 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h3><p>HTML中统一使用RGB模式，基本设置 rgb(red, green , blue , 透明度 )</p><h3 id="基本设置："><a href="#基本设置：" class="headerlink" title="基本设置："></a>基本设置：</h3><blockquote><p>font-family : 设置字体</p><p>font-style : 设置斜体</p><p>font-weight: 设置加粗，参数有 normal, bold(加粗) , bolder(更粗),lighter(更细), 100- 900 按每100为为一个阶段，数字越大，字体越粗</p><p>font-transform： 大小写转换</p><p>font-size:字体大小</p><p>text-decoration:文字的修饰，主要有underline 下划线，line-through 删除线,overline为文字加顶线，blink 文字闪烁(部分浏览器支持)</p><p>texr-indent：首行缩进，后面跟缩进的长度，一般使用2em来实现缩进两个字</p><p>letter-spacing： 控制字母间距</p><p>word-sacing:控制单词间距</p><p>line-height: 行高</p><p>border :添加边框，可以设置粗细，颜色和虚实</p><p>margin 外边框 后面两个参数分别是设置上下距离和左右距离</p><p>text-align : 设置文本的水平位置，left,right,center, justify(两端对齐)</p><p>background: 设置背景色</p><p>text-shadow: 给图片添加阴影效果，后面四个参数是x轴的偏移尺寸，y轴的便宜尺寸，阴影半径，阴影颜色</p></blockquote><h2 id="CSS设置图片属性"><a href="#CSS设置图片属性" class="headerlink" title="CSS设置图片属性"></a>CSS设置图片属性</h2><blockquote><p>border-width 设置边框的粗细</p><p>border-color  设置边框的颜色</p><p>border-style  线性，可以在一些预先定义好的线型中选择</p><p>也可以</p><p>border-上下左右-属性   来单独设置上下左右的边框</p><p>甚至可以直接border ： 后面写大小类型和颜色</p><p>例如： border : plum 2px dotted;</p><p>实现文字环绕：</p><p>float : 将图片移动到页面左侧或者右侧从而使得文字能够从另一端来环绕</p></blockquote><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>DOM ：document object model 文档对象模型</p><p>padding -border-margin 模型</p><p>一个盒模型包括：content 、border、padding 、 margin </p><p>标准文档流：normal  document stream  </p><blockquote><p>div  区块容器标记，里面可以容纳各种HTML元素，可以将div看作一个对象</p><p>span 也是区块标记</p><p>二者区别： div 内的元素可以自动换行，</p><p>span 不会换行，没结构上的意义，仅仅是一个行内元素，当其他行内元素不适合的时候就可以使用span了</p><p>span 可以包含在div中，但是div不能包含在span 中，使用display来让行内元素表现的像块级元素</p><p>相邻的两个行内元素的margin 是第一个的right-margin 第二个的left-margin 之和</p></blockquote><p>背景</p><blockquote><p>background-image : url() 插入图片，</p><p>一般情况下，图片会自动向水平和数值两个方向平铺，可以使·用以下属性来进行控制</p><p>background-repeat : </p><p>repeat 默认，沿水平和竖直方向平铺</p><p>no-repeat 不平铺，只显示一次</p><p>repeat-x 沿水平平铺</p><p>repeat-y 沿竖直方向平铺</p><p>background-position 设置背景的位置</p><p>也是可以合并为一行的: 直接background + 属性即可</p><p>background-radius： 来设置盒模型的四个角是否圆滑 ， 后面的四个参数是从左上角开始，顺时针旋转的</p><p>box-shadow 给盒模型设置阴影， 后面四个参数分别是水平偏移量，垂直偏移量，模糊，阴影扩展尺寸，阴影颜色，外部阴影或者是内部阴影</p></blockquote><p>链接：</p><p>想要打开一个新的窗口，需要在a标签中使用target 属性，并将其设置为_bank</p><p>使用CSS对超链接进行修饰</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">{</span><span class="token comment">/*通用*/</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*以下是使用了CSS伪类型属性来进行修饰*/</span><span class="token comment">/*设置顺寻时 LoVw HaTe 爱恨link visitedhoveractive*/</span><span class="token selector">a:link</span><span class="token punctuation">{</span> <span class="token comment">/*普通浏览*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:visited</span><span class="token punctuation">{</span><span class="token comment">/*点击过之后*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:hover</span><span class="token punctuation">{</span>  <span class="token comment">/*鼠标指针经过时*/</span>   <span class="token property">color</span><span class="token punctuation">:</span> plum<span class="token punctuation">;</span>   <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:active</span><span class="token punctuation">{</span><span class="token comment">/*点击时*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修饰鼠标指针</p><blockquote><p>cursor :属性即可</p></blockquote><p>修饰列表</p><blockquote><p>list-style-type：</p><p>属性有：</p><p>disc 实心圆、</p><p>circle 空心圆</p><p>square :正方形</p><p>decimal : 十进制数字</p><p>upper-alpha 大写字母</p><p>lower-alpha 小写字母</p><p>upper-roman 大写罗马数字</p><p>lower-roman 小写罗马数字</p><p>none 不显示任何符号</p></blockquote><p><strong>导航菜单</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">使用&lt;ul&gt; + &lt;li&gt; + &lt;a&gt; 即可，之后在css中进行设置样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置表格：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>表格 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> 定义一行 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span><span class="token punctuation">&gt;</span></span> 定义一列 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 定义一个单元格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span> 表格的大标题 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 表头，主要用于行或列的名称，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 相似实例:     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>#eeeeee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>成绩表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--开始定义表头--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>114<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>514<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 中的rowspan 和 colspan 来合并单元格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置表单</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span> 两个标签实例：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    type = "text"    name 设定文本框的名称，在交互程序中可以用到    size 数值，设定此一栏位要显示的宽度    value 预设内容    maxlength 设置文本可输入的最大最大文字长度     type 属性内容:    type = "radio“ 单选    可选属性：    checked 设置某个选项为默认选    name  name属性内容相同的两个选项只能选中一个    type = "checkbox" 多选    可选    checked    name 需要将一组选中中的所有复选按钮设置为相同的名称才能让服务器处理时知道这几个选项是一个组的    type = "password" 密码框    属性与文本类型相同    type = "submit" 提交按钮    type = "reset"  重置按钮    type = "image"  提交图片    type = "textarea" 多行文本框可选：    cols 定义文本框的宽度，字符的列数    rows 字符行数    wrap 定义换行方式 主要有 off 文字不自动换行， virtual 输入文字时会自动换行，但是如果没有自己按下回车键换行，提交到服务器时结果就时没有换行    physical 自动换行，提交到服务器结果也是换行    列表框：    在form中使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 标签    在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span> 中使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>来设置选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><del>比起c语法更像是Java</del></p><p>组成：</p><p>ECMAScript,DOM , BOM</p><ol><li>ECMScript 语言</li><li>DOM 文档对象模型，使用节点来web</li><li>BOM 浏览器对象模型</li></ol><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>区分大小写，变量无类型，只需要使用let进行声明即可，可初始化为任意类型的值</p><p>注释与C相同</p><p><strong>HTML中的调取方式：</strong></p><p>1.使用 script 标签直接调用</p><p>2.通过 script 中src属性进行调用外部文件</p><p><strong>var和let的区别</strong></p><blockquote><p><strong>var 声明是全局作用域或函数作用域，而 let 和 const 是块作用域</strong>。 var 变量可以在其范围内更新和重新声明； let 变量可以被更新但不能重新声明； const 变量既不能更新也不能重新声明。 它们都被提升到其作用域的顶端</p></blockquote><p><strong><u>判断</u></strong></p><p>JavaScript中 == 在比较两侧对象时，如果不同吗，会将其转化为同一个类型再比较，而 === 严格等于不会强制类型转换</p><p>!=  不等于    !== 不严格等于</p><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为</span><span class="token boolean">true</span> <span class="token boolean">false</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不进行类型转换</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进行类型转换</span><span class="token comment">//输出为:</span><span class="token boolean">false</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for of 语句 (和foreach 一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for in  枚举对象的的属性</p><p>函数：两种写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment">//或者</span><span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过使用argumens对象，可以 不用声明形参的名称</p><p>arguments[0] 即为第一个形参</p><p>arguments.length() 可以获得传入函数中的参量个数，从而用于判断。</p><p><strong><u>箭头函数(类似于Lambda表达式)</u></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>类是具有相同属性和功能的“对象” 的抽象</strong></p><p><strong>对象是从类中创建的实例</strong></p><p>属性是对象中的变量</p><p>方法是类中的函数</p><p>引用类型：Boolean ， Number 和String 类比Java</p><p>对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">xxx</span> <span class="token operator">:</span> xxx  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myCar <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">size</span> <span class="token operator">:</span> <span class="token string">"large"</span><span class="token punctuation">,</span>   <span class="token literal-property property">color</span> <span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span>size <span class="token punctuation">,</span> color<span class="token punctuation">}</span> <span class="token operator">=</span> myCar<span class="token punctuation">;</span> <span class="token comment">// 同名可用这种方式一键赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ol><li><p>window对象，用于操作浏览器的窗口</p><p>常用的有  第三个参数与新窗口有关，自己去看</p><ul><li>moveBy(x , y) 将窗口向又或者向下移动</li><li>moveTo(x ,y) 移动到指定位置</li><li>resizeBy (dw , dh) 缩放</li><li>resizeTo (w ,h )  缩放到指定窗口大小</li><li>alert() 输出</li><li>prompt() 读入用户输入</li></ul></li><li><p>location 对象，用于分析和设置页面的URL，主要是window 和 document 对象的属性</p><p>有以下属性</p><ul><li>hash 如果URL包含书签#，则返回#后边的内容</li><li>host 服务器的名称</li><li>herf 当前载入的完整的URL </li><li>pathname URL 中主机后面的部分</li><li>port 请求端口</li><li>protocol 协议</li><li>search 执行GET清秋的URL 中?之后的部分</li></ul><p>补充：URL</p><blockquote><p><strong>URL</strong> 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的 URL。</p></blockquote></li><li><p>navigator 对象， 进行客户端检测</p><ul><li>appCodeName 浏览器代码名的字符串表示</li><li>appName 官方浏览器名的字符串表示</li><li>appVersion 浏览器版本信息表示</li><li>javaEnabled() 是否启用了Java</li><li>platform 运行浏览器的计算机平台字符串表示</li><li>plugins 安装在浏览器中的插件组数</li><li>userAgent 用户代理头字符串的字符串表示 最常用</li></ul></li><li><p>screen 对象 也是 window对象的属性</p><ul><li>availHeight 窗口可以使用的屏幕高度</li><li>availWidth</li><li>colorDepth 用户表示颜色位数</li><li>height 屏幕高度</li><li>width</li></ul></li><li><p>history 导航历史记录</p><ul><li>go( ) 前进后退几页，也可以使用字符串，导航到包哦含这个字符串的第一个也米娜</li><li>back()</li><li>forward()</li><li>length 历史记录中有多个条目，可以来判断当前是不是你的第一个页面</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组进行复制:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//补充，对象复制</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">"Bob"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript中数组内容的类型可以不一致</p><p>解构数组：</p><p>array的函数</p><ul><li><p>push , pop</p></li><li><p>unshift() 从头部增加 shift() 从头部开始删除第一个元素，并返回</p></li><li><p>splice(start , deleteCount) 删除指定位置 第二个参数可选，并且代表要删除几个元素</p></li><li><p>sort</p></li><li><p>indexOf() 从头开始查找 lastIndexOf () 从尾开始查找，两个参数分别是要查找的内容和开始查找的位置</p></li><li><p>forEach() 为每一个元素执行一个函数</p></li><li><p>map() 返回一个由指定函数调用后得到的新数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> e <span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用map建立一个新数组</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">let</span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//filter用于过滤数组的某些数据</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出了map[a[]] = b[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>every 每个元素都当作参数，所有都满足才返回true</p></li><li><p>some 部分满足即可true</p></li><li><p>slice 截取一部分</p></li><li><p>joint(‘,’) 将数组转化为字符串并返回</p></li><li><p>展开运算符  数组[…] 即可展开</p></li></ul><p>JavaScript的对象也是集合</p><p>Map</p><ul><li>set(“key” ,”value”)</li><li>for (let [key , value] of map)</li><li>for (let key of map)   for (let value of map)</li><li>forEach(函数)</li><li>合并 自己看文档喽</li></ul><p>Set</p><ul><li>add</li><li>并集，交集，差集 自己看</li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>通过JavaScript访问DOM 自己看去吧。。。</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>JavaScript的一个第三方库</p><p>react app 由组件组成，react组件是返回html标签的JavaScript函数</p><p>react 的组件可以用作类似于html的标签，区别是React 组件必须以大写字母开头，HTML标签必须以小写字母开头</p><p>JavaScript的component实际上就是JavaBean</p><p>例如:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">I</span>'m a button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后MyButton可作为标签使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome to my app<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>MyButton <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hotloader</strong>是好东西</p><p><strong>React命名:</strong></p><blockquote><p>HTML中的类为 class ，而React中的class命名为className</p><p><code>&lt;h4 className="Profile-subTitle"&gt;About Me&lt;/h4&gt;</code></p><p>类名为：组件名(文件名) 扩折号 文件中的作用名，遵循驼峰</p></blockquote><p>使用 import xxx from “xxx” 来在js文件中导入其他的component</p><p>使用 import “xxx.css” 来从导入css文件</p><p>使用 export default xxx 来导出这个组件，从而让其他文件能够调用这个组件</p><p>具体可看示例 catbook-react</p></li></ol><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>组成：</p><p>URL + Methods + Request Headers + Request Body</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li><code>GET</code> 方法请求一个指定资源的表示形式，使用 <code>GET</code> 的请求应该只被用于获取数据。</li><li><code>HEAD</code> 方法请求一个与 <code>GET</code> 请求的响应相同的响应，但没有响应体</li><li><code>POST</code> 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</li><li><code>PUT</code> 方法用有效载荷请求替换目标资源的所有当前表示。</li><li><code>DELETE</code> 方法删除指定的资源。</li><li><code>CONNECT</code> 方法建立一个到由目标资源标识的服务器的隧道。</li><li><code>OPTIONS</code> 方法用于描述目标资源的通信选项。</li><li><code>TRACE</code> 方法沿着到目标资源的路径执行一个消息环回测试。</li><li><code>PATCH</code> 方法用于对资源应用部分修改。</li></ul><p>状态码“</p><p>1xx：信息</p><p>2xx：succeeded</p><p>3xx：redirect 重定向</p><p>4xx:  你请求出错</p><p>5xx：服务器出错</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p><strong>应用程序接口</strong>（英语：<strong>a</strong>pplication <strong>p</strong>rogramming <strong>i</strong>nterface[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-%E5%88%98%E7%91%9E%E6%96%B02018-1">1]</a>），缩写为<strong>API</strong>[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-UnmehopaVemuri2006-2">2]</a>，是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97">计算</a><a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E8%B3%87%E8%A8%8A%E7%A7%91%E6%8A%80)">接口</a>，它定义多个<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B">中介</a>之间的<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%A4%E4%BA%92&amp;action=edit&amp;redlink=1">交互</a>，以及可以进行的<a href="https://zh.wikipedia.org/w/index.php?title=%E8%B0%83%E7%94%A8&amp;action=edit&amp;redlink=1">调用</a>（call）或<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AF%B7%E6%B1%82&amp;action=edit&amp;redlink=1">请求</a>（request）的种类，如何进行调用或发出请求，应使用的数据格式，应遵循的惯例等。它还可以提供<a href="https://zh.wikipedia.org/w/index.php?title=%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6&amp;action=edit&amp;redlink=1">扩展机制</a>，以便用户可以通过各种方式对现有功能进行不同程度的扩展[<a href="https://zh.wikipedia.org/zh-hans/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3#cite_note-Fisher1-3">3]</a>。一个API可以是完全定制的，针对某个组件的，也可以是基于行业标准设计的以确保互操作性。通过<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">信息隐藏</a>，API实现了<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">模块化编程</a>，从而允许用户实现独立地使用接口。</p></blockquote><p>目的：</p><p><img src="/2023/06/17/qian-duan/web-xue-xi/1690524156434.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
